declare module com {
	export module google {
		export module common {
			export module annotations {
				export class Beta extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.google.common.annotations.Beta>;
					/**
					 * Constructs a new instance of the com.google.common.annotations.Beta interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						annotationType(): java.lang.Class<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public toString(): string;
					public annotationType(): java.lang.Class<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module annotations {
				export class GwtCompatible extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.google.common.annotations.GwtCompatible>;
					/**
					 * Constructs a new instance of the com.google.common.annotations.GwtCompatible interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						serializable(): boolean;
						emulated(): boolean;
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						annotationType(): java.lang.Class<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public toString(): string;
					public emulated(): boolean;
					public annotationType(): java.lang.Class<any>;
					public serializable(): boolean;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module annotations {
				export class GwtIncompatible extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.google.common.annotations.GwtIncompatible>;
					/**
					 * Constructs a new instance of the com.google.common.annotations.GwtIncompatible interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						annotationType(): java.lang.Class<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public toString(): string;
					public annotationType(): java.lang.Class<any>;
					public value(): string;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module annotations {
				export class VisibleForTesting extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.google.common.annotations.VisibleForTesting>;
					/**
					 * Constructs a new instance of the com.google.common.annotations.VisibleForTesting interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						annotationType(): java.lang.Class<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public toString(): string;
					public annotationType(): java.lang.Class<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Absent<T>  extends com.google.common.base.Optional<any> {
					public static class: java.lang.Class<com.google.common.base.Absent<any>>;
					public asSet(): java.util.Set<any>;
					public or(supplier0: com.google.common.base.Supplier<any>): any;
					public transform(function0: com.google.common.base.Function<any,any>): com.google.common.base.Optional<any>;
					public equals(object: any): boolean;
					public or(supplier: com.google.common.base.Supplier<any>): any;
					public orNull(): any;
					public toString(): string;
					public get(): any;
					public or(optional0: com.google.common.base.Optional<any>): com.google.common.base.Optional<any>;
					public equals(object0: any): boolean;
					public or(secondChoice: com.google.common.base.Optional<any>): com.google.common.base.Optional<any>;
					public or(defaultValue: any): any;
					public isPresent(): boolean;
					public or(object0: any): any;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class AbstractIterator<T>  extends java.util.Iterator<any> {
					public static class: java.lang.Class<com.google.common.base.AbstractIterator<any>>;
					public next(): any;
					public constructor();
					public endOfData(): any;
					public computeNext(): any;
					public hasNext(): boolean;
					public remove(): void;
				}
				export module AbstractIterator {
					export class State {
						public static class: java.lang.Class<com.google.common.base.AbstractIterator.State>;
						public static DONE: com.google.common.base.AbstractIterator.State;
						public static FAILED: com.google.common.base.AbstractIterator.State;
						public static NOT_READY: com.google.common.base.AbstractIterator.State;
						public static READY: com.google.common.base.AbstractIterator.State;
						public static valueOf(name: string): com.google.common.base.AbstractIterator.State;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): native.Array<com.google.common.base.AbstractIterator.State>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Ascii extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Ascii>;
					public static ACK: number;
					public static BEL: number;
					public static BS: number;
					public static CAN: number;
					public static CR: number;
					public static DC1: number;
					public static DC2: number;
					public static DC3: number;
					public static DC4: number;
					public static DEL: number;
					public static DLE: number;
					public static EM: number;
					public static ENQ: number;
					public static EOT: number;
					public static ESC: number;
					public static ETB: number;
					public static ETX: number;
					public static FF: number;
					public static FS: number;
					public static GS: number;
					public static HT: number;
					public static LF: number;
					public static MAX: string;
					public static MIN: string;
					public static NAK: number;
					public static NL: number;
					public static NUL: number;
					public static RS: number;
					public static SI: number;
					public static SO: number;
					public static SOH: number;
					public static SP: number;
					public static SPACE: number;
					public static STX: number;
					public static SUB: number;
					public static SYN: number;
					public static US: number;
					public static VT: number;
					public static XOFF: number;
					public static XON: number;
					public static toUpperCase(string: string): string;
					public static isLowerCase(c: string): boolean;
					public static toLowerCase(chars: string): string;
					public static equalsIgnoreCase(s1: string, s2: string): boolean;
					public static toLowerCase(c: string): string;
					public static truncate(seq: string, maxLength: number, truncationIndicator: string): string;
					public static toUpperCase(chars: string): string;
					public static toLowerCase(string: string): string;
					public static isUpperCase(c: string): boolean;
					public static toUpperCase(c: string): string;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class CaseFormat {
					public static class: java.lang.Class<com.google.common.base.CaseFormat>;
					public static LOWER_CAMEL: com.google.common.base.CaseFormat;
					public static LOWER_HYPHEN: com.google.common.base.CaseFormat;
					public static LOWER_UNDERSCORE: com.google.common.base.CaseFormat;
					public static UPPER_CAMEL: com.google.common.base.CaseFormat;
					public static UPPER_UNDERSCORE: com.google.common.base.CaseFormat;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static valueOf(name: string): com.google.common.base.CaseFormat;
					public static values(): native.Array<com.google.common.base.CaseFormat>;
					public converterTo(targetFormat: com.google.common.base.CaseFormat): com.google.common.base.Converter<string,string>;
					public to(format: com.google.common.base.CaseFormat, str: string): string;
				}
				export module CaseFormat {
					export class StringConverter extends com.google.common.base.Converter<string,string> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.CaseFormat.StringConverter>;
						public doBackward(s: string): string;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						public hashCode(): number;
						public doForward(s: string): string;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public equals(object: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class CharMatcher extends com.google.common.base.Predicate<java.lang.Character> {
					public static class: java.lang.Class<com.google.common.base.CharMatcher>;
					public static is(match: string): com.google.common.base.CharMatcher;
					/** @deprecated */
					public static javaDigit(): com.google.common.base.CharMatcher;
					public equals(obj: any): boolean;
					/** @deprecated */
					public static invisible(): com.google.common.base.CharMatcher;
					public static isNot(match: string): com.google.common.base.CharMatcher;
					public static any(): com.google.common.base.CharMatcher;
					public static ascii(): com.google.common.base.CharMatcher;
					public static none(): com.google.common.base.CharMatcher;
					public removeFrom(sequence: string): string;
					public replaceFrom(sequence: string, replacement: string): string;
					public trimAndCollapseFrom(sequence: string, replacement: string): string;
					public precomputed(): com.google.common.base.CharMatcher;
					public matchesAllOf(sequence: string): boolean;
					public lastIndexIn(sequence: string): number;
					public static whitespace(): com.google.common.base.CharMatcher;
					public static javaIsoControl(): com.google.common.base.CharMatcher;
					/** @deprecated */
					public static javaUpperCase(): com.google.common.base.CharMatcher;
					public toString(): string;
					public static anyOf(sequence: string): com.google.common.base.CharMatcher;
					/** @deprecated */
					public static javaLetterOrDigit(): com.google.common.base.CharMatcher;
					public or(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
					public constructor();
					public static inRange(startInclusive: string, endInclusive: string): com.google.common.base.CharMatcher;
					public trimFrom(sequence: string): string;
					public apply(object0: any): boolean;
					public collapseFrom(sequence: string, replacement: string): string;
					/** @deprecated */
					public apply(character: java.lang.Character): boolean;
					/** @deprecated */
					public static singleWidth(): com.google.common.base.CharMatcher;
					public and(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
					public static forPredicate(predicate: com.google.common.base.Predicate<any>): com.google.common.base.CharMatcher;
					public trimLeadingFrom(sequence: string): string;
					public negate(): com.google.common.base.CharMatcher;
					public indexIn(sequence: string): number;
					/** @deprecated */
					public static digit(): com.google.common.base.CharMatcher;
					public static breakingWhitespace(): com.google.common.base.CharMatcher;
					public matchesAnyOf(sequence: string): boolean;
					public matches(char0: string): boolean;
					public matchesNoneOf(sequence: string): boolean;
					public indexIn(sequence: string, start: number): number;
					public static noneOf(sequence: string): com.google.common.base.CharMatcher;
					/** @deprecated */
					public static javaLetter(): com.google.common.base.CharMatcher;
					public retainFrom(sequence: string): string;
					/** @deprecated */
					public static javaLowerCase(): com.google.common.base.CharMatcher;
					public countIn(sequence: string): number;
					public trimTrailingFrom(sequence: string): string;
				}
				export module CharMatcher {
					export class And extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.And>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class Any extends com.google.common.base.CharMatcher.NamedFastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Any>;
						public indexIn(sequence: string): number;
						public equals(obj: any): boolean;
						public or(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public collapseFrom(sequence: string, replacement: string): string;
						public removeFrom(sequence: string): string;
						public apply(object0: any): boolean;
						public countIn(sequence: string): number;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public trimFrom(sequence: string): string;
						public and(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public matches(c: string): boolean;
						public matchesNoneOf(sequence: string): boolean;
						public indexIn(sequence: string, start: number): number;
						public matches(char0: string): boolean;
						public matchesAllOf(sequence: string): boolean;
						public lastIndexIn(sequence: string): number;
						public negate(): com.google.common.base.CharMatcher;
						public replaceFrom(sequence: string, replacement: string): string;
					}
					export class AnyOf extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.AnyOf>;
						public matches(char0: string): boolean;
						public constructor();
						public constructor(chars: string);
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class Ascii extends com.google.common.base.CharMatcher.NamedFastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Ascii>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public matches(c: string): boolean;
					}
					export class BitSetMatcher extends com.google.common.base.CharMatcher.NamedFastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.BitSetMatcher>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public matches(c: string): boolean;
					}
					export class BreakingWhitespace extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.BreakingWhitespace>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class Digit extends com.google.common.base.CharMatcher.RangesMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Digit>;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
					}
					export abstract class FastMatcher extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.FastMatcher>;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public negate(): com.google.common.base.CharMatcher;
						public precomputed(): com.google.common.base.CharMatcher;
					}
					export class ForPredicate extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.ForPredicate>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(character: java.lang.Character): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class InRange extends com.google.common.base.CharMatcher.FastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.InRange>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class Invisible extends com.google.common.base.CharMatcher.RangesMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Invisible>;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
					}
					export class Is extends com.google.common.base.CharMatcher.FastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Is>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public or(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public negate(): com.google.common.base.CharMatcher;
						public and(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public toString(): string;
						public matches(c: string): boolean;
						public replaceFrom(sequence: string, replacement: string): string;
					}
					export class IsEither extends com.google.common.base.CharMatcher.FastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.IsEither>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class IsNot extends com.google.common.base.CharMatcher.FastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.IsNot>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public or(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public negate(): com.google.common.base.CharMatcher;
						public and(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class JavaDigit extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.JavaDigit>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class JavaIsoControl extends com.google.common.base.CharMatcher.NamedFastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.JavaIsoControl>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public matches(c: string): boolean;
					}
					export class JavaLetter extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.JavaLetter>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class JavaLetterOrDigit extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.JavaLetterOrDigit>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class JavaLowerCase extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.JavaLowerCase>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class JavaUpperCase extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.JavaUpperCase>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export abstract class NamedFastMatcher extends com.google.common.base.CharMatcher.FastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.NamedFastMatcher>;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
					}
					export class Negated extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Negated>;
						public matchesNoneOf(sequence: string): boolean;
						public matches(char0: string): boolean;
						public matchesAllOf(sequence: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						public countIn(sequence: string): number;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public negate(): com.google.common.base.CharMatcher;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class NegatedFastMatcher extends com.google.common.base.CharMatcher.Negated {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.NegatedFastMatcher>;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public precomputed(): com.google.common.base.CharMatcher;
					}
					export class None extends com.google.common.base.CharMatcher.NamedFastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.None>;
						public indexIn(sequence: string): number;
						public equals(obj: any): boolean;
						public or(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public collapseFrom(sequence: string, replacement: string): string;
						public removeFrom(sequence: string): string;
						public apply(object0: any): boolean;
						public countIn(sequence: string): number;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public trimFrom(sequence: string): string;
						public trimLeadingFrom(sequence: string): string;
						public and(other: com.google.common.base.CharMatcher): com.google.common.base.CharMatcher;
						public matches(c: string): boolean;
						public matchesNoneOf(sequence: string): boolean;
						public indexIn(sequence: string, start: number): number;
						public matches(char0: string): boolean;
						public matchesAllOf(sequence: string): boolean;
						public lastIndexIn(sequence: string): number;
						public negate(): com.google.common.base.CharMatcher;
						public replaceFrom(sequence: string, replacement: string): string;
						public trimTrailingFrom(sequence: string): string;
					}
					export class Or extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Or>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class RangesMatcher extends com.google.common.base.CharMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.RangesMatcher>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class SingleWidth extends com.google.common.base.CharMatcher.RangesMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.SingleWidth>;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
					}
					export class Whitespace extends com.google.common.base.CharMatcher.NamedFastMatcher {
						public static class: java.lang.Class<com.google.common.base.CharMatcher.Whitespace>;
						public matches(char0: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						/** @deprecated */
						public apply(character: java.lang.Character): boolean;
						public matches(c: string): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Charsets extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Charsets>;
					public static ISO_8859_1: java.nio.charset.Charset;
					public static US_ASCII: java.nio.charset.Charset;
					public static UTF_16: java.nio.charset.Charset;
					public static UTF_16BE: java.nio.charset.Charset;
					public static UTF_16LE: java.nio.charset.Charset;
					public static UTF_8: java.nio.charset.Charset;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class CommonMatcher extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.CommonMatcher>;
					public replaceAll(string0: string): string;
					public find(): boolean;
					public find(int0: number): boolean;
					public end(): number;
					public start(): number;
					public matches(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class CommonPattern extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.CommonPattern>;
					public static compile(pattern: string): com.google.common.base.CommonPattern;
					public toString(): string;
					public static isPcreLike(): boolean;
					public pattern(): string;
					public flags(): number;
					public matcher(charSequence0: string): com.google.common.base.CommonMatcher;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class Converter<A, B>  extends com.google.common.base.Function<any,any> {
					public static class: java.lang.Class<com.google.common.base.Converter<any,any>>;
					public equals(obj: any): boolean;
					public static identity(): com.google.common.base.Converter<any,any>;
					public apply(a: any): any;
					public convert(a: any): any;
					public andThen(secondConverter: com.google.common.base.Converter<any,any>): com.google.common.base.Converter<any,any>;
					public doBackward(object0: any): any;
					/** @deprecated */
					public apply(a: any): any;
					public equals(object: any): boolean;
					public constructor();
					public doForward(object0: any): any;
					public reverse(): com.google.common.base.Converter<any,any>;
					public convertAll(fromIterable: java.lang.Iterable<any>): java.lang.Iterable<any>;
					public static from(forwardFunction: com.google.common.base.Function<any,any>, backwardFunction: com.google.common.base.Function<any,any>): com.google.common.base.Converter<any,any>;
				}
				export module Converter {
					export class ConverterComposition<A, B, C>  extends com.google.common.base.Converter<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.Converter.ConverterComposition<any,any,any>>;
						public doBackward(c: any): any;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						public hashCode(): number;
						public doForward(a: any): any;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public equals(object: any): boolean;
						public toString(): string;
					}
					export class FunctionBasedConverter<A, B>  extends com.google.common.base.Converter<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.Converter.FunctionBasedConverter<any,any>>;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						public hashCode(): number;
						public doForward(a: any): any;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public equals(object: any): boolean;
						public toString(): string;
						public doBackward(b: any): any;
					}
					export class IdentityConverter<T>  extends com.google.common.base.Converter<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.Converter.IdentityConverter<any>>;
						public doForward(t: any): any;
						public doForward(object0: any): any;
						public doBackward(t: any): any;
						public doBackward(object0: any): any;
						public reverse(): com.google.common.base.Converter<any,any>;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public toString(): string;
						public equals(object: any): boolean;
						public reverse(): com.google.common.base.Converter.IdentityConverter<any>;
					}
					export class ReverseConverter<A, B>  extends com.google.common.base.Converter<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.Converter.ReverseConverter<any,any>>;
						public doBackward(a: any): any;
						public doForward(object0: any): any;
						public doForward(b: any): any;
						public doBackward(object0: any): any;
						public reverse(): com.google.common.base.Converter<any,any>;
						public hashCode(): number;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public equals(object: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Defaults extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Defaults>;
					public static defaultValue(type: java.lang.Class<any>): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Enums extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Enums>;
					public static getField(enumValue: java.lang.Enum<any>): java.lang.reflect.Field;
					public static getIfPresent(enumClass: java.lang.Class<any>, value: string): com.google.common.base.Optional<any>;
					public static stringConverter(enumClass: java.lang.Class<any>): com.google.common.base.Converter<any,any>;
				}
				export module Enums {
					export class StringConverter<T>  extends com.google.common.base.Converter<string,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.Enums.StringConverter<any>>;
						public doForward(object0: any): any;
						public doForward(value: string): any;
						public doBackward(object0: any): any;
						public hashCode(): number;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public equals(object: any): boolean;
						public toString(): string;
						public doBackward(enumValue: any): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class Equivalence<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Equivalence<any>>;
					public equals(obj: any): boolean;
					public static identity(): com.google.common.base.Equivalence<any>;
					public wrap(reference: any): com.google.common.base.Equivalence.Wrapper<any>;
					public hash(t: T): number;
					public constructor();
					public equivalent(a: T, b: T): boolean;
					public static equals(): com.google.common.base.Equivalence<any>;
					public pairwise(): com.google.common.base.Equivalence<any>;
					public equivalentTo(target: T): com.google.common.base.Predicate<T>;
					public doEquivalent(object0: T, object1: T): boolean;
					public doHash(object0: T): number;
					public onResultOf(function0: com.google.common.base.Function<any,any>): com.google.common.base.Equivalence<any>;
				}
				export module Equivalence {
					export class Equals extends com.google.common.base.Equivalence<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.Equivalence.Equals>;
						public doHash(object0: any): number;
						public doEquivalent(a: any, b: any): boolean;
						public doEquivalent(object0: any, object1: any): boolean;
						public doHash(o: any): number;
					}
					export class EquivalentToPredicate<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Equivalence.EquivalentToPredicate<any>>;
						public apply(input: T): boolean;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public toString(): string;
					}
					export class Identity extends com.google.common.base.Equivalence<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.base.Equivalence.Identity>;
						public doHash(object0: any): number;
						public doEquivalent(a: any, b: any): boolean;
						public doEquivalent(object0: any, object1: any): boolean;
						public doHash(o: any): number;
					}
					export class Wrapper<T>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.base.Equivalence.Wrapper<any>>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public get(): any;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class ExtraObjectsMethodsForWeb extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.ExtraObjectsMethodsForWeb>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class FinalizablePhantomReference<T>  extends java.lang.ref.PhantomReference<any> implements com.google.common.base.FinalizableReference  {
					public static class: java.lang.Class<com.google.common.base.FinalizablePhantomReference<any>>;
					public constructor(referent: any, queue: com.google.common.base.FinalizableReferenceQueue);
					public finalizeReferent(): void;
					public constructor(referent: any, q: java.lang.ref.ReferenceQueue<any>);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class FinalizableReference extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.FinalizableReference>;
					/**
					 * Constructs a new instance of the com.google.common.base.FinalizableReference interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						finalizeReferent(): void;
					});
					public constructor();
					public finalizeReferent(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class FinalizableReferenceQueue extends java.lang.Object implements java.io.Closeable {
					public static class: java.lang.Class<com.google.common.base.FinalizableReferenceQueue>;
					public constructor();
					public close(): void;
				}
				export module FinalizableReferenceQueue {
					export class DecoupledLoader extends java.lang.Object implements com.google.common.base.FinalizableReferenceQueue.FinalizerLoader {
						public static class: java.lang.Class<com.google.common.base.FinalizableReferenceQueue.DecoupledLoader>;
						public loadFinalizer(): java.lang.Class<any>;
					}
					export class DirectLoader extends java.lang.Object implements com.google.common.base.FinalizableReferenceQueue.FinalizerLoader {
						public static class: java.lang.Class<com.google.common.base.FinalizableReferenceQueue.DirectLoader>;
						public loadFinalizer(): java.lang.Class<any>;
					}
					export class FinalizerLoader extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.FinalizableReferenceQueue.FinalizerLoader>;
						/**
						 * Constructs a new instance of the com.google.common.base.FinalizableReferenceQueue$FinalizerLoader interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							loadFinalizer(): java.lang.Class<any>;
						});
						public constructor();
						public loadFinalizer(): java.lang.Class<any>;
					}
					export class SystemLoader extends java.lang.Object implements com.google.common.base.FinalizableReferenceQueue.FinalizerLoader {
						public static class: java.lang.Class<com.google.common.base.FinalizableReferenceQueue.SystemLoader>;
						public loadFinalizer(): java.lang.Class<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class FinalizableSoftReference<T>  extends java.lang.ref.SoftReference<any> implements com.google.common.base.FinalizableReference  {
					public static class: java.lang.Class<com.google.common.base.FinalizableSoftReference<any>>;
					public constructor(referent: any, queue: com.google.common.base.FinalizableReferenceQueue);
					public finalizeReferent(): void;
					public constructor(referent: any);
					public constructor(referent: any, q: java.lang.ref.ReferenceQueue<any>);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class FinalizableWeakReference<T>  extends java.lang.ref.WeakReference<any> implements com.google.common.base.FinalizableReference  {
					public static class: java.lang.Class<com.google.common.base.FinalizableWeakReference<any>>;
					public constructor(referent: any, queue: com.google.common.base.FinalizableReferenceQueue);
					public finalizeReferent(): void;
					public constructor(referent: any);
					public constructor(referent: any, q: java.lang.ref.ReferenceQueue<any>);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Function<F, T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Function<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.base.Function<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						apply(object0: F): T;
						equals(object0: any): boolean;
					});
					public constructor();
					public equals(obj: any): boolean;
					public apply(object0: F): T;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class FunctionalEquivalence<F, T>  extends com.google.common.base.Equivalence<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.base.FunctionalEquivalence<any,any>>;
					public doHash(a: any): number;
					public equals(obj: any): boolean;
					public toString(): string;
					public static equals(): com.google.common.base.Equivalence<any>;
					public doEquivalent(object0: any, object1: any): boolean;
					public doEquivalent(a: any, b: any): boolean;
					public doHash(object0: any): number;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Functions extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Functions>;
					public static compose(g: com.google.common.base.Function<any,any>, f: com.google.common.base.Function<any,any>): com.google.common.base.Function<any,any>;
					public static forPredicate(predicate: com.google.common.base.Predicate<any>): com.google.common.base.Function<any,any>;
					public static forMap(map: java.util.Map<any,any>, defaultValue: any): com.google.common.base.Function<any,any>;
					public static identity(): com.google.common.base.Function<any,any>;
					public static forMap(map: java.util.Map<any,any>): com.google.common.base.Function<any,any>;
					public static toStringFunction(): com.google.common.base.Function<any,string>;
					public static forSupplier(supplier: com.google.common.base.Supplier<any>): com.google.common.base.Function<any,any>;
					public static constant(value: any): com.google.common.base.Function<any,any>;
				}
				export module Functions {
					export class ConstantFunction<E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Functions.ConstantFunction<any>>;
						public equals(obj: any): boolean;
						public apply(from: any): E;
						public apply(from: any): any;
						public hashCode(): number;
						public constructor(value: E);
						public toString(): string;
					}
					export class ForMapWithDefault<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Functions.ForMapWithDefault<any,any>>;
						public equals(obj: any): boolean;
						public apply(key: K): V;
						public hashCode(): number;
						public equals(o: any): boolean;
						public apply(key: any): any;
						public toString(): string;
					}
					export class FunctionComposition<A, B, C>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Functions.FunctionComposition<any,any,any>>;
						public equals(obj: any): boolean;
						public constructor(g: com.google.common.base.Function<B,C>, f: com.google.common.base.Function<A,any>);
						public apply(a: A): C;
						public hashCode(): number;
						public apply(a: any): any;
						public toString(): string;
					}
					export class FunctionForMapNoDefault<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Functions.FunctionForMapNoDefault<any,any>>;
						public equals(obj: any): boolean;
						public apply(key: K): V;
						public hashCode(): number;
						public equals(o: any): boolean;
						public apply(key: any): any;
						public toString(): string;
					}
					export class IdentityFunction extends com.google.common.base.Function<any,any> {
						public static class: java.lang.Class<com.google.common.base.Functions.IdentityFunction>;
						public static INSTANCE: com.google.common.base.Functions.IdentityFunction;
						public static valueOf(name: string): com.google.common.base.Functions.IdentityFunction;
						public equals(other: any): boolean;
						public apply(o: any): any;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): native.Array<com.google.common.base.Functions.IdentityFunction>;
						public toString(): string;
					}
					export class PredicateFunction<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Functions.PredicateFunction<any>>;
						public apply(t: T): java.lang.Boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): T;
						public hashCode(): number;
						public toString(): string;
					}
					export class SupplierFunction<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Functions.SupplierFunction<any>>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public apply(input: any): T;
					}
					export class ToStringFunction extends com.google.common.base.Function<any,string> {
						public static class: java.lang.Class<com.google.common.base.Functions.ToStringFunction>;
						public static INSTANCE: com.google.common.base.Functions.ToStringFunction;
						public equals(other: any): boolean;
						public static values(): native.Array<com.google.common.base.Functions.ToStringFunction>;
						public static valueOf(name: string): com.google.common.base.Functions.ToStringFunction;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public apply(object0: any): any;
						public apply(o: any): string;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class JdkPattern extends com.google.common.base.CommonPattern implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.base.JdkPattern>;
					public toString(): string;
					public matcher(t: string): com.google.common.base.CommonMatcher;
					public pattern(): string;
					public flags(): number;
					public matcher(charSequence0: string): com.google.common.base.CommonMatcher;
				}
				export module JdkPattern {
					export class JdkMatcher extends com.google.common.base.CommonMatcher {
						public static class: java.lang.Class<com.google.common.base.JdkPattern.JdkMatcher>;
						public matches(): boolean;
						public start(): number;
						public end(): number;
						public find(index: number): boolean;
						public replaceAll(string0: string): string;
						public find(): boolean;
						public replaceAll(replacement: string): string;
						public find(int0: number): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Joiner extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Joiner>;
					public appendTo(builder: java.lang.StringBuilder, first: any, second: any, rest: native.Array<any>): java.lang.StringBuilder;
					public join(parts: native.Array<any>): string;
					public appendTo(builder: java.lang.StringBuilder, parts: java.util.Iterator<any>): java.lang.StringBuilder;
					public appendTo(builder: java.lang.StringBuilder, parts: native.Array<any>): java.lang.StringBuilder;
					public appendTo(builder: java.lang.StringBuilder, parts: java.lang.Iterable<any>): java.lang.StringBuilder;
					public static on(separator: string): com.google.common.base.Joiner;
					public appendTo(appendable: java.lang.Appendable, parts: java.lang.Iterable<any>): java.lang.Appendable;
					public join(parts: java.lang.Iterable<any>): string;
					public withKeyValueSeparator(keyValueSeparator: string): com.google.common.base.Joiner.MapJoiner;
					public skipNulls(): com.google.common.base.Joiner;
					public appendTo(appendable: java.lang.Appendable, first: any, second: any, rest: native.Array<any>): java.lang.Appendable;
					public appendTo(appendable: java.lang.Appendable, parts: java.util.Iterator<any>): java.lang.Appendable;
					public join(first: any, second: any, rest: native.Array<any>): string;
					public useForNull(nullText: string): com.google.common.base.Joiner;
					public appendTo(appendable: java.lang.Appendable, parts: native.Array<any>): java.lang.Appendable;
					public join(parts: java.util.Iterator<any>): string;
				}
				export module Joiner {
					export class MapJoiner extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Joiner.MapJoiner>;
						public appendTo(appendable: java.lang.Appendable, entries: java.lang.Iterable<any>): java.lang.Appendable;
						public join(entries: java.lang.Iterable<any>): string;
						public join(entries: java.util.Iterator<any>): string;
						public useForNull(nullText: string): com.google.common.base.Joiner.MapJoiner;
						public appendTo(appendable: java.lang.Appendable, map: java.util.Map<any,any>): java.lang.Appendable;
						public join(map: java.util.Map<any,any>): string;
						public appendTo(builder: java.lang.StringBuilder, entries: java.lang.Iterable<any>): java.lang.StringBuilder;
						public appendTo(builder: java.lang.StringBuilder, entries: java.util.Iterator<any>): java.lang.StringBuilder;
						public appendTo(builder: java.lang.StringBuilder, map: java.util.Map<any,any>): java.lang.StringBuilder;
						public appendTo(appendable: java.lang.Appendable, parts: java.util.Iterator<any>): java.lang.Appendable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class MoreObjects extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.MoreObjects>;
					public static toStringHelper(className: string): com.google.common.base.MoreObjects.ToStringHelper;
					public static toStringHelper(self: any): com.google.common.base.MoreObjects.ToStringHelper;
					public static toStringHelper(clazz: java.lang.Class<any>): com.google.common.base.MoreObjects.ToStringHelper;
					public static firstNonNull(first: any, second: any): any;
				}
				export module MoreObjects {
					export class ToStringHelper extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.MoreObjects.ToStringHelper>;
						public add(name: string, value: boolean): com.google.common.base.MoreObjects.ToStringHelper;
						public add(name: string, value: string): com.google.common.base.MoreObjects.ToStringHelper;
						public add(name: string, value: number): com.google.common.base.MoreObjects.ToStringHelper;
						public addValue(value: any): com.google.common.base.MoreObjects.ToStringHelper;
						public omitNullValues(): com.google.common.base.MoreObjects.ToStringHelper;
						public add(name: string, value: any): com.google.common.base.MoreObjects.ToStringHelper;
						public addValue(value: boolean): com.google.common.base.MoreObjects.ToStringHelper;
						public addValue(value: number): com.google.common.base.MoreObjects.ToStringHelper;
						public toString(): string;
						public addValue(value: string): com.google.common.base.MoreObjects.ToStringHelper;
					}
					export module ToStringHelper {
						export class ValueHolder extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.base.MoreObjects.ToStringHelper.ValueHolder>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Objects extends com.google.common.base.ExtraObjectsMethodsForWeb {
					public static class: java.lang.Class<com.google.common.base.Objects>;
					public static equal(a: any, b: any): boolean;
					public hashCode(): number;
					public static hashCode(objects: native.Array<any>): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class Optional<T>  extends java.io.Serializable {
					public static class: java.lang.Class<com.google.common.base.Optional<any>>;
					public asSet(): java.util.Set<any>;
					public equals(obj: any): boolean;
					public static of(reference: any): com.google.common.base.Optional<any>;
					public or(supplier0: com.google.common.base.Supplier<any>): any;
					public transform(function0: com.google.common.base.Function<any,any>): com.google.common.base.Optional<any>;
					public orNull(): any;
					public toString(): string;
					public get(): any;
					public or(optional0: com.google.common.base.Optional<any>): com.google.common.base.Optional<any>;
					public static absent(): com.google.common.base.Optional<any>;
					public static fromNullable(nullableReference: any): com.google.common.base.Optional<any>;
					public isPresent(): boolean;
					public or(object0: any): any;
					public hashCode(): number;
					public static presentInstances(optionals: java.lang.Iterable<any>): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class PairwiseEquivalence<T>  extends com.google.common.base.Equivalence<java.lang.Iterable<any>> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.base.PairwiseEquivalence<any>>;
					public equals(obj: any): boolean;
					public equals(object: any): boolean;
					public toString(): string;
					public doEquivalent(iterableA: java.lang.Iterable<any>, iterableB: java.lang.Iterable<any>): boolean;
					public static equals(): com.google.common.base.Equivalence<any>;
					public doEquivalent(object0: any, object1: any): boolean;
					public doHash(iterable: java.lang.Iterable<any>): number;
					public doHash(object0: any): number;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class PatternCompiler extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.PatternCompiler>;
					/**
					 * Constructs a new instance of the com.google.common.base.PatternCompiler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						compile(string0: string): com.google.common.base.CommonPattern;
						isPcreLike(): boolean;
					});
					public constructor();
					public compile(string0: string): com.google.common.base.CommonPattern;
					public isPcreLike(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Platform extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Platform>;
				}
				export module Platform {
					export class JdkPatternCompiler extends java.lang.Object implements com.google.common.base.PatternCompiler {
						public static class: java.lang.Class<com.google.common.base.Platform.JdkPatternCompiler>;
						public isPcreLike(): boolean;
						public compile(pattern: string): com.google.common.base.CommonPattern;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Preconditions extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Preconditions>;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: number, p2: number): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: number): any;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: any, p2: string): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: string): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: any, p2: any, p3: any, p4: any): any;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: string, p2: string): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: number, p2: number): any;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: any, p2: any, p3: any): any;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: any, p2: any, p3: any): void;
					public static checkElementIndex(index: number, size: number): number;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: number): void;
					public static checkNotNull(reference: any): any;
					public static checkNotNull(reference: any, errorMessage: any): any;
					public static checkState(expression: boolean, errorMessageTemplate: string, errorMessageArgs: native.Array<any>): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: any): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: any, p2: number): any;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: string): any;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: string, p2: any): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: any, p2: string): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: number, p2: string): void;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: any, p2: number): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: any, p2: any): void;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: string): void;
					public static checkElementIndex(index: number, size: number, desc: string): number;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: any, p2: any, p3: any, p4: any): void;
					public static checkArgument(expression: boolean): void;
					public static checkPositionIndex(index: number, size: number): number;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: any, p2: any): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: string, p2: number): void;
					public static checkNotNull(reference: any, errorMessageTemplate: string, errorMessageArgs: native.Array<any>): any;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: any, p2: any, p3: any): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: any, p2: number): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: number, p2: string): any;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: string, p2: any): void;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: any): void;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: number, p2: string): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: any, p2: string): any;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: number): void;
					public static checkArgument(expression: boolean, errorMessageTemplate: string, errorMessageArgs: native.Array<any>): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: string, p2: string): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: any, p2: any): any;
					public static checkState(expression: boolean, errorMessage: any): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: string, p2: number): any;
					public static checkArgument(expression: boolean, errorMessage: any): void;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: any, p2: any, p3: any, p4: any): void;
					public static checkPositionIndex(index: number, size: number, desc: string): number;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: number, p2: number): void;
					public static checkPositionIndexes(start: number, end: number, size: number): void;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: string, p2: number): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: number, p2: any): any;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: string, p2: string): any;
					public static checkState(expression: boolean): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: any): any;
					public static checkState(b: boolean, errorMessageTemplate: string, p1: number, p2: any): void;
					public static checkArgument(b: boolean, errorMessageTemplate: string, p1: number, p2: any): void;
					public static checkNotNull(obj: any, errorMessageTemplate: string, p1: string, p2: any): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Predicate<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Predicate<any>>;
					/**
					 * Constructs a new instance of the com.google.common.base.Predicate<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						apply(object0: T): boolean;
						equals(object0: any): boolean;
					});
					public constructor();
					public apply(object0: T): boolean;
					public equals(obj: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Predicates extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Predicates>;
					public static and(components: java.lang.Iterable<any>): com.google.common.base.Predicate<any>;
					public static or(first: com.google.common.base.Predicate<any>, second: com.google.common.base.Predicate<any>): com.google.common.base.Predicate<any>;
					public static in(target: java.util.Collection<any>): com.google.common.base.Predicate<any>;
					public static alwaysFalse(): com.google.common.base.Predicate<any>;
					public static alwaysTrue(): com.google.common.base.Predicate<any>;
					public static or(components: native.Array<com.google.common.base.Predicate<any>>): com.google.common.base.Predicate<any>;
					public static equalTo(target: any): com.google.common.base.Predicate<any>;
					public static and(first: com.google.common.base.Predicate<any>, second: com.google.common.base.Predicate<any>): com.google.common.base.Predicate<any>;
					public static notNull(): com.google.common.base.Predicate<any>;
					public static subtypeOf(clazz: java.lang.Class<any>): com.google.common.base.Predicate<java.lang.Class<any>>;
					public static compose(predicate: com.google.common.base.Predicate<any>, function1: com.google.common.base.Function<any,any>): com.google.common.base.Predicate<any>;
					public static contains(pattern: java.util.regex.Pattern): com.google.common.base.Predicate<string>;
					public static instanceOf(clazz: java.lang.Class<any>): com.google.common.base.Predicate<any>;
					public static not(predicate: com.google.common.base.Predicate<any>): com.google.common.base.Predicate<any>;
					public static and(components: native.Array<com.google.common.base.Predicate<any>>): com.google.common.base.Predicate<any>;
					public static containsPattern(pattern: string): com.google.common.base.Predicate<string>;
					public static isNull(): com.google.common.base.Predicate<any>;
					public static or(components: java.lang.Iterable<any>): com.google.common.base.Predicate<any>;
				}
				export module Predicates {
					export class AndPredicate<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.AndPredicate<any>>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public apply(t: T): boolean;
						public toString(): string;
					}
					export class CompositionPredicate<A, B>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.CompositionPredicate<any,any>>;
						public equals(obj: any): boolean;
						public apply(a: A): boolean;
						public hashCode(): number;
						public apply(a: any): boolean;
						public toString(): string;
					}
					export class ContainsPatternFromStringPredicate extends com.google.common.base.Predicates.ContainsPatternPredicate {
						public static class: java.lang.Class<com.google.common.base.Predicates.ContainsPatternFromStringPredicate>;
						public apply(t: string): boolean;
						public equals(obj: any): boolean;
						public apply(object0: any): boolean;
						public toString(): string;
					}
					export class ContainsPatternPredicate extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.ContainsPatternPredicate>;
						public apply(t: string): boolean;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public apply(object0: any): boolean;
						public toString(): string;
					}
					export class InPredicate<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.InPredicate<any>>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public apply(t: T): boolean;
						public toString(): string;
					}
					export class InstanceOfPredicate extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.InstanceOfPredicate>;
						public apply(o: any): boolean;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public toString(): string;
					}
					export class IsEqualToPredicate<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.IsEqualToPredicate<any>>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public apply(t: T): boolean;
						public toString(): string;
					}
					export class NotPredicate<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.NotPredicate<any>>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public apply(t: T): boolean;
						public toString(): string;
					}
					export abstract class ObjectPredicate extends com.google.common.base.Predicate<any> {
						public static class: java.lang.Class<com.google.common.base.Predicates.ObjectPredicate>;
						public static ALWAYS_FALSE: com.google.common.base.Predicates.ObjectPredicate;
						public static ALWAYS_TRUE: com.google.common.base.Predicates.ObjectPredicate;
						public static IS_NULL: com.google.common.base.Predicates.ObjectPredicate;
						public static NOT_NULL: com.google.common.base.Predicates.ObjectPredicate;
						public equals(other: any): boolean;
						public static valueOf(name: string): com.google.common.base.Predicates.ObjectPredicate;
						public apply(object0: any): boolean;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): native.Array<com.google.common.base.Predicates.ObjectPredicate>;
					}
					export class OrPredicate<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.OrPredicate<any>>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public apply(t: T): boolean;
						public toString(): string;
					}
					export class SubtypeOfPredicate extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Predicates.SubtypeOfPredicate>;
						public equals(obj: any): boolean;
						public apply(input: java.lang.Class<any>): boolean;
						public hashCode(): number;
						public apply(object0: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Present<T>  extends com.google.common.base.Optional<any> {
					public static class: java.lang.Class<com.google.common.base.Present<any>>;
					public asSet(): java.util.Set<any>;
					public or(supplier0: com.google.common.base.Supplier<any>): any;
					public transform(function0: com.google.common.base.Function<any,any>): com.google.common.base.Optional<any>;
					public equals(object: any): boolean;
					public or(supplier: com.google.common.base.Supplier<any>): any;
					public orNull(): any;
					public toString(): string;
					public get(): any;
					public or(optional0: com.google.common.base.Optional<any>): com.google.common.base.Optional<any>;
					public equals(object0: any): boolean;
					public or(secondChoice: com.google.common.base.Optional<any>): com.google.common.base.Optional<any>;
					public or(defaultValue: any): any;
					public isPresent(): boolean;
					public or(object0: any): any;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class SmallCharMatcher extends com.google.common.base.CharMatcher.NamedFastMatcher {
					public static class: java.lang.Class<com.google.common.base.SmallCharMatcher>;
					public matches(c: string): boolean;
					public matches(char0: string): boolean;
					public equals(obj: any): boolean;
					public apply(object0: any): boolean;
					/** @deprecated */
					public apply(character: java.lang.Character): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Splitter extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Splitter>;
					public static fixedLength(length: number): com.google.common.base.Splitter;
					public trimResults(): com.google.common.base.Splitter;
					public trimResults(trimmer: com.google.common.base.CharMatcher): com.google.common.base.Splitter;
					public omitEmptyStrings(): com.google.common.base.Splitter;
					public static onPattern(separatorPattern: string): com.google.common.base.Splitter;
					public static on(separatorMatcher: com.google.common.base.CharMatcher): com.google.common.base.Splitter;
					public withKeyValueSeparator(keyValueSplitter: com.google.common.base.Splitter): com.google.common.base.Splitter.MapSplitter;
					public limit(limit: number): com.google.common.base.Splitter;
					public static on(separatorPattern: java.util.regex.Pattern): com.google.common.base.Splitter;
					public withKeyValueSeparator(separator: string): com.google.common.base.Splitter.MapSplitter;
					public static on(separator: string): com.google.common.base.Splitter;
					public split(sequence: string): java.lang.Iterable<string>;
					public splitToList(sequence: string): java.util.List<string>;
				}
				export module Splitter {
					export class MapSplitter extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Splitter.MapSplitter>;
						public split(sequence: string): java.util.Map<string,string>;
					}
					export abstract class SplittingIterator extends com.google.common.base.AbstractIterator<string> {
						public static class: java.lang.Class<com.google.common.base.Splitter.SplittingIterator>;
						public constructor();
						public computeNext(): string;
						public computeNext(): any;
						public constructor(splitter: com.google.common.base.Splitter, toSplit: string);
					}
					export class Strategy extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Splitter.Strategy>;
						/**
						 * Constructs a new instance of the com.google.common.base.Splitter$Strategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							iterator(splitter0: com.google.common.base.Splitter, charSequence1: string): java.util.Iterator<string>;
						});
						public constructor();
						public iterator(splitter0: com.google.common.base.Splitter, charSequence1: string): java.util.Iterator<string>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class StandardSystemProperty {
					public static class: java.lang.Class<com.google.common.base.StandardSystemProperty>;
					public static FILE_SEPARATOR: com.google.common.base.StandardSystemProperty;
					public static JAVA_CLASS_PATH: com.google.common.base.StandardSystemProperty;
					public static JAVA_CLASS_VERSION: com.google.common.base.StandardSystemProperty;
					public static JAVA_COMPILER: com.google.common.base.StandardSystemProperty;
					public static JAVA_EXT_DIRS: com.google.common.base.StandardSystemProperty;
					public static JAVA_HOME: com.google.common.base.StandardSystemProperty;
					public static JAVA_IO_TMPDIR: com.google.common.base.StandardSystemProperty;
					public static JAVA_LIBRARY_PATH: com.google.common.base.StandardSystemProperty;
					public static JAVA_SPECIFICATION_NAME: com.google.common.base.StandardSystemProperty;
					public static JAVA_SPECIFICATION_VENDOR: com.google.common.base.StandardSystemProperty;
					public static JAVA_SPECIFICATION_VERSION: com.google.common.base.StandardSystemProperty;
					public static JAVA_VENDOR: com.google.common.base.StandardSystemProperty;
					public static JAVA_VENDOR_URL: com.google.common.base.StandardSystemProperty;
					public static JAVA_VERSION: com.google.common.base.StandardSystemProperty;
					public static JAVA_VM_NAME: com.google.common.base.StandardSystemProperty;
					public static JAVA_VM_SPECIFICATION_NAME: com.google.common.base.StandardSystemProperty;
					public static JAVA_VM_SPECIFICATION_VENDOR: com.google.common.base.StandardSystemProperty;
					public static JAVA_VM_SPECIFICATION_VERSION: com.google.common.base.StandardSystemProperty;
					public static JAVA_VM_VENDOR: com.google.common.base.StandardSystemProperty;
					public static JAVA_VM_VERSION: com.google.common.base.StandardSystemProperty;
					public static LINE_SEPARATOR: com.google.common.base.StandardSystemProperty;
					public static OS_ARCH: com.google.common.base.StandardSystemProperty;
					public static OS_NAME: com.google.common.base.StandardSystemProperty;
					public static OS_VERSION: com.google.common.base.StandardSystemProperty;
					public static PATH_SEPARATOR: com.google.common.base.StandardSystemProperty;
					public static USER_DIR: com.google.common.base.StandardSystemProperty;
					public static USER_HOME: com.google.common.base.StandardSystemProperty;
					public static USER_NAME: com.google.common.base.StandardSystemProperty;
					public toString(): string;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static valueOf(name: string): com.google.common.base.StandardSystemProperty;
					public static values(): native.Array<com.google.common.base.StandardSystemProperty>;
					public key(): string;
					public value(): string;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Stopwatch extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Stopwatch>;
					public static createUnstarted(): com.google.common.base.Stopwatch;
					public static createUnstarted(ticker: com.google.common.base.Ticker): com.google.common.base.Stopwatch;
					public toString(): string;
					public elapsed(desiredUnit: java.util.concurrent.TimeUnit): number;
					public stop(): com.google.common.base.Stopwatch;
					public isRunning(): boolean;
					public reset(): com.google.common.base.Stopwatch;
					public static createStarted(ticker: com.google.common.base.Ticker): com.google.common.base.Stopwatch;
					public static createStarted(): com.google.common.base.Stopwatch;
					public start(): com.google.common.base.Stopwatch;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Strings extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Strings>;
					public static commonSuffix(a: string, b: string): string;
					public static isNullOrEmpty(string: string): boolean;
					public static lenientFormat(template: string, objects1: native.Array<any>): string;
					public static repeat(string: string, count: number): string;
					public static commonPrefix(a: string, b: string): string;
					public static padEnd(string: string, minLength: number, padChar: string): string;
					public static padStart(string: string, minLength: number, padChar: string): string;
					public static nullToEmpty(string: string): string;
					public static emptyToNull(string: string): string;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Supplier<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Supplier<any>>;
					/**
					 * Constructs a new instance of the com.google.common.base.Supplier<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(): T;
					});
					public constructor();
					public get(): T;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Suppliers extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Suppliers>;
					public static supplierFunction(): com.google.common.base.Function<any,any>;
					public static ofInstance(instance: any): com.google.common.base.Supplier<any>;
					public static compose(function0: com.google.common.base.Function<any,any>, supplier: com.google.common.base.Supplier<any>): com.google.common.base.Supplier<any>;
					public static synchronizedSupplier(delegate: com.google.common.base.Supplier<any>): com.google.common.base.Supplier<any>;
					public static memoize(delegate: com.google.common.base.Supplier<any>): com.google.common.base.Supplier<any>;
					public static memoizeWithExpiration(delegate: com.google.common.base.Supplier<any>, duration: number, unit: java.util.concurrent.TimeUnit): com.google.common.base.Supplier<any>;
				}
				export module Suppliers {
					export class ExpiringMemoizingSupplier<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Suppliers.ExpiringMemoizingSupplier<any>>;
						public get(): T;
						public toString(): string;
					}
					export class MemoizingSupplier<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Suppliers.MemoizingSupplier<any>>;
						public get(): T;
						public toString(): string;
					}
					export class NonSerializableMemoizingSupplier<T>  extends com.google.common.base.Supplier<any> {
						public static class: java.lang.Class<com.google.common.base.Suppliers.NonSerializableMemoizingSupplier<any>>;
						public get(): any;
						public toString(): string;
					}
					export class SupplierComposition<F, T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Suppliers.SupplierComposition<any,any>>;
						public equals(obj: any): boolean;
						public get(): T;
						public hashCode(): number;
						public toString(): string;
					}
					export class SupplierFunction<T>  extends com.google.common.base.Function<com.google.common.base.Supplier<any>,any> {
						public static class: java.lang.Class<com.google.common.base.Suppliers.SupplierFunction<any>>;
						/**
						 * Constructs a new instance of the com.google.common.base.Suppliers$SupplierFunction interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							apply(object0: any): any;
							equals(object0: any): boolean;
						});
						public constructor();
						public equals(obj: any): boolean;
						public apply(object0: any): any;
					}
					export class SupplierFunctionImpl extends com.google.common.base.Suppliers.SupplierFunction<any> {
						public static class: java.lang.Class<com.google.common.base.Suppliers.SupplierFunctionImpl>;
						public static INSTANCE: com.google.common.base.Suppliers.SupplierFunctionImpl;
						public static values(): native.Array<com.google.common.base.Suppliers.SupplierFunctionImpl>;
						public equals(other: any): boolean;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public apply(object0: any): any;
						public apply(input: com.google.common.base.Supplier<any>): any;
						public static valueOf(name: string): com.google.common.base.Suppliers.SupplierFunctionImpl;
						public toString(): string;
					}
					export class SupplierOfInstance<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Suppliers.SupplierOfInstance<any>>;
						public equals(obj: any): boolean;
						public get(): T;
						public hashCode(): number;
						public toString(): string;
					}
					export class ThreadSafeSupplier<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.base.Suppliers.ThreadSafeSupplier<any>>;
						public get(): T;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Throwables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Throwables>;
					public static getCauseAs(throwable: java.lang.Throwable, expectedCauseType: java.lang.Class<any>): java.lang.Throwable;
					public static getRootCause(throwable: java.lang.Throwable): java.lang.Throwable;
					public static throwIfInstanceOf(throwable: java.lang.Throwable, declaredType: java.lang.Class<any>): void;
					/** @deprecated */
					public static propagate(throwable: java.lang.Throwable): java.lang.RuntimeException;
					public static getCausalChain(throwable: java.lang.Throwable): java.util.List<java.lang.Throwable>;
					public static throwIfUnchecked(throwable: java.lang.Throwable): void;
					public static getStackTraceAsString(throwable: java.lang.Throwable): string;
					public static propagateIfPossible(throwable: java.lang.Throwable, declaredType: java.lang.Class<any>): void;
					public static lazyStackTrace(throwable: java.lang.Throwable): java.util.List<java.lang.StackTraceElement>;
					public static lazyStackTraceIsLazy(): boolean;
					/** @deprecated */
					public static propagateIfInstanceOf(throwable: java.lang.Throwable, declaredType: java.lang.Class<any>): void;
					/** @deprecated */
					public static propagateIfPossible(throwable: java.lang.Throwable): void;
					public static propagateIfPossible(throwable: java.lang.Throwable, declaredType1: java.lang.Class<any>, declaredType2: java.lang.Class<any>): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export abstract class Ticker extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Ticker>;
					public read(): number;
					public static systemTicker(): com.google.common.base.Ticker;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Utf8 extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Utf8>;
					public static isWellFormed(bytes: native.Array<number>): boolean;
					public static isWellFormed(bytes: native.Array<number>, off: number, len: number): boolean;
					public static encodedLength(sequence: string): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class Verify extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.base.Verify>;
					public static verify(expression: boolean): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: any): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: any, p2: number): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: number): void;
					public static verify(expression: boolean, errorMessageTemplate: string, errorMessageArgs: native.Array<any>): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: number, p2: number): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: string, p2: any): void;
					public static verifyNotNull(reference: any): any;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: any, p2: string): void;
					public static verifyNotNull(reference: any, errorMessageTemplate: string, errorMessageArgs: native.Array<any>): any;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: string): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: any, p2: any, p3: any, p4: any): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: string, p2: string): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: string, p2: number): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: number, p2: any): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: any, p2: any): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: number, p2: string): void;
					public static verify(expression: boolean, errorMessageTemplate: string, p1: any, p2: any, p3: any): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export class VerifyException extends java.lang.RuntimeException {
					public static class: java.lang.Class<com.google.common.base.VerifyException>;
					public constructor(message: string);
					public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module base {
				export module internal {
					export class Finalizer extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.google.common.base.internal.Finalizer>;
						public run(): void;
						public static startFinalizer(finalizableReferenceClass: java.lang.Class<any>, queue: java.lang.ref.ReferenceQueue<any>, frqReference: java.lang.ref.PhantomReference<any>): void;
					}
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module cache {
				export abstract class AbstractCache<K, V>  extends com.google.common.cache.Cache<any,any> {
					public static class: java.lang.Class<com.google.common.cache.AbstractCache<any,any>>;
					public getIfPresent(object0: any): any;
					public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public size(): number;
					public invalidateAll(): void;
					public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
					public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
					public cleanUp(): void;
					public invalidateAll(keys: java.lang.Iterable<any>): void;
					public constructor();
					public invalidate(key: any): void;
					public put(key: any, value: any): void;
					public putAll(m: java.util.Map<any,any>): void;
					public stats(): com.google.common.cache.CacheStats;
				}
				export module AbstractCache {
					export class SimpleStatsCounter extends java.lang.Object implements com.google.common.cache.AbstractCache.StatsCounter {
						public static class: java.lang.Class<com.google.common.cache.AbstractCache.SimpleStatsCounter>;
						public constructor();
						public incrementBy(other: com.google.common.cache.AbstractCache.StatsCounter): void;
						public snapshot(): com.google.common.cache.CacheStats;
						public recordLoadException(loadTime: number): void;
						public recordLoadSuccess(loadTime: number): void;
						public recordMisses(count: number): void;
						public recordEviction(): void;
						public recordHits(count: number): void;
					}
					export class StatsCounter extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.cache.AbstractCache.StatsCounter>;
						/**
						 * Constructs a new instance of the com.google.common.cache.AbstractCache$StatsCounter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							recordHits(int0: number): void;
							recordMisses(int0: number): void;
							recordLoadSuccess(long0: number): void;
							recordLoadException(long0: number): void;
							recordEviction(): void;
							snapshot(): com.google.common.cache.CacheStats;
						});
						public constructor();
						public recordLoadSuccess(long0: number): void;
						public snapshot(): com.google.common.cache.CacheStats;
						public recordLoadException(long0: number): void;
						public recordMisses(int0: number): void;
						public recordEviction(): void;
						public recordHits(int0: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export abstract class AbstractLoadingCache<K, V>  extends com.google.common.cache.AbstractCache<any,any> implements com.google.common.cache.LoadingCache<any,any>  {
					public static class: java.lang.Class<com.google.common.cache.AbstractLoadingCache<any,any>>;
					public getIfPresent(object0: any): any;
					public apply(key: any): any;
					public equals(obj: any): boolean;
					public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public size(): number;
					public invalidateAll(): void;
					public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
					public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
					public cleanUp(): void;
					public invalidateAll(keys: java.lang.Iterable<any>): void;
					public refresh(key: any): void;
					public get(object0: any): any;
					public constructor();
					public invalidate(key: any): void;
					public put(key: any, value: any): void;
					public getAll(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public getUnchecked(key: any): any;
					public putAll(m: java.util.Map<any,any>): void;
					/** @deprecated */
					public apply(key: any): any;
					public stats(): com.google.common.cache.CacheStats;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class Cache<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.Cache<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.cache.Cache<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getIfPresent(object0: any): V;
						get(object0: K, callable1: java.util.concurrent.Callable<any>): V;
						getAllPresent(iterable0: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<K,V>;
						put(object0: K, object1: V): void;
						putAll(map0: java.util.Map<any,any>): void;
						invalidate(object0: any): void;
						invalidateAll(iterable0: java.lang.Iterable<any>): void;
						invalidateAll(): void;
						size(): number;
						stats(): com.google.common.cache.CacheStats;
						asMap(): java.util.concurrent.ConcurrentMap<K,V>;
						cleanUp(): void;
					});
					public constructor();
					public invalidateAll(iterable0: java.lang.Iterable<any>): void;
					public getIfPresent(object0: any): V;
					public getAllPresent(iterable0: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<K,V>;
					public invalidate(object0: any): void;
					public get(object0: K, callable1: java.util.concurrent.Callable<any>): V;
					public size(): number;
					public asMap(): java.util.concurrent.ConcurrentMap<K,V>;
					public invalidateAll(): void;
					public put(object0: K, object1: V): void;
					public putAll(map0: java.util.Map<any,any>): void;
					public cleanUp(): void;
					public stats(): com.google.common.cache.CacheStats;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class CacheBuilder<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.CacheBuilder<any,any>>;
					public maximumWeight(maximumWeight: number): com.google.common.cache.CacheBuilder<K,V>;
					public softValues(): com.google.common.cache.CacheBuilder<K,V>;
					public static newBuilder(): com.google.common.cache.CacheBuilder<any,any>;
					public build(loader: com.google.common.cache.CacheLoader<any,any>): com.google.common.cache.LoadingCache<any,any>;
					public ticker(ticker: com.google.common.base.Ticker): com.google.common.cache.CacheBuilder<K,V>;
					public build(): com.google.common.cache.Cache<any,any>;
					public weakValues(): com.google.common.cache.CacheBuilder<K,V>;
					public expireAfterWrite(duration: number, unit: java.util.concurrent.TimeUnit): com.google.common.cache.CacheBuilder<K,V>;
					public static from(spec: com.google.common.cache.CacheBuilderSpec): com.google.common.cache.CacheBuilder<any,any>;
					public recordStats(): com.google.common.cache.CacheBuilder<K,V>;
					public initialCapacity(initialCapacity: number): com.google.common.cache.CacheBuilder<K,V>;
					public maximumSize(maximumSize: number): com.google.common.cache.CacheBuilder<K,V>;
					public toString(): string;
					public concurrencyLevel(concurrencyLevel: number): com.google.common.cache.CacheBuilder<K,V>;
					public refreshAfterWrite(duration: number, unit: java.util.concurrent.TimeUnit): com.google.common.cache.CacheBuilder<K,V>;
					public weigher(weigher: com.google.common.cache.Weigher<any,any>): com.google.common.cache.CacheBuilder<any,any>;
					public static from(spec: string): com.google.common.cache.CacheBuilder<any,any>;
					public removalListener(listener: com.google.common.cache.RemovalListener<any,any>): com.google.common.cache.CacheBuilder<any,any>;
					public expireAfterAccess(duration: number, unit: java.util.concurrent.TimeUnit): com.google.common.cache.CacheBuilder<K,V>;
					public weakKeys(): com.google.common.cache.CacheBuilder<K,V>;
				}
				export module CacheBuilder {
					export class NullListener extends com.google.common.cache.RemovalListener<any,any> {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilder.NullListener>;
						public static INSTANCE: com.google.common.cache.CacheBuilder.NullListener;
						public static values(): native.Array<com.google.common.cache.CacheBuilder.NullListener>;
						public onRemoval(notification: com.google.common.cache.RemovalNotification<any,any>): void;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.cache.CacheBuilder.NullListener;
					}
					export class OneWeigher extends com.google.common.cache.Weigher<any,any> {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilder.OneWeigher>;
						public static INSTANCE: com.google.common.cache.CacheBuilder.OneWeigher;
						public static values(): native.Array<com.google.common.cache.CacheBuilder.OneWeigher>;
						public weigh(key: any, value: any): number;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.cache.CacheBuilder.OneWeigher;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class CacheBuilderSpec extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec>;
					public equals(obj: any): boolean;
					public toString(): string;
					public static parse(cacheBuilderSpecification: string): com.google.common.cache.CacheBuilderSpec;
					public toParsableString(): string;
					public static disableCaching(): com.google.common.cache.CacheBuilderSpec;
					public hashCode(): number;
				}
				export module CacheBuilderSpec {
					export class AccessDurationParser extends com.google.common.cache.CacheBuilderSpec.DurationParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.AccessDurationParser>;
						public parseDuration(spec: com.google.common.cache.CacheBuilderSpec, duration: number, unit: java.util.concurrent.TimeUnit): void;
						public parseDuration(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
					}
					export class ConcurrencyLevelParser extends com.google.common.cache.CacheBuilderSpec.IntegerParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.ConcurrencyLevelParser>;
						public parseInteger(spec: com.google.common.cache.CacheBuilderSpec, value: number): void;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public parseInteger(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, int1: number): void;
					}
					export abstract class DurationParser extends java.lang.Object implements com.google.common.cache.CacheBuilderSpec.ValueParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.DurationParser>;
						public parseDuration(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
					}
					export class InitialCapacityParser extends com.google.common.cache.CacheBuilderSpec.IntegerParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.InitialCapacityParser>;
						public parseInteger(spec: com.google.common.cache.CacheBuilderSpec, value: number): void;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public parseInteger(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, int1: number): void;
					}
					export abstract class IntegerParser extends java.lang.Object implements com.google.common.cache.CacheBuilderSpec.ValueParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.IntegerParser>;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public parseInteger(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, int1: number): void;
					}
					export class KeyStrengthParser extends java.lang.Object implements com.google.common.cache.CacheBuilderSpec.ValueParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.KeyStrengthParser>;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public constructor(strength: com.google.common.cache.LocalCache.Strength);
					}
					export abstract class LongParser extends java.lang.Object implements com.google.common.cache.CacheBuilderSpec.ValueParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.LongParser>;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public parseLong(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, long1: number): void;
					}
					export class MaximumSizeParser extends com.google.common.cache.CacheBuilderSpec.LongParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.MaximumSizeParser>;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public parseLong(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, long1: number): void;
						public parseLong(spec: com.google.common.cache.CacheBuilderSpec, value: number): void;
					}
					export class MaximumWeightParser extends com.google.common.cache.CacheBuilderSpec.LongParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.MaximumWeightParser>;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public parseLong(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, long1: number): void;
						public parseLong(spec: com.google.common.cache.CacheBuilderSpec, value: number): void;
					}
					export class RecordStatsParser extends java.lang.Object implements com.google.common.cache.CacheBuilderSpec.ValueParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.RecordStatsParser>;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
					}
					export class RefreshDurationParser extends com.google.common.cache.CacheBuilderSpec.DurationParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.RefreshDurationParser>;
						public parseDuration(spec: com.google.common.cache.CacheBuilderSpec, duration: number, unit: java.util.concurrent.TimeUnit): void;
						public parseDuration(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
					}
					export class ValueParser extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.ValueParser>;
						/**
						 * Constructs a new instance of the com.google.common.cache.CacheBuilderSpec$ValueParser interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							parse(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, string1: string, string2: string): void;
						});
						public constructor();
						public parse(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, string1: string, string2: string): void;
					}
					export class ValueStrengthParser extends java.lang.Object implements com.google.common.cache.CacheBuilderSpec.ValueParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.ValueStrengthParser>;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
						public constructor(strength: com.google.common.cache.LocalCache.Strength);
					}
					export class WriteDurationParser extends com.google.common.cache.CacheBuilderSpec.DurationParser {
						public static class: java.lang.Class<com.google.common.cache.CacheBuilderSpec.WriteDurationParser>;
						public parseDuration(spec: com.google.common.cache.CacheBuilderSpec, duration: number, unit: java.util.concurrent.TimeUnit): void;
						public parseDuration(cacheBuilderSpec0: com.google.common.cache.CacheBuilderSpec, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
						public parse(spec: com.google.common.cache.CacheBuilderSpec, key: string, value: string): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export abstract class CacheLoader<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.CacheLoader<any,any>>;
					public load(object0: K): V;
					public loadAll(keys: java.lang.Iterable<any>): java.util.Map<K,V>;
					public static asyncReloading(loader: com.google.common.cache.CacheLoader<any,any>, executor: java.util.concurrent.Executor): com.google.common.cache.CacheLoader<any,any>;
					public constructor();
					public static from(supplier: com.google.common.base.Supplier<any>): com.google.common.cache.CacheLoader<any,any>;
					public reload(key: K, oldValue: V): com.google.common.util.concurrent.ListenableFuture<V>;
					public static from(function0: com.google.common.base.Function<any,any>): com.google.common.cache.CacheLoader<any,any>;
				}
				export module CacheLoader {
					export class FunctionToCacheLoader<K, V>  extends com.google.common.cache.CacheLoader<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.cache.CacheLoader.FunctionToCacheLoader<any,any>>;
						public constructor();
						public load(object0: any): any;
						public load(key: any): any;
						public constructor(computingFunction: com.google.common.base.Function<any,any>);
					}
					export class InvalidCacheLoadException extends java.lang.RuntimeException {
						public static class: java.lang.Class<com.google.common.cache.CacheLoader.InvalidCacheLoadException>;
						public constructor();
						public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
						public constructor(message: string, cause: java.lang.Throwable);
						public constructor(cause: java.lang.Throwable);
						public constructor(message: string);
					}
					export class SupplierToCacheLoader<V>  extends com.google.common.cache.CacheLoader<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.cache.CacheLoader.SupplierToCacheLoader<any>>;
						public constructor();
						public load(object0: any): any;
						public load(key: any): any;
						public constructor(computingSupplier: com.google.common.base.Supplier<any>);
					}
					export class UnsupportedLoadingOperationException extends java.lang.UnsupportedOperationException {
						public static class: java.lang.Class<com.google.common.cache.CacheLoader.UnsupportedLoadingOperationException>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class CacheStats extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.CacheStats>;
					public loadSuccessCount(): number;
					public equals(obj: any): boolean;
					public plus(other: com.google.common.cache.CacheStats): com.google.common.cache.CacheStats;
					public evictionCount(): number;
					public loadExceptionCount(): number;
					public averageLoadPenalty(): number;
					public hitRate(): number;
					public totalLoadTime(): number;
					public missRate(): number;
					public equals(object: any): boolean;
					public loadCount(): number;
					public toString(): string;
					public hitCount(): number;
					public loadExceptionRate(): number;
					public requestCount(): number;
					public missCount(): number;
					public hashCode(): number;
					public minus(other: com.google.common.cache.CacheStats): com.google.common.cache.CacheStats;
					public constructor(hitCount: number, missCount: number, loadSuccessCount: number, loadExceptionCount: number, totalLoadTime: number, evictionCount: number);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export abstract class ForwardingCache<K, V>  extends com.google.common.collect.ForwardingObject implements com.google.common.cache.Cache<any,any>  {
					public static class: java.lang.Class<com.google.common.cache.ForwardingCache<any,any>>;
					public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public size(): number;
					public invalidateAll(): void;
					public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
					public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
					public getIfPresent(key: any): any;
					public cleanUp(): void;
					public invalidateAll(keys: java.lang.Iterable<any>): void;
					public constructor();
					public invalidate(key: any): void;
					public put(key: any, value: any): void;
					public delegate(): com.google.common.cache.Cache<any,any>;
					public putAll(m: java.util.Map<any,any>): void;
					public delegate(): any;
					public stats(): com.google.common.cache.CacheStats;
				}
				export module ForwardingCache {
					export abstract class SimpleForwardingCache<K, V>  extends com.google.common.cache.ForwardingCache<any,any> {
						public static class: java.lang.Class<com.google.common.cache.ForwardingCache.SimpleForwardingCache<any,any>>;
						public constructor(delegate: com.google.common.cache.Cache<any,any>);
						public cleanUp(): void;
						public constructor();
						public invalidateAll(keys: java.lang.Iterable<any>): void;
						public getIfPresent(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
						public invalidate(key: any): void;
						public delegate(): any;
						public invalidateAll(): void;
						public put(key: any, value: any): void;
						public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
						public delegate(): com.google.common.cache.Cache<any,any>;
						public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
						public size(): number;
						public stats(): com.google.common.cache.CacheStats;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export abstract class ForwardingLoadingCache<K, V>  extends com.google.common.cache.ForwardingCache<any,any> implements com.google.common.cache.LoadingCache<any,any>  {
					public static class: java.lang.Class<com.google.common.cache.ForwardingLoadingCache<any,any>>;
					public get(key: any): any;
					public apply(key: any): any;
					public equals(obj: any): boolean;
					public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public size(): number;
					public invalidateAll(): void;
					public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
					public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
					public getIfPresent(key: any): any;
					public cleanUp(): void;
					public invalidateAll(keys: java.lang.Iterable<any>): void;
					public refresh(key: any): void;
					public constructor();
					public invalidate(key: any): void;
					public put(key: any, value: any): void;
					public delegate(): com.google.common.cache.LoadingCache<any,any>;
					public getAll(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public delegate(): com.google.common.cache.Cache<any,any>;
					public getUnchecked(key: any): any;
					public putAll(m: java.util.Map<any,any>): void;
					public delegate(): any;
					/** @deprecated */
					public apply(key: any): any;
					public stats(): com.google.common.cache.CacheStats;
				}
				export module ForwardingLoadingCache {
					export abstract class SimpleForwardingLoadingCache<K, V>  extends com.google.common.cache.ForwardingLoadingCache<any,any> {
						public static class: java.lang.Class<com.google.common.cache.ForwardingLoadingCache.SimpleForwardingLoadingCache<any,any>>;
						public cleanUp(): void;
						/** @deprecated */
						public apply(key: any): any;
						public constructor();
						public invalidateAll(keys: java.lang.Iterable<any>): void;
						public constructor(delegate: com.google.common.cache.LoadingCache<any,any>);
						public getIfPresent(key: any): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
						public invalidate(key: any): void;
						public apply(key: any): any;
						public getUnchecked(key: any): any;
						public delegate(): any;
						public refresh(key: any): void;
						public invalidateAll(): void;
						public delegate(): com.google.common.cache.LoadingCache<any,any>;
						public put(key: any, value: any): void;
						public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
						public delegate(): com.google.common.cache.Cache<any,any>;
						public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
						public size(): number;
						public stats(): com.google.common.cache.CacheStats;
						public getAll(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class LoadingCache<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.LoadingCache<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.cache.LoadingCache<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(object0: K): V;
						getUnchecked(object0: K): V;
						getAll(iterable0: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<K,V>;
						apply(object0: K): V;
						refresh(object0: K): void;
						asMap(): java.util.concurrent.ConcurrentMap<K,V>;
						getIfPresent(object0: any): V;
						get(object0: K, callable1: java.util.concurrent.Callable<any>): V;
						getAllPresent(iterable0: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<K,V>;
						put(object0: K, object1: V): void;
						putAll(map0: java.util.Map<any,any>): void;
						invalidate(object0: any): void;
						invalidateAll(iterable0: java.lang.Iterable<any>): void;
						invalidateAll(): void;
						size(): number;
						stats(): com.google.common.cache.CacheStats;
						asMap(): java.util.concurrent.ConcurrentMap<K,V>;
						cleanUp(): void;
						apply(object0: any): any;
						equals(object0: any): boolean;
					});
					public constructor();
					public equals(obj: any): boolean;
					public getAll(iterable0: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<K,V>;
					public getIfPresent(object0: any): V;
					public getAllPresent(iterable0: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<K,V>;
					public invalidate(object0: any): void;
					/** @deprecated */
					public apply(object0: K): V;
					public size(): number;
					public getUnchecked(object0: K): V;
					public invalidateAll(): void;
					public refresh(object0: K): void;
					public putAll(map0: java.util.Map<any,any>): void;
					public cleanUp(): void;
					public invalidateAll(iterable0: java.lang.Iterable<any>): void;
					public get(object0: K, callable1: java.util.concurrent.Callable<any>): V;
					public asMap(): java.util.concurrent.ConcurrentMap<K,V>;
					public get(object0: K): V;
					public put(object0: K, object1: V): void;
					public apply(object0: any): any;
					public stats(): com.google.common.cache.CacheStats;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class LocalCache<K, V>  extends java.util.AbstractMap<any,any> implements java.util.concurrent.ConcurrentMap<any,any>  {
					public static class: java.lang.Class<com.google.common.cache.LocalCache<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public equals(o: any): boolean;
					public cleanUp(): void;
					public remove(key: any, value: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public remove(key: any): any;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public getIfPresent(key: any): any;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public putAll(m: java.util.Map<any,any>): void;
				}
				export module LocalCache {
					export abstract class AbstractCacheSet<T>  extends java.util.AbstractSet<any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.AbstractCacheSet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class AbstractReferenceEntry<K, V>  extends com.google.common.cache.ReferenceEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.AbstractReferenceEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getKey(): any;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getAccessTime(): number;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class AccessQueue<K, V>  extends java.util.AbstractQueue<com.google.common.cache.ReferenceEntry<any,any>> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.AccessQueue<any,any>>;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public poll(): any;
						public element(): any;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public peek(): com.google.common.cache.ReferenceEntry<any,any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public remove(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public offer(entry: com.google.common.cache.ReferenceEntry<any,any>): boolean;
						public add(e: any): boolean;
						public peek(): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public poll(): com.google.common.cache.ReferenceEntry<any,any>;
						public iterator(): java.util.Iterator<com.google.common.cache.ReferenceEntry<any,any>>;
						public offer(object0: any): boolean;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export abstract class EntryFactory {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.EntryFactory>;
						public static STRONG: com.google.common.cache.LocalCache.EntryFactory;
						public static STRONG_ACCESS: com.google.common.cache.LocalCache.EntryFactory;
						public static STRONG_ACCESS_WRITE: com.google.common.cache.LocalCache.EntryFactory;
						public static STRONG_WRITE: com.google.common.cache.LocalCache.EntryFactory;
						public static WEAK: com.google.common.cache.LocalCache.EntryFactory;
						public static WEAK_ACCESS: com.google.common.cache.LocalCache.EntryFactory;
						public static WEAK_ACCESS_WRITE: com.google.common.cache.LocalCache.EntryFactory;
						public static WEAK_WRITE: com.google.common.cache.LocalCache.EntryFactory;
						public static valueOf(name: string): com.google.common.cache.LocalCache.EntryFactory;
						public static values(): native.Array<com.google.common.cache.LocalCache.EntryFactory>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export class EntryIterator extends com.google.common.cache.LocalCache.HashIterator<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.EntryIterator>;
						public next(): java.util.Map.Entry<any,any>;
						public next(): any;
					}
					export class EntrySet extends com.google.common.cache.LocalCache.AbstractCacheSet<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.EntrySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class HashIterator<T>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.HashIterator<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class KeyIterator extends com.google.common.cache.LocalCache.HashIterator<any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.KeyIterator>;
						public next(): any;
					}
					export class KeySet extends com.google.common.cache.LocalCache.AbstractCacheSet<any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.KeySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class LoadingSerializationProxy<K, V>  extends com.google.common.cache.LocalCache.ManualSerializationProxy<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.LoadingSerializationProxy<any,any>>;
						public cleanUp(): void;
						/** @deprecated */
						public apply(key: any): any;
						public equals(obj: any): boolean;
						public invalidateAll(keys: java.lang.Iterable<any>): void;
						public getIfPresent(key: any): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
						public invalidate(key: any): void;
						public apply(key: any): any;
						public getUnchecked(key: any): any;
						public refresh(key: any): void;
						public invalidateAll(): void;
						public put(key: any, value: any): void;
						public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
						public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
						public size(): number;
						public stats(): com.google.common.cache.CacheStats;
						public getAll(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					}
					export class LoadingValueReference<K, V>  extends com.google.common.cache.LocalCache.ValueReference<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.LoadingValueReference<any,any>>;
						public notifyNewValue(newValue: any): void;
						public constructor();
						public isLoading(): boolean;
						public waitForValue(): any;
						public setException(t: java.lang.Throwable): boolean;
						public get(): any;
						public set(newValue: any): boolean;
						public constructor(oldValue: com.google.common.cache.LocalCache.ValueReference<any,any>);
						public getOldValue(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getWeight(): number;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, value: any, entry: com.google.common.cache.ReferenceEntry<any,any>): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public loadFuture(key: any, loader: com.google.common.cache.CacheLoader<any,any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public elapsedNanos(): number;
						public getEntry(): com.google.common.cache.ReferenceEntry<any,any>;
						public isActive(): boolean;
					}
					export class LocalLoadingCache<K, V>  extends com.google.common.cache.LocalCache.LocalManualCache<any,any> implements com.google.common.cache.LoadingCache<any,any>  {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.LocalLoadingCache<any,any>>;
						public cleanUp(): void;
						/** @deprecated */
						public apply(key: any): any;
						public equals(obj: any): boolean;
						public invalidateAll(keys: java.lang.Iterable<any>): void;
						public getIfPresent(key: any): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
						public invalidate(key: any): void;
						public apply(key: any): any;
						public getUnchecked(key: any): any;
						public refresh(key: any): void;
						public invalidateAll(): void;
						public put(key: any, value: any): void;
						public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
						public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
						public size(): number;
						public stats(): com.google.common.cache.CacheStats;
						public getAll(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					}
					export class LocalManualCache<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.LocalManualCache<any,any>>;
						public cleanUp(): void;
						public asMap(): java.util.concurrent.ConcurrentMap<K,V>;
						public put(key: K, value: V): void;
						public invalidateAll(keys: java.lang.Iterable<any>): void;
						public get(key: K, valueLoader: java.util.concurrent.Callable<any>): V;
						public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<K,V>;
						public invalidateAll(): void;
						public putAll(m: java.util.Map<any,any>): void;
						public getIfPresent(key: any): V;
						public invalidate(key: any): void;
						public size(): number;
						public stats(): com.google.common.cache.CacheStats;
					}
					export class ManualSerializationProxy<K, V>  extends com.google.common.cache.ForwardingCache<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.ManualSerializationProxy<any,any>>;
						public cleanUp(): void;
						public invalidateAll(keys: java.lang.Iterable<any>): void;
						public getIfPresent(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public asMap(): java.util.concurrent.ConcurrentMap<any,any>;
						public invalidate(key: any): void;
						public delegate(): any;
						public invalidateAll(): void;
						public put(key: any, value: any): void;
						public get(key: any, valueLoader: java.util.concurrent.Callable<any>): any;
						public delegate(): com.google.common.cache.Cache<any,any>;
						public getAllPresent(keys: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
						public size(): number;
						public stats(): com.google.common.cache.CacheStats;
					}
					export class NullEntry extends com.google.common.cache.ReferenceEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.NullEntry>;
						public static INSTANCE: com.google.common.cache.LocalCache.NullEntry;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public static valueOf(name: string): com.google.common.cache.LocalCache.NullEntry;
						public setAccessTime(time: number): void;
						public getKey(): any;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getAccessTime(): number;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public static values(): native.Array<com.google.common.cache.LocalCache.NullEntry>;
						public getHash(): number;
					}
					export class Segment<K, V>  extends java.util.concurrent.locks.ReentrantLock {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.Segment<any,any>>;
						public unlock(): void;
						public lockInterruptibly(): void;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public lock(): void;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class SoftValueReference<K, V>  extends java.lang.ref.SoftReference<any> implements com.google.common.cache.LocalCache.ValueReference<any,any>  {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.SoftValueReference<any,any>>;
						public notifyNewValue(newValue: any): void;
						public isLoading(): boolean;
						public waitForValue(): any;
						public getWeight(): number;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, value: any, entry: com.google.common.cache.ReferenceEntry<any,any>): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public get(): any;
						public getEntry(): com.google.common.cache.ReferenceEntry<any,any>;
						public isActive(): boolean;
					}
					export abstract class Strength {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.Strength>;
						public static SOFT: com.google.common.cache.LocalCache.Strength;
						public static STRONG: com.google.common.cache.LocalCache.Strength;
						public static WEAK: com.google.common.cache.LocalCache.Strength;
						public static valueOf(name: string): com.google.common.cache.LocalCache.Strength;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): native.Array<com.google.common.cache.LocalCache.Strength>;
					}
					export class StrongAccessEntry<K, V>  extends com.google.common.cache.LocalCache.StrongEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.StrongAccessEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getKey(): any;
						public getAccessTime(): number;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class StrongAccessWriteEntry<K, V>  extends com.google.common.cache.LocalCache.StrongEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.StrongAccessWriteEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getKey(): any;
						public getAccessTime(): number;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class StrongEntry<K, V>  extends com.google.common.cache.LocalCache.AbstractReferenceEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.StrongEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getKey(): any;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getAccessTime(): number;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class StrongValueReference<K, V>  extends com.google.common.cache.LocalCache.ValueReference<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.StrongValueReference<any,any>>;
						public notifyNewValue(newValue: any): void;
						public isLoading(): boolean;
						public waitForValue(): any;
						public getWeight(): number;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, value: any, entry: com.google.common.cache.ReferenceEntry<any,any>): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public get(): any;
						public getEntry(): com.google.common.cache.ReferenceEntry<any,any>;
						public isActive(): boolean;
					}
					export class StrongWriteEntry<K, V>  extends com.google.common.cache.LocalCache.StrongEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.StrongWriteEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getKey(): any;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getAccessTime(): number;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class ValueIterator extends com.google.common.cache.LocalCache.HashIterator<any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.ValueIterator>;
						public next(): any;
					}
					export class ValueReference<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.ValueReference<any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.cache.LocalCache$ValueReference interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							get(): V;
							waitForValue(): V;
							getWeight(): number;
							getEntry(): com.google.common.cache.ReferenceEntry<K,V>;
							copyFor(referenceQueue0: java.lang.ref.ReferenceQueue<V>, object1: V, referenceEntry2: com.google.common.cache.ReferenceEntry<K,V>): com.google.common.cache.LocalCache.ValueReference<K,V>;
							notifyNewValue(object0: V): void;
							isLoading(): boolean;
							isActive(): boolean;
						});
						public constructor();
						public notifyNewValue(object0: V): void;
						public isLoading(): boolean;
						public get(): V;
						public getWeight(): number;
						public waitForValue(): V;
						public getEntry(): com.google.common.cache.ReferenceEntry<K,V>;
						public copyFor(referenceQueue0: java.lang.ref.ReferenceQueue<V>, object1: V, referenceEntry2: com.google.common.cache.ReferenceEntry<K,V>): com.google.common.cache.LocalCache.ValueReference<K,V>;
						public isActive(): boolean;
					}
					export class Values extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.Values>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class WeakAccessEntry<K, V>  extends com.google.common.cache.LocalCache.WeakEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeakAccessEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getKey(): any;
						public getAccessTime(): number;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class WeakAccessWriteEntry<K, V>  extends com.google.common.cache.LocalCache.WeakEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeakAccessWriteEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getKey(): any;
						public getAccessTime(): number;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class WeakEntry<K, V>  extends java.lang.ref.WeakReference<any> implements com.google.common.cache.ReferenceEntry<any,any>  {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeakEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getKey(): any;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getAccessTime(): number;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class WeakValueReference<K, V>  extends java.lang.ref.WeakReference<any> implements com.google.common.cache.LocalCache.ValueReference<any,any>  {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeakValueReference<any,any>>;
						public notifyNewValue(newValue: any): void;
						public isLoading(): boolean;
						public waitForValue(): any;
						public getWeight(): number;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, value: any, entry: com.google.common.cache.ReferenceEntry<any,any>): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public get(): any;
						public getEntry(): com.google.common.cache.ReferenceEntry<any,any>;
						public isActive(): boolean;
					}
					export class WeakWriteEntry<K, V>  extends com.google.common.cache.LocalCache.WeakEntry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeakWriteEntry<any,any>>;
						public setValueReference(valueReference: com.google.common.cache.LocalCache.ValueReference<any,any>): void;
						public setPreviousInWriteQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setAccessTime(time: number): void;
						public getKey(): any;
						public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public getValueReference(): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public getAccessTime(): number;
						public getNext(): com.google.common.cache.ReferenceEntry<any,any>;
						public getWriteTime(): number;
						public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInWriteQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setPreviousInAccessQueue(previous: com.google.common.cache.ReferenceEntry<any,any>): void;
						public setWriteTime(time: number): void;
						public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<any,any>;
						public setNextInAccessQueue(next: com.google.common.cache.ReferenceEntry<any,any>): void;
						public getHash(): number;
					}
					export class WeightedSoftValueReference<K, V>  extends com.google.common.cache.LocalCache.SoftValueReference<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeightedSoftValueReference<any,any>>;
						public notifyNewValue(newValue: any): void;
						public waitForValue(): any;
						public isLoading(): boolean;
						public getWeight(): number;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, value: any, entry: com.google.common.cache.ReferenceEntry<any,any>): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public get(): any;
						public getEntry(): com.google.common.cache.ReferenceEntry<any,any>;
						public isActive(): boolean;
					}
					export class WeightedStrongValueReference<K, V>  extends com.google.common.cache.LocalCache.StrongValueReference<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeightedStrongValueReference<any,any>>;
						public notifyNewValue(newValue: any): void;
						public waitForValue(): any;
						public isLoading(): boolean;
						public getWeight(): number;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, value: any, entry: com.google.common.cache.ReferenceEntry<any,any>): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public get(): any;
						public getEntry(): com.google.common.cache.ReferenceEntry<any,any>;
						public isActive(): boolean;
					}
					export class WeightedWeakValueReference<K, V>  extends com.google.common.cache.LocalCache.WeakValueReference<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WeightedWeakValueReference<any,any>>;
						public notifyNewValue(newValue: any): void;
						public waitForValue(): any;
						public isLoading(): boolean;
						public getWeight(): number;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, value: any, entry: com.google.common.cache.ReferenceEntry<any,any>): com.google.common.cache.LocalCache.ValueReference<any,any>;
						public get(): any;
						public getEntry(): com.google.common.cache.ReferenceEntry<any,any>;
						public isActive(): boolean;
					}
					export class WriteQueue<K, V>  extends java.util.AbstractQueue<com.google.common.cache.ReferenceEntry<any,any>> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WriteQueue<any,any>>;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public poll(): any;
						public element(): any;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public peek(): com.google.common.cache.ReferenceEntry<any,any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public remove(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public offer(entry: com.google.common.cache.ReferenceEntry<any,any>): boolean;
						public add(e: any): boolean;
						public peek(): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public poll(): com.google.common.cache.ReferenceEntry<any,any>;
						public iterator(): java.util.Iterator<com.google.common.cache.ReferenceEntry<any,any>>;
						public offer(object0: any): boolean;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class WriteThroughEntry extends java.util.Map.Entry<any,any> {
						public static class: java.lang.Class<com.google.common.cache.LocalCache.WriteThroughEntry>;
						public equals(obj: any): boolean;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public getKey(): any;
						public hashCode(): number;
						public static comparingByKey(): java.util.Comparator<any>;
						public setValue(newValue: any): any;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class LongAddable extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.LongAddable>;
					/**
					 * Constructs a new instance of the com.google.common.cache.LongAddable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						increment(): void;
						add(long0: number): void;
						sum(): number;
					});
					public constructor();
					public sum(): number;
					public add(long0: number): void;
					public increment(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class LongAddables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.LongAddables>;
					public static create(): com.google.common.cache.LongAddable;
				}
				export module LongAddables {
					export class PureJavaLongAddable extends java.util.concurrent.atomic.AtomicLong implements com.google.common.cache.LongAddable {
						public static class: java.lang.Class<com.google.common.cache.LongAddables.PureJavaLongAddable>;
						public increment(): void;
						public add(x: number): void;
						public sum(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class LongAdder extends com.google.common.cache.Striped64 implements java.io.Serializable, com.google.common.cache.LongAddable {
					public static class: java.lang.Class<com.google.common.cache.LongAdder>;
					public decrement(): void;
					public intValue(): number;
					public sum(): number;
					public reset(): void;
					public toString(): string;
					public increment(): void;
					public sumThenReset(): number;
					public constructor();
					public doubleValue(): number;
					public add(x: number): void;
					public floatValue(): number;
					public longValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class ReferenceEntry<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.ReferenceEntry<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.cache.ReferenceEntry<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getValueReference(): com.google.common.cache.LocalCache.ValueReference<K,V>;
						setValueReference(valueReference0: com.google.common.cache.LocalCache.ValueReference<K,V>): void;
						getNext(): com.google.common.cache.ReferenceEntry<K,V>;
						getHash(): number;
						getKey(): K;
						getAccessTime(): number;
						setAccessTime(long0: number): void;
						getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<K,V>;
						setNextInAccessQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
						getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<K,V>;
						setPreviousInAccessQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
						getWriteTime(): number;
						setWriteTime(long0: number): void;
						getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<K,V>;
						setNextInWriteQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
						getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<K,V>;
						setPreviousInWriteQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
					});
					public constructor();
					public getKey(): K;
					public getNextInAccessQueue(): com.google.common.cache.ReferenceEntry<K,V>;
					public getNextInWriteQueue(): com.google.common.cache.ReferenceEntry<K,V>;
					public setNextInWriteQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
					public setValueReference(valueReference0: com.google.common.cache.LocalCache.ValueReference<K,V>): void;
					public setAccessTime(long0: number): void;
					public setPreviousInWriteQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
					public getHash(): number;
					public getAccessTime(): number;
					public getPreviousInWriteQueue(): com.google.common.cache.ReferenceEntry<K,V>;
					public getValueReference(): com.google.common.cache.LocalCache.ValueReference<K,V>;
					public setPreviousInAccessQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
					public getPreviousInAccessQueue(): com.google.common.cache.ReferenceEntry<K,V>;
					public setWriteTime(long0: number): void;
					public setNextInAccessQueue(referenceEntry0: com.google.common.cache.ReferenceEntry<K,V>): void;
					public getWriteTime(): number;
					public getNext(): com.google.common.cache.ReferenceEntry<K,V>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export abstract class RemovalCause {
					public static class: java.lang.Class<com.google.common.cache.RemovalCause>;
					public static COLLECTED: com.google.common.cache.RemovalCause;
					public static EXPIRED: com.google.common.cache.RemovalCause;
					public static EXPLICIT: com.google.common.cache.RemovalCause;
					public static REPLACED: com.google.common.cache.RemovalCause;
					public static SIZE: com.google.common.cache.RemovalCause;
					public static valueOf(name: string): com.google.common.cache.RemovalCause;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static values(): native.Array<com.google.common.cache.RemovalCause>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class RemovalListener<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.RemovalListener<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.cache.RemovalListener<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						onRemoval(removalNotification0: com.google.common.cache.RemovalNotification<K,V>): void;
					});
					public constructor();
					public onRemoval(removalNotification0: com.google.common.cache.RemovalNotification<K,V>): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class RemovalListeners extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.RemovalListeners>;
					public static asynchronous(listener: com.google.common.cache.RemovalListener<any,any>, executor: java.util.concurrent.Executor): com.google.common.cache.RemovalListener<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class RemovalNotification<K, V>  extends java.util.AbstractMap.SimpleImmutableEntry<any,any> {
					public static class: java.lang.Class<com.google.common.cache.RemovalNotification<any,any>>;
					public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public getValue(): any;
					public static create(key: any, value: any, cause: com.google.common.cache.RemovalCause): com.google.common.cache.RemovalNotification<any,any>;
					public static comparingByKey(): java.util.Comparator<any>;
					public setValue(value: any): any;
					public getCause(): com.google.common.cache.RemovalCause;
					public static comparingByValue(): java.util.Comparator<any>;
					public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public getKey(): any;
					public equals(o: any): boolean;
					public hashCode(): number;
					public wasEvicted(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export abstract class Striped64 extends java.lang.Number {
					public static class: java.lang.Class<com.google.common.cache.Striped64>;
				}
				export module Striped64 {
					export class Cell extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.cache.Striped64.Cell>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module cache {
				export class Weigher<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.cache.Weigher<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.cache.Weigher<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						weigh(object0: K, object1: V): number;
					});
					public constructor();
					public weigh(object0: K, object1: V): number;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractBiMap<K, V>  extends com.google.common.collect.ForwardingMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractBiMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public inverse(): com.google.common.collect.BiMap<any,any>;
					public size(): number;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public remove(key: any): any;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public values(): java.util.Set<any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public forcePut(key: any, value: any): any;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<any,any>;
				}
				export module AbstractBiMap {
					export class BiMapEntry extends com.google.common.collect.ForwardingMapEntry<any,any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractBiMap.BiMapEntry>;
						public delegate(): any;
						public delegate(): java.util.Map.Entry<any,any>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public setValue(value: any): any;
						public getValue(): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
					}
					export class EntrySet extends com.google.common.collect.ForwardingSet<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.AbstractBiMap.EntrySet>;
						public contains(object: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public delegate(): java.util.Set<java.util.Map.Entry<any,any>>;
						public size(): number;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public delegate(): java.util.Collection<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): any;
						public remove(object: any): boolean;
						public delegate(): java.util.Set<any>;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
					}
					export class Inverse<K, V>  extends com.google.common.collect.AbstractBiMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractBiMap.Inverse<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public values(): java.util.Set<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public forcePut(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public inverse(): com.google.common.collect.BiMap<any,any>;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class KeySet extends com.google.common.collect.ForwardingSet<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractBiMap.KeySet>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public retainAll(keysToRetain: java.util.Collection<any>): boolean;
						public size(): number;
						public remove(key: any): boolean;
						public delegate(): java.util.Collection<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): any;
						public remove(object: any): boolean;
						public removeAll(keysToRemove: java.util.Collection<any>): boolean;
						public delegate(): java.util.Set<any>;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
					}
					export class ValueSet extends com.google.common.collect.ForwardingSet<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractBiMap.ValueSet>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public delegate(): java.util.Collection<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public delegate(): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public delegate(): java.util.Set<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractIndexedListIterator<E>  extends com.google.common.collect.UnmodifiableListIterator<any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractIndexedListIterator<any>>;
					public previousIndex(): number;
					public nextIndex(): number;
					public next(): any;
					/** @deprecated */
					public remove(): void;
					public previous(): any;
					public get(int0: number): any;
					/** @deprecated */
					public set(e: any): void;
					public hasNext(): boolean;
					public remove(): void;
					public set(e: any): void;
					/** @deprecated */
					public add(e: any): void;
					public constructor();
					public hasPrevious(): boolean;
					public constructor(size: number);
					public add(e: any): void;
					public constructor(size: number, position: number);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractIterator<T>  extends com.google.common.collect.UnmodifiableIterator<any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractIterator<any>>;
					public next(): any;
					public peek(): any;
					public constructor();
					public endOfData(): any;
					public computeNext(): any;
					public hasNext(): boolean;
				}
				export module AbstractIterator {
					export class State {
						public static class: java.lang.Class<com.google.common.collect.AbstractIterator.State>;
						public static DONE: com.google.common.collect.AbstractIterator.State;
						public static FAILED: com.google.common.collect.AbstractIterator.State;
						public static NOT_READY: com.google.common.collect.AbstractIterator.State;
						public static READY: com.google.common.collect.AbstractIterator.State;
						public static valueOf(name: string): com.google.common.collect.AbstractIterator.State;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): native.Array<com.google.common.collect.AbstractIterator.State>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractListMultimap<K, V>  extends com.google.common.collect.AbstractMapBasedMultimap<any,any> implements com.google.common.collect.ListMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.AbstractListMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
					public isEmpty(): boolean;
					public removeAll(key: any): java.util.List<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public constructor(map: java.util.Map<any,java.util.Collection<any>>);
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public get(key: any): java.util.List<any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractMapBasedMultimap<K, V>  extends com.google.common.collect.AbstractMultimap<any,any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public get(key: any): java.util.Collection<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public constructor(map: java.util.Map<any,java.util.Collection<any>>);
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
				}
				export module AbstractMapBasedMultimap {
					export class AsMap extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,java.util.Collection<any>> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.AsMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public get(key: any): java.util.Collection<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public remove(key: any): java.util.Collection<any>;
						public putAll(m: java.util.Map<any,any>): void;
						public toString(): string;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public createEntrySet(): java.util.Set<java.util.Map.Entry<any,java.util.Collection<any>>>;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export module AsMap {
						export class AsMapEntries extends com.google.common.collect.Maps.EntrySet<any,java.util.Collection<any>> {
							public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapEntries>;
							public iterator(): java.util.Iterator<java.util.Map.Entry<any,java.util.Collection<any>>>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
						export class AsMapIterator extends java.util.Iterator<java.util.Map.Entry<any,java.util.Collection<any>>> {
							public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.AsMap.AsMapIterator>;
							public next(): java.util.Map.Entry<any,java.util.Collection<any>>;
							public hasNext(): boolean;
							public remove(): void;
						}
					}
					export abstract class Itr<T>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.Itr<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class KeySet extends com.google.common.collect.Maps.KeySet<any,java.util.Collection<any>> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.KeySet>;
						public remove(key: any): boolean;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class NavigableAsMap extends com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap implements java.util.NavigableMap<any,java.util.Collection<any>>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.NavigableAsMap>;
						public tailMap(fromKey: any): java.util.NavigableMap<any,java.util.Collection<any>>;
						public ceilingEntry(key: any): java.util.Map.Entry<any,java.util.Collection<any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public lastEntry(): java.util.Map.Entry<any,java.util.Collection<any>>;
						public higherEntry(key: any): java.util.Map.Entry<any,java.util.Collection<any>>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public keySet(): java.util.NavigableSet<any>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,java.util.Collection<any>>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,java.util.Collection<any>>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,java.util.Collection<any>>;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,java.util.Collection<any>>;
						public replace(key: any, value: any): any;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,java.util.Collection<any>>;
						public tailMap(fromKey: any): java.util.SortedMap<any,java.util.Collection<any>>;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public firstKey(): any;
						public headMap(toKey: any): java.util.NavigableMap<any,java.util.Collection<any>>;
						public remove(key: any): java.util.Collection<any>;
						public ceilingKey(key: any): any;
						public firstEntry(): java.util.Map.Entry<any,java.util.Collection<any>>;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public lowerEntry(key: any): java.util.Map.Entry<any,java.util.Collection<any>>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public subMap(fromKey: any, toKey: any): java.util.NavigableMap<any,java.util.Collection<any>>;
						public remove(key: any): any;
						public headMap(toKey: any): java.util.SortedMap<any,java.util.Collection<any>>;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public equals(object: any): boolean;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public descendingMap(): java.util.NavigableMap<any,java.util.Collection<any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public lowerKey(key: any): any;
						public get(key: any): java.util.Collection<any>;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public pollLastEntry(): java.util.Map.Entry<any,java.util.Collection<any>>;
						public keySet(): java.util.SortedSet<any>;
						public lastKey(): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public floorEntry(key: any): java.util.Map.Entry<any,java.util.Collection<any>>;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export class NavigableKeySet extends com.google.common.collect.AbstractMapBasedMultimap.SortedKeySet implements java.util.NavigableSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.NavigableKeySet>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public floor(k: any): any;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public ceiling(k: any): any;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.NavigableSet<any>;
						public containsAll(c: java.util.Collection<any>): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public pollFirst(): any;
						public remove(key: any): boolean;
						public first(): any;
						public add(e: any): boolean;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public tailSet(fromElement: any): java.util.NavigableSet<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public lower(k: any): any;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public headSet(toElement: any): java.util.NavigableSet<any>;
						public clear(): void;
						public higher(k: any): any;
						public forEach(action: any /* any*/): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class RandomAccessWrappedList extends com.google.common.collect.AbstractMapBasedMultimap.WrappedList implements java.util.RandomAccess  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.RandomAccessWrappedList>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public add(value: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public set(index: number, element: any): any;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
					}
					export class SortedAsMap extends com.google.common.collect.AbstractMapBasedMultimap.AsMap implements java.util.SortedMap<any,java.util.Collection<any>>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.SortedAsMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public get(key: any): java.util.Collection<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public size(): number;
						public keySet(): java.util.SortedSet<any>;
						public lastKey(): any;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,java.util.Collection<any>>;
						public tailMap(fromKey: any): java.util.SortedMap<any,java.util.Collection<any>>;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public firstKey(): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public remove(key: any): java.util.Collection<any>;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public headMap(toKey: any): java.util.SortedMap<any,java.util.Collection<any>>;
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class SortedKeySet extends com.google.common.collect.AbstractMapBasedMultimap.KeySet implements java.util.SortedSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.SortedKeySet>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public remove(key: any): boolean;
						public first(): any;
						public add(e: any): boolean;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class WrappedCollection extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(value: any): boolean;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export module WrappedCollection {
						export class WrappedIterator extends java.util.Iterator<any> {
							public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator>;
							public hasNext(): boolean;
							public remove(): void;
							public next(): any;
						}
					}
					export class WrappedList extends com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection implements java.util.List<any>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.WrappedList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public add(value: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public set(index: number, element: any): any;
						public get(index: number): any;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public clear(): void;
						public sort(c: java.util.Comparator<any>): void;
						public forEach(action: any /* any*/): void;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export module WrappedList {
						export class WrappedListIterator extends com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection.WrappedIterator implements java.util.ListIterator<any>  {
							public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.WrappedList.WrappedListIterator>;
							public previousIndex(): number;
							public previous(): any;
							public nextIndex(): number;
							public set(value: any): void;
							public hasNext(): boolean;
							public remove(): void;
							public constructor(param0: com.google.common.collect.AbstractMapBasedMultimap.WrappedList, index: number);
							public hasPrevious(): boolean;
							public add(value: any): void;
							public next(): any;
						}
					}
					export class WrappedNavigableSet extends com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet implements java.util.NavigableSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.WrappedNavigableSet>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public add(value: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public higher(v: any): any;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public lower(v: any): any;
						public pollLast(): any;
						public pollFirst(): any;
						public first(): any;
						public floor(v: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public ceiling(v: any): any;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class WrappedSet extends com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection implements java.util.Set<any>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.WrappedSet>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(value: any): boolean;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class WrappedSortedSet extends com.google.common.collect.AbstractMapBasedMultimap.WrappedCollection implements java.util.SortedSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultimap.WrappedSortedSet>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(value: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public first(): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractMapBasedMultiset<E>  extends com.google.common.collect.AbstractMultiset<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(element: any, occurrences: number): number;
					public containsAll(c: java.util.Collection<any>): boolean;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public count(element: any): number;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
				}
				export module AbstractMapBasedMultiset {
					export abstract class Itr<T>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMapBasedMultiset.Itr<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractMapEntry<K, V>  extends java.util.Map.Entry<any,any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractMapEntry<any,any>>;
					public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public getValue(): any;
					public equals(obj: any): boolean;
					public equals(object: any): boolean;
					public toString(): string;
					public static comparingByKey(): java.util.Comparator<any>;
					public setValue(value: any): any;
					public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparingByValue(): java.util.Comparator<any>;
					public getKey(): any;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractMultimap<K, V>  extends com.google.common.collect.Multimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractMultimap<any,any>>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public toString(): string;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public removeAll(object0: any): java.util.Collection<any>;
					public containsEntry(key: any, value: any): boolean;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public containsKey(object0: any): boolean;
				}
				export module AbstractMultimap {
					export class Entries extends com.google.common.collect.Multimaps.Entries<any,any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMultimap.Entries>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class EntrySet extends com.google.common.collect.AbstractMultimap.Entries implements java.util.Set<java.util.Map.Entry<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.AbstractMultimap.EntrySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class Values extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMultimap.Values>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractMultiset<E>  extends java.util.AbstractCollection<any> implements com.google.common.collect.Multiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.AbstractMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					public addAll(c: java.util.Collection<any>): boolean;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public contains(o: any): boolean;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public removeAll(c: java.util.Collection<any>): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(o: any): boolean;
					public remove(element: any, occurrences: number): number;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public forEach(action: any /* any*/): void;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public retainAll(c: java.util.Collection<any>): boolean;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
				}
				export module AbstractMultiset {
					export class ElementSet extends com.google.common.collect.Multisets.ElementSet<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMultiset.ElementSet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class EntrySet extends com.google.common.collect.Multisets.EntrySet<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractMultiset.EntrySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public iterator(): java.util.Iterator<com.google.common.collect.Multiset.Entry<any>>;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractNavigableMap<K, V>  extends com.google.common.collect.Maps.IteratorBasedAbstractMap<any,any> implements java.util.NavigableMap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.AbstractNavigableMap<any,any>>;
					public headMap(toKey: any): java.util.SortedMap<any,any>;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public floorEntry(key: any): java.util.Map.Entry<any,any>;
					public tailMap(fromKey: any): java.util.SortedMap<any,any>;
					public size(): number;
					public lowerKey(key: any): any;
					public equals(o: any): boolean;
					public floorKey(key: any): any;
					public keySet(): java.util.Set<any>;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public ceilingKey(key: any): any;
					public replace(key: any, value: any): any;
					public pollFirstEntry(): java.util.Map.Entry<any,any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public subMap(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableMap<any,any>;
					public lowerEntry(key: any): java.util.Map.Entry<any,any>;
					public containsKey(key: any): boolean;
					public pollLastEntry(): java.util.Map.Entry<any,any>;
					public lastEntry(): java.util.Map.Entry<any,any>;
					public comparator(): java.util.Comparator<any>;
					public headMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
					public higherEntry(key: any): java.util.Map.Entry<any,any>;
					public lastKey(): any;
					public remove(key: any, value: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public clear(): void;
					public firstEntry(): java.util.Map.Entry<any,any>;
					public descendingMap(): java.util.NavigableMap<any,any>;
					public hashCode(): number;
					public higherKey(key: any): any;
					public remove(key: any): any;
					public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public tailMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public navigableKeySet(): java.util.NavigableSet<any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public firstKey(): any;
					public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public putAll(m: java.util.Map<any,any>): void;
					public descendingKeySet(): java.util.NavigableSet<any>;
				}
				export module AbstractNavigableMap {
					export class DescendingMap extends com.google.common.collect.Maps.DescendingMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractNavigableMap.DescendingMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public lowerKey(key: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public remove(object: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public ceilingKey(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractRangeSet<C>  extends com.google.common.collect.RangeSet<any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractRangeSet<any>>;
					public enclosesAll(other: com.google.common.collect.RangeSet<any>): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public addAll(other: com.google.common.collect.RangeSet<any>): void;
					public removeAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public intersects(otherRange: com.google.common.collect.Range<any>): boolean;
					public remove(range: com.google.common.collect.Range<any>): void;
					public add(range: com.google.common.collect.Range<any>): void;
					public rangeContaining(comparable0: any): com.google.common.collect.Range<any>;
					public removeAll(other: com.google.common.collect.RangeSet<any>): void;
					public enclosesAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): boolean;
					public toString(): string;
					public encloses(range0: com.google.common.collect.Range<any>): boolean;
					public addAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public asDescendingSetOfRanges(): java.util.Set<com.google.common.collect.Range<any>>;
					public clear(): void;
					public complement(): com.google.common.collect.RangeSet<any>;
					public contains(value: any): boolean;
					public asRanges(): java.util.Set<com.google.common.collect.Range<any>>;
					public span(): com.google.common.collect.Range<any>;
					public subRangeSet(range0: com.google.common.collect.Range<any>): com.google.common.collect.RangeSet<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractSequentialIterator<T>  extends com.google.common.collect.UnmodifiableIterator<any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractSequentialIterator<any>>;
					public computeNext(object0: any): any;
					public next(): any;
					public constructor();
					public constructor(firstOrNull: any);
					public hasNext(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractSetMultimap<K, V>  extends com.google.common.collect.AbstractMapBasedMultimap<any,any> implements com.google.common.collect.SetMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.AbstractSetMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public constructor(map: java.util.Map<any,java.util.Collection<any>>);
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public removeAll(key: any): java.util.Set<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractSortedKeySortedSetMultimap<K, V>  extends com.google.common.collect.AbstractSortedSetMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractSortedKeySortedSetMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public removeAll(key: any): java.util.SortedSet<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.SortedSet<any>;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public keySet(): java.util.SortedSet<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public removeAll(key: any): java.util.Set<any>;
					public asMap(): java.util.SortedMap<any,java.util.Collection<any>>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.SortedSet<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Set<any>;
					public valueComparator(): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractSortedMultiset<E>  extends com.google.common.collect.AbstractMultiset<any> implements com.google.common.collect.SortedMultiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.AbstractSortedMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					public comparator(): java.util.Comparator<any>;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public elementSet(): java.util.SortedSet<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(element: any, occurrences: number): number;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public containsAll(c: java.util.Collection<any>): boolean;
					public subMultiset(fromElement: any, fromBoundType: com.google.common.collect.BoundType, toElement: any, toBoundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public hashCode(): number;
					public forEach(action: any /* any*/): void;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public tailMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public headMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractSortedSetMultimap<K, V>  extends com.google.common.collect.AbstractSetMultimap<any,any> implements com.google.common.collect.SortedSetMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.AbstractSortedSetMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public removeAll(key: any): java.util.SortedSet<any>;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.SortedSet<any>;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public constructor(map: java.util.Map<any,java.util.Collection<any>>);
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public removeAll(key: any): java.util.Set<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.SortedSet<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Set<any>;
					public valueComparator(): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class AbstractTable<R, C, V>  extends com.google.common.collect.Table<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.AbstractTable<any,any,any>>;
					public get(rowKey: any, columnKey: any): any;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public row(object0: any): java.util.Map<any,any>;
					public rowKeySet(): java.util.Set<any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public size(): number;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public containsColumn(columnKey: any): boolean;
					public toString(): string;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public clear(): void;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public column(object0: any): java.util.Map<any,any>;
					public columnKeySet(): java.util.Set<any>;
					public containsRow(rowKey: any): boolean;
					public hashCode(): number;
				}
				export module AbstractTable {
					export class CellSet extends java.util.AbstractSet<com.google.common.collect.Table.Cell<any,any,any>> {
						public static class: java.lang.Class<com.google.common.collect.AbstractTable.CellSet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public iterator(): java.util.Iterator<com.google.common.collect.Table.Cell<any,any,any>>;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class Values extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.AbstractTable.Values>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class AllEqualOrdering extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.AllEqualOrdering>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public sortedCopy(iterable: java.lang.Iterable<any>): java.util.List<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public reverse(): com.google.common.collect.Ordering<any>;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public sortedCopy(elements: java.lang.Iterable<any>): java.util.List<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(left: any, right: any): number;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public immutableSortedCopy(iterable: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public immutableSortedCopy(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ArrayListMultimap<K, V>  extends com.google.common.collect.ArrayListMultimapGwtSerializationDependencies<any,any> {
					public static class: java.lang.Class<com.google.common.collect.ArrayListMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public removeAll(key: any): java.util.List<any>;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public static create(expectedKeys: number, expectedValuesPerKey: number): com.google.common.collect.ArrayListMultimap<any,any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					/** @deprecated */
					public trimToSize(): void;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public static create(): com.google.common.collect.ArrayListMultimap<any,any>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public get(key: any): java.util.List<any>;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public static create(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ArrayListMultimap<any,any>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ArrayListMultimapGwtSerializationDependencies<K, V>  extends com.google.common.collect.AbstractListMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.ArrayListMultimapGwtSerializationDependencies<any,any>>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
					public containsKey(key: any): boolean;
					public removeAll(key: any): java.util.List<any>;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public get(key: any): java.util.Collection<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public get(key: any): java.util.List<any>;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ArrayTable<R, C, V>  extends com.google.common.collect.AbstractTable<any,any,any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ArrayTable<any,any,any>>;
					public columnKeyList(): com.google.common.collect.ImmutableList<any>;
					public put(rowKey: any, columnKey: any, value: any): any;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public rowKeySet(): java.util.Set<any>;
					public columnKeySet(): com.google.common.collect.ImmutableSet<any>;
					public size(): number;
					public set(rowIndex: number, columnIndex: number, value: any): any;
					public rowKeySet(): com.google.common.collect.ImmutableSet<any>;
					public toArray(valueClass: java.lang.Class<any>): native.Array<native.Array<any>>;
					public at(rowIndex: number, columnIndex: number): any;
					public eraseAll(): void;
					public containsColumn(columnKey: any): boolean;
					public clear(): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public columnKeySet(): java.util.Set<any>;
					public containsRow(rowKey: any): boolean;
					public static create(rowKeys: java.lang.Iterable<any>, columnKeys: java.lang.Iterable<any>): com.google.common.collect.ArrayTable<any,any,any>;
					public static create(table: com.google.common.collect.Table<any,any,any>): com.google.common.collect.ArrayTable<any,any,any>;
					public hashCode(): number;
					public get(rowKey: any, columnKey: any): any;
					public column(columnKey: any): java.util.Map<any,any>;
					public row(rowKey: any): java.util.Map<any,any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public remove(rowKey: any, columnKey: any): any;
					/** @deprecated */
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public erase(rowKey: any, columnKey: any): any;
					public rowKeyList(): com.google.common.collect.ImmutableList<any>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
				}
				export module ArrayTable {
					export abstract class ArrayMap<K, V>  extends com.google.common.collect.Maps.IteratorBasedAbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ArrayTable.ArrayMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class Column extends com.google.common.collect.ArrayTable.ArrayMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ArrayTable.Column>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class ColumnMap extends com.google.common.collect.ArrayTable.ArrayMap<any,java.util.Map<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.ArrayTable.ColumnMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public put(key: any, value: java.util.Map<any,any>): java.util.Map<any,any>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class Row extends com.google.common.collect.ArrayTable.ArrayMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ArrayTable.Row>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class RowMap extends com.google.common.collect.ArrayTable.ArrayMap<any,java.util.Map<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.ArrayTable.RowMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public put(key: any, value: java.util.Map<any,any>): java.util.Map<any,any>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class BaseImmutableMultimap<K, V>  extends com.google.common.collect.AbstractMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.BaseImmutableMultimap<any,any>>;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public keySet(): java.util.Set<any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public containsKey(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class BiMap<K, V>  extends java.util.Map<any,any> {
					public static class: java.lang.Class<com.google.common.collect.BiMap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.BiMap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						put(object0: any, object1: any): any;
						forcePut(object0: any, object1: any): any;
						putAll(map0: java.util.Map<any,any>): void;
						values(): java.util.Set<any>;
						inverse(): com.google.common.collect.BiMap<any,any>;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						get(object0: any): any;
						put(object0: any, object1: any): any;
						remove(object0: any): any;
						putAll(map0: java.util.Map<any,any>): void;
						clear(): void;
						keySet(): java.util.Set<any>;
						values(): java.util.Collection<any>;
						entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						equals(object0: any): boolean;
						hashCode(): number;
						getOrDefault(key: any, defaultValue: any): any;
						forEach(action: any /* any<any,any>*/): void;
						replaceAll(function0: any /* any<any,any,any>*/): void;
						putIfAbsent(key: any, value: any): any;
						remove(key: any, value: any): boolean;
						replace(key: any, oldValue: any, newValue: any): boolean;
						replace(key: any, value: any): any;
						computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public remove(object0: any): any;
					public inverse(): com.google.common.collect.BiMap<any,any>;
					public size(): number;
					public putAll(map0: java.util.Map<any,any>): void;
					public remove(key: any, value: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public forcePut(object0: any, object1: any): any;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public containsValue(object0: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public replace(key: any, value: any): any;
					public put(object0: any, object1: any): any;
					public values(): java.util.Set<any>;
					public get(object0: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public containsKey(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class BoundType {
					public static class: java.lang.Class<com.google.common.collect.BoundType>;
					public static CLOSED: com.google.common.collect.BoundType;
					public static OPEN: com.google.common.collect.BoundType;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static valueOf(name: string): com.google.common.collect.BoundType;
					public static values(): native.Array<com.google.common.collect.BoundType>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ByFunctionOrdering<F, T>  extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ByFunctionOrdering<any,any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(left: any, right: any): number;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class CartesianList<E>  extends java.util.AbstractList<java.util.List<any>> implements java.util.RandomAccess  {
					public static class: java.lang.Class<com.google.common.collect.CartesianList<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public subList(fromIndex: number, toIndex: number): java.util.List<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					public set(index: number, element: any): any;
					public size(): number;
					public equals(o: any): boolean;
					public remove(index: number): any;
					public contains(o: any): boolean;
					public lastIndexOf(o: any): number;
					public iterator(): java.util.Iterator<any>;
					public removeAll(c: java.util.Collection<any>): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(o: any): boolean;
					public containsAll(c: java.util.Collection<any>): boolean;
					public listIterator(index: number): java.util.ListIterator<any>;
					public hashCode(): number;
					public get(index: number): com.google.common.collect.ImmutableList<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public get(int0: number): any;
					public retainAll(c: java.util.Collection<any>): boolean;
					public sort(c: java.util.Comparator<any>): void;
					public indexOf(o: any): number;
					public add(index: number, element: any): void;
					public removeIf(filter: any /* any*/): boolean;
					public addAll(index: number, c: java.util.Collection<any>): boolean;
					public listIterator(): java.util.ListIterator<any>;
					public stream(): java.util.stream.Stream<any>;
					public replaceAll(operator: any /* any*/): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ClassToInstanceMap<B>  extends java.util.Map<java.lang.Class<any>,any> {
					public static class: java.lang.Class<com.google.common.collect.ClassToInstanceMap<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.ClassToInstanceMap<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getInstance(class0: java.lang.Class<any>): any;
						putInstance(class0: java.lang.Class<any>, object1: any): any;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						get(object0: any): any;
						put(object0: any, object1: any): any;
						remove(object0: any): any;
						putAll(map0: java.util.Map<any,any>): void;
						clear(): void;
						keySet(): java.util.Set<any>;
						values(): java.util.Collection<any>;
						entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						equals(object0: any): boolean;
						hashCode(): number;
						getOrDefault(key: any, defaultValue: any): any;
						forEach(action: any /* any<any,any>*/): void;
						replaceAll(function0: any /* any<any,any,any>*/): void;
						putIfAbsent(key: any, value: any): any;
						remove(key: any, value: any): boolean;
						replace(key: any, oldValue: any, newValue: any): boolean;
						replace(key: any, value: any): any;
						computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public putInstance(class0: java.lang.Class<any>, object1: any): any;
					public remove(object0: any): any;
					public size(): number;
					public putAll(map0: java.util.Map<any,any>): void;
					public remove(key: any, value: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public containsValue(object0: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public replace(key: any, value: any): any;
					public put(object0: any, object1: any): any;
					public get(object0: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public getInstance(class0: java.lang.Class<any>): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public containsKey(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class CollectPreconditions extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.CollectPreconditions>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Collections2 extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Collections2>;
					public static orderedPermutations(elements: java.lang.Iterable<any>, comparator: java.util.Comparator<any>): java.util.Collection<any>;
					public static orderedPermutations(elements: java.lang.Iterable<any>): java.util.Collection<any>;
					public static transform(fromCollection: java.util.Collection<any>, function1: com.google.common.base.Function<any,any>): java.util.Collection<any>;
					public static permutations(elements: java.util.Collection<any>): java.util.Collection<any>;
					public static filter(unfiltered: java.util.Collection<any>, predicate: com.google.common.base.Predicate<any>): java.util.Collection<any>;
				}
				export module Collections2 {
					export class FilteredCollection<E>  extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.Collections2.FilteredCollection<any>>;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class OrderedPermutationCollection<E>  extends java.util.AbstractCollection<java.util.List<any>> {
						public static class: java.lang.Class<com.google.common.collect.Collections2.OrderedPermutationCollection<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public contains(obj: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public iterator(): java.util.Iterator<java.util.List<any>>;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class OrderedPermutationIterator<E>  extends com.google.common.collect.AbstractIterator<java.util.List<any>> {
						public static class: java.lang.Class<com.google.common.collect.Collections2.OrderedPermutationIterator<any>>;
						public computeNext(): java.util.List<any>;
						public computeNext(): any;
					}
					export class PermutationCollection<E>  extends java.util.AbstractCollection<java.util.List<any>> {
						public static class: java.lang.Class<com.google.common.collect.Collections2.PermutationCollection<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public contains(obj: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public iterator(): java.util.Iterator<java.util.List<any>>;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class PermutationIterator<E>  extends com.google.common.collect.AbstractIterator<java.util.List<any>> {
						public static class: java.lang.Class<com.google.common.collect.Collections2.PermutationIterator<any>>;
						public computeNext(): java.util.List<any>;
						public computeNext(): any;
					}
					export class TransformedCollection<F, T>  extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.Collections2.TransformedCollection<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class CompactHashMap<K, V>  extends java.util.AbstractMap<any,any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.CompactHashMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public static create(): com.google.common.collect.CompactHashMap<any,any>;
					public forEach(action: any /* any<any,any>*/): void;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.CompactHashMap<any,any>;
					public size(): number;
					public equals(o: any): boolean;
					public remove(key: any, value: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public trimToSize(): void;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public remove(key: any): any;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public putAll(m: java.util.Map<any,any>): void;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
				export module CompactHashMap {
					export class EntrySetView extends java.util.AbstractSet<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.CompactHashMap.EntrySetView>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class Itr<T>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.CompactHashMap.Itr<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class KeySetView extends java.util.AbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.CompactHashMap.KeySetView>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class MapEntry extends com.google.common.collect.AbstractMapEntry<any,any> {
						public static class: java.lang.Class<com.google.common.collect.CompactHashMap.MapEntry>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
					}
					export class ValuesView extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.CompactHashMap.ValuesView>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class CompactHashSet<E>  extends java.util.AbstractSet<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.CompactHashSet<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					public size(): number;
					public equals(o: any): boolean;
					public contains(o: any): boolean;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.CompactHashSet<any>;
					public iterator(): java.util.Iterator<any>;
					public removeAll(c: java.util.Collection<any>): boolean;
					public toArray(): native.Array<any>;
					public static create(): com.google.common.collect.CompactHashSet<any>;
					public clear(): void;
					public remove(o: any): boolean;
					public static create(collection: java.util.Collection<any>): com.google.common.collect.CompactHashSet<any>;
					public trimToSize(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public retainAll(c: java.util.Collection<any>): boolean;
					public static create(elements: native.Array<any>): com.google.common.collect.CompactHashSet<any>;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public add(object: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class CompactLinkedHashMap<K, V>  extends com.google.common.collect.CompactHashMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.CompactLinkedHashMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public static create(): com.google.common.collect.CompactHashMap<any,any>;
					public forEach(action: any /* any<any,any>*/): void;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.CompactHashMap<any,any>;
					public size(): number;
					public equals(o: any): boolean;
					public remove(key: any, value: any): boolean;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.CompactLinkedHashMap<any,any>;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public remove(key: any): any;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public static create(): com.google.common.collect.CompactLinkedHashMap<any,any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public putAll(m: java.util.Map<any,any>): void;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class CompactLinkedHashSet<E>  extends com.google.common.collect.CompactHashSet<any> {
					public static class: java.lang.Class<com.google.common.collect.CompactLinkedHashSet<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public static create(elements: native.Array<any>): com.google.common.collect.CompactLinkedHashSet<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					public size(): number;
					public static create(): com.google.common.collect.CompactLinkedHashSet<any>;
					public equals(o: any): boolean;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.CompactHashSet<any>;
					public iterator(): java.util.Iterator<any>;
					public removeAll(c: java.util.Collection<any>): boolean;
					public toArray(): native.Array<any>;
					public static create(): com.google.common.collect.CompactHashSet<any>;
					public clear(): void;
					public static create(collection: java.util.Collection<any>): com.google.common.collect.CompactHashSet<any>;
					public static create(collection: java.util.Collection<any>): com.google.common.collect.CompactLinkedHashSet<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.CompactLinkedHashSet<any>;
					public remove(object: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public retainAll(c: java.util.Collection<any>): boolean;
					public static create(elements: native.Array<any>): com.google.common.collect.CompactHashSet<any>;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public add(object: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ComparatorOrdering<T>  extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ComparatorOrdering<any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public compare(a: any, b: any): number;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Comparators extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Comparators>;
					public static isInStrictOrder(iterable: java.lang.Iterable<any>, comparator: java.util.Comparator<any>): boolean;
					public static isInOrder(iterable: java.lang.Iterable<any>, comparator: java.util.Comparator<any>): boolean;
					public static lexicographical(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ComparisonChain extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ComparisonChain>;
					public compare(object0: any, object1: any, comparator2: java.util.Comparator<any>): com.google.common.collect.ComparisonChain;
					/** @deprecated */
					public compare(left: java.lang.Boolean, right: java.lang.Boolean): com.google.common.collect.ComparisonChain;
					public compare(int0: number, int1: number): com.google.common.collect.ComparisonChain;
					public compareTrueFirst(boolean0: boolean, boolean1: boolean): com.google.common.collect.ComparisonChain;
					public compare(long0: number, long1: number): com.google.common.collect.ComparisonChain;
					public compare(double0: number, double1: number): com.google.common.collect.ComparisonChain;
					public result(): number;
					public compare(float0: number, float1: number): com.google.common.collect.ComparisonChain;
					public static start(): com.google.common.collect.ComparisonChain;
					public compare(comparable0: java.lang.Comparable<any>, comparable1: java.lang.Comparable<any>): com.google.common.collect.ComparisonChain;
					public compareFalseFirst(boolean0: boolean, boolean1: boolean): com.google.common.collect.ComparisonChain;
				}
				export module ComparisonChain {
					export class InactiveComparisonChain extends com.google.common.collect.ComparisonChain {
						public static class: java.lang.Class<com.google.common.collect.ComparisonChain.InactiveComparisonChain>;
						public compare(left: any, right: any, comparator: java.util.Comparator<any>): com.google.common.collect.ComparisonChain;
						public compareFalseFirst(boolean0: boolean, boolean1: boolean): com.google.common.collect.ComparisonChain;
						public compare(object0: any, object1: any, comparator2: java.util.Comparator<any>): com.google.common.collect.ComparisonChain;
						public compare(long0: number, long1: number): com.google.common.collect.ComparisonChain;
						public compare(comparable0: java.lang.Comparable<any>, comparable1: java.lang.Comparable<any>): com.google.common.collect.ComparisonChain;
						/** @deprecated */
						public compare(left: java.lang.Boolean, right: java.lang.Boolean): com.google.common.collect.ComparisonChain;
						public compareTrueFirst(left: boolean, right: boolean): com.google.common.collect.ComparisonChain;
						public compareTrueFirst(boolean0: boolean, boolean1: boolean): com.google.common.collect.ComparisonChain;
						public compare(left: number, right: number): com.google.common.collect.ComparisonChain;
						public compare(int0: number, int1: number): com.google.common.collect.ComparisonChain;
						public compare(float0: number, float1: number): com.google.common.collect.ComparisonChain;
						public compare(left: java.lang.Comparable<any>, right: java.lang.Comparable<any>): com.google.common.collect.ComparisonChain;
						public compareFalseFirst(left: boolean, right: boolean): com.google.common.collect.ComparisonChain;
						public result(): number;
						public compare(double0: number, double1: number): com.google.common.collect.ComparisonChain;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class CompoundOrdering<T>  extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.CompoundOrdering<any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(left: any, right: any): number;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ComputationException extends java.lang.RuntimeException {
					public static class: java.lang.Class<com.google.common.collect.ComputationException>;
					public constructor(message: string);
					public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
					public constructor();
					public constructor(cause: java.lang.Throwable);
					public constructor(message: string, cause: java.lang.Throwable);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ConcurrentHashMultiset<E>  extends com.google.common.collect.AbstractMultiset<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ConcurrentHashMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public static create(): com.google.common.collect.ConcurrentHashMultiset<any>;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					/** @deprecated */
					public createEntrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(element: any, occurrences: number): number;
					public containsAll(c: java.util.Collection<any>): boolean;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public static create(elements: java.lang.Iterable<any>): com.google.common.collect.ConcurrentHashMultiset<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public removeExactly(element: any, occurrences: number): boolean;
					public static create(countMap: java.util.concurrent.ConcurrentMap<any,any>): com.google.common.collect.ConcurrentHashMultiset<any>;
					public setCount(element: any, expectedOldCount: number, newCount: number): boolean;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public count(element: any): number;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
				}
				export module ConcurrentHashMultiset {
					export class EntrySet extends com.google.common.collect.AbstractMultiset.EntrySet {
						public static class: java.lang.Class<com.google.common.collect.ConcurrentHashMultiset.EntrySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public iterator(): java.util.Iterator<com.google.common.collect.Multiset.Entry<any>>;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class FieldSettersHolder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ConcurrentHashMultiset.FieldSettersHolder>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ConsumingQueueIterator<T>  extends com.google.common.collect.AbstractIterator<any> {
					public static class: java.lang.Class<com.google.common.collect.ConsumingQueueIterator<any>>;
					public computeNext(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ContiguousSet<C>  extends com.google.common.collect.ImmutableSortedSet<any> {
					public static class: java.lang.Class<com.google.common.collect.ContiguousSet<any>>;
					public ceiling(e: any): any;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public isEmpty(): boolean;
					/** @deprecated */
					public pollLast(): any;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public headSet(object0: any): java.util.SortedSet<any>;
					public descendingIterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public remove(object: any): boolean;
					public higher(e: any): any;
					public subSet(object0: any, object1: any): java.util.SortedSet<any>;
					public subSet(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableSet<any>;
					public range(boundType0: com.google.common.collect.BoundType, boundType1: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public pollFirst(): any;
					public static builder(): com.google.common.collect.ImmutableSet.Builder<any>;
					/** @deprecated */
					public clear(): void;
					public range(): com.google.common.collect.Range<any>;
					public descendingSet(): java.util.NavigableSet<any>;
					public static closedOpen(lower: number, upper: number): com.google.common.collect.ContiguousSet<java.lang.Long>;
					public static closed(lower: number, upper: number): com.google.common.collect.ContiguousSet<java.lang.Integer>;
					public static closed(lower: number, upper: number): com.google.common.collect.ContiguousSet<java.lang.Long>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public comparator(): java.util.Comparator<any>;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ContiguousSet<any>;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public headSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ContiguousSet<any>;
					public static create(range: com.google.common.collect.Range<any>, domain: com.google.common.collect.DiscreteDomain<any>): com.google.common.collect.ContiguousSet<any>;
					public lower(e: any): any;
					public contains(object0: any): boolean;
					/** @deprecated */
					public pollFirst(): any;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public toArray(other: native.Array<any>): native.Array<any>;
					public toString(): string;
					public equals(object: any): boolean;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public headSet(toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public hashCode(): number;
					public static closedOpen(lower: number, upper: number): com.google.common.collect.ContiguousSet<java.lang.Integer>;
					public intersection(contiguousSet0: com.google.common.collect.ContiguousSet<any>): com.google.common.collect.ContiguousSet<any>;
					public tailSet(object0: any): java.util.SortedSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public floor(e: any): any;
					public add(e: any): boolean;
					public descendingSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public descendingIterator(): java.util.Iterator<any>;
					/** @deprecated */
					public static builder(): com.google.common.collect.ImmutableSortedSet.Builder<any>;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public removeIf(filter: any /* any*/): boolean;
					public headSet(toElement: any): com.google.common.collect.ContiguousSet<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public pollLast(): any;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public tailSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Count extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.collect.Count>;
					public addAndGet(delta: number): number;
					public equals(obj: any): boolean;
					public toString(): string;
					public getAndSet(newValue: number): number;
					public get(): number;
					public set(newValue: number): void;
					public add(delta: number): void;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class Cut<C>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Cut<any>>;
					public equals(obj: any): boolean;
					public compareTo(that: com.google.common.collect.Cut<C>): number;
					public hashCode(): number;
				}
				export module Cut {
					export class AboveAll extends com.google.common.collect.Cut<java.lang.Comparable<any>> {
						public static class: java.lang.Class<com.google.common.collect.Cut.AboveAll>;
						public compareTo(that: com.google.common.collect.Cut<any>): number;
						public hashCode(): number;
						public compareTo(o: com.google.common.collect.Cut<java.lang.Comparable<any>>): number;
						public toString(): string;
					}
					export class AboveValue<C>  extends com.google.common.collect.Cut<any> {
						public static class: java.lang.Class<com.google.common.collect.Cut.AboveValue<any>>;
						public hashCode(): number;
						public toString(): string;
					}
					export class BelowAll extends com.google.common.collect.Cut<java.lang.Comparable<any>> {
						public static class: java.lang.Class<com.google.common.collect.Cut.BelowAll>;
						public compareTo(that: com.google.common.collect.Cut<any>): number;
						public hashCode(): number;
						public compareTo(o: com.google.common.collect.Cut<java.lang.Comparable<any>>): number;
						public toString(): string;
					}
					export class BelowValue<C>  extends com.google.common.collect.Cut<any> {
						public static class: java.lang.Class<com.google.common.collect.Cut.BelowValue<any>>;
						public hashCode(): number;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class DenseImmutableTable<R, C, V>  extends com.google.common.collect.RegularImmutableTable<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.DenseImmutableTable<any,any,any>>;
					public column(columnKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public rowMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					public rowKeySet(): java.util.Set<any>;
					/** @deprecated */
					public put(rowKey: any, columnKey: any, value: any): any;
					public columnKeySet(): com.google.common.collect.ImmutableSet<any>;
					public size(): number;
					public rowKeySet(): com.google.common.collect.ImmutableSet<any>;
					public containsColumn(columnKey: any): boolean;
					public clear(): void;
					public cellSet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Table.Cell<any,any,any>>;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public containsRow(rowKey: any): boolean;
					public columnKeySet(): java.util.Set<any>;
					public hashCode(): number;
					/** @deprecated */
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public get(rowKey: any, columnKey: any): any;
					public row(object0: any): java.util.Map<any,any>;
					public row(rowKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public columnMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					/** @deprecated */
					public remove(rowKey: any, columnKey: any): any;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public column(object0: any): java.util.Map<any,any>;
				}
				export module DenseImmutableTable {
					export class Column extends com.google.common.collect.DenseImmutableTable.ImmutableArrayMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.DenseImmutableTable.Column>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public values(): com.google.common.collect.ImmutableCollection<any>;
						/** @deprecated */
						public putAll(map: java.util.Map<any,any>): void;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						/** @deprecated */
						public put(k: any, v: any): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public put(k: any, v: any): any;
						public size(): number;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public keySet(): com.google.common.collect.ImmutableSet<any>;
						public remove(o: any): any;
						/** @deprecated */
						public remove(o: any): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class ColumnMap extends com.google.common.collect.DenseImmutableTable.ImmutableArrayMap<any,com.google.common.collect.ImmutableMap<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.DenseImmutableTable.ColumnMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public values(): com.google.common.collect.ImmutableCollection<any>;
						/** @deprecated */
						public putAll(map: java.util.Map<any,any>): void;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						/** @deprecated */
						public put(k: any, v: any): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public put(k: any, v: any): any;
						public size(): number;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public keySet(): com.google.common.collect.ImmutableSet<any>;
						public remove(o: any): any;
						/** @deprecated */
						public remove(o: any): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export abstract class ImmutableArrayMap<K, V>  extends com.google.common.collect.ImmutableMap.IteratorBasedImmutableMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.DenseImmutableTable.ImmutableArrayMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public values(): com.google.common.collect.ImmutableCollection<any>;
						/** @deprecated */
						public putAll(map: java.util.Map<any,any>): void;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						/** @deprecated */
						public put(k: any, v: any): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public get(object0: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public put(k: any, v: any): any;
						public size(): number;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public keySet(): com.google.common.collect.ImmutableSet<any>;
						public remove(o: any): any;
						/** @deprecated */
						public remove(o: any): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class Row extends com.google.common.collect.DenseImmutableTable.ImmutableArrayMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.DenseImmutableTable.Row>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public values(): com.google.common.collect.ImmutableCollection<any>;
						/** @deprecated */
						public putAll(map: java.util.Map<any,any>): void;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						/** @deprecated */
						public put(k: any, v: any): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public put(k: any, v: any): any;
						public size(): number;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public keySet(): com.google.common.collect.ImmutableSet<any>;
						public remove(o: any): any;
						/** @deprecated */
						public remove(o: any): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class RowMap extends com.google.common.collect.DenseImmutableTable.ImmutableArrayMap<any,com.google.common.collect.ImmutableMap<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.DenseImmutableTable.RowMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public values(): com.google.common.collect.ImmutableCollection<any>;
						/** @deprecated */
						public putAll(map: java.util.Map<any,any>): void;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						/** @deprecated */
						public put(k: any, v: any): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public put(k: any, v: any): any;
						public size(): number;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public keySet(): com.google.common.collect.ImmutableSet<any>;
						public remove(o: any): any;
						/** @deprecated */
						public remove(o: any): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class DescendingImmutableSortedMultiset<E>  extends com.google.common.collect.ImmutableSortedMultiset<any> {
					public static class: java.lang.Class<com.google.common.collect.DescendingImmutableSortedMultiset<any>>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public headMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public descendingMultiset(): com.google.common.collect.ImmutableSortedMultiset<any>;
					public subMultiset(object0: any, boundType1: com.google.common.collect.BoundType, object2: any, boundType3: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public elementSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public remove(element: any, occurrences: number): number;
					/** @deprecated */
					public setCount(element: any, count: number): number;
					/** @deprecated */
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public tailMultiset(lowerBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public tailMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					/** @deprecated */
					public clear(): void;
					public headMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public elementSet(): java.util.Set<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public add(element: any, occurrences: number): number;
					/** @deprecated */
					public add(element: any, occurrences: number): number;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public tailMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public subMultiset(lowerBound: any, lowerBoundType: com.google.common.collect.BoundType, upperBound: any, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public setCount(element: any, count: number): number;
					public headMultiset(upperBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public entrySet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset.Entry<any>>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					/** @deprecated */
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					public elementSet(): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					/** @deprecated */
					public remove(element: any, occurrences: number): number;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public count(element: any): number;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class DescendingImmutableSortedSet<E>  extends com.google.common.collect.ImmutableSortedSet<any> {
					public static class: java.lang.Class<com.google.common.collect.DescendingImmutableSortedSet<any>>;
					public ceiling(e: any): any;
					public isEmpty(): boolean;
					/** @deprecated */
					public pollLast(): any;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public headSet(object0: any): java.util.SortedSet<any>;
					public descendingIterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public lower(element: any): any;
					public toArray(): native.Array<any>;
					public remove(object: any): boolean;
					public higher(e: any): any;
					public subSet(object0: any, object1: any): java.util.SortedSet<any>;
					public subSet(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableSet<any>;
					public pollFirst(): any;
					/** @deprecated */
					public clear(): void;
					public descendingSet(): java.util.NavigableSet<any>;
					public ceiling(element: any): any;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public headSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public lower(e: any): any;
					public contains(object0: any): boolean;
					/** @deprecated */
					public pollFirst(): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public headSet(toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(object0: any): java.util.SortedSet<any>;
					public floor(e: any): any;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public descendingSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public descendingIterator(): java.util.Iterator<any>;
					public removeIf(filter: any /* any*/): boolean;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public pollLast(): any;
					public stream(): java.util.stream.Stream<any>;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public floor(element: any): any;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public higher(element: any): any;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public tailSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class DescendingMultiset<E>  extends com.google.common.collect.ForwardingMultiset<any> implements com.google.common.collect.SortedMultiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.DescendingMultiset<any>>;
					public delegate(): java.util.Collection<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public headMultiset(toElement: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public elementSet(): java.util.SortedSet<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(element: any, occurrences: number): number;
					public subMultiset(fromElement: any, fromBoundType: com.google.common.collect.BoundType, toElement: any, toBoundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public hashCode(): number;
					public delegate(): any;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public addAll(collection: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public tailMultiset(fromElement: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public count(element: any): number;
					public delegate(): com.google.common.collect.Multiset<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class DiscreteDomain<C>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.DiscreteDomain<any>>;
					public next(comparable0: C): C;
					public constructor();
					public maxValue(): C;
					public minValue(): C;
					public static integers(): com.google.common.collect.DiscreteDomain<java.lang.Integer>;
					public static bigIntegers(): com.google.common.collect.DiscreteDomain<java.math.BigInteger>;
					public distance(comparable0: C, comparable1: C): number;
					public static longs(): com.google.common.collect.DiscreteDomain<java.lang.Long>;
					public previous(comparable0: C): C;
				}
				export module DiscreteDomain {
					export class BigIntegerDomain extends com.google.common.collect.DiscreteDomain<java.math.BigInteger> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.DiscreteDomain.BigIntegerDomain>;
						public next(value: java.math.BigInteger): java.math.BigInteger;
						public previous(value: java.math.BigInteger): java.math.BigInteger;
						public distance(start: java.math.BigInteger, end: java.math.BigInteger): number;
						public previous(comparable0: any): any;
						public distance(comparable0: any, comparable1: any): number;
						public toString(): string;
						public next(comparable0: any): any;
					}
					export class IntegerDomain extends com.google.common.collect.DiscreteDomain<java.lang.Integer> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.DiscreteDomain.IntegerDomain>;
						public maxValue(): java.lang.Integer;
						public previous(comparable0: any): any;
						public minValue(): java.lang.Integer;
						public next(value: java.lang.Integer): java.lang.Integer;
						public previous(value: java.lang.Integer): java.lang.Integer;
						public maxValue(): any;
						public distance(comparable0: any, comparable1: any): number;
						public distance(start: java.lang.Integer, end: java.lang.Integer): number;
						public toString(): string;
						public minValue(): any;
						public next(comparable0: any): any;
					}
					export class LongDomain extends com.google.common.collect.DiscreteDomain<java.lang.Long> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.DiscreteDomain.LongDomain>;
						public distance(start: java.lang.Long, end: java.lang.Long): number;
						public maxValue(): java.lang.Long;
						public minValue(): java.lang.Long;
						public previous(comparable0: any): any;
						public next(value: java.lang.Long): java.lang.Long;
						public previous(value: java.lang.Long): java.lang.Long;
						public maxValue(): any;
						public distance(comparable0: any, comparable1: any): number;
						public toString(): string;
						public minValue(): any;
						public next(comparable0: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class EmptyContiguousSet<C>  extends com.google.common.collect.ContiguousSet<any> {
					public static class: java.lang.Class<com.google.common.collect.EmptyContiguousSet<any>>;
					public ceiling(e: any): any;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public isEmpty(): boolean;
					/** @deprecated */
					public pollLast(): any;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public headSet(object0: any): java.util.SortedSet<any>;
					public descendingIterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public remove(object: any): boolean;
					public higher(e: any): any;
					public subSet(object0: any, object1: any): java.util.SortedSet<any>;
					public subSet(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableSet<any>;
					public range(boundType0: com.google.common.collect.BoundType, boundType1: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public pollFirst(): any;
					/** @deprecated */
					public clear(): void;
					public range(): com.google.common.collect.Range<any>;
					public descendingSet(): java.util.NavigableSet<any>;
					public first(): any;
					public range(lowerBoundType: com.google.common.collect.BoundType, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public last(): any;
					public asList(): com.google.common.collect.ImmutableList<any>;
					public intersection(other: com.google.common.collect.ContiguousSet<any>): com.google.common.collect.ContiguousSet<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ContiguousSet<any>;
					public headSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ContiguousSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public lower(e: any): any;
					public contains(object0: any): boolean;
					/** @deprecated */
					public pollFirst(): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public headSet(toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public intersection(contiguousSet0: com.google.common.collect.ContiguousSet<any>): com.google.common.collect.ContiguousSet<any>;
					public tailSet(object0: any): java.util.SortedSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public floor(e: any): any;
					public add(e: any): boolean;
					public descendingSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public descendingIterator(): java.util.Iterator<any>;
					public removeIf(filter: any /* any*/): boolean;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public headSet(toElement: any): com.google.common.collect.ContiguousSet<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public pollLast(): any;
					public stream(): java.util.stream.Stream<any>;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public tailSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
				}
				export module EmptyContiguousSet {
					export class SerializedForm<C>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.EmptyContiguousSet.SerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class EmptyImmutableListMultimap extends com.google.common.collect.ImmutableListMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.EmptyImmutableListMultimap>;
					public get(object0: any): com.google.common.collect.ImmutableCollection<any>;
					public containsKey(key: any): boolean;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
					/** @deprecated */
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public keys(): com.google.common.collect.ImmutableMultiset<any>;
					public isEmpty(): boolean;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public get(key: any): com.google.common.collect.ImmutableList<any>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					/** @deprecated */
					public put(key: any, value: any): boolean;
					/** @deprecated */
					public remove(key: any, value: any): boolean;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public get(object0: any): java.util.List<any>;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableList<any>;
					public asMap(): com.google.common.collect.ImmutableMap<any,java.util.Collection<any>>;
					public removeAll(object0: any): java.util.List<any>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.List<any>;
					public entries(): com.google.common.collect.ImmutableCollection<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					/** @deprecated */
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public removeAll(object0: any): java.util.Collection<any>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableCollection<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class EmptyImmutableSetMultimap extends com.google.common.collect.ImmutableSetMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.EmptyImmutableSetMultimap>;
					public containsKey(key: any): boolean;
					public get(object0: any): com.google.common.collect.ImmutableCollection<any>;
					/** @deprecated */
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public keys(): com.google.common.collect.ImmutableMultiset<any>;
					public isEmpty(): boolean;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					/** @deprecated */
					public put(key: any, value: any): boolean;
					public equals(object: any): boolean;
					/** @deprecated */
					public remove(key: any, value: any): boolean;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public asMap(): com.google.common.collect.ImmutableMap<any,java.util.Collection<any>>;
					public entries(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public entries(): com.google.common.collect.ImmutableCollection<java.util.Map.Entry<any,any>>;
					public get(object0: any): java.util.Set<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					/** @deprecated */
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet<any>;
					public get(key: any): com.google.common.collect.ImmutableSet<any>;
					public removeAll(object0: any): java.util.Set<any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableCollection<any>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Set<any>;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableSet<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class EnumBiMap<K, V>  extends com.google.common.collect.AbstractBiMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.EnumBiMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public inverse(): com.google.common.collect.BiMap<any,any>;
					public size(): number;
					public keyType(): java.lang.Class<any>;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public static create(map: java.util.Map<any,any>): com.google.common.collect.EnumBiMap<any,any>;
					public remove(key: any): any;
					public putAll(map: java.util.Map<any,any>): void;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public values(): java.util.Set<any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public forcePut(key: any, value: any): any;
					public static create(keyType: java.lang.Class<any>, valueType: java.lang.Class<any>): com.google.common.collect.EnumBiMap<any,any>;
					public valueType(): java.lang.Class<any>;
					public put(key: any, value: any): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class EnumHashBiMap<K, V>  extends com.google.common.collect.AbstractBiMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.EnumHashBiMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public inverse(): com.google.common.collect.BiMap<any,any>;
					public size(): number;
					public static create(map: java.util.Map<any,any>): com.google.common.collect.EnumHashBiMap<any,any>;
					public keyType(): java.lang.Class<any>;
					public remove(key: any, value: any): boolean;
					public static create(keyType: java.lang.Class<any>): com.google.common.collect.EnumHashBiMap<any,any>;
					public equals(object: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public remove(key: any): any;
					public putAll(map: java.util.Map<any,any>): void;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public values(): java.util.Set<any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public forcePut(key: any, value: any): any;
					public put(key: any, value: any): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class EnumMultiset<E>  extends com.google.common.collect.AbstractMultiset<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.EnumMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public static create(elements: java.lang.Iterable<any>): com.google.common.collect.EnumMultiset<any>;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(element: any, occurrences: number): number;
					public containsAll(c: java.util.Collection<any>): boolean;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public static create(elements: java.lang.Iterable<any>, type: java.lang.Class<any>): com.google.common.collect.EnumMultiset<any>;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public static create(type: java.lang.Class<any>): com.google.common.collect.EnumMultiset<any>;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public count(element: any): number;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
				}
				export module EnumMultiset {
					export abstract class Itr<T>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.EnumMultiset.Itr<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class EvictingQueue<E>  extends com.google.common.collect.ForwardingQueue<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.EvictingQueue<any>>;
					public delegate(): java.util.Collection<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public peek(): any;
					public spliterator(): java.util.Spliterator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public add(element: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public iterator(): java.util.Iterator<any>;
					public poll(): any;
					public delegate(): java.util.Queue<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remainingCapacity(): number;
					public hashCode(): number;
					public static create(maxSize: number): com.google.common.collect.EvictingQueue<any>;
					public delegate(): any;
					public offer(o: any): boolean;
					public remove(object: any): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public addAll(collection: java.util.Collection<any>): boolean;
					public offer(e: any): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public remove(): any;
					public element(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ExplicitOrdering<T>  extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ExplicitOrdering<any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(left: any, right: any): number;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredEntryMultimap<K, V>  extends com.google.common.collect.AbstractMultimap<any,any> implements com.google.common.collect.FilteredMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.FilteredEntryMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public entryPredicate(): com.google.common.base.Predicate<any>;
					public unfiltered(): com.google.common.collect.Multimap<any,any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
				}
				export module FilteredEntryMultimap {
					export class AsMap extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,java.util.Collection<any>> {
						public static class: java.lang.Class<com.google.common.collect.FilteredEntryMultimap.AsMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public get(key: any): java.util.Collection<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public remove(key: any): java.util.Collection<any>;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class Keys extends com.google.common.collect.Multimaps.Keys<any,any> {
						public static class: java.lang.Class<com.google.common.collect.FilteredEntryMultimap.Keys>;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public remove(key: any, occurrences: number): number;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public count(element: any): number;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public setCount(element: any, count: number): number;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public remove(element: any, occurrences: number): number;
						public toString(): string;
						public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
						public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
						public addAll(elementsToAdd: java.util.Collection<any>): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public equals(object: any): boolean;
						public add(element: any, occurrences: number): number;
						public toArray(): native.Array<any>;
					}
					export class ValuePredicate extends com.google.common.base.Predicate<any> {
						public static class: java.lang.Class<com.google.common.collect.FilteredEntryMultimap.ValuePredicate>;
						public apply(value: any): boolean;
						public equals(obj: any): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredEntrySetMultimap<K, V>  extends com.google.common.collect.FilteredEntryMultimap<any,any> implements com.google.common.collect.FilteredSetMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.FilteredEntrySetMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public unfiltered(): com.google.common.collect.SetMultimap<any,any>;
					public unfiltered(): com.google.common.collect.Multimap<any,any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public removeAll(key: any): java.util.Set<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public entryPredicate(): com.google.common.base.Predicate<any>;
					public get(key: any): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredKeyListMultimap<K, V>  extends com.google.common.collect.FilteredKeyMultimap<any,any> implements com.google.common.collect.ListMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.FilteredKeyListMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public removeAll(key: any): java.util.List<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public get(key: any): java.util.List<any>;
					public unfiltered(): com.google.common.collect.Multimap<any,any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public unfiltered(): com.google.common.collect.ListMultimap<any,any>;
					public entryPredicate(): com.google.common.base.Predicate<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredKeyMultimap<K, V>  extends com.google.common.collect.AbstractMultimap<any,any> implements com.google.common.collect.FilteredMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.FilteredKeyMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public entryPredicate(): com.google.common.base.Predicate<any>;
					public unfiltered(): com.google.common.collect.Multimap<any,any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
				}
				export module FilteredKeyMultimap {
					export class AddRejectingList<K, V>  extends com.google.common.collect.ForwardingList<any> {
						public static class: java.lang.Class<com.google.common.collect.FilteredKeyMultimap.AddRejectingList<any,any>>;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public lastIndexOf(element: any): number;
						public addAll(index: number, elements: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public delegate(): java.util.List<any>;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public set(index: number, element: any): any;
						public delegate(): java.util.Collection<any>;
						public get(index: number): any;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): any;
						public remove(object: any): boolean;
						public replaceAll(operator: any /* any*/): void;
						public indexOf(element: any): number;
						public add(v: any): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
					export class AddRejectingSet<K, V>  extends com.google.common.collect.ForwardingSet<any> {
						public static class: java.lang.Class<com.google.common.collect.FilteredKeyMultimap.AddRejectingSet<any,any>>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public delegate(): java.util.Collection<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public delegate(): java.util.Set<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
					export class Entries extends com.google.common.collect.ForwardingCollection<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.FilteredKeyMultimap.Entries>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public delegate(): java.util.Collection<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public delegate(): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredKeySetMultimap<K, V>  extends com.google.common.collect.FilteredKeyMultimap<any,any> implements com.google.common.collect.FilteredSetMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.FilteredKeySetMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public unfiltered(): com.google.common.collect.SetMultimap<any,any>;
					public unfiltered(): com.google.common.collect.Multimap<any,any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public removeAll(key: any): java.util.Set<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public entryPredicate(): com.google.common.base.Predicate<any>;
					public get(key: any): java.util.Set<any>;
				}
				export module FilteredKeySetMultimap {
					export class EntrySet extends com.google.common.collect.FilteredKeyMultimap.Entries implements java.util.Set<java.util.Map.Entry<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.FilteredKeySetMultimap.EntrySet>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public equals(o: any): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredMultimap<K, V>  extends com.google.common.collect.Multimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.FilteredMultimap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.FilteredMultimap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						unfiltered(): com.google.common.collect.Multimap<any,any>;
						entryPredicate(): com.google.common.base.Predicate<any>;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						containsEntry(object0: any, object1: any): boolean;
						put(object0: any, object1: any): boolean;
						remove(object0: any, object1: any): boolean;
						putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
						putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
						removeAll(object0: any): java.util.Collection<any>;
						clear(): void;
						get(object0: any): java.util.Collection<any>;
						keySet(): java.util.Set<any>;
						keys(): com.google.common.collect.Multiset<any>;
						values(): java.util.Collection<any>;
						entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public values(): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public put(object0: any, object1: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public keySet(): java.util.Set<any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public clear(): void;
					public entryPredicate(): com.google.common.base.Predicate<any>;
					public containsEntry(object0: any, object1: any): boolean;
					public remove(object0: any, object1: any): boolean;
					public putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
					public unfiltered(): com.google.common.collect.Multimap<any,any>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
					public hashCode(): number;
					public containsKey(object0: any): boolean;
					public containsValue(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredMultimapValues<K, V>  extends java.util.AbstractCollection<any> {
					public static class: java.lang.Class<com.google.common.collect.FilteredMultimapValues<any,any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					public retainAll(c: java.util.Collection<any>): boolean;
					public size(): number;
					public contains(o: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public removeAll(c: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(o: any): boolean;
					public stream(): java.util.stream.Stream<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class FilteredSetMultimap<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.FilteredSetMultimap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.FilteredSetMultimap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						unfiltered(): com.google.common.collect.SetMultimap<K,V>;
						unfiltered(): com.google.common.collect.Multimap<K,V>;
						entryPredicate(): com.google.common.base.Predicate<any>;
						get(object0: K): java.util.Set<V>;
						removeAll(object0: any): java.util.Set<V>;
						replaceValues(object0: K, iterable1: java.lang.Iterable<any>): java.util.Set<V>;
						entries(): java.util.Set<java.util.Map.Entry<K,V>>;
						asMap(): java.util.Map<K,java.util.Collection<V>>;
						equals(object0: any): boolean;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						containsEntry(object0: any, object1: any): boolean;
						put(object0: K, object1: V): boolean;
						remove(object0: any, object1: any): boolean;
						putAll(object0: K, iterable1: java.lang.Iterable<any>): boolean;
						putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
						replaceValues(object0: K, iterable1: java.lang.Iterable<any>): java.util.Collection<V>;
						removeAll(object0: any): java.util.Collection<V>;
						clear(): void;
						get(object0: K): java.util.Collection<V>;
						keySet(): java.util.Set<K>;
						keys(): com.google.common.collect.Multiset<K>;
						values(): java.util.Collection<V>;
						entries(): java.util.Collection<java.util.Map.Entry<K,V>>;
						asMap(): java.util.Map<K,java.util.Collection<V>>;
						equals(object0: any): boolean;
						hashCode(): number;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						containsEntry(object0: any, object1: any): boolean;
						put(object0: K, object1: V): boolean;
						remove(object0: any, object1: any): boolean;
						putAll(object0: K, iterable1: java.lang.Iterable<any>): boolean;
						putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
						replaceValues(object0: K, iterable1: java.lang.Iterable<any>): java.util.Collection<V>;
						removeAll(object0: any): java.util.Collection<V>;
						clear(): void;
						get(object0: K): java.util.Collection<V>;
						keySet(): java.util.Set<K>;
						keys(): com.google.common.collect.Multiset<K>;
						values(): java.util.Collection<V>;
						entries(): java.util.Collection<java.util.Map.Entry<K,V>>;
						asMap(): java.util.Map<K,java.util.Collection<V>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public unfiltered(): com.google.common.collect.SetMultimap<K,V>;
					public equals(obj: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<K,V>>;
					public isEmpty(): boolean;
					public values(): java.util.Collection<V>;
					public putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(object0: K, iterable1: java.lang.Iterable<any>): java.util.Collection<V>;
					public keySet(): java.util.Set<K>;
					public size(): number;
					public replaceValues(object0: K, iterable1: java.lang.Iterable<any>): java.util.Set<V>;
					public keys(): com.google.common.collect.Multiset<K>;
					public unfiltered(): com.google.common.collect.Multimap<K,V>;
					public clear(): void;
					public containsEntry(object0: any, object1: any): boolean;
					public remove(object0: any, object1: any): boolean;
					public removeAll(object0: any): java.util.Set<V>;
					public hashCode(): number;
					public containsValue(object0: any): boolean;
					public putAll(object0: K, iterable1: java.lang.Iterable<any>): boolean;
					public get(object0: K): java.util.Set<V>;
					public removeAll(object0: any): java.util.Collection<V>;
					public entries(): java.util.Collection<java.util.Map.Entry<K,V>>;
					public get(object0: K): java.util.Collection<V>;
					public put(object0: K, object1: V): boolean;
					public entryPredicate(): com.google.common.base.Predicate<any>;
					public asMap(): java.util.Map<K,java.util.Collection<V>>;
					public containsKey(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class FluentIterable<E>  extends java.lang.Iterable<any> {
					public static class: java.lang.Class<com.google.common.collect.FluentIterable<any>>;
					public append(elements: native.Array<any>): com.google.common.collect.FluentIterable<any>;
					public contains(target: any): boolean;
					public toArray(type: java.lang.Class<any>): native.Array<any>;
					public isEmpty(): boolean;
					public static concat(a: java.lang.Iterable<any>, b: java.lang.Iterable<any>, c: java.lang.Iterable<any>, d: java.lang.Iterable<any>): com.google.common.collect.FluentIterable<any>;
					public spliterator(): java.util.Spliterator<any>;
					public static concat(a: java.lang.Iterable<any>, b: java.lang.Iterable<any>, c: java.lang.Iterable<any>): com.google.common.collect.FluentIterable<any>;
					public uniqueIndex(keyFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public size(): number;
					public get(position: number): any;
					public toMap(valueFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public firstMatch(predicate: com.google.common.base.Predicate<any>): com.google.common.base.Optional<any>;
					public iterator(): java.util.Iterator<any>;
					public static of(): com.google.common.collect.FluentIterable<any>;
					public toSortedSet(comparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public toString(): string;
					public transformAndConcat(function0: com.google.common.base.Function<any,any>): com.google.common.collect.FluentIterable<any>;
					public constructor();
					public index(keyFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableListMultimap<any,any>;
					public limit(maxSize: number): com.google.common.collect.FluentIterable<any>;
					public first(): com.google.common.base.Optional<any>;
					public skip(numberToSkip: number): com.google.common.collect.FluentIterable<any>;
					public append(other: java.lang.Iterable<any>): com.google.common.collect.FluentIterable<any>;
					public static from(elements: native.Array<any>): com.google.common.collect.FluentIterable<any>;
					public forEach(action: any /* any*/): void;
					public toMultiset(): com.google.common.collect.ImmutableMultiset<any>;
					public filter(type: java.lang.Class<any>): com.google.common.collect.FluentIterable<any>;
					public static from(iterable: java.lang.Iterable<any>): com.google.common.collect.FluentIterable<any>;
					public copyInto(collection: java.util.Collection<any>): java.util.Collection<any>;
					public static of(element: any, elements: native.Array<any>): com.google.common.collect.FluentIterable<any>;
					public toList(): com.google.common.collect.ImmutableList<any>;
					public static concat(inputs: native.Array<java.lang.Iterable<any>>): com.google.common.collect.FluentIterable<any>;
					public static concat(a: java.lang.Iterable<any>, b: java.lang.Iterable<any>): com.google.common.collect.FluentIterable<any>;
					public join(joiner: com.google.common.base.Joiner): string;
					public static concat(inputs: java.lang.Iterable<any>): com.google.common.collect.FluentIterable<any>;
					public filter(predicate: com.google.common.base.Predicate<any>): com.google.common.collect.FluentIterable<any>;
					/** @deprecated */
					public static from(iterable: com.google.common.collect.FluentIterable<any>): com.google.common.collect.FluentIterable<any>;
					public last(): com.google.common.base.Optional<any>;
					public toSet(): com.google.common.collect.ImmutableSet<any>;
					public toSortedList(comparator: java.util.Comparator<any>): com.google.common.collect.ImmutableList<any>;
					public cycle(): com.google.common.collect.FluentIterable<any>;
					public transform(function0: com.google.common.base.Function<any,any>): com.google.common.collect.FluentIterable<any>;
					public allMatch(predicate: com.google.common.base.Predicate<any>): boolean;
					public anyMatch(predicate: com.google.common.base.Predicate<any>): boolean;
				}
				export module FluentIterable {
					export class FromIterableFunction<E>  extends com.google.common.base.Function<java.lang.Iterable<any>,com.google.common.collect.FluentIterable<any>> {
						public static class: java.lang.Class<com.google.common.collect.FluentIterable.FromIterableFunction<any>>;
						public equals(obj: any): boolean;
						public apply(fromObject: java.lang.Iterable<any>): com.google.common.collect.FluentIterable<any>;
						public apply(object0: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingBlockingDeque<E>  extends com.google.common.collect.ForwardingDeque<any> implements java.util.concurrent.BlockingDeque<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingBlockingDeque<any>>;
					public delegate(): java.util.Collection<any>;
					public delegate(): java.util.Deque<any>;
					public isEmpty(): boolean;
					public peek(): any;
					public spliterator(): java.util.Spliterator<any>;
					public put(e: any): void;
					public size(): number;
					public pollFirst(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					public add(element: any): boolean;
					public offerLast(e: any): boolean;
					public offerLast(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public takeFirst(): any;
					public iterator(): java.util.Iterator<any>;
					public peekFirst(): any;
					public constructor();
					public toArray(): native.Array<any>;
					public getLast(): any;
					public getFirst(): any;
					public delegate(): java.util.concurrent.BlockingDeque<any>;
					public remove(object: any): boolean;
					public takeLast(): any;
					public offer(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
					public pollFirst(): any;
					public addAll(collection: java.util.Collection<any>): boolean;
					public drainTo(c: java.util.Collection<any>): number;
					public drainTo(c: java.util.Collection<any>, maxElements: number): number;
					public addLast(e: any): void;
					public element(): any;
					public remove(): any;
					public equals(obj: any): boolean;
					public pollLast(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					public removeLast(): any;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public poll(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					public addFirst(e: any): void;
					public removeFirstOccurrence(o: any): boolean;
					public poll(): any;
					public putFirst(e: any): void;
					public delegate(): java.util.Queue<any>;
					public clear(): void;
					public putLast(e: any): void;
					public remainingCapacity(): number;
					public removeFirst(): any;
					public hashCode(): number;
					public delegate(): any;
					public pop(): any;
					public offer(o: any): boolean;
					public forEach(action: any /* any*/): void;
					public toArray(array: native.Array<any>): native.Array<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public take(): any;
					public offerFirst(e: any): boolean;
					public descendingIterator(): java.util.Iterator<any>;
					public push(e: any): void;
					public removeLastOccurrence(o: any): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public offerFirst(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
					public pollLast(): any;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public peekLast(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingCollection<E>  extends com.google.common.collect.ForwardingObject implements java.util.Collection<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingCollection<any>>;
					public delegate(): java.util.Collection<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public standardRetainAll(collection: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public standardRemoveAll(collection: java.util.Collection<any>): boolean;
					public add(element: any): boolean;
					public standardToArray(array: native.Array<any>): native.Array<any>;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public iterator(): java.util.Iterator<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public standardIsEmpty(): boolean;
					public clear(): void;
					public standardToString(): string;
					public standardContainsAll(collection: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public delegate(): any;
					public standardClear(): void;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public addAll(collection: java.util.Collection<any>): boolean;
					public standardRemove(object: any): boolean;
					public standardAddAll(collection: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public standardToArray(): native.Array<any>;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public standardContains(object: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingConcurrentMap<K, V>  extends com.google.common.collect.ForwardingMap<any,any> implements java.util.concurrent.ConcurrentMap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingConcurrentMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public delegate(): java.util.concurrent.ConcurrentMap<any,any>;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public constructor();
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingDeque<E>  extends com.google.common.collect.ForwardingQueue<any> implements java.util.Deque<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingDeque<any>>;
					public delegate(): java.util.Collection<any>;
					public delegate(): java.util.Deque<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public peek(): any;
					public spliterator(): java.util.Spliterator<any>;
					public removeLast(): any;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public addFirst(e: any): void;
					public add(element: any): boolean;
					public offerLast(e: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public removeFirstOccurrence(o: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public poll(): any;
					public peekFirst(): any;
					public delegate(): java.util.Queue<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public getLast(): any;
					public clear(): void;
					public getFirst(): any;
					public removeFirst(): any;
					public hashCode(): number;
					public delegate(): any;
					public pop(): any;
					public offer(o: any): boolean;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public pollFirst(): any;
					public offerFirst(e: any): boolean;
					public addAll(collection: java.util.Collection<any>): boolean;
					public descendingIterator(): java.util.Iterator<any>;
					public push(e: any): void;
					public removeLastOccurrence(o: any): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public pollLast(): any;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public addLast(e: any): void;
					public element(): any;
					public peekLast(): any;
					public remove(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ForwardingImmutableCollection extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ForwardingImmutableCollection>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingImmutableList<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ForwardingImmutableList<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingImmutableMap<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ForwardingImmutableMap<any,any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingImmutableSet<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ForwardingImmutableSet<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingIterator<T>  extends com.google.common.collect.ForwardingObject implements java.util.Iterator<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingIterator<any>>;
					public next(): any;
					public constructor();
					public delegate(): java.util.Iterator<any>;
					public delegate(): any;
					public hasNext(): boolean;
					public remove(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingList<E>  extends com.google.common.collect.ForwardingCollection<any> implements java.util.List<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingList<any>>;
					public delegate(): java.util.Collection<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public subList(fromIndex: number, toIndex: number): java.util.List<any>;
					public get(index: number): any;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public set(index: number, element: any): any;
					public size(): number;
					public remove(index: number): any;
					public standardAddAll(index: number, elements: java.lang.Iterable<any>): boolean;
					public add(element: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public standardHashCode(): number;
					public indexOf(element: any): number;
					public constructor();
					public standardListIterator(start: number): java.util.ListIterator<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public lastIndexOf(element: any): number;
					public listIterator(index: number): java.util.ListIterator<any>;
					public standardAdd(element: any): boolean;
					public standardLastIndexOf(element: any): number;
					public hashCode(): number;
					public delegate(): any;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public standardIterator(): java.util.Iterator<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public standardEquals(object: any): boolean;
					public addAll(collection: java.util.Collection<any>): boolean;
					public sort(c: java.util.Comparator<any>): void;
					public standardIndexOf(element: any): number;
					public standardAddAll(collection: java.util.Collection<any>): boolean;
					public add(index: number, element: any): void;
					public removeIf(filter: any /* any*/): boolean;
					public standardSubList(fromIndex: number, toIndex: number): java.util.List<any>;
					public delegate(): java.util.List<any>;
					public addAll(index: number, elements: java.util.Collection<any>): boolean;
					public listIterator(): java.util.ListIterator<any>;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public standardListIterator(): java.util.ListIterator<any>;
					public replaceAll(operator: any /* any*/): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingListIterator<E>  extends com.google.common.collect.ForwardingIterator<any> implements java.util.ListIterator<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingListIterator<any>>;
					public previousIndex(): number;
					public nextIndex(): number;
					public next(): any;
					public previous(): any;
					public delegate(): java.util.Iterator<any>;
					public add(element: any): void;
					public delegate(): java.util.ListIterator<any>;
					public hasNext(): boolean;
					public remove(): void;
					public set(element: any): void;
					public constructor();
					public hasPrevious(): boolean;
					public delegate(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingListMultimap<K, V>  extends com.google.common.collect.ForwardingMultimap<any,any> implements com.google.common.collect.ListMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingListMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public removeAll(key: any): java.util.List<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public constructor();
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public get(key: any): java.util.List<any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public delegate(): any;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
					public delegate(): com.google.common.collect.ListMultimap<any,any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public delegate(): com.google.common.collect.Multimap<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingMap<K, V>  extends com.google.common.collect.ForwardingObject implements java.util.Map<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public standardRemove(key: any): any;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public standardContainsKey(key: any): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public standardPutAll(map: java.util.Map<any,any>): void;
					public size(): number;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public standardHashCode(): number;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public constructor();
					public keySet(): java.util.Set<any>;
					public standardIsEmpty(): boolean;
					public clear(): void;
					public standardToString(): string;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public standardClear(): void;
					public standardContainsValue(value: any): boolean;
					public standardEquals(object: any): boolean;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<any,any>;
				}
				export module ForwardingMap {
					export abstract class StandardEntrySet extends com.google.common.collect.Maps.EntrySet<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingMap.StandardEntrySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public constructor();
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public constructor(this0: com.google.common.collect.ForwardingMap<any,any>);
						public toArray(): native.Array<any>;
					}
					export class StandardKeySet extends com.google.common.collect.Maps.KeySet<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingMap.StandardKeySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public constructor();
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public constructor(this0: com.google.common.collect.ForwardingMap<any,any>);
						public toArray(): native.Array<any>;
					}
					export class StandardValues extends com.google.common.collect.Maps.Values<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingMap.StandardValues>;
						public addAll(c: java.util.Collection<any>): boolean;
						public constructor();
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public constructor(this0: com.google.common.collect.ForwardingMap<any,any>);
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingMapEntry<K, V>  extends com.google.common.collect.ForwardingObject implements java.util.Map.Entry<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingMapEntry<any,any>>;
					public delegate(): java.util.Map.Entry<any,any>;
					public getValue(): any;
					public equals(obj: any): boolean;
					public setValue(value: any): any;
					public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparingByValue(): java.util.Comparator<any>;
					public standardEquals(object: any): boolean;
					public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public standardHashCode(): number;
					public constructor();
					public static comparingByKey(): java.util.Comparator<any>;
					public standardToString(): string;
					public getKey(): any;
					public hashCode(): number;
					public delegate(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingMultimap<K, V>  extends com.google.common.collect.ForwardingObject implements com.google.common.collect.Multimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public delegate(): com.google.common.collect.Multimap<any,any>;
					public get(key: any): java.util.Collection<any>;
					public constructor();
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public delegate(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingMultiset<E>  extends com.google.common.collect.ForwardingCollection<any> implements com.google.common.collect.Multiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingMultiset<any>>;
					public delegate(): java.util.Collection<any>;
					public standardCount(object: any): number;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public standardRemoveAll(elementsToRemove: java.util.Collection<any>): boolean;
					public size(): number;
					public standardRetainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public add(element: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public iterator(): java.util.Iterator<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public remove(element: any, occurrences: number): number;
					public standardClear(): void;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public standardIterator(): java.util.Iterator<any>;
					public standardSize(): number;
					public standardEquals(object: any): boolean;
					public addAll(collection: java.util.Collection<any>): boolean;
					public standardRemove(object: any): boolean;
					public standardSetCount(element: any, count: number): number;
					public elementSet(): java.util.Set<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public standardContains(object: any): boolean;
					public equals(obj: any): boolean;
					public standardRemove(element: any): boolean;
					public standardRetainAll(collection: java.util.Collection<any>): boolean;
					public add(element: any, occurrences: number): number;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public setCount(element: any, count: number): number;
					public standardRemoveAll(collection: java.util.Collection<any>): boolean;
					public equals(object: any): boolean;
					public standardHashCode(): number;
					public toString(): string;
					public clear(): void;
					public standardToString(): string;
					public standardAdd(element: any): boolean;
					public hashCode(): number;
					public delegate(): any;
					public forEach(action: any /* any*/): void;
					public toArray(array: native.Array<any>): native.Array<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public standardAddAll(collection: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public standardAddAll(elementsToAdd: java.util.Collection<any>): boolean;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public count(element: any): number;
					public delegate(): com.google.common.collect.Multiset<any>;
					public standardSetCount(element: any, oldCount: number, newCount: number): boolean;
				}
				export module ForwardingMultiset {
					export class StandardElementSet extends com.google.common.collect.Multisets.ElementSet<any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingMultiset.StandardElementSet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public constructor();
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public constructor(this0: com.google.common.collect.ForwardingMultiset<any>);
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingNavigableMap<K, V>  extends com.google.common.collect.ForwardingSortedMap<any,any> implements java.util.NavigableMap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingNavigableMap<any,any>>;
					public headMap(toKey: any): java.util.SortedMap<any,any>;
					public get(key: any): any;
					public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public floorEntry(key: any): java.util.Map.Entry<any,any>;
					public standardPollLastEntry(): java.util.Map.Entry<any,any>;
					public tailMap(fromKey: any): java.util.SortedMap<any,any>;
					public size(): number;
					public standardTailMap(fromKey: any): java.util.SortedMap<any,any>;
					public lowerKey(key: any): any;
					public floorKey(key: any): any;
					public standardLowerEntry(key: any): java.util.Map.Entry<any,any>;
					public remove(object: any): any;
					public constructor();
					public keySet(): java.util.Set<any>;
					public standardSubMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public standardFirstKey(): any;
					public ceilingKey(key: any): any;
					public putAll(map: java.util.Map<any,any>): void;
					public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
					public delegate(): java.util.NavigableMap<any,any>;
					public replace(key: any, value: any): any;
					public pollFirstEntry(): java.util.Map.Entry<any,any>;
					public standardLowerKey(key: any): any;
					public standardHigherEntry(key: any): java.util.Map.Entry<any,any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
					public delegate(): java.util.Map<any,any>;
					public lowerEntry(key: any): java.util.Map.Entry<any,any>;
					public containsKey(key: any): boolean;
					public pollLastEntry(): java.util.Map.Entry<any,any>;
					public standardPollFirstEntry(): java.util.Map.Entry<any,any>;
					public lastEntry(): java.util.Map.Entry<any,any>;
					public comparator(): java.util.Comparator<any>;
					public standardCeilingEntry(key: any): java.util.Map.Entry<any,any>;
					public higherEntry(key: any): java.util.Map.Entry<any,any>;
					public lastKey(): any;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public clear(): void;
					public standardLastKey(): any;
					public firstEntry(): java.util.Map.Entry<any,any>;
					public descendingMap(): java.util.NavigableMap<any,any>;
					public hashCode(): number;
					public delegate(): any;
					public higherKey(key: any): any;
					public standardLastEntry(): java.util.Map.Entry<any,any>;
					public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
					public standardCeilingKey(key: any): any;
					public standardHigherKey(key: any): any;
					public delegate(): java.util.SortedMap<any,any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public standardHeadMap(toKey: any): java.util.SortedMap<any,any>;
					public containsValue(value: any): boolean;
					public navigableKeySet(): java.util.NavigableSet<any>;
					public standardDescendingKeySet(): java.util.NavigableSet<any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public standardFloorKey(key: any): any;
					public put(key: any, value: any): any;
					public firstKey(): any;
					public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public descendingKeySet(): java.util.NavigableSet<any>;
					public standardFirstEntry(): java.util.Map.Entry<any,any>;
					public standardFloorEntry(key: any): java.util.Map.Entry<any,any>;
				}
				export module ForwardingNavigableMap {
					export class StandardDescendingMap extends com.google.common.collect.Maps.DescendingMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingNavigableMap.StandardDescendingMap>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public constructor();
						public remove(object: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public equals(object: any): boolean;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public entryIterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public constructor(this0: com.google.common.collect.ForwardingNavigableMap<any,any>);
						public descendingKeySet(): java.util.NavigableSet<any>;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerKey(key: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export class StandardNavigableKeySet extends com.google.common.collect.Maps.NavigableKeySet<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingNavigableMap.StandardNavigableKeySet>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public floor(e: any): any;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public removeIf(filter: any /* any*/): boolean;
						public constructor(this0: com.google.common.collect.ForwardingNavigableMap<any,any>);
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public higher(e: any): any;
						public spliterator(): java.util.Spliterator<any>;
						public descendingSet(): java.util.NavigableSet<any>;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public pollLast(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public pollFirst(): any;
						public first(): any;
						public constructor();
						public add(e: any): boolean;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public ceiling(e: any): any;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingNavigableSet<E>  extends com.google.common.collect.ForwardingSortedSet<any> implements java.util.NavigableSet<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingNavigableSet<any>>;
					public ceiling(e: any): any;
					public delegate(): java.util.Collection<any>;
					public isEmpty(): boolean;
					public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
					public spliterator(): java.util.Spliterator<any>;
					public size(): number;
					public delegate(): java.util.SortedSet<any>;
					public standardHeadSet(toElement: any): java.util.SortedSet<any>;
					public add(element: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public iterator(): java.util.Iterator<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
					public remove(object: any): boolean;
					public higher(e: any): any;
					public pollFirst(): any;
					public standardSubSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
					public tailSet(fromElement: any): java.util.SortedSet<any>;
					public addAll(collection: java.util.Collection<any>): boolean;
					public descendingSet(): java.util.NavigableSet<any>;
					public first(): any;
					public standardSubSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
					public last(): any;
					public standardCeiling(e: any): any;
					public standardHigher(e: any): any;
					public standardLast(): any;
					public standardPollLast(): any;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public standardLower(e: any): any;
					public delegate(): java.util.NavigableSet<any>;
					public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
					public standardFirst(): any;
					public lower(e: any): any;
					public equals(object: any): boolean;
					public clear(): void;
					public standardTailSet(fromElement: any): java.util.SortedSet<any>;
					public hashCode(): number;
					public delegate(): any;
					public delegate(): java.util.Set<any>;
					public forEach(action: any /* any*/): void;
					public toArray(array: native.Array<any>): native.Array<any>;
					public floor(e: any): any;
					public parallelStream(): java.util.stream.Stream<any>;
					public headSet(toElement: any): java.util.SortedSet<any>;
					public descendingIterator(): java.util.Iterator<any>;
					public standardPollFirst(): any;
					public removeIf(filter: any /* any*/): boolean;
					public pollLast(): any;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public standardFloor(e: any): any;
					public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
				}
				export module ForwardingNavigableSet {
					export class StandardDescendingSet extends com.google.common.collect.Sets.DescendingSet<any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingNavigableSet.StandardDescendingSet>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public contains(object: any): boolean;
						public floor(e: any): any;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public removeIf(filter: any /* any*/): boolean;
						public comparator(): java.util.Comparator<any>;
						public higher(e: any): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public descendingSet(): java.util.NavigableSet<any>;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public pollFirst(): any;
						public first(): any;
						public constructor();
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public constructor(this0: com.google.common.collect.ForwardingNavigableSet<any>);
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public remove(object: any): boolean;
						public ceiling(e: any): any;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingObject extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ForwardingObject>;
					public toString(): string;
					public constructor();
					public delegate(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingQueue<E>  extends com.google.common.collect.ForwardingCollection<any> implements java.util.Queue<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingQueue<any>>;
					public delegate(): java.util.Collection<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public peek(): any;
					public spliterator(): java.util.Spliterator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public add(element: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public iterator(): java.util.Iterator<any>;
					public poll(): any;
					public delegate(): java.util.Queue<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public clear(): void;
					public standardOffer(e: any): boolean;
					public hashCode(): number;
					public delegate(): any;
					public offer(o: any): boolean;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public standardPeek(): any;
					public parallelStream(): java.util.stream.Stream<any>;
					public addAll(collection: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public standardPoll(): any;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public element(): any;
					public remove(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingSet<E>  extends com.google.common.collect.ForwardingCollection<any> implements java.util.Set<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingSet<any>>;
					public delegate(): java.util.Collection<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public standardRemoveAll(collection: java.util.Collection<any>): boolean;
					public add(element: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public standardHashCode(): number;
					public constructor();
					public toArray(): native.Array<any>;
					public clear(): void;
					public hashCode(): number;
					public delegate(): any;
					public delegate(): java.util.Set<any>;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public standardEquals(object: any): boolean;
					public addAll(collection: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingSetMultimap<K, V>  extends com.google.common.collect.ForwardingMultimap<any,any> implements com.google.common.collect.SetMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingSetMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public delegate(): com.google.common.collect.SetMultimap<any,any>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public constructor();
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public delegate(): any;
					public removeAll(key: any): java.util.Set<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public delegate(): com.google.common.collect.Multimap<any,any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingSortedMap<K, V>  extends com.google.common.collect.ForwardingMap<any,any> implements java.util.SortedMap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingSortedMap<any,any>>;
					public containsKey(key: any): boolean;
					public headMap(toKey: any): java.util.SortedMap<any,any>;
					public get(key: any): any;
					public isEmpty(): boolean;
					public standardContainsKey(key: any): boolean;
					public comparator(): java.util.Comparator<any>;
					public forEach(action: any /* any<any,any>*/): void;
					public tailMap(fromKey: any): java.util.SortedMap<any,any>;
					public size(): number;
					public lastKey(): any;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public constructor();
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public standardSubMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
					public delegate(): java.util.SortedMap<any,any>;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public firstKey(): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<any,any>;
				}
				export module ForwardingSortedMap {
					export class StandardKeySet extends com.google.common.collect.Maps.SortedKeySet<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingSortedMap.StandardKeySet>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public removeIf(filter: any /* any*/): boolean;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public constructor(this0: com.google.common.collect.ForwardingSortedMap<any,any>);
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public first(): any;
						public constructor();
						public add(e: any): boolean;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingSortedMultiset<E>  extends com.google.common.collect.ForwardingMultiset<any> implements com.google.common.collect.SortedMultiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingSortedMultiset<any>>;
					public delegate(): java.util.Collection<any>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public standardPollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public size(): number;
					public add(element: any): boolean;
					public standardFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public iterator(): java.util.Iterator<any>;
					public constructor();
					public elementSet(): java.util.SortedSet<any>;
					public toArray(): native.Array<any>;
					public remove(element: any, occurrences: number): number;
					public standardSubMultiset(lowerBound: any, lowerBoundType: com.google.common.collect.BoundType, upperBound: any, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public delegate(): com.google.common.collect.SortedMultiset<any>;
					public tailMultiset(lowerBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public standardPollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public addAll(collection: java.util.Collection<any>): boolean;
					public elementSet(): java.util.Set<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public add(element: any, occurrences: number): number;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public setCount(element: any, count: number): number;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public clear(): void;
					public hashCode(): number;
					public delegate(): any;
					public forEach(action: any /* any*/): void;
					public toArray(array: native.Array<any>): native.Array<any>;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public subMultiset(lowerBound: any, lowerBoundType: com.google.common.collect.BoundType, upperBound: any, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public standardLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public removeIf(filter: any /* any*/): boolean;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public headMultiset(upperBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public count(element: any): number;
					public delegate(): com.google.common.collect.Multiset<any>;
				}
				export module ForwardingSortedMultiset {
					export abstract class StandardDescendingMultiset extends com.google.common.collect.DescendingMultiset<any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingSortedMultiset.StandardDescendingMultiset>;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
						public removeIf(filter: any /* any*/): boolean;
						public comparator(): java.util.Comparator<any>;
						public count(element: any): number;
						public subMultiset(fromElement: any, fromBoundType: com.google.common.collect.BoundType, toElement: any, toBoundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public headMultiset(toElement: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
						public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
						public size(): number;
						public setCount(element: any, count: number): number;
						public constructor();
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public remove(element: any, occurrences: number): number;
						public toString(): string;
						public constructor(this0: com.google.common.collect.ForwardingSortedMultiset<any>);
						public remove(object: any): boolean;
						public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
						public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
						public tailMultiset(fromElement: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
						public clear(): void;
						public add(element: any): boolean;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
						public equals(object: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public elementSet(): java.util.NavigableSet<any>;
						public add(element: any, occurrences: number): number;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
					}
					export class StandardElementSet extends com.google.common.collect.SortedMultisets.NavigableElementSet<any> {
						public static class: java.lang.Class<com.google.common.collect.ForwardingSortedMultiset.StandardElementSet>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public floor(e: any): any;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public removeIf(filter: any /* any*/): boolean;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public higher(e: any): any;
						public spliterator(): java.util.Spliterator<any>;
						public descendingSet(): java.util.NavigableSet<any>;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public pollLast(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public pollFirst(): any;
						public first(): any;
						public constructor();
						public add(e: any): boolean;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public constructor(this0: com.google.common.collect.ForwardingSortedMultiset<any>);
						public ceiling(e: any): any;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingSortedSet<E>  extends com.google.common.collect.ForwardingSet<any> implements java.util.SortedSet<any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingSortedSet<any>>;
					public delegate(): java.util.Collection<any>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public delegate(): java.util.SortedSet<any>;
					public add(element: any): boolean;
					public removeAll(collection: java.util.Collection<any>): boolean;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public constructor();
					public toArray(): native.Array<any>;
					public clear(): void;
					public hashCode(): number;
					public delegate(): any;
					public delegate(): java.util.Set<any>;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public standardSubSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
					public tailSet(fromElement: any): java.util.SortedSet<any>;
					public addAll(collection: java.util.Collection<any>): boolean;
					public headSet(toElement: any): java.util.SortedSet<any>;
					public standardRemove(object: any): boolean;
					public first(): any;
					public removeIf(filter: any /* any*/): boolean;
					public last(): any;
					public retainAll(collection: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
					public standardContains(object: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingSortedSetMultimap<K, V>  extends com.google.common.collect.ForwardingSetMultimap<any,any> implements com.google.common.collect.SortedSetMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingSortedSetMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public delegate(): com.google.common.collect.SetMultimap<any,any>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public removeAll(key: any): java.util.SortedSet<any>;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.SortedSet<any>;
					public get(key: any): java.util.Collection<any>;
					public constructor();
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public delegate(): any;
					public removeAll(key: any): java.util.Set<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.SortedSet<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public delegate(): com.google.common.collect.SortedSetMultimap<any,any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public delegate(): com.google.common.collect.Multimap<any,any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Set<any>;
					public valueComparator(): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ForwardingTable<R, C, V>  extends com.google.common.collect.ForwardingObject implements com.google.common.collect.Table<any,any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ForwardingTable<any,any,any>>;
					public get(rowKey: any, columnKey: any): any;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public column(columnKey: any): java.util.Map<any,any>;
					public row(rowKey: any): java.util.Map<any,any>;
					public rowKeySet(): java.util.Set<any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public size(): number;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public delegate(): com.google.common.collect.Table<any,any,any>;
					public containsColumn(columnKey: any): boolean;
					public constructor();
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public clear(): void;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public columnKeySet(): java.util.Set<any>;
					public containsRow(rowKey: any): boolean;
					public hashCode(): number;
					public delegate(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class GeneralRange<T>  extends java.io.Serializable {
					public static class: java.lang.Class<com.google.common.collect.GeneralRange<any>>;
					public equals(obj: any): boolean;
					public toString(): string;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class GwtTransient extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.google.common.collect.GwtTransient>;
					/**
					 * Constructs a new instance of the com.google.common.collect.GwtTransient interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						annotationType(): java.lang.Class<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public toString(): string;
					public annotationType(): java.lang.Class<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class HashBasedTable<R, C, V>  extends com.google.common.collect.StandardTable<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.HashBasedTable<any,any,any>>;
					public get(rowKey: any, columnKey: any): any;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public static create(): com.google.common.collect.HashBasedTable<any,any,any>;
					public static create(table: com.google.common.collect.Table<any,any,any>): com.google.common.collect.HashBasedTable<any,any,any>;
					public row(rowKey: any): java.util.Map<any,any>;
					public column(columnKey: any): java.util.Map<any,any>;
					public rowKeySet(): java.util.Set<any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public size(): number;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public containsColumn(columnKey: any): boolean;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public static create(expectedRows: number, expectedCellsPerRow: number): com.google.common.collect.HashBasedTable<any,any,any>;
					public clear(): void;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public containsRow(rowKey: any): boolean;
					public columnKeySet(): java.util.Set<any>;
					public hashCode(): number;
				}
				export module HashBasedTable {
					export class Factory<C, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.HashBasedTable.Factory<any,any>>;
						public get(): java.util.Map<C,V>;
						public get(): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class HashBiMap<K, V>  extends java.util.AbstractMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.HashBiMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public inverse(): com.google.common.collect.BiMap<any,any>;
					public size(): number;
					public equals(o: any): boolean;
					public static create(map: java.util.Map<any,any>): com.google.common.collect.HashBiMap<any,any>;
					public remove(key: any, value: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public static create(): com.google.common.collect.HashBiMap<any,any>;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public remove(key: any): any;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public static create(expectedSize: number): com.google.common.collect.HashBiMap<any,any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public values(): java.util.Set<any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public forcePut(key: any, value: any): any;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public putAll(m: java.util.Map<any,any>): void;
				}
				export module HashBiMap {
					export class EntryForKey extends com.google.common.collect.AbstractMapEntry<any,any> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.EntryForKey>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
					}
					export class EntryForValue<K, V>  extends com.google.common.collect.AbstractMapEntry<any,any> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.EntryForValue<any,any>>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
						public setValue(key: any): any;
					}
					export class EntrySet extends com.google.common.collect.HashBiMap.View<any,any,java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.EntrySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class Inverse<K, V>  extends java.util.AbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.Inverse<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public remove(value: any): any;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public values(): java.util.Set<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public forcePut(value: any, key: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public put(value: any, key: any): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public inverse(): com.google.common.collect.BiMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class InverseEntrySet<K, V>  extends com.google.common.collect.HashBiMap.View<any,any,java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.InverseEntrySet<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class KeySet extends com.google.common.collect.HashBiMap.View<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.KeySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class ValueSet extends com.google.common.collect.HashBiMap.View<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.ValueSet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class View<K, V, T>  extends java.util.AbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.HashBiMap.View<any,any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class HashMultimap<K, V>  extends com.google.common.collect.HashMultimapGwtSerializationDependencies<any,any> {
					public static class: java.lang.Class<com.google.common.collect.HashMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public static create(): com.google.common.collect.HashMultimap<any,any>;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public get(key: any): java.util.Collection<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public removeAll(key: any): java.util.Set<any>;
					public static create(expectedKeys: number, expectedValuesPerKey: number): com.google.common.collect.HashMultimap<any,any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public static create(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.HashMultimap<any,any>;
					public get(key: any): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class HashMultimapGwtSerializationDependencies<K, V>  extends com.google.common.collect.AbstractSetMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.HashMultimapGwtSerializationDependencies<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public removeAll(key: any): java.util.Set<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Collection<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public get(key: any): java.util.Set<any>;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class HashMultiset<E>  extends com.google.common.collect.AbstractMapBasedMultiset<any> {
					public static class: java.lang.Class<com.google.common.collect.HashMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public equals(object: any): boolean;
					public toString(): string;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(element: any, occurrences: number): number;
					public containsAll(c: java.util.Collection<any>): boolean;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public static create(distinctElements: number): com.google.common.collect.HashMultiset<any>;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public static create(elements: java.lang.Iterable<any>): com.google.common.collect.HashMultiset<any>;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public static create(): com.google.common.collect.HashMultiset<any>;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public count(element: any): number;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Hashing extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Hashing>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableAsList<E>  extends com.google.common.collect.ImmutableList<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableAsList<any>>;
					public contains(target: any): boolean;
					/** @deprecated */
					public set(index: number, element: any): any;
					/** @deprecated */
					public remove(object: any): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public remove(index: number): any;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public set(index: number, element: any): any;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					public remove(index: number): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public indexOf(object: any): number;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public lastIndexOf(object: any): number;
					public get(int0: number): any;
					public sort(c: java.util.Comparator<any>): void;
					public subList(int0: number, int1: number): java.util.List<any>;
					/** @deprecated */
					public clear(): void;
					/** @deprecated */
					public add(index: number, element: any): void;
					public add(index: number, element: any): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public listIterator(): java.util.ListIterator<any>;
					public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
					public listIterator(int0: number): java.util.ListIterator<any>;
					public replaceAll(operator: any /* any*/): void;
					public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableAsList {
					export class SerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableAsList.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableBiMap<K, V>  extends com.google.common.collect.ImmutableMap<any,any> implements com.google.common.collect.BiMap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableBiMap<any,any>>;
					public isEmpty(): boolean;
					public remove(o: any): any;
					public forEach(action: any /* any<any,any>*/): void;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableBiMap<any,any>;
					public size(): number;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableBiMap<any,any>;
					public static builder(): com.google.common.collect.ImmutableMap.Builder<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableBiMap<any,any>;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableMap<any,any>;
					public keySet(): java.util.Set<any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableMap<any,any>;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public values(): com.google.common.collect.ImmutableSet<any>;
					public putAll(map: java.util.Map<any,any>): void;
					/** @deprecated */
					public clear(): void;
					public replace(key: any, value: any): any;
					public static copyOf(map: java.util.Map<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public values(): java.util.Set<any>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public containsKey(key: any): boolean;
					public inverse(): com.google.common.collect.ImmutableBiMap<any,any>;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableBiMap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableMap<any,any>;
					public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableBiMap<any,any>;
					public inverse(): com.google.common.collect.BiMap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableMap<any,any>;
					/** @deprecated */
					public remove(o: any): any;
					public remove(key: any, value: any): boolean;
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableMap.Builder<any,any>;
					public equals(object: any): boolean;
					/** @deprecated */
					public forcePut(key: any, value: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableBiMap<any,any>;
					/** @deprecated */
					public put(k: any, v: any): any;
					public put(k: any, v: any): any;
					public clear(): void;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableMap<any,any>;
					public hashCode(): number;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public static builder(): com.google.common.collect.ImmutableBiMap.Builder<any,any>;
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableBiMap.Builder<any,any>;
					public static copyOf(map: java.util.Map<any,any>): com.google.common.collect.ImmutableBiMap<any,any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public static of(): com.google.common.collect.ImmutableMap<any,any>;
					public containsValue(value: any): boolean;
					public get(object0: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public forcePut(key: any, value: any): any;
					public static of(): com.google.common.collect.ImmutableBiMap<any,any>;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
				export module ImmutableBiMap {
					export class Builder<K, V>  extends com.google.common.collect.ImmutableMap.Builder<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableBiMap.Builder<any,any>>;
						public build(): com.google.common.collect.ImmutableMap<any,any>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public constructor();
						public orderEntriesByValue(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public putAll(map: java.util.Map<any,any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public build(): com.google.common.collect.ImmutableBiMap<any,any>;
						public put(key: any, value: any): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public orderEntriesByValue(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableBiMap.Builder<any,any>;
						public putAll(map: java.util.Map<any,any>): com.google.common.collect.ImmutableBiMap.Builder<any,any>;
						public put(key: any, value: any): com.google.common.collect.ImmutableBiMap.Builder<any,any>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableBiMap.Builder<any,any>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableBiMap.Builder<any,any>;
					}
					export class SerializedForm extends com.google.common.collect.ImmutableMap.SerializedForm {
						public static class: java.lang.Class<com.google.common.collect.ImmutableBiMap.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableClassToInstanceMap<B>  extends com.google.common.collect.ForwardingMap<java.lang.Class<any>,any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableClassToInstanceMap<any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public static builder(): com.google.common.collect.ImmutableClassToInstanceMap.Builder<any>;
					public static copyOf(map: java.util.Map<any,any>): com.google.common.collect.ImmutableClassToInstanceMap<any>;
					public size(): number;
					public remove(key: any, value: any): boolean;
					/** @deprecated */
					public putInstance(type: java.lang.Class<any>, value: any): any;
					public static of(type: java.lang.Class<any>, value: any): com.google.common.collect.ImmutableClassToInstanceMap<any>;
					public equals(object: any): boolean;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public putInstance(type: java.lang.Class<any>, value: any): any;
					public keySet(): java.util.Set<any>;
					public static of(): com.google.common.collect.ImmutableClassToInstanceMap<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public getInstance(type: java.lang.Class<any>): any;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<java.lang.Class<any>,any>;
					public delegate(): java.util.Map<any,any>;
				}
				export module ImmutableClassToInstanceMap {
					export class Builder<B>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableClassToInstanceMap.Builder<any>>;
						public constructor();
						public putAll(map: java.util.Map<any,any>): com.google.common.collect.ImmutableClassToInstanceMap.Builder<any>;
						public put(key: java.lang.Class<any>, value: any): com.google.common.collect.ImmutableClassToInstanceMap.Builder<any>;
						public build(): com.google.common.collect.ImmutableClassToInstanceMap<B>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableCollection<E>  extends java.util.AbstractCollection<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableCollection<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					public equals(obj: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(o: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public removeAll(c: java.util.Collection<any>): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(o: any): boolean;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public retainAll(c: java.util.Collection<any>): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public asList(): com.google.common.collect.ImmutableList<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableCollection {
					export abstract class ArrayBasedBuilder<E>  extends com.google.common.collect.ImmutableCollection.Builder<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableCollection.ArrayBasedBuilder<any>>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(object0: any): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableCollection.ArrayBasedBuilder<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
					}
					export abstract class Builder<E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableCollection.Builder<any>>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection.Builder<E>;
						public build(): com.google.common.collect.ImmutableCollection<E>;
						public add(elements: native.Array<E>): com.google.common.collect.ImmutableCollection.Builder<E>;
						public add(object0: E): com.google.common.collect.ImmutableCollection.Builder<E>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableCollection.Builder<E>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableEntry<K, V>  extends com.google.common.collect.AbstractMapEntry<any,any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableEntry<any,any>>;
					public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public getValue(): any;
					public equals(object: any): boolean;
					public static comparingByKey(): java.util.Comparator<any>;
					public setValue(value: any): any;
					public static comparingByValue(): java.util.Comparator<any>;
					public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					public getKey(): any;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableEnumMap<K, V>  extends com.google.common.collect.ImmutableMap.IteratorBasedImmutableMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableEnumMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public remove(o: any): any;
					public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					/** @deprecated */
					public remove(o: any): any;
					public remove(key: any, value: any): boolean;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public equals(object: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					/** @deprecated */
					public put(k: any, v: any): any;
					public put(k: any, v: any): any;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public putAll(map: java.util.Map<any,any>): void;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public get(object0: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
				export module ImmutableEnumMap {
					export class EnumSerializedForm<K, V>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableEnumMap.EnumSerializedForm<any,any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableEnumSet<E>  extends com.google.common.collect.ImmutableSet<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableEnumSet<any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableEnumSet {
					export class EnumSerializedForm<E>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableEnumSet.EnumSerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableList<E>  extends com.google.common.collect.ImmutableCollection<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableList<any>>;
					/** @deprecated */
					public set(index: number, element: any): any;
					public isEmpty(): boolean;
					/** @deprecated */
					public remove(index: number): any;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public reverse(): com.google.common.collect.ImmutableList<any>;
					/** @deprecated */
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableList<any>;
					public iterator(): java.util.Iterator<any>;
					public static copyOf(elements: java.util.Collection<any>): com.google.common.collect.ImmutableList<any>;
					public toArray(): native.Array<any>;
					public static sortedCopyOf(comparator: java.util.Comparator<any>, elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
					public remove(object: any): boolean;
					public static of(element: any): com.google.common.collect.ImmutableList<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any): com.google.common.collect.ImmutableList<any>;
					public static builder(): com.google.common.collect.ImmutableList.Builder<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any, e9: any, e10: any): com.google.common.collect.ImmutableList<any>;
					public lastIndexOf(object: any): number;
					public static sortedCopyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableList<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any, e9: any, e10: any, e11: any): com.google.common.collect.ImmutableList<any>;
					public sort(c: java.util.Comparator<any>): void;
					/** @deprecated */
					public clear(): void;
					/** @deprecated */
					public add(index: number, element: any): void;
					public add(index: number, element: any): void;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any): com.google.common.collect.ImmutableList<any>;
					public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
					public asList(): com.google.common.collect.ImmutableList<any>;
					public listIterator(int0: number): java.util.ListIterator<any>;
					public replaceAll(operator: any /* any*/): void;
					public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
					public equals(obj: any): boolean;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableList<any>;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public set(index: number, element: any): any;
					public remove(index: number): any;
					public contains(object0: any): boolean;
					public static of(): com.google.common.collect.ImmutableList<any>;
					public toArray(other: native.Array<any>): native.Array<any>;
					public indexOf(object: any): number;
					public clear(): void;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any, e9: any): com.google.common.collect.ImmutableList<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any, e8: any, e9: any, e10: any, e11: any, e12: any, others: native.Array<any>): com.google.common.collect.ImmutableList<any>;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
					public hashCode(): number;
					public forEach(action: any /* any*/): void;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public get(int0: number): any;
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableList<any>;
					public subList(int0: number, int1: number): java.util.List<any>;
					public removeIf(filter: any /* any*/): boolean;
					public listIterator(): java.util.ListIterator<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableList.Builder<any>;
					public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableList<any>;
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableList<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, e7: any): com.google.common.collect.ImmutableList<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableList {
					export class Builder<E>  extends com.google.common.collect.ImmutableCollection.ArrayBasedBuilder<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableList.Builder<any>>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public build(): com.google.common.collect.ImmutableList<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableList.Builder<any>;
						public constructor();
						public add(object0: any): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableCollection.ArrayBasedBuilder<any>;
						public add(element: any): com.google.common.collect.ImmutableList.Builder<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableList.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableList.Builder<any>;
						public build(): com.google.common.collect.ImmutableCollection<any>;
					}
					export class Itr<E>  extends com.google.common.collect.AbstractIndexedListIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableList.Itr<any>>;
						public previousIndex(): number;
						public get(int0: number): any;
						public get(index: number): any;
						public next(): any;
						/** @deprecated */
						public add(e: any): void;
						public previous(): any;
						public nextIndex(): number;
						/** @deprecated */
						public set(e: any): void;
						public add(e: any): void;
						public hasPrevious(): boolean;
						public hasNext(): boolean;
						public set(e: any): void;
						/** @deprecated */
						public remove(): void;
						public remove(): void;
					}
					export class ReverseImmutableList<E>  extends com.google.common.collect.ImmutableList<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableList.ReverseImmutableList<any>>;
						public remove(index: number): any;
						public equals(obj: any): boolean;
						public listIterator(): java.util.ListIterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public listIterator(int0: number): java.util.ListIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						public lastIndexOf(object: any): number;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						/** @deprecated */
						public add(index: number, element: any): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
						public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						/** @deprecated */
						public set(index: number, element: any): any;
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public get(index: number): any;
						/** @deprecated */
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public indexOf(object: any): number;
						public reverse(): com.google.common.collect.ImmutableList<any>;
						/** @deprecated */
						public remove(index: number): any;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public subList(int0: number, int1: number): java.util.List<any>;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public replaceAll(operator: any /* any*/): void;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class SerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableList.SerializedForm>;
					}
					export class SubList extends com.google.common.collect.ImmutableList<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableList.SubList>;
						public remove(index: number): any;
						public equals(obj: any): boolean;
						public listIterator(): java.util.ListIterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public listIterator(int0: number): java.util.ListIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						public lastIndexOf(object: any): number;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						/** @deprecated */
						public add(index: number, element: any): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
						public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						/** @deprecated */
						public set(index: number, element: any): any;
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public get(index: number): any;
						/** @deprecated */
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public indexOf(object: any): number;
						/** @deprecated */
						public remove(index: number): any;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public subList(int0: number, int1: number): java.util.List<any>;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public replaceAll(operator: any /* any*/): void;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableListMultimap<K, V>  extends com.google.common.collect.ImmutableMultimap<any,any> implements com.google.common.collect.ListMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableListMultimap<any,any>>;
					public get(object0: any): com.google.common.collect.ImmutableCollection<any>;
					public keys(): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
					public isEmpty(): boolean;
					public static of(): com.google.common.collect.ImmutableMultimap<any,any>;
					public get(key: any): com.google.common.collect.ImmutableList<any>;
					public size(): number;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableListMultimap<any,any>;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public static builder(): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
					public static copyOf(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableListMultimap<any,any>;
					/** @deprecated */
					public remove(key: any, value: any): boolean;
					public keySet(): java.util.Set<any>;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public static of(): com.google.common.collect.ImmutableListMultimap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableListMultimap<any,any>;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public asMap(): com.google.common.collect.ImmutableMap<any,java.util.Collection<any>>;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableList<any>;
					public entries(): com.google.common.collect.ImmutableCollection<java.util.Map.Entry<any,any>>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.List<any>;
					public inverse(): com.google.common.collect.ImmutableListMultimap<any,any>;
					/** @deprecated */
					public clear(): void;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableListMultimap<any,any>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public inverse(): com.google.common.collect.ImmutableMultimap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public containsKey(key: any): boolean;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableListMultimap<any,any>;
					/** @deprecated */
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableListMultimap<any,any>;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public get(object0: any): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					/** @deprecated */
					public put(key: any, value: any): boolean;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public get(object0: any): java.util.List<any>;
					public static copyOf(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableMultimap<any,any>;
					public hashCode(): number;
					public static builder(): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
					public removeAll(object0: any): java.util.List<any>;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableListMultimap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap<any,any>;
					/** @deprecated */
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableCollection<any>;
				}
				export module ImmutableListMultimap {
					export class Builder<K, V>  extends com.google.common.collect.ImmutableMultimap.Builder<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableListMultimap.Builder<any,any>>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
						public constructor();
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
						public build(): com.google.common.collect.ImmutableListMultimap<any,any>;
						public putAll(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public putAll(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public orderKeysBy(keyComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public putAll(key: any, values: native.Array<any>): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
						public orderValuesBy(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
						public putAll(key: any, values: native.Array<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public put(key: any, value: any): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public orderValuesBy(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public build(): com.google.common.collect.ImmutableMultimap<any,any>;
						public orderKeysBy(keyComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public put(key: any, value: any): com.google.common.collect.ImmutableListMultimap.Builder<any,any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableMap<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ImmutableMap<any,any>>;
					public containsKey(key: any): boolean;
					public replace(key: K, oldValue: V, newValue: V): boolean;
					public equals(obj: any): boolean;
					public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<K,V>>;
					public isEmpty(): boolean;
					public values(): java.util.Collection<V>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableMap<any,any>;
					public keySet(): java.util.Set<K>;
					public forEach(action: any /* any<any,any>*/): void;
					public putIfAbsent(key: K, value: V): V;
					public remove(o: any): V;
					public size(): number;
					public computeIfAbsent(key: K, mappingFunction: any /* any<any,any>*/): V;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableMap<any,any>;
					public static builder(): com.google.common.collect.ImmutableMap.Builder<any,any>;
					public keySet(): com.google.common.collect.ImmutableSet<K>;
					public remove(key: any, value: any): boolean;
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableMap.Builder<any,any>;
					public equals(object: any): boolean;
					public put(k: K, v: V): V;
					public toString(): string;
					public entrySet(): java.util.Set<java.util.Map.Entry<K,V>>;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableMap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableMap<any,any>;
					public clear(): void;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableMap<any,any>;
					public asMultimap(): com.google.common.collect.ImmutableSetMultimap<K,V>;
					public hashCode(): number;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					/** @deprecated */
					public remove(o: any): V;
					public values(): com.google.common.collect.ImmutableCollection<V>;
					public merge(key: K, value: V, remappingFunction: any /* any<any,any,any>*/): V;
					public compute(key: K, remappingFunction: any /* any<any,any,any>*/): V;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					/** @deprecated */
					public put(k: K, v: V): V;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					/** @deprecated */
					public clear(): void;
					public static of(): com.google.common.collect.ImmutableMap<any,any>;
					public containsValue(value: any): boolean;
					public getOrDefault(key: any, defaultValue: V): V;
					public static copyOf(map: java.util.Map<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public replace(key: K, value: V): V;
					public computeIfPresent(key: K, remappingFunction: any /* any<any,any,any>*/): V;
					public get(object0: any): V;
				}
				export module ImmutableMap {
					export class Builder<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMap.Builder<any,any>>;
						public constructor();
						public build(): com.google.common.collect.ImmutableMap<K,V>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap.Builder<K,V>;
						public orderEntriesByValue(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMap.Builder<K,V>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableMap.Builder<K,V>;
						public put(key: K, value: V): com.google.common.collect.ImmutableMap.Builder<K,V>;
						public putAll(map: java.util.Map<any,any>): com.google.common.collect.ImmutableMap.Builder<K,V>;
					}
					export abstract class IteratorBasedImmutableMap<K, V>  extends com.google.common.collect.ImmutableMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMap.IteratorBasedImmutableMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public values(): com.google.common.collect.ImmutableCollection<any>;
						/** @deprecated */
						public putAll(map: java.util.Map<any,any>): void;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						/** @deprecated */
						public put(k: any, v: any): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public get(object0: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public put(k: any, v: any): any;
						public size(): number;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public putAll(map: java.util.Map<any,any>): void;
						public keySet(): com.google.common.collect.ImmutableSet<any>;
						public remove(o: any): any;
						/** @deprecated */
						public remove(o: any): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class MapViewOfValuesAsSingletonSets extends com.google.common.collect.ImmutableMap.IteratorBasedImmutableMap<any,com.google.common.collect.ImmutableSet<any>> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMap.MapViewOfValuesAsSingletonSets>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public values(): com.google.common.collect.ImmutableCollection<any>;
						/** @deprecated */
						public putAll(map: java.util.Map<any,any>): void;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						/** @deprecated */
						public put(k: any, v: any): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public get(object0: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public put(k: any, v: any): any;
						public size(): number;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): com.google.common.collect.ImmutableSet<any>;
						public putAll(map: java.util.Map<any,any>): void;
						public keySet(): com.google.common.collect.ImmutableSet<any>;
						public remove(o: any): any;
						/** @deprecated */
						public remove(o: any): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class SerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMap.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableMapEntrySet<K, V>  extends com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableMapEntrySet<any,any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableMapEntrySet {
					export class EntrySetSerializedForm<K, V>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMapEntrySet.EntrySetSerializedForm<any,any>>;
					}
					export class RegularEntrySet<K, V>  extends com.google.common.collect.ImmutableMapEntrySet<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMapEntrySet.RegularEntrySet<any,any>>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public iterator(): com.google.common.collect.UnmodifiableIterator<java.util.Map.Entry<any,any>>;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableMapKeySet<K, V>  extends com.google.common.collect.IndexedImmutableSet<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableMapKeySet<any,any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableMapKeySet {
					export class KeySetSerializedForm<K>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMapKeySet.KeySetSerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableMapValues<K, V>  extends com.google.common.collect.ImmutableCollection<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableMapValues<any,any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public asList(): com.google.common.collect.ImmutableList<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableMapValues {
					export class SerializedForm<V>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMapValues.SerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableMultimap<K, V>  extends com.google.common.collect.BaseImmutableMultimap<any,any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public get(object0: any): com.google.common.collect.ImmutableCollection<any>;
					public keys(): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public static of(): com.google.common.collect.ImmutableMultimap<any,any>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public put(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public static builder(): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
					/** @deprecated */
					public remove(key: any, value: any): boolean;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public containsEntry(key: any, value: any): boolean;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public static copyOf(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableMultimap<any,any>;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public asMap(): com.google.common.collect.ImmutableMap<any,java.util.Collection<any>>;
					public entries(): com.google.common.collect.ImmutableCollection<java.util.Map.Entry<any,any>>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap<any,any>;
					/** @deprecated */
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public inverse(): com.google.common.collect.ImmutableMultimap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableCollection<any>;
				}
				export module ImmutableMultimap {
					export class Builder<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultimap.Builder<any,any>>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
						public constructor();
						public orderKeysBy(keyComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
						public build(): com.google.common.collect.ImmutableMultimap<K,V>;
						public putAll(key: K, values: native.Array<V>): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
						public putAll(key: K, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
						public orderValuesBy(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
						public put(key: K, value: V): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap.Builder<K,V>;
					}
					export class EntryCollection<K, V>  extends com.google.common.collect.ImmutableCollection<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultimap.EntryCollection<any,any>>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public iterator(): com.google.common.collect.UnmodifiableIterator<java.util.Map.Entry<any,any>>;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class FieldSettersHolder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultimap.FieldSettersHolder>;
					}
					export class Keys extends com.google.common.collect.ImmutableMultiset<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultimap.Keys>;
						/** @deprecated */
						public setCount(element: any, count: number): number;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public contains(object: any): boolean;
						/** @deprecated */
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public count(element: any): number;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public setCount(element: any, count: number): number;
						public add(e: any): boolean;
						public entrySet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset.Entry<any>>;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public remove(element: any, occurrences: number): number;
						/** @deprecated */
						public add(e: any): boolean;
						public toString(): string;
						/** @deprecated */
						public add(element: any, occurrences: number): number;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						/** @deprecated */
						public remove(element: any, occurrences: number): number;
						public clear(): void;
						public elementSet(): com.google.common.collect.ImmutableSet<any>;
						/** @deprecated */
						public clear(): void;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public equals(object: any): boolean;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public add(element: any, occurrences: number): number;
						public toArray(): native.Array<any>;
					}
					export class KeysSerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultimap.KeysSerializedForm>;
					}
					export class Values<K, V>  extends com.google.common.collect.ImmutableCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultimap.Values<any,any>>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableMultiset<E>  extends com.google.common.collect.ImmutableMultisetGwtSerializationDependencies<any> implements com.google.common.collect.Multiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableMultiset<any>>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public iterator(): java.util.Iterator<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableMultiset<any>;
					public toArray(): native.Array<any>;
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableMultiset<any>;
					public remove(element: any, occurrences: number): number;
					/** @deprecated */
					public setCount(element: any, count: number): number;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, others: native.Array<any>): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public clear(): void;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableMultiset<any>;
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableMultiset<any>;
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableMultiset<any>;
					public elementSet(): java.util.Set<any>;
					public asList(): com.google.common.collect.ImmutableList<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public equals(obj: any): boolean;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public add(element: any, occurrences: number): number;
					public static of(): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public add(element: any, occurrences: number): number;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public setCount(element: any, count: number): number;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public entrySet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset.Entry<any>>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableMultiset<any>;
					public hashCode(): number;
					public forEach(action: any /* any*/): void;
					public static of(element: any): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public elementSet(): com.google.common.collect.ImmutableSet<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					/** @deprecated */
					public remove(element: any, occurrences: number): number;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultiset<any>;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public static builder(): com.google.common.collect.ImmutableMultiset.Builder<any>;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module ImmutableMultiset {
					export class Builder<E>  extends com.google.common.collect.ImmutableCollection.Builder<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultiset.Builder<any>>;
						public constructor();
						public add(object0: any): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addCopies(element: any, occurrences: number): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public setCount(element: any, count: number): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public build(): com.google.common.collect.ImmutableMultiset<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public build(): com.google.common.collect.ImmutableCollection<any>;
					}
					export class EntrySet extends com.google.common.collect.IndexedImmutableSet<com.google.common.collect.Multiset.Entry<any>> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultiset.EntrySet>;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public contains(o: any): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class EntrySetSerializedForm<E>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableMultiset.EntrySetSerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableMultisetGwtSerializationDependencies<E>  extends com.google.common.collect.ImmutableCollection<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableMultisetGwtSerializationDependencies<any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableRangeMap<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ImmutableRangeMap<any,any>>;
					public equals(obj: any): boolean;
					public static of(range: com.google.common.collect.Range<any>, value: any): com.google.common.collect.ImmutableRangeMap<any,any>;
					public putAll(rangeMap: com.google.common.collect.RangeMap<K,V>): void;
					public put(range: com.google.common.collect.Range<K>, value: V): void;
					public equals(o: any): boolean;
					public subRangeMap(range0: com.google.common.collect.Range<K>): com.google.common.collect.RangeMap<K,V>;
					public toString(): string;
					public remove(range: com.google.common.collect.Range<K>): void;
					public asDescendingMapOfRanges(): java.util.Map<com.google.common.collect.Range<K>,V>;
					public clear(): void;
					public asMapOfRanges(): com.google.common.collect.ImmutableMap<com.google.common.collect.Range<K>,V>;
					public static copyOf(rangeMap: com.google.common.collect.RangeMap<any,any>): com.google.common.collect.ImmutableRangeMap<any,any>;
					/** @deprecated */
					public put(range: com.google.common.collect.Range<K>, value: V): void;
					/** @deprecated */
					public putAll(rangeMap: com.google.common.collect.RangeMap<K,V>): void;
					public hashCode(): number;
					public static of(): com.google.common.collect.ImmutableRangeMap<any,any>;
					public static builder(): com.google.common.collect.ImmutableRangeMap.Builder<any,any>;
					public span(): com.google.common.collect.Range<K>;
					public putCoalescing(range: com.google.common.collect.Range<K>, value: V): void;
					/** @deprecated */
					public clear(): void;
					public getEntry(key: K): java.util.Map.Entry<com.google.common.collect.Range<K>,V>;
					/** @deprecated */
					public putCoalescing(range: com.google.common.collect.Range<K>, value: V): void;
					public asDescendingMapOfRanges(): com.google.common.collect.ImmutableMap<com.google.common.collect.Range<K>,V>;
					public asMapOfRanges(): java.util.Map<com.google.common.collect.Range<K>,V>;
					public subRangeMap(range: com.google.common.collect.Range<K>): com.google.common.collect.ImmutableRangeMap<K,V>;
					public get(key: K): V;
					/** @deprecated */
					public remove(range: com.google.common.collect.Range<K>): void;
				}
				export module ImmutableRangeMap {
					export class Builder<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableRangeMap.Builder<any,any>>;
						public constructor();
						public putAll(rangeMap: com.google.common.collect.RangeMap<K,any>): com.google.common.collect.ImmutableRangeMap.Builder<K,V>;
						public put(range: com.google.common.collect.Range<K>, value: V): com.google.common.collect.ImmutableRangeMap.Builder<K,V>;
						public build(): com.google.common.collect.ImmutableRangeMap<K,V>;
					}
					export class SerializedForm<K, V>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableRangeMap.SerializedForm<any,any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableRangeSet<C>  extends com.google.common.collect.AbstractRangeSet<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableRangeSet<any>>;
					public enclosesAll(other: com.google.common.collect.RangeSet<any>): boolean;
					public equals(obj: any): boolean;
					/** @deprecated */
					public add(range: com.google.common.collect.Range<any>): void;
					public isEmpty(): boolean;
					public removeAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					/** @deprecated */
					public removeAll(other: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					/** @deprecated */
					public addAll(other: com.google.common.collect.RangeSet<any>): void;
					public static of(range: com.google.common.collect.Range<any>): com.google.common.collect.ImmutableRangeSet<any>;
					/** @deprecated */
					public addAll(other: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public complement(): com.google.common.collect.ImmutableRangeSet<any>;
					public remove(range: com.google.common.collect.Range<any>): void;
					public asRanges(): com.google.common.collect.ImmutableSet<com.google.common.collect.Range<any>>;
					public union(other: com.google.common.collect.RangeSet<any>): com.google.common.collect.ImmutableRangeSet<any>;
					public asSet(domain: com.google.common.collect.DiscreteDomain<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public toString(): string;
					public encloses(range0: com.google.common.collect.Range<any>): boolean;
					public contains(value: any): boolean;
					public asDescendingSetOfRanges(): java.util.Set<com.google.common.collect.Range<any>>;
					public clear(): void;
					public asRanges(): java.util.Set<com.google.common.collect.Range<any>>;
					public static of(): com.google.common.collect.ImmutableRangeSet<any>;
					public hashCode(): number;
					/** @deprecated */
					public removeAll(other: com.google.common.collect.RangeSet<any>): void;
					public difference(other: com.google.common.collect.RangeSet<any>): com.google.common.collect.ImmutableRangeSet<any>;
					public static copyOf(rangeSet: com.google.common.collect.RangeSet<any>): com.google.common.collect.ImmutableRangeSet<any>;
					public encloses(otherRange: com.google.common.collect.Range<any>): boolean;
					public addAll(other: com.google.common.collect.RangeSet<any>): void;
					public intersects(otherRange: com.google.common.collect.Range<any>): boolean;
					public add(range: com.google.common.collect.Range<any>): void;
					public rangeContaining(comparable0: any): com.google.common.collect.Range<any>;
					public static unionOf(ranges: java.lang.Iterable<any>): com.google.common.collect.ImmutableRangeSet<any>;
					public static copyOf(ranges: java.lang.Iterable<any>): com.google.common.collect.ImmutableRangeSet<any>;
					/** @deprecated */
					public remove(range: com.google.common.collect.Range<any>): void;
					public removeAll(other: com.google.common.collect.RangeSet<any>): void;
					public enclosesAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): boolean;
					public addAll(other: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public static builder(): com.google.common.collect.ImmutableRangeSet.Builder<any>;
					public addAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public rangeContaining(value: any): com.google.common.collect.Range<any>;
					public intersection(other: com.google.common.collect.RangeSet<any>): com.google.common.collect.ImmutableRangeSet<any>;
					public complement(): com.google.common.collect.RangeSet<any>;
					public removeAll(other: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public asDescendingSetOfRanges(): com.google.common.collect.ImmutableSet<com.google.common.collect.Range<any>>;
					public span(): com.google.common.collect.Range<any>;
					public subRangeSet(range0: com.google.common.collect.Range<any>): com.google.common.collect.RangeSet<any>;
					public subRangeSet(range: com.google.common.collect.Range<any>): com.google.common.collect.ImmutableRangeSet<any>;
				}
				export module ImmutableRangeSet {
					export class AsSet extends com.google.common.collect.ImmutableSortedSet<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableRangeSet.AsSet>;
						public floor(e: any): any;
						public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
						public descendingIterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public tailSet(object0: any): java.util.SortedSet<any>;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public contains(o: any): boolean;
						public descendingSet(): java.util.NavigableSet<any>;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subSet(object0: any, object1: any): java.util.SortedSet<any>;
						public pollLast(): any;
						public tailSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
						public add(e: any): boolean;
						/** @deprecated */
						public add(e: any): boolean;
						public toString(): string;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
						public equals(object: any): boolean;
						public descendingIterator(): java.util.Iterator<any>;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						public comparator(): java.util.Comparator<any>;
						public headSet(toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public higher(e: any): any;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public tailSet(fromElement: any): com.google.common.collect.ImmutableSortedSet<any>;
						public pollFirst(): any;
						public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
						public lower(e: any): any;
						/** @deprecated */
						public pollFirst(): any;
						public descendingSet(): com.google.common.collect.ImmutableSortedSet<any>;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public subSet(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableSet<any>;
						public ceiling(e: any): any;
						public subSet(fromElement: any, toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
						public headSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
						/** @deprecated */
						public pollLast(): any;
						public headSet(object0: any): java.util.SortedSet<any>;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class AsSetSerializedForm<C>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableRangeSet.AsSetSerializedForm<any>>;
					}
					export class Builder<C>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableRangeSet.Builder<any>>;
						public constructor();
						public build(): com.google.common.collect.ImmutableRangeSet<C>;
						public add(range: com.google.common.collect.Range<C>): com.google.common.collect.ImmutableRangeSet.Builder<C>;
						public addAll(ranges: com.google.common.collect.RangeSet<C>): com.google.common.collect.ImmutableRangeSet.Builder<C>;
						public addAll(ranges: java.lang.Iterable<com.google.common.collect.Range<C>>): com.google.common.collect.ImmutableRangeSet.Builder<C>;
					}
					export class ComplementRanges extends com.google.common.collect.ImmutableList<com.google.common.collect.Range<any>> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableRangeSet.ComplementRanges>;
						public remove(index: number): any;
						public equals(obj: any): boolean;
						public listIterator(): java.util.ListIterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public listIterator(int0: number): java.util.ListIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						public lastIndexOf(object: any): number;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						/** @deprecated */
						public add(index: number, element: any): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
						public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						/** @deprecated */
						public set(index: number, element: any): any;
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public indexOf(object: any): number;
						/** @deprecated */
						public remove(index: number): any;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public subList(int0: number, int1: number): java.util.List<any>;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public replaceAll(operator: any /* any*/): void;
						public get(index: number): com.google.common.collect.Range<any>;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class SerializedForm<C>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableRangeSet.SerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableSet<E>  extends com.google.common.collect.ImmutableCollection<any> implements java.util.Set<any>  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSet<any>>;
					public equals(obj: any): boolean;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableSet<any>;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableSet.Builder<any>;
					public static of(element: any): com.google.common.collect.ImmutableSet<any>;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public static of(): com.google.common.collect.ImmutableSet<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableSet<any>;
					public hashCode(): number;
					public forEach(action: any /* any*/): void;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public static builder(): com.google.common.collect.ImmutableSet.Builder<any>;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableSet<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, others: native.Array<any>): com.google.common.collect.ImmutableSet<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableSet<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableSet<any>;
					public asList(): com.google.common.collect.ImmutableList<any>;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSet<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public static copyOf(elements: java.util.Collection<any>): com.google.common.collect.ImmutableSet<any>;
				}
				export module ImmutableSet {
					export class Builder<E>  extends com.google.common.collect.ImmutableCollection.ArrayBasedBuilder<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSet.Builder<any>>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public build(): com.google.common.collect.ImmutableSet<any>;
						public constructor();
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableSet.Builder<any>;
						public add(object0: any): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableSet.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableCollection.ArrayBasedBuilder<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSet.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet.Builder<any>;
						public build(): com.google.common.collect.ImmutableCollection<any>;
					}
					export class SerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSet.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableSetMultimap<K, V>  extends com.google.common.collect.ImmutableMultimap<any,any> implements com.google.common.collect.SetMultimap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSetMultimap<any,any>>;
					public get(object0: any): com.google.common.collect.ImmutableCollection<any>;
					public keys(): com.google.common.collect.ImmutableMultiset<any>;
					public isEmpty(): boolean;
					public static of(): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public static of(): com.google.common.collect.ImmutableMultimap<any,any>;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public size(): number;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public static builder(): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
					/** @deprecated */
					public remove(key: any, value: any): boolean;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public keySet(): java.util.Set<any>;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public asMap(): com.google.common.collect.ImmutableMap<any,java.util.Collection<any>>;
					public entries(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public entries(): com.google.common.collect.ImmutableCollection<java.util.Map.Entry<any,any>>;
					/** @deprecated */
					public clear(): void;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public get(key: any): com.google.common.collect.ImmutableSet<any>;
					public inverse(): com.google.common.collect.ImmutableMultimap<any,any>;
					public removeAll(object0: any): java.util.Set<any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Set<any>;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableSet<any>;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public containsKey(key: any): boolean;
					/** @deprecated */
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public static builder(): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
					public get(object0: any): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public static copyOf(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public equals(object: any): boolean;
					/** @deprecated */
					public put(key: any, value: any): boolean;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public static copyOf(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableMultimap<any,any>;
					public hashCode(): number;
					public get(object0: any): java.util.Set<any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableMultimap<any,any>;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap<any,any>;
					/** @deprecated */
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					/** @deprecated */
					public replaceValues(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet<any>;
					public inverse(): com.google.common.collect.ImmutableSetMultimap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableSetMultimap<any,any>;
					/** @deprecated */
					public removeAll(key: any): com.google.common.collect.ImmutableCollection<any>;
				}
				export module ImmutableSetMultimap {
					export class Builder<K, V>  extends com.google.common.collect.ImmutableMultimap.Builder<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSetMultimap.Builder<any,any>>;
						public put(key: any, value: any): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public constructor();
						public putAll(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public putAll(key: any, values: native.Array<any>): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public putAll(key: any, values: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public orderValuesBy(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public putAll(key: any, values: native.Array<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public build(): com.google.common.collect.ImmutableSetMultimap<any,any>;
						public put(key: any, value: any): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public orderKeysBy(keyComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public orderValuesBy(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
						public build(): com.google.common.collect.ImmutableMultimap<any,any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ImmutableSetMultimap.Builder<any,any>;
						public orderKeysBy(keyComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMultimap.Builder<any,any>;
					}
					export class EntrySet<K, V>  extends com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSetMultimap.EntrySet<any,any>>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public iterator(): com.google.common.collect.UnmodifiableIterator<java.util.Map.Entry<any,any>>;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class SetFieldSettersHolder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSetMultimap.SetFieldSettersHolder>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ImmutableSortedMap<K, V>  extends com.google.common.collect.ImmutableSortedMapFauxverideShim<any,any> implements java.util.NavigableMap<any,any>  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMap<any,any>>;
					public get(key: any): any;
					public tailMap(object0: any): java.util.SortedMap<any,any>;
					public isEmpty(): boolean;
					public static of(k1: java.lang.Comparable<any>, v1: any, k2: java.lang.Comparable<any>, v2: any, k3: java.lang.Comparable<any>, v3: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public remove(o: any): any;
					public forEach(action: any /* any<any,any>*/): void;
					public floorEntry(key: any): java.util.Map.Entry<any,any>;
					public tailMap(fromKey: any, inclusive: boolean): com.google.common.collect.ImmutableSortedMap<any,any>;
					public size(): number;
					public lowerKey(key: any): any;
					public floorKey(key: any): any;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public static copyOfSorted(map: java.util.SortedMap<any,any>): com.google.common.collect.ImmutableSortedMap<any,any>;
					/** @deprecated */
					public pollLastEntry(): java.util.Map.Entry<any,any>;
					public descendingKeySet(): com.google.common.collect.ImmutableSortedSet<any>;
					public keySet(): com.google.common.collect.ImmutableSortedSet<any>;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableMap<any,any>;
					public keySet(): java.util.Set<any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableMap<any,any>;
					public tailMap(fromKey: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public static copyOf(map: java.util.Map<any,any>): com.google.common.collect.ImmutableSortedMap<any,any>;
					public subMap(fromKey: any, toKey: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap<any,any>;
					public headMap(object0: any): java.util.SortedMap<any,any>;
					public ceilingKey(key: any): any;
					public navigableKeySet(): com.google.common.collect.ImmutableSortedSet<any>;
					public putAll(map: java.util.Map<any,any>): void;
					/** @deprecated */
					public clear(): void;
					public replace(key: any, value: any): any;
					public static copyOf(map: java.util.Map<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public pollFirstEntry(): java.util.Map.Entry<any,any>;
					public static of(): com.google.common.collect.ImmutableSortedMap<any,any>;
					public headMap(toKey: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public static copyOf(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedMap<any,any>;
					public headMap(toKey: any, inclusive: boolean): com.google.common.collect.ImmutableSortedMap<any,any>;
					public subMap(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableMap<any,any>;
					public lowerEntry(key: any): java.util.Map.Entry<any,any>;
					public containsKey(key: any): boolean;
					public pollLastEntry(): java.util.Map.Entry<any,any>;
					public subMap(object0: any, object1: any): java.util.SortedMap<any,any>;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableMap<any,any>;
					public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public lastEntry(): java.util.Map.Entry<any,any>;
					public comparator(): java.util.Comparator<any>;
					public headMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
					public higherEntry(key: any): java.util.Map.Entry<any,any>;
					public lastKey(): any;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableMap<any,any>;
					/** @deprecated */
					public remove(o: any): any;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					/** @deprecated */
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					/** @deprecated */
					public put(k: any, v: any): any;
					public put(k: any, v: any): any;
					public clear(): void;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableMap<any,any>;
					public static copyOf(map: java.util.Map<any,any>, comparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSortedMap<any,any>;
					public firstEntry(): java.util.Map.Entry<any,any>;
					public descendingMap(): java.util.NavigableMap<any,any>;
					public hashCode(): number;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public static reverseOrder(): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
					public higherKey(key: any): any;
					public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedMap<any,any>;
					public static copyOf(entries: java.lang.Iterable<any>, comparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSortedMap<any,any>;
					public static of(k1: java.lang.Comparable<any>, v1: any, k2: java.lang.Comparable<any>, v2: any, k3: java.lang.Comparable<any>, v3: any, k4: java.lang.Comparable<any>, v4: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public static of(k1: java.lang.Comparable<any>, v1: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public tailMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public static of(): com.google.common.collect.ImmutableMap<any,any>;
					public static orderedBy(comparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
					public descendingMap(): com.google.common.collect.ImmutableSortedMap<any,any>;
					public containsValue(value: any): boolean;
					public navigableKeySet(): java.util.NavigableSet<any>;
					public get(object0: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public firstKey(): any;
					public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
					public static naturalOrder(): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public static of(k1: java.lang.Comparable<any>, v1: any, k2: java.lang.Comparable<any>, v2: any, k3: java.lang.Comparable<any>, v3: any, k4: java.lang.Comparable<any>, v4: any, k5: java.lang.Comparable<any>, v5: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					/** @deprecated */
					public pollFirstEntry(): java.util.Map.Entry<any,any>;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public descendingKeySet(): java.util.NavigableSet<any>;
					public static of(k1: java.lang.Comparable<any>, v1: any, k2: java.lang.Comparable<any>, v2: any): com.google.common.collect.ImmutableSortedMap<any,any>;
				}
				export module ImmutableSortedMap {
					export class Builder<K, V>  extends com.google.common.collect.ImmutableMap.Builder<any,any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMap.Builder<any,any>>;
						public build(): com.google.common.collect.ImmutableMap<any,any>;
						public build(): com.google.common.collect.ImmutableSortedMap<any,any>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public constructor();
						public orderEntriesByValue(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						/** @deprecated */
						public orderEntriesByValue(valueComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
						public putAll(map: java.util.Map<any,any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public put(key: any, value: any): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public constructor(comparator: java.util.Comparator<any>);
						public putAll(map: java.util.Map<any,any>): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableMap.Builder<any,any>;
						public putAll(entries: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
						public put(key: any, value: any): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
						public put(entry: java.util.Map.Entry<any,any>): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
					}
					export class SerializedForm extends com.google.common.collect.ImmutableMap.SerializedForm {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMap.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableSortedMapFauxverideShim<K, V>  extends com.google.common.collect.ImmutableMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMapFauxverideShim<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableMap<any,any>;
					public remove(o: any): any;
					public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableMap<any,any>;
					/** @deprecated */
					public remove(o: any): any;
					public static builder(): com.google.common.collect.ImmutableMap.Builder<any,any>;
					/** @deprecated */
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
					public remove(key: any, value: any): boolean;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableMap.Builder<any,any>;
					public equals(object: any): boolean;
					/** @deprecated */
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public static of(k1: any, v1: any): com.google.common.collect.ImmutableMap<any,any>;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableMap<any,any>;
					public keySet(): java.util.Set<any>;
					/** @deprecated */
					public static builder(): com.google.common.collect.ImmutableSortedMap.Builder<any,any>;
					/** @deprecated */
					public put(k: any, v: any): any;
					public put(k: any, v: any): any;
					public clear(): void;
					public static of(k1: any, v1: any, k2: any, v2: any): com.google.common.collect.ImmutableMap<any,any>;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public putAll(map: java.util.Map<any,any>): void;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public static of(): com.google.common.collect.ImmutableMap<any,any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public get(object0: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					/** @deprecated */
					public static of(k1: any, v1: any, k2: any, v2: any, k3: any, v3: any, k4: any, v4: any, k5: any, v5: any): com.google.common.collect.ImmutableSortedMap<any,any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableSortedMultiset<E>  extends com.google.common.collect.ImmutableSortedMultisetFauxverideShim<any> implements com.google.common.collect.SortedMultiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMultiset<any>>;
					public isEmpty(): boolean;
					public static copyOf(elements: native.Array<java.lang.Comparable<any>>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public headMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public descendingMultiset(): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static of(): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public subMultiset(object0: any, boundType1: com.google.common.collect.BoundType, object2: any, boundType3: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public elementSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>, e4: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableMultiset<any>;
					public elementSet(): java.util.SortedSet<any>;
					public toArray(): native.Array<any>;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableMultiset<any>;
					public remove(element: any, occurrences: number): number;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public setCount(element: any, count: number): number;
					/** @deprecated */
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public static copyOf(comparator: java.util.Comparator<any>, elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public tailMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, others: native.Array<any>): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public static of(element: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public clear(): void;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>, e4: java.lang.Comparable<any>, e5: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableMultiset<any>;
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableMultiset<any>;
					public static reverseOrder(): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, remaining: native.Array<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static orderedBy(comparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
					public headMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableMultiset<any>;
					public elementSet(): java.util.Set<any>;
					public static copyOf(comparator: java.util.Comparator<any>, elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					public add(element: any, occurrences: number): number;
					public static of(): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public add(element: any, occurrences: number): number;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>, e4: java.lang.Comparable<any>, e5: java.lang.Comparable<any>, e6: java.lang.Comparable<any>, remaining: native.Array<java.lang.Comparable<any>>): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					public setCount(element: any, count: number): number;
					public subMultiset(lowerBound: any, lowerBoundType: com.google.common.collect.BoundType, upperBound: any, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public tailMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static naturalOrder(): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public entrySet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset.Entry<any>>;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public hashCode(): number;
					/** @deprecated */
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public forEach(action: any /* any*/): void;
					public static of(element: any): com.google.common.collect.ImmutableMultiset<any>;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public elementSet(): com.google.common.collect.ImmutableSet<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public static copyOfSorted(sortedMultiset: com.google.common.collect.SortedMultiset<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public remove(element: any, occurrences: number): number;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultiset<any>;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public static of(element: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
				}
				export module ImmutableSortedMultiset {
					export class Builder<E>  extends com.google.common.collect.ImmutableMultiset.Builder<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMultiset.Builder<any>>;
						public addCopies(element: any, occurrences: number): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
						public constructor();
						public build(): com.google.common.collect.ImmutableSortedMultiset<any>;
						public add(element: any): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
						public add(object0: any): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addCopies(element: any, occurrences: number): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
						public setCount(element: any, count: number): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public constructor(comparator: java.util.Comparator<any>);
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
						public setCount(element: any, count: number): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
						public build(): com.google.common.collect.ImmutableMultiset<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableMultiset.Builder<any>;
						public build(): com.google.common.collect.ImmutableCollection<any>;
					}
					export class SerializedForm<E>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMultiset.SerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableSortedMultisetFauxverideShim<E>  extends com.google.common.collect.ImmutableMultiset<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSortedMultisetFauxverideShim<any>>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public iterator(): java.util.Iterator<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableMultiset<any>;
					public toArray(): native.Array<any>;
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableMultiset<any>;
					public remove(element: any, occurrences: number): number;
					/** @deprecated */
					public setCount(element: any, count: number): number;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, others: native.Array<any>): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public static of(element: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public clear(): void;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableMultiset<any>;
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, remaining: native.Array<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableMultiset<any>;
					public elementSet(): java.util.Set<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public add(element: any, occurrences: number): number;
					public static of(): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public add(element: any, occurrences: number): number;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					public setCount(element: any, count: number): number;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public entrySet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset.Entry<any>>;
					public clear(): void;
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableMultiset<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					/** @deprecated */
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableSortedMultiset<any>;
					public hashCode(): number;
					public static of(element: any): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public elementSet(): com.google.common.collect.ImmutableSet<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableSortedMultiset<any>;
					/** @deprecated */
					public remove(element: any, occurrences: number): number;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableMultiset<any>;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public static builder(): com.google.common.collect.ImmutableMultiset.Builder<any>;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					/** @deprecated */
					public static builder(): com.google.common.collect.ImmutableSortedMultiset.Builder<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableSortedSet<E>  extends com.google.common.collect.ImmutableSortedSetFauxverideShim<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSortedSet<any>>;
					public ceiling(e: any): any;
					public static copyOf(elements: native.Array<java.lang.Comparable<any>>): com.google.common.collect.ImmutableSortedSet<any>;
					public isEmpty(): boolean;
					public static orderedBy(comparator: java.util.Comparator<any>): com.google.common.collect.ImmutableSortedSet.Builder<any>;
					/** @deprecated */
					public pollLast(): any;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, remaining: native.Array<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public spliterator(): java.util.Spliterator<any>;
					public static of(element: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableSet<any>;
					public headSet(object0: any): java.util.SortedSet<any>;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public descendingIterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public static of(element: any): com.google.common.collect.ImmutableSet<any>;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>, e4: java.lang.Comparable<any>, e5: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableSortedSet<any>;
					public remove(object: any): boolean;
					public higher(e: any): any;
					public subSet(object0: any, object1: any): java.util.SortedSet<any>;
					public subSet(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableSet<any>;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public static copyOf(comparator: java.util.Comparator<any>, elements: java.util.Collection<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public pollFirst(): any;
					/** @deprecated */
					public clear(): void;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>, e4: java.lang.Comparable<any>, e5: java.lang.Comparable<any>, e6: java.lang.Comparable<any>, remaining: native.Array<java.lang.Comparable<any>>): com.google.common.collect.ImmutableSortedSet<any>;
					public static copyOf(elements: java.util.Collection<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public descendingSet(): java.util.NavigableSet<any>;
					public first(): any;
					public last(): any;
					public static copyOfSorted(sortedSet: java.util.SortedSet<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, others: native.Array<any>): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableSortedSet<any>;
					public static copyOf(elements: java.util.Collection<any>): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>, e4: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public comparator(): java.util.Comparator<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public headSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public static copyOf(comparator: java.util.Comparator<any>, elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public lower(e: any): any;
					public contains(object0: any): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public pollFirst(): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public static of(): com.google.common.collect.ImmutableSet<any>;
					public clear(): void;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableSet<any>;
					public hashCode(): number;
					public headSet(toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public forEach(action: any /* any*/): void;
					/** @deprecated */
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(object0: any): java.util.SortedSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public floor(e: any): any;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public descendingSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public static naturalOrder(): com.google.common.collect.ImmutableSortedSet.Builder<any>;
					public static of(e1: java.lang.Comparable<any>, e2: java.lang.Comparable<any>, e3: java.lang.Comparable<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public descendingIterator(): java.util.Iterator<any>;
					public static copyOf(comparator: java.util.Comparator<any>, elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public static of(element: any): com.google.common.collect.ImmutableSortedSet<any>;
					public removeIf(filter: any /* any*/): boolean;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableSet<any>;
					public pollLast(): any;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public static of(): com.google.common.collect.ImmutableSortedSet<any>;
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableSet<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableSet<any>;
					public static reverseOrder(): com.google.common.collect.ImmutableSortedSet.Builder<any>;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSet<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public tailSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
				}
				export module ImmutableSortedSet {
					export class Builder<E>  extends com.google.common.collect.ImmutableSet.Builder<any> {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSortedSet.Builder<any>>;
						public constructor();
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSortedSet.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableSet.Builder<any>;
						public add(object0: any): com.google.common.collect.ImmutableCollection.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableCollection.ArrayBasedBuilder<any>;
						public build(): com.google.common.collect.ImmutableSortedSet<any>;
						public constructor(comparator: java.util.Comparator<any>);
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableSortedSet.Builder<any>;
						public addAll(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet.Builder<any>;
						public add(element: any): com.google.common.collect.ImmutableSortedSet.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableCollection.Builder<any>;
						public build(): com.google.common.collect.ImmutableSet<any>;
						public add(elements: native.Array<any>): com.google.common.collect.ImmutableSet.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSortedSet.Builder<any>;
						public addAll(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSet.Builder<any>;
						public build(): com.google.common.collect.ImmutableCollection<any>;
					}
					export class SerializedForm<E>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableSortedSet.SerializedForm<any>>;
						public constructor(comparator: java.util.Comparator<any>, elements: native.Array<any>);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableSortedSetFauxverideShim<E>  extends com.google.common.collect.ImmutableSet<any> {
					public static class: java.lang.Class<com.google.common.collect.ImmutableSortedSetFauxverideShim<any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, remaining: native.Array<any>): com.google.common.collect.ImmutableSortedSet<any>;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableSet<any>;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableSet.Builder<any>;
					public static of(element: any): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableSortedSet<any>;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public static of(): com.google.common.collect.ImmutableSet<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public static copyOf(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet<any>;
					public static of(e1: any, e2: any, e3: any, e4: any): com.google.common.collect.ImmutableSet<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					/** @deprecated */
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableSortedSet<any>;
					public remove(object: any): boolean;
					/** @deprecated */
					public static copyOf(elements: native.Array<any>): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public static builder(): com.google.common.collect.ImmutableSet.Builder<any>;
					/** @deprecated */
					public clear(): void;
					/** @deprecated */
					public static builderWithExpectedSize(expectedSize: number): com.google.common.collect.ImmutableSortedSet.Builder<any>;
					/** @deprecated */
					public static of(element: any): com.google.common.collect.ImmutableSortedSet<any>;
					/** @deprecated */
					public static builder(): com.google.common.collect.ImmutableSortedSet.Builder<any>;
					public removeIf(filter: any /* any*/): boolean;
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableSet<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any, e6: any, others: native.Array<any>): com.google.common.collect.ImmutableSet<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					/** @deprecated */
					public static of(e1: any, e2: any, e3: any): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public static of(e1: any, e2: any): com.google.common.collect.ImmutableSet<any>;
					public static of(e1: any, e2: any, e3: any, e4: any, e5: any): com.google.common.collect.ImmutableSet<any>;
					public static copyOf(elements: java.util.Iterator<any>): com.google.common.collect.ImmutableSet<any>;
					public static copyOf(elements: java.util.Collection<any>): com.google.common.collect.ImmutableSet<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class ImmutableTable<R, C, V>  extends com.google.common.collect.AbstractTable<any,any,any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ImmutableTable<any,any,any>>;
					public column(columnKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public put(rowKey: any, columnKey: any, value: any): any;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public rowMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					public static copyOf(table: com.google.common.collect.Table<any,any,any>): com.google.common.collect.ImmutableTable<any,any,any>;
					public rowKeySet(): java.util.Set<any>;
					public columnKeySet(): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public put(rowKey: any, columnKey: any, value: any): any;
					public size(): number;
					public rowKeySet(): com.google.common.collect.ImmutableSet<any>;
					public containsColumn(columnKey: any): boolean;
					public clear(): void;
					public cellSet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Table.Cell<any,any,any>>;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public columnKeySet(): java.util.Set<any>;
					public containsRow(rowKey: any): boolean;
					public hashCode(): number;
					/** @deprecated */
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public get(rowKey: any, columnKey: any): any;
					public static of(): com.google.common.collect.ImmutableTable<any,any,any>;
					public row(object0: any): java.util.Map<any,any>;
					public static of(rowKey: any, columnKey: any, value: any): com.google.common.collect.ImmutableTable<any,any,any>;
					public row(rowKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public columnMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					public remove(rowKey: any, columnKey: any): any;
					/** @deprecated */
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public static builder(): com.google.common.collect.ImmutableTable.Builder<any,any,any>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public column(object0: any): java.util.Map<any,any>;
				}
				export module ImmutableTable {
					export class Builder<R, C, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.ImmutableTable.Builder<any,any,any>>;
						public build(): com.google.common.collect.ImmutableTable<R,C,V>;
						public constructor();
						public put(cell: com.google.common.collect.Table.Cell<any,any,any>): com.google.common.collect.ImmutableTable.Builder<R,C,V>;
						public orderRowsBy(rowComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableTable.Builder<R,C,V>;
						public putAll(table: com.google.common.collect.Table<any,any,any>): com.google.common.collect.ImmutableTable.Builder<R,C,V>;
						public orderColumnsBy(columnComparator: java.util.Comparator<any>): com.google.common.collect.ImmutableTable.Builder<R,C,V>;
						public put(rowKey: R, columnKey: C, value: V): com.google.common.collect.ImmutableTable.Builder<R,C,V>;
					}
					export class SerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.ImmutableTable.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class IndexedImmutableSet<E>  extends com.google.common.collect.ImmutableSet<any> {
					public static class: java.lang.Class<com.google.common.collect.IndexedImmutableSet<any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Interner<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Interner<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.Interner<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						intern(object0: E): E;
					});
					public constructor();
					public intern(object0: E): E;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Interners extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Interners>;
					public static newStrongInterner(): com.google.common.collect.Interner<any>;
					public static newBuilder(): com.google.common.collect.Interners.InternerBuilder;
					public static asFunction(interner: com.google.common.collect.Interner<any>): com.google.common.base.Function<any,any>;
					public static newWeakInterner(): com.google.common.collect.Interner<any>;
				}
				export module Interners {
					export class InternerBuilder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.Interners.InternerBuilder>;
						public weak(): com.google.common.collect.Interners.InternerBuilder;
						public concurrencyLevel(concurrencyLevel: number): com.google.common.collect.Interners.InternerBuilder;
						public strong(): com.google.common.collect.Interners.InternerBuilder;
						public build(): com.google.common.collect.Interner<any>;
					}
					export class InternerFunction<E>  extends com.google.common.base.Function<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Interners.InternerFunction<any>>;
						public equals(obj: any): boolean;
						public equals(other: any): boolean;
						public apply(input: any): any;
						public hashCode(): number;
						public constructor(interner: com.google.common.collect.Interner<any>);
					}
					export class InternerImpl<E>  extends com.google.common.collect.Interner<any> {
						public static class: java.lang.Class<com.google.common.collect.Interners.InternerImpl<any>>;
						public intern(sample: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Iterables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Iterables>;
					public static get(iterable: java.lang.Iterable<any>, position: number, defaultValue: any): any;
					public static concat(a: java.lang.Iterable<any>, b: java.lang.Iterable<any>, c: java.lang.Iterable<any>, d: java.lang.Iterable<any>): java.lang.Iterable<any>;
					public static concat(inputs: native.Array<java.lang.Iterable<any>>): java.lang.Iterable<any>;
					public static indexOf(iterable: java.lang.Iterable<any>, predicate: com.google.common.base.Predicate<any>): number;
					public static all(iterable: java.lang.Iterable<any>, predicate: com.google.common.base.Predicate<any>): boolean;
					public static getLast(iterable: java.lang.Iterable<any>): any;
					public static getOnlyElement(iterable: java.lang.Iterable<any>, defaultValue: any): any;
					/** @deprecated */
					public static unmodifiableIterable(iterable: com.google.common.collect.ImmutableCollection<any>): java.lang.Iterable<any>;
					public static contains(iterable: java.lang.Iterable<any>, element: any): boolean;
					public static getLast(iterable: java.lang.Iterable<any>, defaultValue: any): any;
					public static toArray(iterable: java.lang.Iterable<any>, type: java.lang.Class<any>): native.Array<any>;
					public static concat(a: java.lang.Iterable<any>, b: java.lang.Iterable<any>): java.lang.Iterable<any>;
					public static concat(inputs: java.lang.Iterable<any>): java.lang.Iterable<any>;
					public static cycle(iterable: java.lang.Iterable<any>): java.lang.Iterable<any>;
					public static filter(unfiltered: java.lang.Iterable<any>, desiredType: java.lang.Class<any>): java.lang.Iterable<any>;
					public static transform(fromIterable: java.lang.Iterable<any>, function1: com.google.common.base.Function<any,any>): java.lang.Iterable<any>;
					public static skip(iterable: java.lang.Iterable<any>, numberToSkip: number): java.lang.Iterable<any>;
					public toString(): string;
					public static get(iterable: java.lang.Iterable<any>, position: number): any;
					public static cycle(elements: native.Array<any>): java.lang.Iterable<any>;
					public static mergeSorted(iterables: java.lang.Iterable<any>, comparator: java.util.Comparator<any>): java.lang.Iterable<any>;
					public static find(iterable: java.lang.Iterable<any>, predicate: com.google.common.base.Predicate<any>, defaultValue: any): any;
					public static concat(a: java.lang.Iterable<any>, b: java.lang.Iterable<any>, c: java.lang.Iterable<any>): java.lang.Iterable<any>;
					public static getFirst(iterable: java.lang.Iterable<any>, defaultValue: any): any;
					public static removeIf(removeFrom: java.lang.Iterable<any>, predicate: com.google.common.base.Predicate<any>): boolean;
					public static paddedPartition(iterable: java.lang.Iterable<any>, size: number): java.lang.Iterable<any>;
					public static getOnlyElement(iterable: java.lang.Iterable<any>): any;
					public static any(iterable: java.lang.Iterable<any>, predicate: com.google.common.base.Predicate<any>): boolean;
					public static filter(unfiltered: java.lang.Iterable<any>, retainIfTrue: com.google.common.base.Predicate<any>): java.lang.Iterable<any>;
					public static tryFind(iterable: java.lang.Iterable<any>, predicate: com.google.common.base.Predicate<any>): com.google.common.base.Optional<any>;
					public static consumingIterable(iterable: java.lang.Iterable<any>): java.lang.Iterable<any>;
					public static find(iterable: java.lang.Iterable<any>, predicate: com.google.common.base.Predicate<any>): any;
					public static isEmpty(iterable: java.lang.Iterable<any>): boolean;
					public static addAll(addTo: java.util.Collection<any>, elementsToAdd: java.lang.Iterable<any>): boolean;
					public static partition(iterable: java.lang.Iterable<any>, size: number): java.lang.Iterable<any>;
					public static limit(iterable: java.lang.Iterable<any>, limitSize: number): java.lang.Iterable<any>;
					public static retainAll(removeFrom: java.lang.Iterable<any>, elementsToRetain: java.util.Collection<any>): boolean;
					public static toString(iterable: java.lang.Iterable<any>): string;
					public static size(iterable: java.lang.Iterable<any>): number;
					public static frequency(iterable: java.lang.Iterable<any>, element: any): number;
					public static elementsEqual(iterable1: java.lang.Iterable<any>, iterable2: java.lang.Iterable<any>): boolean;
					public static removeAll(removeFrom: java.lang.Iterable<any>, elementsToRemove: java.util.Collection<any>): boolean;
					public static unmodifiableIterable(iterable: java.lang.Iterable<any>): java.lang.Iterable<any>;
				}
				export module Iterables {
					export class UnmodifiableIterable<T>  extends com.google.common.collect.FluentIterable<any> {
						public static class: java.lang.Class<com.google.common.collect.Iterables.UnmodifiableIterable<any>>;
						public iterator(): java.util.Iterator<any>;
						public spliterator(): java.util.Spliterator<any>;
						public forEach(action: any /* any*/): void;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Iterators extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Iterators>;
					public static concat(inputs: java.util.Iterator<any>): java.util.Iterator<any>;
					public static cycle(elements: native.Array<any>): java.util.Iterator<any>;
					public static toArray(iterator: java.util.Iterator<any>, type: java.lang.Class<any>): native.Array<any>;
					public static concat(a: java.util.Iterator<any>, b: java.util.Iterator<any>, c: java.util.Iterator<any>, d: java.util.Iterator<any>): java.util.Iterator<any>;
					public static get(iterator: java.util.Iterator<any>, position: number, defaultValue: any): any;
					public static partition(iterator: java.util.Iterator<any>, size: number): com.google.common.collect.UnmodifiableIterator<any>;
					public static cycle(iterable: java.lang.Iterable<any>): java.util.Iterator<any>;
					public static retainAll(removeFrom: java.util.Iterator<any>, elementsToRetain: java.util.Collection<any>): boolean;
					public static find(iterator: java.util.Iterator<any>, predicate: com.google.common.base.Predicate<any>): any;
					/** @deprecated */
					public static peekingIterator(iterator: com.google.common.collect.PeekingIterator<any>): com.google.common.collect.PeekingIterator<any>;
					public static advance(iterator: java.util.Iterator<any>, numberToAdvance: number): number;
					public static singletonIterator(value: any): com.google.common.collect.UnmodifiableIterator<any>;
					public toString(): string;
					public static filter(unfiltered: java.util.Iterator<any>, desiredType: java.lang.Class<any>): com.google.common.collect.UnmodifiableIterator<any>;
					public static all(iterator: java.util.Iterator<any>, predicate: com.google.common.base.Predicate<any>): boolean;
					public static find(iterator: java.util.Iterator<any>, predicate: com.google.common.base.Predicate<any>, defaultValue: any): any;
					public static concat(inputs: native.Array<java.util.Iterator<any>>): java.util.Iterator<any>;
					/** @deprecated */
					public static unmodifiableIterator(iterator: com.google.common.collect.UnmodifiableIterator<any>): com.google.common.collect.UnmodifiableIterator<any>;
					public static contains(iterator: java.util.Iterator<any>, element: any): boolean;
					public static getLast(iterator: java.util.Iterator<any>, defaultValue: any): any;
					public static concat(a: java.util.Iterator<any>, b: java.util.Iterator<any>, c: java.util.Iterator<any>): java.util.Iterator<any>;
					public static peekingIterator(iterator: java.util.Iterator<any>): com.google.common.collect.PeekingIterator<any>;
					public static getOnlyElement(iterator: java.util.Iterator<any>): any;
					public static tryFind(iterator: java.util.Iterator<any>, predicate: com.google.common.base.Predicate<any>): com.google.common.base.Optional<any>;
					public static consumingIterator(iterator: java.util.Iterator<any>): java.util.Iterator<any>;
					public static unmodifiableIterator(iterator: java.util.Iterator<any>): com.google.common.collect.UnmodifiableIterator<any>;
					public static any(iterator: java.util.Iterator<any>, predicate: com.google.common.base.Predicate<any>): boolean;
					public static asEnumeration(iterator: java.util.Iterator<any>): java.util.Enumeration<any>;
					public static mergeSorted(iterators: java.lang.Iterable<any>, comparator: java.util.Comparator<any>): com.google.common.collect.UnmodifiableIterator<any>;
					public static getNext(iterator: java.util.Iterator<any>, defaultValue: any): any;
					public static paddedPartition(iterator: java.util.Iterator<any>, size: number): com.google.common.collect.UnmodifiableIterator<any>;
					public static frequency(iterator: java.util.Iterator<any>, element: any): number;
					public static forArray(array: native.Array<any>): com.google.common.collect.UnmodifiableIterator<any>;
					public static getLast(iterator: java.util.Iterator<any>): any;
					public static get(iterator: java.util.Iterator<any>, position: number): any;
					public static filter(unfiltered: java.util.Iterator<any>, retainIfTrue: com.google.common.base.Predicate<any>): com.google.common.collect.UnmodifiableIterator<any>;
					public static limit(iterator: java.util.Iterator<any>, limitSize: number): java.util.Iterator<any>;
					public static indexOf(iterator: java.util.Iterator<any>, predicate: com.google.common.base.Predicate<any>): number;
					public static removeAll(removeFrom: java.util.Iterator<any>, elementsToRemove: java.util.Collection<any>): boolean;
					public static concat(a: java.util.Iterator<any>, b: java.util.Iterator<any>): java.util.Iterator<any>;
					public static forEnumeration(enumeration: java.util.Enumeration<any>): com.google.common.collect.UnmodifiableIterator<any>;
					public static removeIf(removeFrom: java.util.Iterator<any>, predicate: com.google.common.base.Predicate<any>): boolean;
					public static addAll(addTo: java.util.Collection<any>, iterator: java.util.Iterator<any>): boolean;
					public static toString(iterator: java.util.Iterator<any>): string;
					public static transform(fromIterator: java.util.Iterator<any>, function1: com.google.common.base.Function<any,any>): java.util.Iterator<any>;
					public static elementsEqual(iterator1: java.util.Iterator<any>, iterator2: java.util.Iterator<any>): boolean;
					public static size(iterator: java.util.Iterator<any>): number;
					public static getOnlyElement(iterator: java.util.Iterator<any>, defaultValue: any): any;
				}
				export module Iterators {
					export class ArrayItr<T>  extends com.google.common.collect.AbstractIndexedListIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.Iterators.ArrayItr<any>>;
						public previousIndex(): number;
						public get(int0: number): any;
						public get(index: number): any;
						public next(): any;
						/** @deprecated */
						public add(e: any): void;
						public previous(): any;
						public nextIndex(): number;
						/** @deprecated */
						public set(e: any): void;
						public add(e: any): void;
						public hasPrevious(): boolean;
						public hasNext(): boolean;
						public set(e: any): void;
						/** @deprecated */
						public remove(): void;
						public remove(): void;
					}
					export class ConcatenatedIterator<T>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.Iterators.ConcatenatedIterator<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class EmptyModifiableIterator extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.Iterators.EmptyModifiableIterator>;
						public static INSTANCE: com.google.common.collect.Iterators.EmptyModifiableIterator;
						public static values(): native.Array<com.google.common.collect.Iterators.EmptyModifiableIterator>;
						public static valueOf(name: string): com.google.common.collect.Iterators.EmptyModifiableIterator;
						public next(): any;
						public hasNext(): boolean;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public remove(): void;
					}
					export class MergingIterator<T>  extends com.google.common.collect.UnmodifiableIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.Iterators.MergingIterator<any>>;
						public constructor();
						public constructor(iterators: java.lang.Iterable<any>, itemComparator: java.util.Comparator<any>);
						public next(): any;
						public hasNext(): boolean;
					}
					export class PeekingImpl<E>  extends com.google.common.collect.PeekingIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.Iterators.PeekingImpl<any>>;
						public next(): any;
						public peek(): any;
						public hasNext(): boolean;
						public constructor(iterator: java.util.Iterator<any>);
						public remove(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class LexicographicalOrdering<T>  extends com.google.common.collect.Ordering<java.lang.Iterable<any>> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.LexicographicalOrdering<any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public compare(leftIterable: java.lang.Iterable<any>, rightIterable: java.lang.Iterable<any>): number;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class LinkedHashMultimap<K, V>  extends com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies<any,any> {
					public static class: java.lang.Class<com.google.common.collect.LinkedHashMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public static create(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.LinkedHashMultimap<any,any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public static create(expectedKeys: number, expectedValuesPerKey: number): com.google.common.collect.LinkedHashMultimap<any,any>;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public removeAll(key: any): java.util.Set<any>;
					public values(): java.util.Collection<any>;
					public put(key: any, value: any): boolean;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Set<any>;
					public static create(): com.google.common.collect.LinkedHashMultimap<any,any>;
				}
				export module LinkedHashMultimap {
					export class ValueEntry<K, V>  extends com.google.common.collect.ImmutableEntry<any,any> implements com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.LinkedHashMultimap.ValueEntry<any,any>>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public getSuccessorInMultimap(): com.google.common.collect.LinkedHashMultimap.ValueEntry<any,any>;
						public getPredecessorInMultimap(): com.google.common.collect.LinkedHashMultimap.ValueEntry<any,any>;
						public setPredecessorInMultimap(multimapPredecessor: com.google.common.collect.LinkedHashMultimap.ValueEntry<any,any>): void;
						public getPredecessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>;
						public setSuccessorInValueSet(entry: com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>): void;
						public setSuccessorInMultimap(multimapSuccessor: com.google.common.collect.LinkedHashMultimap.ValueEntry<any,any>): void;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public setPredecessorInValueSet(entry: com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>): void;
						public equals(object: any): boolean;
						public getSuccessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>;
					}
					export class ValueSet extends com.google.common.collect.Sets.ImprovedAbstractSet<any> implements com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.LinkedHashMultimap.ValueSet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(value: any): boolean;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public getPredecessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public setSuccessorInValueSet(entry: com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>): void;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public setPredecessorInValueSet(entry: com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>): void;
						public getSuccessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>;
						public toArray(): native.Array<any>;
					}
					export class ValueSetLink<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.LinkedHashMultimap.ValueSetLink<any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.LinkedHashMultimap$ValueSetLink interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getPredecessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>;
							getSuccessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>;
							setPredecessorInValueSet(valueSetLink0: com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>): void;
							setSuccessorInValueSet(valueSetLink0: com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>): void;
						});
						public constructor();
						public setSuccessorInValueSet(valueSetLink0: com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>): void;
						public getSuccessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>;
						public getPredecessorInValueSet(): com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>;
						public setPredecessorInValueSet(valueSetLink0: com.google.common.collect.LinkedHashMultimap.ValueSetLink<K,V>): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class LinkedHashMultimapGwtSerializationDependencies<K, V>  extends com.google.common.collect.AbstractSetMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public removeAll(key: any): java.util.Set<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Collection<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public get(key: any): java.util.Set<any>;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class LinkedHashMultiset<E>  extends com.google.common.collect.AbstractMapBasedMultiset<any> {
					public static class: java.lang.Class<com.google.common.collect.LinkedHashMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public static create(distinctElements: number): com.google.common.collect.LinkedHashMultiset<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(element: any, occurrences: number): number;
					public containsAll(c: java.util.Collection<any>): boolean;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public static create(elements: java.lang.Iterable<any>): com.google.common.collect.LinkedHashMultiset<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public static create(): com.google.common.collect.LinkedHashMultiset<any>;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public count(element: any): number;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class LinkedListMultimap<K, V>  extends com.google.common.collect.AbstractMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.LinkedListMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public removeAll(key: any): java.util.List<any>;
					public keys(): com.google.common.collect.Multiset<any>;
					public static create(): com.google.common.collect.LinkedListMultimap<any,any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public get(object0: any): java.util.Collection<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public entries(): java.util.List<java.util.Map.Entry<any,any>>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public equals(object: any): boolean;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public static create(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.LinkedListMultimap<any,any>;
					public get(key: any): java.util.List<any>;
					public hashCode(): number;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public static create(expectedKeys: number): com.google.common.collect.LinkedListMultimap<any,any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public removeAll(object0: any): java.util.Collection<any>;
					public values(): java.util.List<any>;
				}
				export module LinkedListMultimap {
					export class DistinctKeyIterator extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.LinkedListMultimap.DistinctKeyIterator>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class KeyList<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.LinkedListMultimap.KeyList<any,any>>;
					}
					export class Node<K, V>  extends com.google.common.collect.AbstractMapEntry<any,any> {
						public static class: java.lang.Class<com.google.common.collect.LinkedListMultimap.Node<any,any>>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public setValue(newValue: any): any;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
					}
					export class NodeIterator extends java.util.ListIterator<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.LinkedListMultimap.NodeIterator>;
						public previousIndex(): number;
						public set(e: java.util.Map.Entry<any,any>): void;
						public next(): com.google.common.collect.LinkedListMultimap.Node<any,any>;
						public add(e: java.util.Map.Entry<any,any>): void;
						public next(): any;
						public previous(): com.google.common.collect.LinkedListMultimap.Node<any,any>;
						public previous(): any;
						public nextIndex(): number;
						public set(object0: any): void;
						public hasPrevious(): boolean;
						public hasNext(): boolean;
						public add(object0: any): void;
						public remove(): void;
					}
					export class ValueForKeyIterator extends java.util.ListIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.LinkedListMultimap.ValueForKeyIterator>;
						public previousIndex(): number;
						public constructor(param0: com.google.common.collect.LinkedListMultimap<any,any>, key: any, index: number);
						public set(value: any): void;
						public hasPrevious(): boolean;
						public next(): any;
						public hasNext(): boolean;
						public previous(): any;
						public add(value: any): void;
						public nextIndex(): number;
						public remove(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ListMultimap<K, V>  extends com.google.common.collect.Multimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.ListMultimap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.ListMultimap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(object0: any): java.util.List<any>;
						removeAll(object0: any): java.util.List<any>;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.List<any>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						equals(object0: any): boolean;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						containsEntry(object0: any, object1: any): boolean;
						put(object0: any, object1: any): boolean;
						remove(object0: any, object1: any): boolean;
						putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
						putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
						removeAll(object0: any): java.util.Collection<any>;
						clear(): void;
						get(object0: any): java.util.Collection<any>;
						keySet(): java.util.Set<any>;
						keys(): com.google.common.collect.Multiset<any>;
						values(): java.util.Collection<any>;
						entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
					public removeAll(object0: any): java.util.List<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.List<any>;
					public size(): number;
					public values(): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public put(object0: any, object1: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public keySet(): java.util.Set<any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(object0: any, object1: any): boolean;
					public remove(object0: any, object1: any): boolean;
					public putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
					public get(object0: any): java.util.List<any>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
					public hashCode(): number;
					public containsKey(object0: any): boolean;
					public containsValue(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Lists extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Lists>;
					public static cartesianProduct(lists: java.util.List<any>): java.util.List<any>;
					public static newArrayList(elements: native.Array<any>): java.util.ArrayList<any>;
					public static asList(first: any, rest: native.Array<any>): java.util.List<any>;
					public static charactersOf(sequence: string): java.util.List<java.lang.Character>;
					public static newLinkedList(elements: java.lang.Iterable<any>): java.util.LinkedList<any>;
					public static newArrayList(elements: java.lang.Iterable<any>): java.util.ArrayList<any>;
					public static newArrayListWithCapacity(initialArraySize: number): java.util.ArrayList<any>;
					public static partition(list: java.util.List<any>, size: number): java.util.List<any>;
					public static asList(first: any, second: any, rest: native.Array<any>): java.util.List<any>;
					public static newArrayListWithExpectedSize(estimatedSize: number): java.util.ArrayList<any>;
					public static newLinkedList(): java.util.LinkedList<any>;
					public static newArrayList(): java.util.ArrayList<any>;
					public static newCopyOnWriteArrayList(): java.util.concurrent.CopyOnWriteArrayList<any>;
					public static transform(fromList: java.util.List<any>, function1: com.google.common.base.Function<any,any>): java.util.List<any>;
					public static cartesianProduct(lists: native.Array<java.util.List<any>>): java.util.List<any>;
					public static charactersOf(string: string): com.google.common.collect.ImmutableList<java.lang.Character>;
					public static newCopyOnWriteArrayList(elements: java.lang.Iterable<any>): java.util.concurrent.CopyOnWriteArrayList<any>;
					public static reverse(list: java.util.List<any>): java.util.List<any>;
					public static newArrayList(elements: java.util.Iterator<any>): java.util.ArrayList<any>;
				}
				export module Lists {
					export class AbstractListWrapper<E>  extends java.util.AbstractList<any> {
						public static class: java.lang.Class<com.google.common.collect.Lists.AbstractListWrapper<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class CharSequenceAsList extends java.util.AbstractList<java.lang.Character> {
						public static class: java.lang.Class<com.google.common.collect.Lists.CharSequenceAsList>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public get(index: number): java.lang.Character;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class OnePlusArrayList<E>  extends java.util.AbstractList<any> {
						public static class: java.lang.Class<com.google.common.collect.Lists.OnePlusArrayList<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class Partition<T>  extends java.util.AbstractList<java.util.List<any>> {
						public static class: java.lang.Class<com.google.common.collect.Lists.Partition<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public get(index: number): java.util.List<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class RandomAccessListWrapper<E>  extends com.google.common.collect.Lists.AbstractListWrapper<any> implements java.util.RandomAccess  {
						public static class: java.lang.Class<com.google.common.collect.Lists.RandomAccessListWrapper<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class RandomAccessPartition<T>  extends com.google.common.collect.Lists.Partition<any> implements java.util.RandomAccess  {
						public static class: java.lang.Class<com.google.common.collect.Lists.RandomAccessPartition<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public get(index: number): java.util.List<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class RandomAccessReverseList<T>  extends com.google.common.collect.Lists.ReverseList<any> implements java.util.RandomAccess  {
						public static class: java.lang.Class<com.google.common.collect.Lists.RandomAccessReverseList<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class ReverseList<T>  extends java.util.AbstractList<any> {
						public static class: java.lang.Class<com.google.common.collect.Lists.ReverseList<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public removeRange(fromIndex: number, toIndex: number): void;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public clear(): void;
						public sort(c: java.util.Comparator<any>): void;
						public toArray(): native.Array<any>;
					}
					export class StringAsImmutableList extends com.google.common.collect.ImmutableList<java.lang.Character> {
						public static class: java.lang.Class<com.google.common.collect.Lists.StringAsImmutableList>;
						public remove(index: number): any;
						public equals(obj: any): boolean;
						public listIterator(): java.util.ListIterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public listIterator(int0: number): java.util.ListIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						public lastIndexOf(object: any): number;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						/** @deprecated */
						public add(index: number, element: any): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
						public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						/** @deprecated */
						public set(index: number, element: any): any;
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public indexOf(object: any): number;
						/** @deprecated */
						public remove(index: number): any;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public subList(int0: number, int1: number): java.util.List<any>;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public get(index: number): java.lang.Character;
						public remove(object: any): boolean;
						public replaceAll(operator: any /* any*/): void;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<java.lang.Character>;
						/** @deprecated */
						public clear(): void;
						public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class TransformingRandomAccessList<F, T>  extends java.util.AbstractList<any> {
						public static class: java.lang.Class<com.google.common.collect.Lists.TransformingRandomAccessList<any,any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public clear(): void;
						public sort(c: java.util.Comparator<any>): void;
						public toArray(): native.Array<any>;
					}
					export class TransformingSequentialList<F, T>  extends java.util.AbstractSequentialList<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Lists.TransformingSequentialList<any,any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public listIterator(int0: number): java.util.ListIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public clear(): void;
						public sort(c: java.util.Comparator<any>): void;
						public toArray(): native.Array<any>;
					}
					export class TwoPlusArrayList<E>  extends java.util.AbstractList<any> {
						public static class: java.lang.Class<com.google.common.collect.Lists.TwoPlusArrayList<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class MapDifference<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.MapDifference<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.MapDifference<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						areEqual(): boolean;
						entriesOnlyOnLeft(): java.util.Map<K,V>;
						entriesOnlyOnRight(): java.util.Map<K,V>;
						entriesInCommon(): java.util.Map<K,V>;
						entriesDiffering(): java.util.Map<K,com.google.common.collect.MapDifference.ValueDifference<V>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public entriesInCommon(): java.util.Map<K,V>;
					public equals(obj: any): boolean;
					public entriesOnlyOnLeft(): java.util.Map<K,V>;
					public areEqual(): boolean;
					public entriesOnlyOnRight(): java.util.Map<K,V>;
					public hashCode(): number;
					public entriesDiffering(): java.util.Map<K,com.google.common.collect.MapDifference.ValueDifference<V>>;
				}
				export module MapDifference {
					export class ValueDifference<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MapDifference.ValueDifference<any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.MapDifference$ValueDifference interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							leftValue(): V;
							rightValue(): V;
							equals(object0: any): boolean;
							hashCode(): number;
						});
						public constructor();
						public equals(obj: any): boolean;
						public hashCode(): number;
						public rightValue(): V;
						public leftValue(): V;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class MapMaker extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.MapMaker>;
					public toString(): string;
					public weakKeys(): com.google.common.collect.MapMaker;
					public constructor();
					public initialCapacity(initialCapacity: number): com.google.common.collect.MapMaker;
					public weakValues(): com.google.common.collect.MapMaker;
					public makeMap(): java.util.concurrent.ConcurrentMap<any,any>;
					public concurrencyLevel(concurrencyLevel: number): com.google.common.collect.MapMaker;
				}
				export module MapMaker {
					export class Dummy {
						public static class: java.lang.Class<com.google.common.collect.MapMaker.Dummy>;
						public static VALUE: com.google.common.collect.MapMaker.Dummy;
						public static values(): native.Array<com.google.common.collect.MapMaker.Dummy>;
						public static valueOf(name: string): com.google.common.collect.MapMaker.Dummy;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class MapMakerInternalMap<K, V, E, S>  extends java.util.AbstractMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap<any,any,any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public equals(o: any): boolean;
					public remove(key: any, value: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public remove(key: any): any;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public putAll(m: java.util.Map<any,any>): void;
				}
				export module MapMakerInternalMap {
					export abstract class AbstractSerializationProxy<K, V>  extends com.google.common.collect.ForwardingConcurrentMap<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.AbstractSerializationProxy<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public remove(object: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public delegate(): java.util.concurrent.ConcurrentMap<any,any>;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public delegate(): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public delegate(): java.util.Map<any,any>;
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export abstract class AbstractStrongKeyEntry<K, V, E>  extends com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.AbstractStrongKeyEntry<any,any,any>>;
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getHash(): number;
					}
					export abstract class AbstractWeakKeyEntry<K, V, E>  extends java.lang.ref.WeakReference<any> implements com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.AbstractWeakKeyEntry<any,any,any>>;
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getHash(): number;
					}
					export class CleanupMapTask extends java.lang.Object implements java.lang.Runnable {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.CleanupMapTask>;
						public run(): void;
						public constructor(map: com.google.common.collect.MapMakerInternalMap<any,any,any,any>);
					}
					export class DummyInternalEntry extends com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,com.google.common.collect.MapMakerInternalMap.DummyInternalEntry> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.DummyInternalEntry>;
						public getNext(): com.google.common.collect.MapMakerInternalMap.DummyInternalEntry;
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getHash(): number;
					}
					export class EntryIterator extends com.google.common.collect.MapMakerInternalMap.HashIterator<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.EntryIterator>;
						public next(): java.util.Map.Entry<any,any>;
						public next(): any;
					}
					export class EntrySet extends com.google.common.collect.MapMakerInternalMap.SafeToArraySet<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.EntrySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class HashIterator<T>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.HashIterator<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class InternalEntry<K, V, E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.MapMakerInternalMap$InternalEntry interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getNext(): E;
							getHash(): number;
							getKey(): K;
							getValue(): V;
						});
						public constructor();
						public getValue(): V;
						public getNext(): E;
						public getKey(): K;
						public getHash(): number;
					}
					export class InternalEntryHelper<K, V, E, S>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.InternalEntryHelper<any,any,any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.MapMakerInternalMap$InternalEntryHelper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<K,V,E,S>, int1: number, int2: number): S;
							newEntry(segment0: S, object1: K, int2: number, internalEntry3: E): E;
							copy(segment0: S, internalEntry1: E, internalEntry2: E): E;
							setValue(segment0: S, internalEntry1: E, object2: V): void;
						});
						public constructor();
						public copy(segment0: S, internalEntry1: E, internalEntry2: E): E;
						public keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
						public valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
						public newEntry(segment0: S, object1: K, int2: number, internalEntry3: E): E;
						public setValue(segment0: S, internalEntry1: E, object2: V): void;
						public newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<K,V,E,S>, int1: number, int2: number): S;
					}
					export class KeyIterator extends com.google.common.collect.MapMakerInternalMap.HashIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.KeyIterator>;
						public next(): any;
					}
					export class KeySet extends com.google.common.collect.MapMakerInternalMap.SafeToArraySet<any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.KeySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class SafeToArraySet<E>  extends java.util.AbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.SafeToArraySet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class Segment<K, V, E, S>  extends java.util.concurrent.locks.ReentrantLock {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.Segment<any,any,any,any>>;
						public unlock(): void;
						public lockInterruptibly(): void;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public lock(): void;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class SerializationProxy<K, V>  extends com.google.common.collect.MapMakerInternalMap.AbstractSerializationProxy<any,any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.SerializationProxy<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public remove(object: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export abstract class Strength {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.Strength>;
						public static STRONG: com.google.common.collect.MapMakerInternalMap.Strength;
						public static WEAK: com.google.common.collect.MapMakerInternalMap.Strength;
						public static values(): native.Array<com.google.common.collect.MapMakerInternalMap.Strength>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.collect.MapMakerInternalMap.Strength;
					}
					export class StrongKeyDummyValueEntry<K>  extends com.google.common.collect.MapMakerInternalMap.AbstractStrongKeyEntry<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>> implements com.google.common.collect.MapMakerInternalMap.StrongValueEntry<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>>;
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getValue(): com.google.common.collect.MapMaker.Dummy;
						public getHash(): number;
					}
					export module StrongKeyDummyValueEntry {
						export class Helper<K>  extends com.google.common.collect.MapMakerInternalMap.InternalEntryHelper<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>> {
							public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry.Helper<any>>;
							public copy(segment0: any, internalEntry1: any, internalEntry2: any): any;
							public newEntry(segment0: any, object1: any, int2: number, internalEntry3: any): any;
							public newEntry(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>, key: any, hash: number, next: com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>): com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>;
							public valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public setValue(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>, entry: com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>, value: com.google.common.collect.MapMaker.Dummy): void;
							public newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<any,any,any,any>, int1: number, int2: number): any;
							public copy(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>, entry: com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>, newNext: com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>): com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>;
							public setValue(segment0: any, internalEntry1: any, object2: any): void;
							public keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(map: com.google.common.collect.MapMakerInternalMap<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>>, initialCapacity: number, maxSegmentSize: number): com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>;
						}
					}
					export class StrongKeyDummyValueSegment<K>  extends com.google.common.collect.MapMakerInternalMap.Segment<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>,com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment<any>>;
						public unlock(): void;
						public lockInterruptibly(): void;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public lock(): void;
						public castForTesting(entry: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,com.google.common.collect.MapMaker.Dummy,any>): com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry<any>;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class StrongKeyStrongValueEntry<K, V>  extends com.google.common.collect.MapMakerInternalMap.AbstractStrongKeyEntry<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>> implements com.google.common.collect.MapMakerInternalMap.StrongValueEntry<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>>;
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getHash(): number;
					}
					export module StrongKeyStrongValueEntry {
						export class Helper<K, V>  extends com.google.common.collect.MapMakerInternalMap.InternalEntryHelper<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry.Helper<any,any>>;
							public copy(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>, newNext: com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>;
							public copy(segment0: any, internalEntry1: any, internalEntry2: any): any;
							public newEntry(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>, key: any, hash: number, next: com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>;
							public newEntry(segment0: any, object1: any, int2: number, internalEntry3: any): any;
							public valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<any,any,any,any>, int1: number, int2: number): any;
							public newSegment(map: com.google.common.collect.MapMakerInternalMap<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>>, initialCapacity: number, maxSegmentSize: number): com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>;
							public setValue(segment0: any, internalEntry1: any, object2: any): void;
							public keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public setValue(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>, value: any): void;
						}
					}
					export class StrongKeyStrongValueSegment<K, V>  extends com.google.common.collect.MapMakerInternalMap.Segment<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment<any,any>>;
						public unlock(): void;
						public castForTesting(entry: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>): com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry<any,any>;
						public lockInterruptibly(): void;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public lock(): void;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class StrongKeyWeakValueEntry<K, V>  extends com.google.common.collect.MapMakerInternalMap.AbstractStrongKeyEntry<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>> implements com.google.common.collect.MapMakerInternalMap.WeakValueEntry<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>>;
						public getValue(): any;
						public getKey(): any;
						public getValueReference(): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>>;
						public clearValue(): void;
						public getNext(): any;
						public getHash(): number;
						public getValueReference(): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>;
					}
					export module StrongKeyWeakValueEntry {
						export class Helper<K, V>  extends com.google.common.collect.MapMakerInternalMap.InternalEntryHelper<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry.Helper<any,any>>;
							public setValue(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>, value: any): void;
							public copy(segment0: any, internalEntry1: any, internalEntry2: any): any;
							public newEntry(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>, key: any, hash: number, next: com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>;
							public newEntry(segment0: any, object1: any, int2: number, internalEntry3: any): any;
							public valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<any,any,any,any>, int1: number, int2: number): any;
							public newSegment(map: com.google.common.collect.MapMakerInternalMap<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>>, initialCapacity: number, maxSegmentSize: number): com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>;
							public setValue(segment0: any, internalEntry1: any, object2: any): void;
							public copy(segment: com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>, newNext: com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>;
							public keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
						}
					}
					export class StrongKeyWeakValueSegment<K, V>  extends com.google.common.collect.MapMakerInternalMap.Segment<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment<any,any>>;
						public unlock(): void;
						public lockInterruptibly(): void;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public getWeakValueReferenceForTesting(e: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>>;
						public setWeakValueReferenceForTesting(e: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>, valueReference: com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>): void;
						public lock(): void;
						public castForTesting(entry: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>): com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>;
						public newWeakValueReferenceForTesting(e: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>, value: any): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry<any,any>>;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class StrongValueEntry<K, V, E>  extends com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.StrongValueEntry<any,any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.MapMakerInternalMap$StrongValueEntry interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getNext(): any;
							getHash(): number;
							getKey(): any;
							getValue(): any;
						});
						public constructor();
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getHash(): number;
					}
					export class ValueIterator extends com.google.common.collect.MapMakerInternalMap.HashIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.ValueIterator>;
						public next(): any;
					}
					export class Values extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.Values>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class WeakKeyDummyValueEntry<K>  extends com.google.common.collect.MapMakerInternalMap.AbstractWeakKeyEntry<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>> implements com.google.common.collect.MapMakerInternalMap.StrongValueEntry<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>>;
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getValue(): com.google.common.collect.MapMaker.Dummy;
						public getHash(): number;
					}
					export module WeakKeyDummyValueEntry {
						export class Helper<K>  extends com.google.common.collect.MapMakerInternalMap.InternalEntryHelper<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>> {
							public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry.Helper<any>>;
							public copy(segment0: any, internalEntry1: any, internalEntry2: any): any;
							public copy(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>, entry: com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>, newNext: com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>): com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>;
							public newEntry(segment0: any, object1: any, int2: number, internalEntry3: any): any;
							public valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<any,any,any,any>, int1: number, int2: number): any;
							public newEntry(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>, key: any, hash: number, next: com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>): com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>;
							public setValue(segment0: any, internalEntry1: any, object2: any): void;
							public keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(map: com.google.common.collect.MapMakerInternalMap<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>>, initialCapacity: number, maxSegmentSize: number): com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>;
							public setValue(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>, entry: com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>, value: com.google.common.collect.MapMaker.Dummy): void;
						}
					}
					export class WeakKeyDummyValueSegment<K>  extends com.google.common.collect.MapMakerInternalMap.Segment<any,com.google.common.collect.MapMaker.Dummy,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>,com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment<any>>;
						public unlock(): void;
						public lockInterruptibly(): void;
						public castForTesting(entry: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,com.google.common.collect.MapMaker.Dummy,any>): com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry<any>;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public lock(): void;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class WeakKeyStrongValueEntry<K, V>  extends com.google.common.collect.MapMakerInternalMap.AbstractWeakKeyEntry<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>> implements com.google.common.collect.MapMakerInternalMap.StrongValueEntry<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>>;
						public getValue(): any;
						public getKey(): any;
						public getNext(): any;
						public getHash(): number;
					}
					export module WeakKeyStrongValueEntry {
						export class Helper<K, V>  extends com.google.common.collect.MapMakerInternalMap.InternalEntryHelper<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry.Helper<any,any>>;
							public copy(segment0: any, internalEntry1: any, internalEntry2: any): any;
							public newEntry(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>, key: any, hash: number, next: com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>;
							public newEntry(segment0: any, object1: any, int2: number, internalEntry3: any): any;
							public copy(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>, newNext: com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>;
							public valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<any,any,any,any>, int1: number, int2: number): any;
							public setValue(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>, value: any): void;
							public setValue(segment0: any, internalEntry1: any, object2: any): void;
							public keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(map: com.google.common.collect.MapMakerInternalMap<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>>, initialCapacity: number, maxSegmentSize: number): com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>;
						}
					}
					export class WeakKeyStrongValueSegment<K, V>  extends com.google.common.collect.MapMakerInternalMap.Segment<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment<any,any>>;
						public unlock(): void;
						public lockInterruptibly(): void;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public lock(): void;
						public castForTesting(entry: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>): com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry<any,any>;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class WeakKeyWeakValueEntry<K, V>  extends com.google.common.collect.MapMakerInternalMap.AbstractWeakKeyEntry<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>> implements com.google.common.collect.MapMakerInternalMap.WeakValueEntry<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>>;
						public getValueReference(): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>>;
						public getValue(): any;
						public getKey(): any;
						public clearValue(): void;
						public getNext(): any;
						public getHash(): number;
						public getValueReference(): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>;
					}
					export module WeakKeyWeakValueEntry {
						export class Helper<K, V>  extends com.google.common.collect.MapMakerInternalMap.InternalEntryHelper<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry.Helper<any,any>>;
							public copy(segment0: any, internalEntry1: any, internalEntry2: any): any;
							public setValue(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>, value: any): void;
							public newEntry(segment0: any, object1: any, int2: number, internalEntry3: any): any;
							public newEntry(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>, key: any, hash: number, next: com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>;
							public valueStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
							public newSegment(map: com.google.common.collect.MapMakerInternalMap<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>>, initialCapacity: number, maxSegmentSize: number): com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>;
							public newSegment(mapMakerInternalMap0: com.google.common.collect.MapMakerInternalMap<any,any,any,any>, int1: number, int2: number): any;
							public copy(segment: com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>, entry: com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>, newNext: com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>): com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>;
							public setValue(segment0: any, internalEntry1: any, object2: any): void;
							public keyStrength(): com.google.common.collect.MapMakerInternalMap.Strength;
						}
					}
					export class WeakKeyWeakValueSegment<K, V>  extends com.google.common.collect.MapMakerInternalMap.Segment<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment<any,any>>;
						public unlock(): void;
						public getWeakValueReferenceForTesting(e: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>>;
						public lockInterruptibly(): void;
						public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public newWeakValueReferenceForTesting(e: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>, value: any): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>>;
						public setWeakValueReferenceForTesting(e: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>, valueReference: com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>): void;
						public lock(): void;
						public tryLock(): boolean;
						public castForTesting(entry: com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any>): com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry<any,any>;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
					export class WeakValueEntry<K, V, E>  extends com.google.common.collect.MapMakerInternalMap.InternalEntry<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakValueEntry<any,any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.MapMakerInternalMap$WeakValueEntry interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getValueReference(): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>;
							clearValue(): void;
							getNext(): any;
							getHash(): number;
							getKey(): any;
							getValue(): any;
						});
						public constructor();
						public getValue(): any;
						public getKey(): any;
						public clearValue(): void;
						public getNext(): any;
						public getHash(): number;
						public getValueReference(): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>;
					}
					export class WeakValueReference<K, V, E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.MapMakerInternalMap$WeakValueReference interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							get(): V;
							getEntry(): E;
							clear(): void;
							copyFor(referenceQueue0: java.lang.ref.ReferenceQueue<V>, internalEntry1: E): com.google.common.collect.MapMakerInternalMap.WeakValueReference<K,V,E>;
						});
						public constructor();
						public getEntry(): E;
						public get(): V;
						public copyFor(referenceQueue0: java.lang.ref.ReferenceQueue<V>, internalEntry1: E): com.google.common.collect.MapMakerInternalMap.WeakValueReference<K,V,E>;
						public clear(): void;
					}
					export class WeakValueReferenceImpl<K, V, E>  extends java.lang.ref.WeakReference<any> implements com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>  {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WeakValueReferenceImpl<any,any,any>>;
						public copyFor(queue: java.lang.ref.ReferenceQueue<any>, entry: any): com.google.common.collect.MapMakerInternalMap.WeakValueReference<any,any,any>;
						public getEntry(): any;
						public clear(): void;
						public get(): any;
					}
					export class WriteThroughEntry extends com.google.common.collect.AbstractMapEntry<any,any> {
						public static class: java.lang.Class<com.google.common.collect.MapMakerInternalMap.WriteThroughEntry>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public setValue(newValue: any): any;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Maps extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Maps>;
					public static uniqueIndex(values: java.util.Iterator<any>, keyFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public static newTreeMap(): java.util.TreeMap<any,any>;
					public static immutableEnumMap(map: java.util.Map<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public static newLinkedHashMap(): java.util.LinkedHashMap<any,any>;
					public static unmodifiableNavigableMap(map: java.util.NavigableMap<any,any>): java.util.NavigableMap<any,any>;
					public static asMap(set: java.util.NavigableSet<any>, function1: com.google.common.base.Function<any,any>): java.util.NavigableMap<any,any>;
					public static difference(left: java.util.Map<any,any>, right: java.util.Map<any,any>, valueEquivalence: com.google.common.base.Equivalence<any>): com.google.common.collect.MapDifference<any,any>;
					public static newHashMap(): java.util.HashMap<any,any>;
					public static filterEntries(unfiltered: java.util.SortedMap<any,any>, entryPredicate: com.google.common.base.Predicate<any>): java.util.SortedMap<any,any>;
					public static newHashMapWithExpectedSize(expectedSize: number): java.util.HashMap<any,any>;
					public static toMap(keys: java.lang.Iterable<any>, valueFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public static newConcurrentMap(): java.util.concurrent.ConcurrentMap<any,any>;
					public static transformEntries(fromMap: java.util.NavigableMap<any,any>, transformer: com.google.common.collect.Maps.EntryTransformer<any,any,any>): java.util.NavigableMap<any,any>;
					public static filterEntries(unfiltered: com.google.common.collect.BiMap<any,any>, entryPredicate: com.google.common.base.Predicate<any>): com.google.common.collect.BiMap<any,any>;
					public static synchronizedBiMap(bimap: com.google.common.collect.BiMap<any,any>): com.google.common.collect.BiMap<any,any>;
					public static transformValues(fromMap: java.util.Map<any,any>, function1: com.google.common.base.Function<any,any>): java.util.Map<any,any>;
					public static difference(left: java.util.SortedMap<any,any>, right: java.util.Map<any,any>): com.google.common.collect.SortedMapDifference<any,any>;
					public static filterValues(unfiltered: java.util.Map<any,any>, valuePredicate: com.google.common.base.Predicate<any>): java.util.Map<any,any>;
					public static filterKeys(unfiltered: java.util.NavigableMap<any,any>, keyPredicate: com.google.common.base.Predicate<any>): java.util.NavigableMap<any,any>;
					public static uniqueIndex(values: java.lang.Iterable<any>, keyFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public static unmodifiableBiMap(bimap: com.google.common.collect.BiMap<any,any>): com.google.common.collect.BiMap<any,any>;
					public static filterValues(unfiltered: java.util.SortedMap<any,any>, valuePredicate: com.google.common.base.Predicate<any>): java.util.SortedMap<any,any>;
					public static filterValues(unfiltered: com.google.common.collect.BiMap<any,any>, valuePredicate: com.google.common.base.Predicate<any>): com.google.common.collect.BiMap<any,any>;
					public static newLinkedHashMapWithExpectedSize(expectedSize: number): java.util.LinkedHashMap<any,any>;
					public static newHashMap(map: java.util.Map<any,any>): java.util.HashMap<any,any>;
					public static asMap(set: java.util.SortedSet<any>, function1: com.google.common.base.Function<any,any>): java.util.SortedMap<any,any>;
					public static filterEntries(unfiltered: java.util.NavigableMap<any,any>, entryPredicate: com.google.common.base.Predicate<any>): java.util.NavigableMap<any,any>;
					public static difference(left: java.util.Map<any,any>, right: java.util.Map<any,any>): com.google.common.collect.MapDifference<any,any>;
					public static filterKeys(unfiltered: java.util.SortedMap<any,any>, keyPredicate: com.google.common.base.Predicate<any>): java.util.SortedMap<any,any>;
					public static filterValues(unfiltered: java.util.NavigableMap<any,any>, valuePredicate: com.google.common.base.Predicate<any>): java.util.NavigableMap<any,any>;
					public static transformValues(fromMap: java.util.NavigableMap<any,any>, function1: com.google.common.base.Function<any,any>): java.util.NavigableMap<any,any>;
					public static synchronizedNavigableMap(navigableMap: java.util.NavigableMap<any,any>): java.util.NavigableMap<any,any>;
					public static toMap(keys: java.util.Iterator<any>, valueFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableMap<any,any>;
					public static newTreeMap(comparator: java.util.Comparator<any>): java.util.TreeMap<any,any>;
					public static transformEntries(fromMap: java.util.SortedMap<any,any>, transformer: com.google.common.collect.Maps.EntryTransformer<any,any,any>): java.util.SortedMap<any,any>;
					public static filterKeys(unfiltered: java.util.Map<any,any>, keyPredicate: com.google.common.base.Predicate<any>): java.util.Map<any,any>;
					public static transformEntries(fromMap: java.util.Map<any,any>, transformer: com.google.common.collect.Maps.EntryTransformer<any,any,any>): java.util.Map<any,any>;
					public static filterEntries(unfiltered: java.util.Map<any,any>, entryPredicate: com.google.common.base.Predicate<any>): java.util.Map<any,any>;
					public static newEnumMap(map: java.util.Map<any,any>): java.util.EnumMap<any,any>;
					public static newTreeMap(map: java.util.SortedMap<any,any>): java.util.TreeMap<any,any>;
					public static immutableEntry(key: any, value: any): java.util.Map.Entry<any,any>;
					public static newEnumMap(type: java.lang.Class<any>): java.util.EnumMap<any,any>;
					public static asMap(set: java.util.Set<any>, function1: com.google.common.base.Function<any,any>): java.util.Map<any,any>;
					public static newLinkedHashMap(map: java.util.Map<any,any>): java.util.LinkedHashMap<any,any>;
					public static transformValues(fromMap: java.util.SortedMap<any,any>, function1: com.google.common.base.Function<any,any>): java.util.SortedMap<any,any>;
					public static asConverter(bimap: com.google.common.collect.BiMap<any,any>): com.google.common.base.Converter<any,any>;
					public static filterKeys(unfiltered: com.google.common.collect.BiMap<any,any>, keyPredicate: com.google.common.base.Predicate<any>): com.google.common.collect.BiMap<any,any>;
					public static fromProperties(properties: java.util.Properties): com.google.common.collect.ImmutableMap<string,string>;
					public static newIdentityHashMap(): java.util.IdentityHashMap<any,any>;
					public static subMap(map: java.util.NavigableMap<any,any>, range: com.google.common.collect.Range<any>): java.util.NavigableMap<any,any>;
				}
				export module Maps {
					export abstract class AbstractFilteredMap<K, V>  extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.AbstractFilteredMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class AsMapView<K, V>  extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.AsMapView<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public createKeySet(): java.util.Set<any>;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public createEntrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class BiMapConverter<A, B>  extends com.google.common.base.Converter<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Maps.BiMapConverter<any,any>>;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						public hashCode(): number;
						public doForward(a: any): any;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public equals(object: any): boolean;
						public toString(): string;
						public doBackward(b: any): any;
					}
					export abstract class DescendingMap<K, V>  extends com.google.common.collect.ForwardingMap<any,any> implements java.util.NavigableMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.DescendingMap<any,any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public remove(object: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public firstKey(): any;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public toString(): string;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public delegate(): java.util.Map<any,any>;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public equals(object: any): boolean;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public lowerKey(key: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public lastKey(): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public delegate(): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export abstract class EntryFunction extends com.google.common.base.Function<java.util.Map.Entry<any,any>,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.EntryFunction>;
						public static KEY: com.google.common.collect.Maps.EntryFunction;
						public static VALUE: com.google.common.collect.Maps.EntryFunction;
						public static values(): native.Array<com.google.common.collect.Maps.EntryFunction>;
						public equals(other: any): boolean;
						public static valueOf(name: string): com.google.common.collect.Maps.EntryFunction;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public apply(object0: any): any;
					}
					export abstract class EntrySet<K, V>  extends com.google.common.collect.Sets.ImprovedAbstractSet<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.Maps.EntrySet<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class EntryTransformer<K, V1, V2>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.Maps.EntryTransformer<any,any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.Maps$EntryTransformer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							transformEntry(object0: K, object1: V1): V2;
						});
						public constructor();
						public transformEntry(object0: K, object1: V1): V2;
					}
					export class FilteredEntryBiMap<K, V>  extends com.google.common.collect.Maps.FilteredEntryMap<any,any> implements com.google.common.collect.BiMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.FilteredEntryBiMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public values(): java.util.Set<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public forcePut(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public inverse(): com.google.common.collect.BiMap<any,any>;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class FilteredEntryMap<K, V>  extends com.google.common.collect.Maps.AbstractFilteredMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.FilteredEntryMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public createEntrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export module FilteredEntryMap {
						export class EntrySet extends com.google.common.collect.ForwardingSet<java.util.Map.Entry<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.Maps.FilteredEntryMap.EntrySet>;
							public add(element: any): boolean;
							public size(): number;
							public retainAll(collection: java.util.Collection<any>): boolean;
							public delegate(): java.util.Collection<any>;
							public contains(object: any): boolean;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public addAll(collection: java.util.Collection<any>): boolean;
							public delegate(): java.util.Set<java.util.Map.Entry<any,any>>;
							public removeAll(collection: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public toArray(array: native.Array<any>): native.Array<any>;
							public containsAll(collection: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public delegate(): java.util.Set<any>;
							public equals(object: any): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public remove(object: any): boolean;
							public delegate(): any;
							public isEmpty(): boolean;
							public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
						export class KeySet extends com.google.common.collect.Maps.KeySet<any,any> {
							public static class: java.lang.Class<com.google.common.collect.Maps.FilteredEntryMap.KeySet>;
							public retainAll(collection: java.util.Collection<any>): boolean;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public removeAll(collection: java.util.Collection<any>): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public toArray(array: native.Array<any>): native.Array<any>;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
					}
					export class FilteredEntryNavigableMap<K, V>  extends com.google.common.collect.AbstractNavigableMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.FilteredEntryNavigableMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public lowerKey(key: any): any;
						public get(object0: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public equals(o: any): boolean;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public remove(key: any): any;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
						public keySet(): java.util.Set<any>;
					}
					export class FilteredEntrySortedMap<K, V>  extends com.google.common.collect.Maps.FilteredEntryMap<any,any> implements java.util.SortedMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.FilteredEntrySortedMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public keySet(): java.util.SortedSet<any>;
						public lastKey(): any;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public firstKey(): any;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export module FilteredEntrySortedMap {
						export class SortedKeySet extends com.google.common.collect.Maps.FilteredEntryMap.KeySet implements java.util.SortedSet<any>  {
							public static class: java.lang.Class<com.google.common.collect.Maps.FilteredEntrySortedMap.SortedKeySet>;
							public size(): number;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public add(e: any): boolean;
							public toArray(): native.Array<any>;
							public toArray(array: native.Array<any>): native.Array<any>;
							public stream(): java.util.stream.Stream<any>;
							public first(): any;
							public headSet(toElement: any): java.util.SortedSet<any>;
							public equals(o: any): boolean;
							public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
							public retainAll(collection: java.util.Collection<any>): boolean;
							public tailSet(fromElement: any): java.util.SortedSet<any>;
							public iterator(): java.util.Iterator<any>;
							public contains(o: any): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public removeAll(collection: java.util.Collection<any>): boolean;
							public clear(): void;
							public addAll(c: java.util.Collection<any>): boolean;
							public remove(o: any): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public forEach(action: any /* any*/): void;
							public isEmpty(): boolean;
							public comparator(): java.util.Comparator<any>;
							public last(): any;
							public parallelStream(): java.util.stream.Stream<any>;
						}
					}
					export class FilteredKeyMap<K, V>  extends com.google.common.collect.Maps.AbstractFilteredMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.FilteredKeyMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public createEntrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class FilteredMapValues<K, V>  extends com.google.common.collect.Maps.Values<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.FilteredMapValues<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public removeAll(c: java.util.Collection<any>): boolean;
						public contains(o: any): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export abstract class IteratorBasedAbstractMap<K, V>  extends java.util.AbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.IteratorBasedAbstractMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class KeySet<K, V>  extends com.google.common.collect.Sets.ImprovedAbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.KeySet<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class MapDifferenceImpl<K, V>  extends com.google.common.collect.MapDifference<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.MapDifferenceImpl<any,any>>;
						public equals(obj: any): boolean;
						public entriesOnlyOnLeft(): java.util.Map<any,any>;
						public hashCode(): number;
						public areEqual(): boolean;
						public entriesOnlyOnRight(): java.util.Map<any,any>;
						public entriesInCommon(): java.util.Map<any,any>;
						public equals(object: any): boolean;
						public toString(): string;
						public entriesDiffering(): java.util.Map<any,com.google.common.collect.MapDifference.ValueDifference<any>>;
					}
					export class NavigableAsMapView<K, V>  extends com.google.common.collect.AbstractNavigableMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.NavigableAsMapView<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public lowerKey(key: any): any;
						public get(object0: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public ceilingKey(key: any): any;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public remove(key: any): any;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
						public keySet(): java.util.Set<any>;
					}
					export class NavigableKeySet<K, V>  extends com.google.common.collect.Maps.SortedKeySet<any,any> implements java.util.NavigableSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.NavigableKeySet<any,any>>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public floor(e: any): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public higher(e: any): any;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public pollFirst(): any;
						public first(): any;
						public add(e: any): boolean;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public ceiling(e: any): any;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class SortedAsMapView<K, V>  extends com.google.common.collect.Maps.AsMapView<any,any> implements java.util.SortedMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.SortedAsMapView<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public lastKey(): any;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public firstKey(): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class SortedKeySet<K, V>  extends com.google.common.collect.Maps.KeySet<any,any> implements java.util.SortedSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.SortedKeySet<any,any>>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public first(): any;
						public add(e: any): boolean;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class SortedMapDifferenceImpl<K, V>  extends com.google.common.collect.Maps.MapDifferenceImpl<any,any> implements com.google.common.collect.SortedMapDifference<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.SortedMapDifferenceImpl<any,any>>;
						public entriesDiffering(): java.util.SortedMap<any,com.google.common.collect.MapDifference.ValueDifference<any>>;
						public entriesOnlyOnLeft(): java.util.SortedMap<any,any>;
						public entriesOnlyOnRight(): java.util.SortedMap<any,any>;
						public entriesInCommon(): java.util.SortedMap<any,any>;
						public entriesOnlyOnLeft(): java.util.Map<any,any>;
						public hashCode(): number;
						public areEqual(): boolean;
						public entriesOnlyOnRight(): java.util.Map<any,any>;
						public entriesInCommon(): java.util.Map<any,any>;
						public equals(object: any): boolean;
						public entriesDiffering(): java.util.Map<any,com.google.common.collect.MapDifference.ValueDifference<any>>;
					}
					export class TransformedEntriesMap<K, V1, V2>  extends com.google.common.collect.Maps.IteratorBasedAbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.TransformedEntriesMap<any,any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class TransformedEntriesNavigableMap<K, V1, V2>  extends com.google.common.collect.Maps.TransformedEntriesSortedMap<any,any,any> implements java.util.NavigableMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.TransformedEntriesNavigableMap<any,any,any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public firstKey(): any;
						public subMap(fromKey: any, toKey: any): java.util.NavigableMap<any,any>;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public tailMap(fromKey: any): java.util.NavigableMap<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public remove(key: any): any;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public fromMap(): java.util.SortedMap<any,any>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public fromMap(): java.util.NavigableMap<any,any>;
						public lowerKey(key: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public lastKey(): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public headMap(toKey: any): java.util.NavigableMap<any,any>;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export class TransformedEntriesSortedMap<K, V1, V2>  extends com.google.common.collect.Maps.TransformedEntriesMap<any,any,any> implements java.util.SortedMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.TransformedEntriesSortedMap<any,any,any>>;
						public fromMap(): java.util.SortedMap<any,any>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public lastKey(): any;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public firstKey(): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class UnmodifiableBiMap<K, V>  extends com.google.common.collect.ForwardingMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.UnmodifiableBiMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public values(): java.util.Set<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public forcePut(key: any, value: any): any;
						public remove(object: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public inverse(): com.google.common.collect.BiMap<any,any>;
						public putAll(map: java.util.Map<any,any>): void;
						public delegate(): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public delegate(): java.util.Map<any,any>;
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class UnmodifiableEntries<K, V>  extends com.google.common.collect.ForwardingCollection<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.Maps.UnmodifiableEntries<any,any>>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public delegate(): java.util.Collection<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public delegate(): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
					export class UnmodifiableEntrySet<K, V>  extends com.google.common.collect.Maps.UnmodifiableEntries<any,any> implements java.util.Set<java.util.Map.Entry<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.Maps.UnmodifiableEntrySet<any,any>>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class UnmodifiableNavigableMap<K, V>  extends com.google.common.collect.ForwardingSortedMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.UnmodifiableNavigableMap<any,any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public delegate(): java.util.SortedMap<any,any>;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public remove(object: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public firstKey(): any;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public delegate(): java.util.Map<any,any>;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public equals(object: any): boolean;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public lowerKey(key: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public lastKey(): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public delegate(): any;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export class ValueDifferenceImpl<V>  extends com.google.common.collect.MapDifference.ValueDifference<any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.ValueDifferenceImpl<any>>;
						public rightValue(): any;
						public leftValue(): any;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public equals(object: any): boolean;
						public toString(): string;
					}
					export class Values<K, V>  extends java.util.AbstractCollection<any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.Values<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class ViewCachingAbstractMap<K, V>  extends java.util.AbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Maps.ViewCachingAbstractMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class MinMaxPriorityQueue<E>  extends java.util.AbstractQueue<any> {
					public static class: java.lang.Class<com.google.common.collect.MinMaxPriorityQueue<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public equals(obj: any): boolean;
					public static maximumSize(maximumSize: number): com.google.common.collect.MinMaxPriorityQueue.Builder<java.lang.Comparable<any>>;
					public peek(): any;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					public comparator(): java.util.Comparator<any>;
					public removeLast(): any;
					public size(): number;
					public static expectedSize(expectedSize: number): com.google.common.collect.MinMaxPriorityQueue.Builder<java.lang.Comparable<any>>;
					public offer(element: any): boolean;
					public add(element: any): boolean;
					public contains(o: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public static orderedBy(comparator: java.util.Comparator<any>): com.google.common.collect.MinMaxPriorityQueue.Builder<any>;
					public poll(): any;
					public peekFirst(): any;
					public removeAll(c: java.util.Collection<any>): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(o: any): boolean;
					public removeFirst(): any;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public pollFirst(): any;
					public static create(): com.google.common.collect.MinMaxPriorityQueue<any>;
					public retainAll(c: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public pollLast(): any;
					public stream(): java.util.stream.Stream<any>;
					public peekLast(): any;
					public remove(): any;
					public element(): any;
					public static create(initialContents: java.lang.Iterable<any>): com.google.common.collect.MinMaxPriorityQueue<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module MinMaxPriorityQueue {
					export class Builder<B>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MinMaxPriorityQueue.Builder<any>>;
						public create(): com.google.common.collect.MinMaxPriorityQueue<any>;
						public create(initialContents: java.lang.Iterable<any>): com.google.common.collect.MinMaxPriorityQueue<any>;
						public expectedSize(expectedSize: number): com.google.common.collect.MinMaxPriorityQueue.Builder<B>;
						public maximumSize(maximumSize: number): com.google.common.collect.MinMaxPriorityQueue.Builder<B>;
					}
					export class Heap extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MinMaxPriorityQueue.Heap>;
					}
					export class MoveDesc<E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MinMaxPriorityQueue.MoveDesc<any>>;
					}
					export class QueueIterator extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.MinMaxPriorityQueue.QueueIterator>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Multimap<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Multimap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.Multimap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						containsEntry(object0: any, object1: any): boolean;
						put(object0: K, object1: V): boolean;
						remove(object0: any, object1: any): boolean;
						putAll(object0: K, iterable1: java.lang.Iterable<any>): boolean;
						putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
						replaceValues(object0: K, iterable1: java.lang.Iterable<any>): java.util.Collection<V>;
						removeAll(object0: any): java.util.Collection<V>;
						clear(): void;
						get(object0: K): java.util.Collection<V>;
						keySet(): java.util.Set<K>;
						keys(): com.google.common.collect.Multiset<K>;
						values(): java.util.Collection<V>;
						entries(): java.util.Collection<java.util.Map.Entry<K,V>>;
						asMap(): java.util.Map<K,java.util.Collection<V>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public putAll(object0: K, iterable1: java.lang.Iterable<any>): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public values(): java.util.Collection<V>;
					public putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(object0: K, iterable1: java.lang.Iterable<any>): java.util.Collection<V>;
					public keySet(): java.util.Set<K>;
					public size(): number;
					public removeAll(object0: any): java.util.Collection<V>;
					public entries(): java.util.Collection<java.util.Map.Entry<K,V>>;
					public get(object0: K): java.util.Collection<V>;
					public keys(): com.google.common.collect.Multiset<K>;
					public put(object0: K, object1: V): boolean;
					public clear(): void;
					public containsEntry(object0: any, object1: any): boolean;
					public remove(object0: any, object1: any): boolean;
					public asMap(): java.util.Map<K,java.util.Collection<V>>;
					public hashCode(): number;
					public containsKey(object0: any): boolean;
					public containsValue(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class MultimapBuilder<K0, V0>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.MultimapBuilder<any,any>>;
					public static hashKeys(expectedKeys: number): com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<any>;
					public static linkedHashKeys(): com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<any>;
					public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.Multimap<any,any>;
					public static hashKeys(): com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<any>;
					public static treeKeys(comparator: java.util.Comparator<any>): com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<any>;
					public static linkedHashKeys(expectedKeys: number): com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<any>;
					public static enumKeys(keyClass: java.lang.Class<any>): com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<any>;
					public static treeKeys(): com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<java.lang.Comparable<any>>;
					public build(): com.google.common.collect.Multimap<any,any>;
				}
				export module MultimapBuilder {
					export class ArrayListSupplier<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.ArrayListSupplier<any>>;
						public get(): java.util.List<V>;
						public get(): any;
					}
					export class EnumSetSupplier<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.EnumSetSupplier<any>>;
						public get(): java.util.Set<V>;
						public get(): any;
					}
					export class HashSetSupplier<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.HashSetSupplier<any>>;
						public get(): java.util.Set<V>;
						public get(): any;
					}
					export class LinkedHashSetSupplier<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.LinkedHashSetSupplier<any>>;
						public get(): java.util.Set<V>;
						public get(): any;
					}
					export class LinkedListSupplier extends com.google.common.base.Supplier<java.util.List<any>> {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.LinkedListSupplier>;
						public static INSTANCE: com.google.common.collect.MultimapBuilder.LinkedListSupplier;
						public get(): java.util.List<any>;
						public static values(): native.Array<com.google.common.collect.MultimapBuilder.LinkedListSupplier>;
						public static instance(): com.google.common.base.Supplier<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.collect.MultimapBuilder.LinkedListSupplier;
						public get(): any;
					}
					export abstract class ListMultimapBuilder<K0, V0>  extends com.google.common.collect.MultimapBuilder<any,any> {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.ListMultimapBuilder<any,any>>;
						public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.Multimap<any,any>;
						public build(): com.google.common.collect.ListMultimap<any,any>;
						public build(): com.google.common.collect.Multimap<any,any>;
						public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.ListMultimap<any,any>;
					}
					export abstract class MultimapBuilderWithKeys<K0>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys<any>>;
						public treeSetValues(): com.google.common.collect.MultimapBuilder.SortedSetMultimapBuilder<K0,java.lang.Comparable<any>>;
						public treeSetValues(comparator: java.util.Comparator<any>): com.google.common.collect.MultimapBuilder.SortedSetMultimapBuilder<any,any>;
						public arrayListValues(expectedValuesPerKey: number): com.google.common.collect.MultimapBuilder.ListMultimapBuilder<K0,any>;
						public hashSetValues(expectedValuesPerKey: number): com.google.common.collect.MultimapBuilder.SetMultimapBuilder<K0,any>;
						public linkedHashSetValues(): com.google.common.collect.MultimapBuilder.SetMultimapBuilder<K0,any>;
						public linkedListValues(): com.google.common.collect.MultimapBuilder.ListMultimapBuilder<K0,any>;
						public hashSetValues(): com.google.common.collect.MultimapBuilder.SetMultimapBuilder<K0,any>;
						public enumSetValues(valueClass: java.lang.Class<any>): com.google.common.collect.MultimapBuilder.SetMultimapBuilder<any,any>;
						public arrayListValues(): com.google.common.collect.MultimapBuilder.ListMultimapBuilder<K0,any>;
						public linkedHashSetValues(expectedValuesPerKey: number): com.google.common.collect.MultimapBuilder.SetMultimapBuilder<K0,any>;
					}
					export abstract class SetMultimapBuilder<K0, V0>  extends com.google.common.collect.MultimapBuilder<any,any> {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.SetMultimapBuilder<any,any>>;
						public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.Multimap<any,any>;
						public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.SetMultimap<any,any>;
						public build(): com.google.common.collect.SetMultimap<any,any>;
						public build(): com.google.common.collect.Multimap<any,any>;
					}
					export abstract class SortedSetMultimapBuilder<K0, V0>  extends com.google.common.collect.MultimapBuilder.SetMultimapBuilder<any,any> {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.SortedSetMultimapBuilder<any,any>>;
						public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.SortedSetMultimap<any,any>;
						public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.Multimap<any,any>;
						public build(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.SetMultimap<any,any>;
						public build(): com.google.common.collect.SortedSetMultimap<any,any>;
						public build(): com.google.common.collect.SetMultimap<any,any>;
						public build(): com.google.common.collect.Multimap<any,any>;
					}
					export class TreeSetSupplier<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.MultimapBuilder.TreeSetSupplier<any>>;
						public get(): java.util.SortedSet<V>;
						public get(): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Multimaps extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Multimaps>;
					public static index(values: java.util.Iterator<any>, keyFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableListMultimap<any,any>;
					public static invertFrom(source: com.google.common.collect.Multimap<any,any>, dest: com.google.common.collect.Multimap<any,any>): com.google.common.collect.Multimap<any,any>;
					public static forMap(map: java.util.Map<any,any>): com.google.common.collect.SetMultimap<any,any>;
					public static newSetMultimap(map: java.util.Map<any,any>, factory: com.google.common.base.Supplier<any>): com.google.common.collect.SetMultimap<any,any>;
					public static transformValues(fromMultimap: com.google.common.collect.ListMultimap<any,any>, function1: com.google.common.base.Function<any,any>): com.google.common.collect.ListMultimap<any,any>;
					public static newSortedSetMultimap(map: java.util.Map<any,any>, factory: com.google.common.base.Supplier<any>): com.google.common.collect.SortedSetMultimap<any,any>;
					public static synchronizedSetMultimap(multimap: com.google.common.collect.SetMultimap<any,any>): com.google.common.collect.SetMultimap<any,any>;
					public static filterKeys(unfiltered: com.google.common.collect.Multimap<any,any>, keyPredicate: com.google.common.base.Predicate<any>): com.google.common.collect.Multimap<any,any>;
					public static asMap(multimap: com.google.common.collect.SetMultimap<any,any>): java.util.Map<any,any>;
					public static filterKeys(unfiltered: com.google.common.collect.SetMultimap<any,any>, keyPredicate: com.google.common.base.Predicate<any>): com.google.common.collect.SetMultimap<any,any>;
					public static synchronizedSortedSetMultimap(multimap: com.google.common.collect.SortedSetMultimap<any,any>): com.google.common.collect.SortedSetMultimap<any,any>;
					public static transformEntries(fromMap: com.google.common.collect.Multimap<any,any>, transformer: com.google.common.collect.Maps.EntryTransformer<any,any,any>): com.google.common.collect.Multimap<any,any>;
					/** @deprecated */
					public static unmodifiableListMultimap(delegate: com.google.common.collect.ImmutableListMultimap<any,any>): com.google.common.collect.ListMultimap<any,any>;
					public static newMultimap(map: java.util.Map<any,any>, factory: com.google.common.base.Supplier<any>): com.google.common.collect.Multimap<any,any>;
					public static index(values: java.lang.Iterable<any>, keyFunction: com.google.common.base.Function<any,any>): com.google.common.collect.ImmutableListMultimap<any,any>;
					public static transformEntries(fromMap: com.google.common.collect.ListMultimap<any,any>, transformer: com.google.common.collect.Maps.EntryTransformer<any,any,any>): com.google.common.collect.ListMultimap<any,any>;
					public static filterValues(unfiltered: com.google.common.collect.Multimap<any,any>, valuePredicate: com.google.common.base.Predicate<any>): com.google.common.collect.Multimap<any,any>;
					public static filterEntries(unfiltered: com.google.common.collect.Multimap<any,any>, entryPredicate: com.google.common.base.Predicate<any>): com.google.common.collect.Multimap<any,any>;
					public static newListMultimap(map: java.util.Map<any,any>, factory: com.google.common.base.Supplier<any>): com.google.common.collect.ListMultimap<any,any>;
					public static filterKeys(unfiltered: com.google.common.collect.ListMultimap<any,any>, keyPredicate: com.google.common.base.Predicate<any>): com.google.common.collect.ListMultimap<any,any>;
					public static synchronizedListMultimap(multimap: com.google.common.collect.ListMultimap<any,any>): com.google.common.collect.ListMultimap<any,any>;
					/** @deprecated */
					public static unmodifiableSetMultimap(delegate: com.google.common.collect.ImmutableSetMultimap<any,any>): com.google.common.collect.SetMultimap<any,any>;
					public static asMap(multimap: com.google.common.collect.ListMultimap<any,any>): java.util.Map<any,any>;
					public static unmodifiableMultimap(delegate: com.google.common.collect.Multimap<any,any>): com.google.common.collect.Multimap<any,any>;
					public static unmodifiableSortedSetMultimap(delegate: com.google.common.collect.SortedSetMultimap<any,any>): com.google.common.collect.SortedSetMultimap<any,any>;
					/** @deprecated */
					public static unmodifiableMultimap(delegate: com.google.common.collect.ImmutableMultimap<any,any>): com.google.common.collect.Multimap<any,any>;
					public static asMap(multimap: com.google.common.collect.SortedSetMultimap<any,any>): java.util.Map<any,any>;
					public static filterValues(unfiltered: com.google.common.collect.SetMultimap<any,any>, valuePredicate: com.google.common.base.Predicate<any>): com.google.common.collect.SetMultimap<any,any>;
					public static asMap(multimap: com.google.common.collect.Multimap<any,any>): java.util.Map<any,any>;
					public static filterEntries(unfiltered: com.google.common.collect.SetMultimap<any,any>, entryPredicate: com.google.common.base.Predicate<any>): com.google.common.collect.SetMultimap<any,any>;
					public static synchronizedMultimap(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.Multimap<any,any>;
					public static unmodifiableSetMultimap(delegate: com.google.common.collect.SetMultimap<any,any>): com.google.common.collect.SetMultimap<any,any>;
					public static transformValues(fromMultimap: com.google.common.collect.Multimap<any,any>, function1: com.google.common.base.Function<any,any>): com.google.common.collect.Multimap<any,any>;
					public static unmodifiableListMultimap(delegate: com.google.common.collect.ListMultimap<any,any>): com.google.common.collect.ListMultimap<any,any>;
				}
				export module Multimaps {
					export class AsMap<K, V>  extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,java.util.Collection<any>> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.AsMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public get(key: any): java.util.Collection<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public remove(key: any): java.util.Collection<any>;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public createEntrySet(): java.util.Set<java.util.Map.Entry<any,java.util.Collection<any>>>;
						public keySet(): java.util.Set<any>;
					}
					export module AsMap {
						export class EntrySet extends com.google.common.collect.Maps.EntrySet<any,java.util.Collection<any>> {
							public static class: java.lang.Class<com.google.common.collect.Multimaps.AsMap.EntrySet>;
							public iterator(): java.util.Iterator<java.util.Map.Entry<any,java.util.Collection<any>>>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
					}
					export class CustomListMultimap<K, V>  extends com.google.common.collect.AbstractListMultimap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.CustomListMultimap<any,any>>;
						public removeAll(key: any): java.util.List<any>;
						public removeAll(key: any): java.util.Collection<any>;
						public get(key: any): java.util.List<any>;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public createCollection(): java.util.List<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class CustomMultimap<K, V>  extends com.google.common.collect.AbstractMapBasedMultimap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.CustomMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public createCollection(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class CustomSetMultimap<K, V>  extends com.google.common.collect.AbstractSetMultimap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.CustomSetMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public get(key: any): java.util.Set<any>;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public put(key: any, value: any): boolean;
						public createCollection(): java.util.Set<any>;
						public containsValue(value: any): boolean;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
						public removeAll(key: any): java.util.Set<any>;
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
						public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					}
					export class CustomSortedSetMultimap<K, V>  extends com.google.common.collect.AbstractSortedSetMultimap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.CustomSortedSetMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public createCollection(): java.util.SortedSet<any>;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public valueComparator(): java.util.Comparator<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public get(key: any): java.util.Set<any>;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public put(key: any, value: any): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.SortedSet<any>;
						public containsValue(value: any): boolean;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
						public get(key: any): java.util.SortedSet<any>;
						public removeAll(key: any): java.util.Set<any>;
						public clear(): void;
						public removeAll(key: any): java.util.SortedSet<any>;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
						public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					}
					export abstract class Entries<K, V>  extends java.util.AbstractCollection<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.Entries<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class Keys<K, V>  extends com.google.common.collect.AbstractMultiset<any> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.Keys<any,any>>;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public count(element: any): number;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public setCount(element: any, count: number): number;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public remove(element: any, occurrences: number): number;
						public toString(): string;
						public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
						public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
						public addAll(elementsToAdd: java.util.Collection<any>): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public equals(object: any): boolean;
						public add(element: any, occurrences: number): number;
						public toArray(): native.Array<any>;
					}
					export class MapMultimap<K, V>  extends com.google.common.collect.AbstractMultimap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.MapMultimap<any,any>>;
						public get(object0: any): java.util.Collection<any>;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public removeAll(object0: any): java.util.Collection<any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public get(key: any): java.util.Set<any>;
						public keys(): com.google.common.collect.Multiset<any>;
						public removeAll(key: any): java.util.Set<any>;
						public size(): number;
						public equals(object: any): boolean;
						public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
						public keySet(): java.util.Set<any>;
					}
					export class TransformedEntriesListMultimap<K, V1, V2>  extends com.google.common.collect.Multimaps.TransformedEntriesMultimap<any,any,any> implements com.google.common.collect.ListMultimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.TransformedEntriesListMultimap<any,any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public removeAll(key: any): java.util.List<any>;
						public get(key: any): java.util.List<any>;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class TransformedEntriesMultimap<K, V1, V2>  extends com.google.common.collect.AbstractMultimap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.TransformedEntriesMultimap<any,any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public put(key: any, value: any): boolean;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class UnmodifiableListMultimap<K, V>  extends com.google.common.collect.Multimaps.UnmodifiableMultimap<any,any> implements com.google.common.collect.ListMultimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.UnmodifiableListMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public get(key: any): java.util.List<any>;
						public delegate(): com.google.common.collect.ListMultimap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public delegate(): com.google.common.collect.Multimap<any,any>;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public removeAll(key: any): java.util.List<any>;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public delegate(): any;
						public clear(): void;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class UnmodifiableMultimap<K, V>  extends com.google.common.collect.ForwardingMultimap<any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.UnmodifiableMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public put(key: any, value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public containsValue(value: any): boolean;
						public hashCode(): number;
						public delegate(): com.google.common.collect.Multimap<any,any>;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public values(): java.util.Collection<any>;
						public containsEntry(key: any, value: any): boolean;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public delegate(): any;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public equals(object: any): boolean;
						public keySet(): java.util.Set<any>;
					}
					export class UnmodifiableSetMultimap<K, V>  extends com.google.common.collect.Multimaps.UnmodifiableMultimap<any,any> implements com.google.common.collect.SetMultimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.UnmodifiableSetMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public delegate(): com.google.common.collect.SetMultimap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public delegate(): com.google.common.collect.Multimap<any,any>;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public get(key: any): java.util.Set<any>;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public delegate(): any;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
						public clear(): void;
						public removeAll(key: any): java.util.Set<any>;
						public equals(object: any): boolean;
						public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
						public keySet(): java.util.Set<any>;
					}
					export class UnmodifiableSortedSetMultimap<K, V>  extends com.google.common.collect.Multimaps.UnmodifiableSetMultimap<any,any> implements com.google.common.collect.SortedSetMultimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Multimaps.UnmodifiableSortedSetMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public delegate(): com.google.common.collect.SetMultimap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public delegate(): com.google.common.collect.Multimap<any,any>;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public delegate(): com.google.common.collect.SortedSetMultimap<any,any>;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public valueComparator(): java.util.Comparator<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public get(key: any): java.util.Set<any>;
						public keys(): com.google.common.collect.Multiset<any>;
						public size(): number;
						public put(key: any, value: any): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.SortedSet<any>;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public delegate(): any;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
						public clear(): void;
						public get(key: any): java.util.SortedSet<any>;
						public removeAll(key: any): java.util.Set<any>;
						public removeAll(key: any): java.util.SortedSet<any>;
						public equals(object: any): boolean;
						public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
						public keySet(): java.util.Set<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Multiset<E>  extends java.util.Collection<any> {
					public static class: java.lang.Class<com.google.common.collect.Multiset<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.Multiset<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						size(): number;
						count(object0: any): number;
						add(object0: any, int1: number): number;
						add(object0: any): boolean;
						remove(object0: any, int1: number): number;
						remove(object0: any): boolean;
						setCount(object0: any, int1: number): number;
						setCount(object0: any, int1: number, int2: number): boolean;
						elementSet(): java.util.Set<any>;
						entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						iterator(): java.util.Iterator<any>;
						contains(object0: any): boolean;
						containsAll(collection0: java.util.Collection<any>): boolean;
						removeAll(collection0: java.util.Collection<any>): boolean;
						retainAll(collection0: java.util.Collection<any>): boolean;
						size(): number;
						isEmpty(): boolean;
						contains(object0: any): boolean;
						iterator(): java.util.Iterator<any>;
						toArray(): native.Array<any>;
						toArray(objects0: native.Array<any>): native.Array<any>;
						add(object0: any): boolean;
						remove(object0: any): boolean;
						containsAll(collection0: java.util.Collection<any>): boolean;
						addAll(collection0: java.util.Collection<any>): boolean;
						removeAll(collection0: java.util.Collection<any>): boolean;
						removeIf(filter: any /* any*/): boolean;
						retainAll(collection0: java.util.Collection<any>): boolean;
						clear(): void;
						equals(object0: any): boolean;
						hashCode(): number;
						spliterator(): java.util.Spliterator<any>;
						stream(): java.util.stream.Stream<any>;
						parallelStream(): java.util.stream.Stream<any>;
						iterator(): java.util.Iterator<any>;
						forEach(action: any /* any*/): void;
						spliterator(): java.util.Spliterator<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					public containsAll(collection0: java.util.Collection<any>): boolean;
					public size(): number;
					public remove(object0: any, int1: number): number;
					public contains(object0: any): boolean;
					public toString(): string;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public setCount(object0: any, int1: number, int2: number): boolean;
					public clear(): void;
					public setCount(object0: any, int1: number): number;
					public removeAll(collection0: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public addAll(collection0: java.util.Collection<any>): boolean;
					public forEach(action: any /* any*/): void;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(object0: any): boolean;
					public toArray(objects0: native.Array<any>): native.Array<any>;
					public add(object0: any, int1: number): number;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public remove(object0: any): boolean;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public retainAll(collection0: java.util.Collection<any>): boolean;
				}
				export module Multiset {
					export class Entry<E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.Multiset.Entry<any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.Multiset$Entry interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getElement(): E;
							getCount(): number;
							equals(object0: any): boolean;
							hashCode(): number;
							toString(): string;
						});
						public constructor();
						public equals(obj: any): boolean;
						public getElement(): E;
						public hashCode(): number;
						public getCount(): number;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Multisets extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Multisets>;
					public static unmodifiableMultiset(multiset: com.google.common.collect.Multiset<any>): com.google.common.collect.Multiset<any>;
					public static filter(unfiltered: com.google.common.collect.Multiset<any>, predicate: com.google.common.base.Predicate<any>): com.google.common.collect.Multiset<any>;
					public static unmodifiableSortedMultiset(sortedMultiset: com.google.common.collect.SortedMultiset<any>): com.google.common.collect.SortedMultiset<any>;
					public static intersection(multiset1: com.google.common.collect.Multiset<any>, multiset2: com.google.common.collect.Multiset<any>): com.google.common.collect.Multiset<any>;
					public static copyHighestCountFirst(multiset: com.google.common.collect.Multiset<any>): com.google.common.collect.ImmutableMultiset<any>;
					/** @deprecated */
					public static unmodifiableMultiset(multiset: com.google.common.collect.ImmutableMultiset<any>): com.google.common.collect.Multiset<any>;
					public static containsOccurrences(superMultiset: com.google.common.collect.Multiset<any>, subMultiset: com.google.common.collect.Multiset<any>): boolean;
					public static removeOccurrences(multisetToModify: com.google.common.collect.Multiset<any>, occurrencesToRemove: com.google.common.collect.Multiset<any>): boolean;
					public static retainOccurrences(multisetToModify: com.google.common.collect.Multiset<any>, multisetToRetain: com.google.common.collect.Multiset<any>): boolean;
					public static difference(multiset1: com.google.common.collect.Multiset<any>, multiset2: com.google.common.collect.Multiset<any>): com.google.common.collect.Multiset<any>;
					public static sum(multiset1: com.google.common.collect.Multiset<any>, multiset2: com.google.common.collect.Multiset<any>): com.google.common.collect.Multiset<any>;
					public static union(multiset1: com.google.common.collect.Multiset<any>, multiset2: com.google.common.collect.Multiset<any>): com.google.common.collect.Multiset<any>;
					public static immutableEntry(e: any, n: number): com.google.common.collect.Multiset.Entry<any>;
					public static removeOccurrences(multisetToModify: com.google.common.collect.Multiset<any>, occurrencesToRemove: java.lang.Iterable<any>): boolean;
				}
				export module Multisets {
					export abstract class AbstractEntry<E>  extends com.google.common.collect.Multiset.Entry<any> {
						public static class: java.lang.Class<com.google.common.collect.Multisets.AbstractEntry<any>>;
						public equals(obj: any): boolean;
						public getElement(): any;
						public hashCode(): number;
						public getCount(): number;
						public equals(object: any): boolean;
						public toString(): string;
					}
					export class DecreasingCount extends java.util.Comparator<com.google.common.collect.Multiset.Entry<any>> {
						public static class: java.lang.Class<com.google.common.collect.Multisets.DecreasingCount>;
						public equals(obj: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public compare(entry1: com.google.common.collect.Multiset.Entry<any>, entry2: com.google.common.collect.Multiset.Entry<any>): number;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
					export abstract class ElementSet<E>  extends com.google.common.collect.Sets.ImprovedAbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.Multisets.ElementSet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class EntrySet<E>  extends com.google.common.collect.Sets.ImprovedAbstractSet<com.google.common.collect.Multiset.Entry<any>> {
						public static class: java.lang.Class<com.google.common.collect.Multisets.EntrySet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class FilteredMultiset<E>  extends com.google.common.collect.Multisets.ViewMultiset<any> {
						public static class: java.lang.Class<com.google.common.collect.Multisets.FilteredMultiset<any>>;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public count(element: any): number;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public setCount(element: any, count: number): number;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public remove(element: any, occurrences: number): number;
						public toString(): string;
						public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
						public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
						public addAll(elementsToAdd: java.util.Collection<any>): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public equals(object: any): boolean;
						public add(element: any, occurrences: number): number;
						public toArray(): native.Array<any>;
					}
					export class ImmutableEntry<E>  extends com.google.common.collect.Multisets.AbstractEntry<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Multisets.ImmutableEntry<any>>;
						public getElement(): any;
						public hashCode(): number;
						public getCount(): number;
						public nextInBucket(): com.google.common.collect.Multisets.ImmutableEntry<any>;
						public equals(object: any): boolean;
						public toString(): string;
					}
					export class MultisetIteratorImpl<E>  extends java.util.Iterator<any> {
						public static class: java.lang.Class<com.google.common.collect.Multisets.MultisetIteratorImpl<any>>;
						public next(): any;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class UnmodifiableMultiset<E>  extends com.google.common.collect.ForwardingMultiset<any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Multisets.UnmodifiableMultiset<any>>;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public count(element: any): number;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public size(): number;
						public setCount(element: any, count: number): number;
						public delegate(): java.util.Collection<any>;
						public add(element: any, occurences: number): number;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public remove(element: any, occurrences: number): number;
						public toString(): string;
						public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
						public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
						public delegate(): any;
						public delegate(): com.google.common.collect.Multiset<any>;
						public remove(object: any): boolean;
						public addAll(elementsToAdd: java.util.Collection<any>): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public equals(object: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public add(element: any, occurrences: number): number;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export abstract class ViewMultiset<E>  extends com.google.common.collect.AbstractMultiset<any> {
						public static class: java.lang.Class<com.google.common.collect.Multisets.ViewMultiset<any>>;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public count(object0: any): number;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public setCount(element: any, count: number): number;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public remove(element: any, occurrences: number): number;
						public toString(): string;
						public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
						public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
						public addAll(elementsToAdd: java.util.Collection<any>): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public equals(object: any): boolean;
						public add(element: any, occurrences: number): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class MutableClassToInstanceMap<B>  extends com.google.common.collect.ForwardingMap<java.lang.Class<any>,any> {
					public static class: java.lang.Class<com.google.common.collect.MutableClassToInstanceMap<any>>;
					public containsKey(key: any): boolean;
					public put(key: java.lang.Class<any>, value: any): any;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public putInstance(type: java.lang.Class<any>, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public static create(): com.google.common.collect.MutableClassToInstanceMap<any>;
					public static create(backingMap: java.util.Map<any,any>): com.google.common.collect.MutableClassToInstanceMap<any>;
					public getInstance(type: java.lang.Class<any>): any;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public entrySet(): java.util.Set<java.util.Map.Entry<java.lang.Class<any>,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<java.lang.Class<any>,any>;
					public delegate(): java.util.Map<any,any>;
				}
				export module MutableClassToInstanceMap {
					export class SerializedForm<B>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.MutableClassToInstanceMap.SerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class NaturalOrdering extends com.google.common.collect.Ordering<java.lang.Comparable<any>> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.NaturalOrdering>;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public equals(obj: any): boolean;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public reverse(): com.google.common.collect.Ordering<any>;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public compare(left: java.lang.Comparable<any>, right: java.lang.Comparable<any>): number;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class NullsFirstOrdering<T>  extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.NullsFirstOrdering<any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public reverse(): com.google.common.collect.Ordering<any>;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(left: any, right: any): number;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class NullsLastOrdering<T>  extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.NullsLastOrdering<any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public reverse(): com.google.common.collect.Ordering<any>;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(left: any, right: any): number;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ObjectArrays extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ObjectArrays>;
					public static concat(element: any, array: native.Array<any>): native.Array<any>;
					public static newArray(type: java.lang.Class<any>, length: number): native.Array<any>;
					public static concat(first: native.Array<any>, second: native.Array<any>, type: java.lang.Class<any>): native.Array<any>;
					public static concat(array: native.Array<any>, element: any): native.Array<any>;
					public static newArray(reference: native.Array<any>, length: number): native.Array<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ObjectCountHashMap<K>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.ObjectCountHashMap<any>>;
					public containsKey(key: any): boolean;
					public remove(key: any): number;
					public static create(): com.google.common.collect.ObjectCountHashMap<any>;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.ObjectCountHashMap<any>;
					public clear(): void;
					public put(key: K, value: number): number;
					public get(key: any): number;
				}
				export module ObjectCountHashMap {
					export class MapEntry extends com.google.common.collect.Multisets.AbstractEntry<any> {
						public static class: java.lang.Class<com.google.common.collect.ObjectCountHashMap.MapEntry>;
						public setCount(count: number): number;
						public getElement(): any;
						public hashCode(): number;
						public getCount(): number;
						public equals(object: any): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ObjectCountLinkedHashMap<K>  extends com.google.common.collect.ObjectCountHashMap<any> {
					public static class: java.lang.Class<com.google.common.collect.ObjectCountLinkedHashMap<any>>;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.ObjectCountLinkedHashMap<any>;
					public static create(): com.google.common.collect.ObjectCountHashMap<any>;
					public static create(): com.google.common.collect.ObjectCountLinkedHashMap<any>;
					public static createWithExpectedSize(expectedSize: number): com.google.common.collect.ObjectCountHashMap<any>;
					public clear(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class Ordering<T>  extends java.util.Comparator<any> {
					public static class: java.lang.Class<com.google.common.collect.Ordering<any>>;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public leastOf(iterable: java.lang.Iterable<any>, k: number): java.util.List<any>;
					public compound(secondaryComparator: java.util.Comparator<any>): com.google.common.collect.Ordering<any>;
					public onResultOf(function0: com.google.common.base.Function<any,any>): com.google.common.collect.Ordering<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public min(iterable: java.lang.Iterable<any>): any;
					public constructor();
					public lexicographical(): com.google.common.collect.Ordering<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public min(a: any, b: any, c: any, rest: native.Array<any>): any;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static natural(): com.google.common.collect.Ordering<any>;
					public greatestOf(iterator: java.util.Iterator<any>, k: number): java.util.List<any>;
					public static allEqual(): com.google.common.collect.Ordering<any>;
					public static from(comparator: java.util.Comparator<any>): com.google.common.collect.Ordering<any>;
					public static usingToString(): com.google.common.collect.Ordering<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public equals(obj: any): boolean;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public isOrdered(iterable: java.lang.Iterable<any>): boolean;
					public min(iterator: java.util.Iterator<any>): any;
					public static explicit(valuesInOrder: java.util.List<any>): com.google.common.collect.Ordering<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public greatestOf(iterable: java.lang.Iterable<any>, k: number): java.util.List<any>;
					public reverse(): com.google.common.collect.Ordering<any>;
					public static explicit(leastValue: any, remainingValuesInOrder: native.Array<any>): com.google.common.collect.Ordering<any>;
					public isStrictlyOrdered(iterable: java.lang.Iterable<any>): boolean;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public leastOf(iterator: java.util.Iterator<any>, k: number): java.util.List<any>;
					public sortedCopy(elements: java.lang.Iterable<any>): java.util.List<any>;
					public max(a: any, b: any): any;
					public max(iterator: java.util.Iterator<any>): any;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public max(iterable: java.lang.Iterable<any>): any;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public max(a: any, b: any, c: any, rest: native.Array<any>): any;
					public static reverseOrder(): java.util.Comparator<any>;
					/** @deprecated */
					public binarySearch(sortedList: java.util.List<any>, key: any): number;
					/** @deprecated */
					public static from(ordering: com.google.common.collect.Ordering<any>): com.google.common.collect.Ordering<any>;
					public static arbitrary(): com.google.common.collect.Ordering<any>;
					public min(a: any, b: any): any;
					public immutableSortedCopy(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
					public static compound(comparators: java.lang.Iterable<any>): com.google.common.collect.Ordering<any>;
				}
				export module Ordering {
					export class ArbitraryOrdering extends com.google.common.collect.Ordering<any> {
						public static class: java.lang.Class<com.google.common.collect.Ordering.ArbitraryOrdering>;
						public compare(left: any, right: any): number;
						public equals(obj: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public nullsLast(): com.google.common.collect.Ordering<any>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public nullsFirst(): com.google.common.collect.Ordering<any>;
						public reversed(): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
					export class ArbitraryOrderingHolder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.Ordering.ArbitraryOrderingHolder>;
					}
					export class IncomparableValueException extends java.lang.ClassCastException {
						public static class: java.lang.Class<com.google.common.collect.Ordering.IncomparableValueException>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class PeekingIterator<E>  extends java.util.Iterator<any> {
					public static class: java.lang.Class<com.google.common.collect.PeekingIterator<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.PeekingIterator<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						peek(): any;
						next(): any;
						remove(): void;
					});
					public constructor();
					public peek(): any;
					public next(): any;
					public remove(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Platform extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Platform>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Queues extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Queues>;
					public static newArrayDeque(): java.util.ArrayDeque<any>;
					public static newLinkedBlockingDeque(): java.util.concurrent.LinkedBlockingDeque<any>;
					public static drainUninterruptibly(q: java.util.concurrent.BlockingQueue<any>, buffer: java.util.Collection<any>, numElements: number, timeout: number, unit: java.util.concurrent.TimeUnit): number;
					public static newConcurrentLinkedQueue(): java.util.concurrent.ConcurrentLinkedQueue<any>;
					public static newPriorityBlockingQueue(elements: java.lang.Iterable<any>): java.util.concurrent.PriorityBlockingQueue<any>;
					public static newLinkedBlockingQueue(elements: java.lang.Iterable<any>): java.util.concurrent.LinkedBlockingQueue<any>;
					public static newLinkedBlockingQueue(): java.util.concurrent.LinkedBlockingQueue<any>;
					public static synchronizedQueue(queue: java.util.Queue<any>): java.util.Queue<any>;
					public static newPriorityQueue(): java.util.PriorityQueue<any>;
					public static newLinkedBlockingDeque(elements: java.lang.Iterable<any>): java.util.concurrent.LinkedBlockingDeque<any>;
					public static newSynchronousQueue(): java.util.concurrent.SynchronousQueue<any>;
					public static newPriorityQueue(elements: java.lang.Iterable<any>): java.util.PriorityQueue<any>;
					public static drain(q: java.util.concurrent.BlockingQueue<any>, buffer: java.util.Collection<any>, numElements: number, timeout: number, unit: java.util.concurrent.TimeUnit): number;
					public static newArrayBlockingQueue(capacity: number): java.util.concurrent.ArrayBlockingQueue<any>;
					public static newConcurrentLinkedQueue(elements: java.lang.Iterable<any>): java.util.concurrent.ConcurrentLinkedQueue<any>;
					public static newPriorityBlockingQueue(): java.util.concurrent.PriorityBlockingQueue<any>;
					public static newArrayDeque(elements: java.lang.Iterable<any>): java.util.ArrayDeque<any>;
					public static newLinkedBlockingQueue(capacity: number): java.util.concurrent.LinkedBlockingQueue<any>;
					public static synchronizedDeque(deque: java.util.Deque<any>): java.util.Deque<any>;
					public static newLinkedBlockingDeque(capacity: number): java.util.concurrent.LinkedBlockingDeque<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Range<C>  extends com.google.common.collect.RangeGwtSerializationDependencies<any> {
					public static class: java.lang.Class<com.google.common.collect.Range<any>>;
					public lowerBoundType(): com.google.common.collect.BoundType;
					public static range(lower: java.lang.Comparable<any>, lowerType: com.google.common.collect.BoundType, upper: java.lang.Comparable<any>, upperType: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public equals(obj: any): boolean;
					public hasUpperBound(): boolean;
					public isEmpty(): boolean;
					public static singleton(value: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public lowerEndpoint(): any;
					public static atLeast(endpoint: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public encloses(other: com.google.common.collect.Range<any>): boolean;
					public static greaterThan(endpoint: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public upperEndpoint(): any;
					public equals(object: any): boolean;
					public toString(): string;
					public span(other: com.google.common.collect.Range<any>): com.google.common.collect.Range<any>;
					public static upTo(endpoint: java.lang.Comparable<any>, boundType: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public contains(value: any): boolean;
					public canonical(domain: com.google.common.collect.DiscreteDomain<any>): com.google.common.collect.Range<any>;
					public static closedOpen(lower: java.lang.Comparable<any>, upper: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public static downTo(endpoint: java.lang.Comparable<any>, boundType: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public static openClosed(lower: java.lang.Comparable<any>, upper: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public upperBoundType(): com.google.common.collect.BoundType;
					public static encloseAll(values: java.lang.Iterable<any>): com.google.common.collect.Range<any>;
					public isConnected(other: com.google.common.collect.Range<any>): boolean;
					public hashCode(): number;
					public static atMost(endpoint: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public static all(): com.google.common.collect.Range<any>;
					public static open(lower: java.lang.Comparable<any>, upper: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public apply(object0: any): boolean;
					public hasLowerBound(): boolean;
					public static closed(lower: java.lang.Comparable<any>, upper: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
					public gap(otherRange: com.google.common.collect.Range<any>): com.google.common.collect.Range<any>;
					public containsAll(values: java.lang.Iterable<any>): boolean;
					public intersection(connectedRange: com.google.common.collect.Range<any>): com.google.common.collect.Range<any>;
					/** @deprecated */
					public apply(input: any): boolean;
					public static lessThan(endpoint: java.lang.Comparable<any>): com.google.common.collect.Range<any>;
				}
				export module Range {
					export class LowerBoundFn extends com.google.common.base.Function<com.google.common.collect.Range<any>,com.google.common.collect.Cut<any>> {
						public static class: java.lang.Class<com.google.common.collect.Range.LowerBoundFn>;
						public apply(range: com.google.common.collect.Range<any>): com.google.common.collect.Cut<any>;
						public equals(obj: any): boolean;
						public apply(object0: any): any;
					}
					export class RangeLexOrdering extends com.google.common.collect.Ordering<com.google.common.collect.Range<any>> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Range.RangeLexOrdering>;
						public equals(obj: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public nullsLast(): com.google.common.collect.Ordering<any>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public nullsFirst(): com.google.common.collect.Ordering<any>;
						public reversed(): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public compare(left: com.google.common.collect.Range<any>, right: com.google.common.collect.Range<any>): number;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
					export class UpperBoundFn extends com.google.common.base.Function<com.google.common.collect.Range<any>,com.google.common.collect.Cut<any>> {
						public static class: java.lang.Class<com.google.common.collect.Range.UpperBoundFn>;
						public apply(range: com.google.common.collect.Range<any>): com.google.common.collect.Cut<any>;
						public equals(obj: any): boolean;
						public apply(object0: any): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class RangeGwtSerializationDependencies<C>  extends java.io.Serializable {
					public static class: java.lang.Class<com.google.common.collect.RangeGwtSerializationDependencies<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RangeMap<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.RangeMap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.RangeMap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(comparable0: K): V;
						getEntry(comparable0: K): java.util.Map.Entry<com.google.common.collect.Range<K>,V>;
						span(): com.google.common.collect.Range<K>;
						put(range0: com.google.common.collect.Range<K>, object1: V): void;
						putCoalescing(range0: com.google.common.collect.Range<K>, object1: V): void;
						putAll(rangeMap0: com.google.common.collect.RangeMap<K,V>): void;
						clear(): void;
						remove(range0: com.google.common.collect.Range<K>): void;
						asMapOfRanges(): java.util.Map<com.google.common.collect.Range<K>,V>;
						asDescendingMapOfRanges(): java.util.Map<com.google.common.collect.Range<K>,V>;
						subRangeMap(range0: com.google.common.collect.Range<K>): com.google.common.collect.RangeMap<K,V>;
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
					});
					public constructor();
					public span(): com.google.common.collect.Range<K>;
					public equals(obj: any): boolean;
					public put(range0: com.google.common.collect.Range<K>, object1: V): void;
					public putAll(rangeMap0: com.google.common.collect.RangeMap<K,V>): void;
					public getEntry(comparable0: K): java.util.Map.Entry<com.google.common.collect.Range<K>,V>;
					public subRangeMap(range0: com.google.common.collect.Range<K>): com.google.common.collect.RangeMap<K,V>;
					public putCoalescing(range0: com.google.common.collect.Range<K>, object1: V): void;
					public toString(): string;
					public remove(range0: com.google.common.collect.Range<K>): void;
					public get(comparable0: K): V;
					public asDescendingMapOfRanges(): java.util.Map<com.google.common.collect.Range<K>,V>;
					public clear(): void;
					public asMapOfRanges(): java.util.Map<com.google.common.collect.Range<K>,V>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RangeSet<C>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.RangeSet<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.RangeSet<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						contains(comparable0: C): boolean;
						rangeContaining(comparable0: C): com.google.common.collect.Range<C>;
						intersects(range0: com.google.common.collect.Range<C>): boolean;
						encloses(range0: com.google.common.collect.Range<C>): boolean;
						enclosesAll(rangeSet0: com.google.common.collect.RangeSet<C>): boolean;
						enclosesAll(iterable0: java.lang.Iterable<com.google.common.collect.Range<C>>): boolean;
						isEmpty(): boolean;
						span(): com.google.common.collect.Range<C>;
						asRanges(): java.util.Set<com.google.common.collect.Range<C>>;
						asDescendingSetOfRanges(): java.util.Set<com.google.common.collect.Range<C>>;
						complement(): com.google.common.collect.RangeSet<C>;
						subRangeSet(range0: com.google.common.collect.Range<C>): com.google.common.collect.RangeSet<C>;
						add(range0: com.google.common.collect.Range<C>): void;
						remove(range0: com.google.common.collect.Range<C>): void;
						clear(): void;
						addAll(rangeSet0: com.google.common.collect.RangeSet<C>): void;
						addAll(iterable0: java.lang.Iterable<com.google.common.collect.Range<C>>): void;
						removeAll(rangeSet0: com.google.common.collect.RangeSet<C>): void;
						removeAll(iterable0: java.lang.Iterable<com.google.common.collect.Range<C>>): void;
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
					});
					public constructor();
					public remove(range0: com.google.common.collect.Range<C>): void;
					public addAll(rangeSet0: com.google.common.collect.RangeSet<C>): void;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public enclosesAll(rangeSet0: com.google.common.collect.RangeSet<C>): boolean;
					public enclosesAll(iterable0: java.lang.Iterable<com.google.common.collect.Range<C>>): boolean;
					public span(): com.google.common.collect.Range<C>;
					public subRangeSet(range0: com.google.common.collect.Range<C>): com.google.common.collect.RangeSet<C>;
					public asDescendingSetOfRanges(): java.util.Set<com.google.common.collect.Range<C>>;
					public encloses(range0: com.google.common.collect.Range<C>): boolean;
					public toString(): string;
					public contains(comparable0: C): boolean;
					public removeAll(iterable0: java.lang.Iterable<com.google.common.collect.Range<C>>): void;
					public clear(): void;
					public rangeContaining(comparable0: C): com.google.common.collect.Range<C>;
					public add(range0: com.google.common.collect.Range<C>): void;
					public addAll(iterable0: java.lang.Iterable<com.google.common.collect.Range<C>>): void;
					public removeAll(rangeSet0: com.google.common.collect.RangeSet<C>): void;
					public complement(): com.google.common.collect.RangeSet<C>;
					public hashCode(): number;
					public intersects(range0: com.google.common.collect.Range<C>): boolean;
					public asRanges(): java.util.Set<com.google.common.collect.Range<C>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularContiguousSet<C>  extends com.google.common.collect.ContiguousSet<any> {
					public static class: java.lang.Class<com.google.common.collect.RegularContiguousSet<any>>;
					public ceiling(e: any): any;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public isEmpty(): boolean;
					/** @deprecated */
					public pollLast(): any;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public headSet(object0: any): java.util.SortedSet<any>;
					public descendingIterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public containsAll(targets: java.util.Collection<any>): boolean;
					public remove(object: any): boolean;
					public higher(e: any): any;
					public subSet(object0: any, object1: any): java.util.SortedSet<any>;
					public subSet(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableSet<any>;
					public range(boundType0: com.google.common.collect.BoundType, boundType1: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public pollFirst(): any;
					/** @deprecated */
					public clear(): void;
					public range(): com.google.common.collect.Range<any>;
					public descendingSet(): java.util.NavigableSet<any>;
					public first(): any;
					public range(lowerBoundType: com.google.common.collect.BoundType, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.Range<any>;
					public last(): any;
					public intersection(other: com.google.common.collect.ContiguousSet<any>): com.google.common.collect.ContiguousSet<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ContiguousSet<any>;
					public headSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ContiguousSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public lower(e: any): any;
					public contains(object0: any): boolean;
					/** @deprecated */
					public pollFirst(): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public equals(object: any): boolean;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public headSet(toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public intersection(contiguousSet0: com.google.common.collect.ContiguousSet<any>): com.google.common.collect.ContiguousSet<any>;
					public tailSet(object0: any): java.util.SortedSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public floor(e: any): any;
					public add(e: any): boolean;
					public descendingSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ContiguousSet<any>;
					public descendingIterator(): java.util.Iterator<any>;
					public removeIf(filter: any /* any*/): boolean;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public headSet(toElement: any): com.google.common.collect.ContiguousSet<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public pollLast(): any;
					public stream(): java.util.stream.Stream<any>;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public tailSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
				}
				export module RegularContiguousSet {
					export class SerializedForm<C>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.RegularContiguousSet.SerializedForm<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableAsList<E>  extends com.google.common.collect.ImmutableAsList<any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableAsList<any>>;
					public contains(target: any): boolean;
					/** @deprecated */
					public set(index: number, element: any): any;
					/** @deprecated */
					public remove(object: any): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public remove(index: number): any;
					public spliterator(): java.util.Spliterator<any>;
					public get(index: number): any;
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public set(index: number, element: any): any;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					public remove(index: number): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public indexOf(object: any): number;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public lastIndexOf(object: any): number;
					public sort(c: java.util.Comparator<any>): void;
					public subList(int0: number, int1: number): java.util.List<any>;
					/** @deprecated */
					public clear(): void;
					/** @deprecated */
					public add(index: number, element: any): void;
					public add(index: number, element: any): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public listIterator(): java.util.ListIterator<any>;
					public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
					public listIterator(int0: number): java.util.ListIterator<any>;
					public replaceAll(operator: any /* any*/): void;
					public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableBiMap<K, V>  extends com.google.common.collect.ImmutableBiMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableBiMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public inverse(): com.google.common.collect.ImmutableBiMap<any,any>;
					public isEmpty(): boolean;
					public remove(o: any): any;
					public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public inverse(): com.google.common.collect.BiMap<any,any>;
					/** @deprecated */
					public remove(o: any): any;
					public remove(key: any, value: any): boolean;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public equals(object: any): boolean;
					/** @deprecated */
					public forcePut(key: any, value: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					/** @deprecated */
					public put(k: any, v: any): any;
					public put(k: any, v: any): any;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public values(): com.google.common.collect.ImmutableSet<any>;
					public putAll(map: java.util.Map<any,any>): void;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public get(object0: any): any;
					public values(): java.util.Set<any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public forcePut(key: any, value: any): any;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableList<E>  extends com.google.common.collect.ImmutableList<any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableList<any>>;
					/** @deprecated */
					public set(index: number, element: any): any;
					/** @deprecated */
					public remove(object: any): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public remove(index: number): any;
					public spliterator(): java.util.Spliterator<any>;
					public get(index: number): any;
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public set(index: number, element: any): any;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public addAll(index: number, newElements: java.util.Collection<any>): boolean;
					public remove(index: number): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public indexOf(object: any): number;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public lastIndexOf(object: any): number;
					public sort(c: java.util.Comparator<any>): void;
					public subList(int0: number, int1: number): java.util.List<any>;
					/** @deprecated */
					public clear(): void;
					/** @deprecated */
					public add(index: number, element: any): void;
					public add(index: number, element: any): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public listIterator(): java.util.ListIterator<any>;
					public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
					public listIterator(int0: number): java.util.ListIterator<any>;
					public replaceAll(operator: any /* any*/): void;
					public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableMap<K, V>  extends com.google.common.collect.ImmutableMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableMap<any,any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public remove(o: any): any;
					public entrySet(): com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>>;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					/** @deprecated */
					public remove(o: any): any;
					public remove(key: any, value: any): boolean;
					public keySet(): com.google.common.collect.ImmutableSet<any>;
					public equals(object: any): boolean;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					/** @deprecated */
					public put(k: any, v: any): any;
					public put(k: any, v: any): any;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public putAll(map: java.util.Map<any,any>): void;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public replace(key: any, value: any): any;
					public get(object0: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
				}
				export module RegularImmutableMap {
					export class EntrySet<K, V>  extends com.google.common.collect.ImmutableSet<java.util.Map.Entry<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.RegularImmutableMap.EntrySet<any,any>>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public iterator(): com.google.common.collect.UnmodifiableIterator<java.util.Map.Entry<any,any>>;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class KeySet<K>  extends com.google.common.collect.ImmutableSet<any> {
						public static class: java.lang.Class<com.google.common.collect.RegularImmutableMap.KeySet<any>>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public asList(): com.google.common.collect.ImmutableList<any>;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class KeysOrValuesAsList extends com.google.common.collect.ImmutableList<any> {
						public static class: java.lang.Class<com.google.common.collect.RegularImmutableMap.KeysOrValuesAsList>;
						public remove(index: number): any;
						public equals(obj: any): boolean;
						public listIterator(): java.util.ListIterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public listIterator(int0: number): java.util.ListIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						public lastIndexOf(object: any): number;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						/** @deprecated */
						public add(index: number, element: any): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
						public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						/** @deprecated */
						public set(index: number, element: any): any;
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public get(index: number): any;
						/** @deprecated */
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public indexOf(object: any): number;
						/** @deprecated */
						public remove(index: number): any;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public subList(int0: number, int1: number): java.util.List<any>;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public replaceAll(operator: any /* any*/): void;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableMultiset<E>  extends com.google.common.collect.ImmutableMultiset<any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableMultiset<any>>;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public add(element: any, occurrences: number): number;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public setCount(element: any, count: number): number;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public iterator(): java.util.Iterator<any>;
					public entrySet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset.Entry<any>>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(element: any, occurrences: number): number;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					/** @deprecated */
					public setCount(element: any, count: number): number;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public elementSet(): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					/** @deprecated */
					public clear(): void;
					/** @deprecated */
					public remove(element: any, occurrences: number): number;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public elementSet(): java.util.Set<any>;
					public count(element: any): number;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
				export module RegularImmutableMultiset {
					export class ElementSet extends com.google.common.collect.IndexedImmutableSet<any> {
						public static class: java.lang.Class<com.google.common.collect.RegularImmutableMultiset.ElementSet>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class SerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.RegularImmutableMultiset.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableSet<E>  extends com.google.common.collect.ImmutableSet<any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableSet<any>>;
					public contains(target: any): boolean;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableSortedMultiset<E>  extends com.google.common.collect.ImmutableSortedMultiset<any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableSortedMultiset<any>>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public headMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public descendingMultiset(): com.google.common.collect.ImmutableSortedMultiset<any>;
					public subMultiset(object0: any, boundType1: com.google.common.collect.BoundType, object2: any, boundType3: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public elementSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public toArray(): native.Array<any>;
					public remove(element: any, occurrences: number): number;
					/** @deprecated */
					public setCount(element: any, count: number): number;
					/** @deprecated */
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public remove(object: any): boolean;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public tailMultiset(lowerBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public tailMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					/** @deprecated */
					public clear(): void;
					public headMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public elementSet(): java.util.Set<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public add(element: any, occurrences: number): number;
					/** @deprecated */
					public add(element: any, occurrences: number): number;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public tailMultiset(object0: any, boundType1: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public subMultiset(lowerBound: any, lowerBoundType: com.google.common.collect.BoundType, upperBound: any, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public setCount(element: any, count: number): number;
					public headMultiset(upperBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.ImmutableSortedMultiset<any>;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public entrySet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Multiset.Entry<any>>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					/** @deprecated */
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					public elementSet(): com.google.common.collect.ImmutableSet<any>;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					/** @deprecated */
					public remove(element: any, occurrences: number): number;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public count(element: any): number;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RegularImmutableSortedSet<E>  extends com.google.common.collect.ImmutableSortedSet<any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableSortedSet<any>>;
					public ceiling(e: any): any;
					public isEmpty(): boolean;
					/** @deprecated */
					public pollLast(): any;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public headSet(object0: any): java.util.SortedSet<any>;
					public descendingIterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public subSet(fromElement: any, toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public iterator(): java.util.Iterator<any>;
					public lower(element: any): any;
					public toArray(): native.Array<any>;
					public containsAll(targets: java.util.Collection<any>): boolean;
					public remove(object: any): boolean;
					public higher(e: any): any;
					public subSet(object0: any, object1: any): java.util.SortedSet<any>;
					public subSet(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableSet<any>;
					public pollFirst(): any;
					/** @deprecated */
					public clear(): void;
					public descendingSet(): java.util.NavigableSet<any>;
					public first(): any;
					public last(): any;
					public ceiling(element: any): any;
					public asList(): com.google.common.collect.ImmutableList<any>;
					/** @deprecated */
					public remove(object: any): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public comparator(): java.util.Comparator<any>;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public headSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
					public headSet(toElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(fromElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public lower(e: any): any;
					public contains(object0: any): boolean;
					public contains(o: any): boolean;
					/** @deprecated */
					public pollFirst(): any;
					public toArray(other: native.Array<any>): native.Array<any>;
					public equals(object: any): boolean;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public headSet(toElement: any): com.google.common.collect.ImmutableSortedSet<any>;
					public tailSet(object0: any): java.util.SortedSet<any>;
					public floor(e: any): any;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public descendingSet(): com.google.common.collect.ImmutableSortedSet<any>;
					public descendingIterator(): java.util.Iterator<any>;
					public removeIf(filter: any /* any*/): boolean;
					public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public pollLast(): any;
					public stream(): java.util.stream.Stream<any>;
					public tailSet(fromElement: any, inclusive: boolean): com.google.common.collect.ImmutableSortedSet<any>;
					public floor(element: any): any;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public higher(element: any): any;
					public addAll(newElements: java.util.Collection<any>): boolean;
					public tailSet(object0: any, boolean1: boolean): java.util.NavigableSet<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class RegularImmutableTable<R, C, V>  extends com.google.common.collect.ImmutableTable<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.RegularImmutableTable<any,any,any>>;
					public column(columnKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public rowMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					public rowKeySet(): java.util.Set<any>;
					/** @deprecated */
					public put(rowKey: any, columnKey: any, value: any): any;
					public columnKeySet(): com.google.common.collect.ImmutableSet<any>;
					public size(): number;
					public rowKeySet(): com.google.common.collect.ImmutableSet<any>;
					public containsColumn(columnKey: any): boolean;
					public clear(): void;
					public cellSet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Table.Cell<any,any,any>>;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public containsRow(rowKey: any): boolean;
					public columnKeySet(): java.util.Set<any>;
					public hashCode(): number;
					/** @deprecated */
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public get(rowKey: any, columnKey: any): any;
					public row(object0: any): java.util.Map<any,any>;
					public row(rowKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public columnMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					/** @deprecated */
					public remove(rowKey: any, columnKey: any): any;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public column(object0: any): java.util.Map<any,any>;
				}
				export module RegularImmutableTable {
					export class CellSet extends com.google.common.collect.IndexedImmutableSet<com.google.common.collect.Table.Cell<any,any,any>> {
						public static class: java.lang.Class<com.google.common.collect.RegularImmutableTable.CellSet>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public add(e: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public contains(object0: any): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class Values extends com.google.common.collect.ImmutableList<any> {
						public static class: java.lang.Class<com.google.common.collect.RegularImmutableTable.Values>;
						public remove(index: number): any;
						public equals(obj: any): boolean;
						public listIterator(): java.util.ListIterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public listIterator(int0: number): java.util.ListIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public toArray(other: native.Array<any>): native.Array<any>;
						public removeIf(filter: any /* any*/): boolean;
						public lastIndexOf(object: any): number;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						/** @deprecated */
						public add(index: number, element: any): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subList(fromIndex: number, toIndex: number): com.google.common.collect.ImmutableList<any>;
						public listIterator(): com.google.common.collect.UnmodifiableListIterator<any>;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						/** @deprecated */
						public set(index: number, element: any): any;
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public get(index: number): any;
						/** @deprecated */
						public addAll(index: number, newElements: java.util.Collection<any>): boolean;
						public indexOf(object: any): number;
						/** @deprecated */
						public remove(index: number): any;
						/** @deprecated */
						public remove(object: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public subList(int0: number, int1: number): java.util.List<any>;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public replaceAll(operator: any /* any*/): void;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public listIterator(index: number): com.google.common.collect.UnmodifiableListIterator<any>;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ReverseNaturalOrdering extends com.google.common.collect.Ordering<java.lang.Comparable<any>> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ReverseNaturalOrdering>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public min(iterable: java.lang.Iterable<any>): java.lang.Comparable<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public min(iterable: java.lang.Iterable<any>): any;
					public min(iterator: java.util.Iterator<any>): any;
					public min(a: java.lang.Comparable<any>, b: java.lang.Comparable<any>, c: java.lang.Comparable<any>, rest: native.Array<java.lang.Comparable<any>>): java.lang.Comparable<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public max(a: java.lang.Comparable<any>, b: java.lang.Comparable<any>, c: java.lang.Comparable<any>, rest: native.Array<java.lang.Comparable<any>>): java.lang.Comparable<any>;
					public reverse(): com.google.common.collect.Ordering<any>;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public compare(left: java.lang.Comparable<any>, right: java.lang.Comparable<any>): number;
					public max(iterable: java.lang.Iterable<any>): java.lang.Comparable<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public max(iterator: java.util.Iterator<any>): java.lang.Comparable<any>;
					public max(a: any, b: any): any;
					public max(a: java.lang.Comparable<any>, b: java.lang.Comparable<any>): java.lang.Comparable<any>;
					public max(iterator: java.util.Iterator<any>): any;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public max(iterable: java.lang.Iterable<any>): any;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public min(a: any, b: any, c: any, rest: native.Array<any>): any;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public max(a: any, b: any, c: any, rest: native.Array<any>): any;
					public min(a: java.lang.Comparable<any>, b: java.lang.Comparable<any>): java.lang.Comparable<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public min(a: any, b: any): any;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public min(iterator: java.util.Iterator<any>): java.lang.Comparable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class ReverseOrdering<T>  extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.ReverseOrdering<any>>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public min(iterable: java.lang.Iterable<any>): any;
					public min(iterator: java.util.Iterator<any>): any;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public reverse(): com.google.common.collect.Ordering<any>;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
					public hashCode(): number;
					public max(a: any, b: any): any;
					public max(iterator: java.util.Iterator<any>): any;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public max(iterable: java.lang.Iterable<any>): any;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public min(a: any, b: any, c: any, rest: native.Array<any>): any;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public max(a: any, b: any, c: any, rest: native.Array<any>): any;
					public static reverseOrder(): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public min(a: any, b: any): any;
					public compare(a: any, b: any): number;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class RowSortedTable<R, C, V>  extends com.google.common.collect.Table<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.RowSortedTable<any,any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.RowSortedTable<any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						rowKeySet(): java.util.SortedSet<any>;
						rowMap(): java.util.SortedMap<any,java.util.Map<any,any>>;
						contains(object0: any, object1: any): boolean;
						containsRow(object0: any): boolean;
						containsColumn(object0: any): boolean;
						containsValue(object0: any): boolean;
						get(object0: any, object1: any): any;
						isEmpty(): boolean;
						size(): number;
						equals(object0: any): boolean;
						hashCode(): number;
						clear(): void;
						put(object0: any, object1: any, object2: any): any;
						putAll(table0: com.google.common.collect.Table<any,any,any>): void;
						remove(object0: any, object1: any): any;
						row(object0: any): java.util.Map<any,any>;
						column(object0: any): java.util.Map<any,any>;
						cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
						rowKeySet(): java.util.Set<any>;
						columnKeySet(): java.util.Set<any>;
						values(): java.util.Collection<any>;
						rowMap(): java.util.Map<any,java.util.Map<any,any>>;
						columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public put(object0: any, object1: any, object2: any): any;
					public isEmpty(): boolean;
					public putAll(table0: com.google.common.collect.Table<any,any,any>): void;
					public row(object0: any): java.util.Map<any,any>;
					public rowKeySet(): java.util.Set<any>;
					public size(): number;
					public values(): java.util.Collection<any>;
					public containsRow(object0: any): boolean;
					public rowMap(): java.util.SortedMap<any,java.util.Map<any,any>>;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public get(object0: any, object1: any): any;
					public containsColumn(object0: any): boolean;
					public rowKeySet(): java.util.SortedSet<any>;
					public contains(object0: any, object1: any): boolean;
					public remove(object0: any, object1: any): any;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public clear(): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public column(object0: any): java.util.Map<any,any>;
					public columnKeySet(): java.util.Set<any>;
					public hashCode(): number;
					public containsValue(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Serialization extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Serialization>;
				}
				export module Serialization {
					export class FieldSetter<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.Serialization.FieldSetter<any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SetMultimap<K, V>  extends com.google.common.collect.Multimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.SetMultimap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.SetMultimap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(object0: any): java.util.Set<any>;
						removeAll(object0: any): java.util.Set<any>;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Set<any>;
						entries(): java.util.Set<java.util.Map.Entry<any,any>>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						equals(object0: any): boolean;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						containsEntry(object0: any, object1: any): boolean;
						put(object0: any, object1: any): boolean;
						remove(object0: any, object1: any): boolean;
						putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
						putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
						removeAll(object0: any): java.util.Collection<any>;
						clear(): void;
						get(object0: any): java.util.Collection<any>;
						keySet(): java.util.Set<any>;
						keys(): com.google.common.collect.Multiset<any>;
						values(): java.util.Collection<any>;
						entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public get(object0: any): java.util.Set<any>;
					public size(): number;
					public values(): java.util.Collection<any>;
					public get(object0: any): java.util.Collection<any>;
					public put(object0: any, object1: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public removeAll(object0: any): java.util.Set<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public clear(): void;
					public containsEntry(object0: any, object1: any): boolean;
					public remove(object0: any, object1: any): boolean;
					public putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Set<any>;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
					public hashCode(): number;
					public containsKey(object0: any): boolean;
					public containsValue(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Sets extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Sets>;
					public static newHashSet(): java.util.HashSet<any>;
					public static synchronizedNavigableSet(navigableSet: java.util.NavigableSet<any>): java.util.NavigableSet<any>;
					public static newEnumSet(iterable: java.lang.Iterable<any>, elementType: java.lang.Class<any>): java.util.EnumSet<any>;
					public static newIdentityHashSet(): java.util.Set<any>;
					public static immutableEnumSet(elements: java.lang.Iterable<any>): com.google.common.collect.ImmutableSet<any>;
					public static union(set1: java.util.Set<any>, set2: java.util.Set<any>): com.google.common.collect.Sets.SetView<any>;
					public static newHashSet(elements: java.lang.Iterable<any>): java.util.HashSet<any>;
					public static complementOf(collection: java.util.Collection<any>, type: java.lang.Class<any>): java.util.EnumSet<any>;
					public static newConcurrentHashSet(): java.util.Set<any>;
					public static symmetricDifference(set1: java.util.Set<any>, set2: java.util.Set<any>): com.google.common.collect.Sets.SetView<any>;
					public static newCopyOnWriteArraySet(elements: java.lang.Iterable<any>): java.util.concurrent.CopyOnWriteArraySet<any>;
					public static combinations(set: java.util.Set<any>, size: number): java.util.Set<any>;
					public static newLinkedHashSet(elements: java.lang.Iterable<any>): java.util.LinkedHashSet<any>;
					public static cartesianProduct(sets: native.Array<java.util.Set<any>>): java.util.Set<any>;
					public static filter(unfiltered: java.util.NavigableSet<any>, predicate: com.google.common.base.Predicate<any>): java.util.NavigableSet<any>;
					public static newHashSet(elements: native.Array<any>): java.util.HashSet<any>;
					public static unmodifiableNavigableSet(set: java.util.NavigableSet<any>): java.util.NavigableSet<any>;
					public static newHashSet(elements: java.util.Iterator<any>): java.util.HashSet<any>;
					public static newConcurrentHashSet(elements: java.lang.Iterable<any>): java.util.Set<any>;
					public static subSet(set: java.util.NavigableSet<any>, range: com.google.common.collect.Range<any>): java.util.NavigableSet<any>;
					public static cartesianProduct(sets: java.util.List<any>): java.util.Set<any>;
					public static newLinkedHashSet(): java.util.LinkedHashSet<any>;
					public static intersection(set1: java.util.Set<any>, set2: java.util.Set<any>): com.google.common.collect.Sets.SetView<any>;
					/** @deprecated */
					public static newSetFromMap(map: java.util.Map<any,any>): java.util.Set<any>;
					public static filter(unfiltered: java.util.Set<any>, predicate: com.google.common.base.Predicate<any>): java.util.Set<any>;
					public static powerSet(set: java.util.Set<any>): java.util.Set<any>;
					public static difference(set1: java.util.Set<any>, set2: java.util.Set<any>): com.google.common.collect.Sets.SetView<any>;
					public static newHashSetWithExpectedSize(expectedSize: number): java.util.HashSet<any>;
					public static filter(unfiltered: java.util.SortedSet<any>, predicate: com.google.common.base.Predicate<any>): java.util.SortedSet<any>;
					public static complementOf(collection: java.util.Collection<any>): java.util.EnumSet<any>;
					public static newLinkedHashSetWithExpectedSize(expectedSize: number): java.util.LinkedHashSet<any>;
					public static newTreeSet(): java.util.TreeSet<any>;
					public static immutableEnumSet(anElement: java.lang.Enum<any>, otherElements: native.Array<java.lang.Enum<any>>): com.google.common.collect.ImmutableSet<any>;
					public static newTreeSet(elements: java.lang.Iterable<any>): java.util.TreeSet<any>;
					public static newCopyOnWriteArraySet(): java.util.concurrent.CopyOnWriteArraySet<any>;
					public static newTreeSet(comparator: java.util.Comparator<any>): java.util.TreeSet<any>;
				}
				export module Sets {
					export class CartesianSet<E>  extends com.google.common.collect.ForwardingCollection<java.util.List<any>> implements java.util.Set<java.util.List<any>>  {
						public static class: java.lang.Class<com.google.common.collect.Sets.CartesianSet<any>>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public delegate(): java.util.Collection<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public delegate(): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public delegate(): java.util.Collection<java.util.List<any>>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class DescendingSet<E>  extends com.google.common.collect.ForwardingNavigableSet<any> {
						public static class: java.lang.Class<com.google.common.collect.Sets.DescendingSet<any>>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public floor(e: any): any;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public delegate(): java.util.NavigableSet<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public removeIf(filter: any /* any*/): boolean;
						public comparator(): java.util.Comparator<any>;
						public higher(e: any): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public pollFirst(): any;
						public delegate(): java.util.SortedSet<any>;
						public first(): any;
						public delegate(): java.util.Collection<any>;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public toString(): string;
						public delegate(): any;
						public remove(object: any): boolean;
						public delegate(): java.util.Set<any>;
						public ceiling(e: any): any;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
					export class FilteredNavigableSet<E>  extends com.google.common.collect.Sets.FilteredSortedSet<any> implements java.util.NavigableSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.Sets.FilteredNavigableSet<any>>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public floor(e: any): any;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public higher(e: any): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public pollFirst(): any;
						public first(): any;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public ceiling(e: any): any;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class FilteredSet<E>  extends com.google.common.collect.Collections2.FilteredCollection<any> implements java.util.Set<any>  {
						public static class: java.lang.Class<com.google.common.collect.Sets.FilteredSet<any>>;
						public equals(obj: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class FilteredSortedSet<E>  extends com.google.common.collect.Sets.FilteredSet<any> implements java.util.SortedSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.Sets.FilteredSortedSet<any>>;
						public last(): any;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public contains(element: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public remove(element: any): boolean;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public first(): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export abstract class ImprovedAbstractSet<E>  extends java.util.AbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.Sets.ImprovedAbstractSet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public removeAll(c: java.util.Collection<any>): boolean;
						public contains(o: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class PowerSet<E>  extends java.util.AbstractSet<java.util.Set<any>> {
						public static class: java.lang.Class<com.google.common.collect.Sets.PowerSet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public contains(obj: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public iterator(): java.util.Iterator<java.util.Set<any>>;
						public clear(): void;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export abstract class SetView<E>  extends java.util.AbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.Sets.SetView<any>>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						/** @deprecated */
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public contains(o: any): boolean;
						/** @deprecated */
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public copyInto(set: java.util.Set<any>): java.util.Set<any>;
						public spliterator(): java.util.Spliterator<any>;
						public addAll(newElements: java.util.Collection<any>): boolean;
						/** @deprecated */
						public addAll(newElements: java.util.Collection<any>): boolean;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public immutableCopy(): com.google.common.collect.ImmutableSet<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						/** @deprecated */
						public remove(object: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						/** @deprecated */
						public add(e: any): boolean;
						public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
						public remove(object: any): boolean;
						public clear(): void;
						/** @deprecated */
						public clear(): void;
						public removeAll(oldElements: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class SubSet<E>  extends java.util.AbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.Sets.SubSet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class UnmodifiableNavigableSet<E>  extends com.google.common.collect.ForwardingSortedSet<any> {
						public static class: java.lang.Class<com.google.common.collect.Sets.UnmodifiableNavigableSet<any>>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public contains(object: any): boolean;
						public floor(e: any): any;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public higher(e: any): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public pollFirst(): any;
						public delegate(): java.util.SortedSet<any>;
						public first(): any;
						public delegate(): java.util.Collection<any>;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public delegate(): any;
						public remove(object: any): boolean;
						public delegate(): java.util.Set<any>;
						public ceiling(e: any): any;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SingletonImmutableSet<E>  extends com.google.common.collect.ImmutableSet<any> {
					public static class: java.lang.Class<com.google.common.collect.SingletonImmutableSet<any>>;
					public contains(target: any): boolean;
					/** @deprecated */
					public remove(object: any): boolean;
					public isEmpty(): boolean;
					/** @deprecated */
					public addAll(newElements: java.util.Collection<any>): boolean;
					public spliterator(): java.util.Spliterator<any>;
					/** @deprecated */
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					/** @deprecated */
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public size(): number;
					public retainAll(elementsToKeep: java.util.Collection<any>): boolean;
					public contains(object0: any): boolean;
					public toArray(other: native.Array<any>): native.Array<any>;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public equals(object: any): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public remove(object: any): boolean;
					/** @deprecated */
					public add(e: any): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					/** @deprecated */
					public clear(): void;
					public removeIf(filter: any /* any*/): boolean;
					public removeAll(oldElements: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public addAll(newElements: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SingletonImmutableTable<R, C, V>  extends com.google.common.collect.ImmutableTable<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.SingletonImmutableTable<any,any,any>>;
					public column(columnKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public rowMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					public rowKeySet(): java.util.Set<any>;
					/** @deprecated */
					public put(rowKey: any, columnKey: any, value: any): any;
					public columnKeySet(): com.google.common.collect.ImmutableSet<any>;
					public size(): number;
					public rowKeySet(): com.google.common.collect.ImmutableSet<any>;
					public containsColumn(columnKey: any): boolean;
					public clear(): void;
					public cellSet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Table.Cell<any,any,any>>;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public containsRow(rowKey: any): boolean;
					public columnKeySet(): java.util.Set<any>;
					public hashCode(): number;
					/** @deprecated */
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public get(rowKey: any, columnKey: any): any;
					public row(object0: any): java.util.Map<any,any>;
					public row(rowKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public columnMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					/** @deprecated */
					public remove(rowKey: any, columnKey: any): any;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public column(object0: any): java.util.Map<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedIterable<T>  extends java.lang.Iterable<any> {
					public static class: java.lang.Class<com.google.common.collect.SortedIterable<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.SortedIterable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						comparator(): java.util.Comparator<any>;
						iterator(): java.util.Iterator<any>;
						iterator(): java.util.Iterator<any>;
						forEach(action: any /* any*/): void;
						spliterator(): java.util.Spliterator<any>;
					});
					public constructor();
					public iterator(): java.util.Iterator<any>;
					public spliterator(): java.util.Spliterator<any>;
					public comparator(): java.util.Comparator<any>;
					public forEach(action: any /* any*/): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedIterables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.SortedIterables>;
					public static hasSameComparator(comparator: java.util.Comparator<any>, elements: java.lang.Iterable<any>): boolean;
					public static comparator(sortedSet: java.util.SortedSet<any>): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedLists extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.SortedLists>;
					public static binarySearch(list: java.util.List<any>, keyFunction: com.google.common.base.Function<any,any>, key: java.lang.Comparable<any>, presentBehavior: com.google.common.collect.SortedLists.KeyPresentBehavior, absentBehavior: com.google.common.collect.SortedLists.KeyAbsentBehavior): number;
					public static binarySearch(list: java.util.List<any>, e: java.lang.Comparable<any>, presentBehavior: com.google.common.collect.SortedLists.KeyPresentBehavior, absentBehavior: com.google.common.collect.SortedLists.KeyAbsentBehavior): number;
					public static binarySearch(list: java.util.List<any>, keyFunction: com.google.common.base.Function<any,any>, key: any, keyComparator: java.util.Comparator<any>, presentBehavior: com.google.common.collect.SortedLists.KeyPresentBehavior, absentBehavior: com.google.common.collect.SortedLists.KeyAbsentBehavior): number;
					public static binarySearch(list: java.util.List<any>, key: any, comparator: java.util.Comparator<any>, presentBehavior: com.google.common.collect.SortedLists.KeyPresentBehavior, absentBehavior: com.google.common.collect.SortedLists.KeyAbsentBehavior): number;
				}
				export module SortedLists {
					export abstract class KeyAbsentBehavior {
						public static class: java.lang.Class<com.google.common.collect.SortedLists.KeyAbsentBehavior>;
						public static INVERTED_INSERTION_INDEX: com.google.common.collect.SortedLists.KeyAbsentBehavior;
						public static NEXT_HIGHER: com.google.common.collect.SortedLists.KeyAbsentBehavior;
						public static NEXT_LOWER: com.google.common.collect.SortedLists.KeyAbsentBehavior;
						public static valueOf(name: string): com.google.common.collect.SortedLists.KeyAbsentBehavior;
						public static values(): native.Array<com.google.common.collect.SortedLists.KeyAbsentBehavior>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export abstract class KeyPresentBehavior {
						public static class: java.lang.Class<com.google.common.collect.SortedLists.KeyPresentBehavior>;
						public static ANY_PRESENT: com.google.common.collect.SortedLists.KeyPresentBehavior;
						public static FIRST_AFTER: com.google.common.collect.SortedLists.KeyPresentBehavior;
						public static FIRST_PRESENT: com.google.common.collect.SortedLists.KeyPresentBehavior;
						public static LAST_BEFORE: com.google.common.collect.SortedLists.KeyPresentBehavior;
						public static LAST_PRESENT: com.google.common.collect.SortedLists.KeyPresentBehavior;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.collect.SortedLists.KeyPresentBehavior;
						public static values(): native.Array<com.google.common.collect.SortedLists.KeyPresentBehavior>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedMapDifference<K, V>  extends com.google.common.collect.MapDifference<any,any> {
					public static class: java.lang.Class<com.google.common.collect.SortedMapDifference<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.SortedMapDifference<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						entriesOnlyOnLeft(): java.util.SortedMap<any,any>;
						entriesOnlyOnRight(): java.util.SortedMap<any,any>;
						entriesInCommon(): java.util.SortedMap<any,any>;
						entriesDiffering(): java.util.SortedMap<any,com.google.common.collect.MapDifference.ValueDifference<any>>;
						areEqual(): boolean;
						entriesOnlyOnLeft(): java.util.Map<any,any>;
						entriesOnlyOnRight(): java.util.Map<any,any>;
						entriesInCommon(): java.util.Map<any,any>;
						entriesDiffering(): java.util.Map<any,com.google.common.collect.MapDifference.ValueDifference<any>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public entriesOnlyOnLeft(): java.util.Map<any,any>;
					public equals(obj: any): boolean;
					public entriesInCommon(): java.util.SortedMap<any,any>;
					public entriesDiffering(): java.util.SortedMap<any,com.google.common.collect.MapDifference.ValueDifference<any>>;
					public entriesOnlyOnRight(): java.util.SortedMap<any,any>;
					public entriesDiffering(): java.util.Map<any,com.google.common.collect.MapDifference.ValueDifference<any>>;
					public entriesOnlyOnRight(): java.util.Map<any,any>;
					public areEqual(): boolean;
					public entriesOnlyOnLeft(): java.util.SortedMap<any,any>;
					public hashCode(): number;
					public entriesInCommon(): java.util.Map<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedMultiset<E>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.SortedMultiset<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.SortedMultiset<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						comparator(): java.util.Comparator<any>;
						firstEntry(): com.google.common.collect.Multiset.Entry<E>;
						lastEntry(): com.google.common.collect.Multiset.Entry<E>;
						pollFirstEntry(): com.google.common.collect.Multiset.Entry<E>;
						pollLastEntry(): com.google.common.collect.Multiset.Entry<E>;
						elementSet(): java.util.NavigableSet<E>;
						entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<E>>;
						iterator(): java.util.Iterator<E>;
						descendingMultiset(): com.google.common.collect.SortedMultiset<E>;
						headMultiset(object0: E, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<E>;
						subMultiset(object0: E, boundType1: com.google.common.collect.BoundType, object2: E, boundType3: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<E>;
						tailMultiset(object0: E, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<E>;
						elementSet(): java.util.SortedSet<E>;
						comparator(): java.util.Comparator<any>;
						iterator(): java.util.Iterator<any>;
						size(): number;
						count(object0: any): number;
						add(object0: E, int1: number): number;
						add(object0: E): boolean;
						remove(object0: any, int1: number): number;
						remove(object0: any): boolean;
						setCount(object0: E, int1: number): number;
						setCount(object0: E, int1: number, int2: number): boolean;
						elementSet(): java.util.Set<E>;
						entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<E>>;
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						iterator(): java.util.Iterator<E>;
						contains(object0: any): boolean;
						containsAll(collection0: java.util.Collection<any>): boolean;
						removeAll(collection0: java.util.Collection<any>): boolean;
						retainAll(collection0: java.util.Collection<any>): boolean;
						iterator(): java.util.Iterator<any>;
						forEach(action: any /* any*/): void;
						spliterator(): java.util.Spliterator<any>;
						size(): number;
						isEmpty(): boolean;
						contains(object0: any): boolean;
						iterator(): java.util.Iterator<E>;
						toArray(): native.Array<any>;
						toArray(objects0: native.Array<any>): native.Array<any>;
						add(object0: E): boolean;
						remove(object0: any): boolean;
						containsAll(collection0: java.util.Collection<any>): boolean;
						addAll(collection0: java.util.Collection<any>): boolean;
						removeAll(collection0: java.util.Collection<any>): boolean;
						removeIf(filter: any /* any*/): boolean;
						retainAll(collection0: java.util.Collection<any>): boolean;
						clear(): void;
						equals(object0: any): boolean;
						hashCode(): number;
						spliterator(): java.util.Spliterator<E>;
						stream(): java.util.stream.Stream<E>;
						parallelStream(): java.util.stream.Stream<E>;
						iterator(): java.util.Iterator<any>;
						forEach(action: any /* any*/): void;
						spliterator(): java.util.Spliterator<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<E>>;
					public isEmpty(): boolean;
					public add(object0: E, int1: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					public setCount(object0: E, int1: number, int2: number): boolean;
					public elementSet(): java.util.Set<E>;
					public comparator(): java.util.Comparator<any>;
					public containsAll(collection0: java.util.Collection<any>): boolean;
					public subMultiset(object0: E, boundType1: com.google.common.collect.BoundType, object2: E, boundType3: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<E>;
					public size(): number;
					public remove(object0: any, int1: number): number;
					public contains(object0: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public toArray(): native.Array<any>;
					public clear(): void;
					public headMultiset(object0: E, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<E>;
					public iterator(): java.util.Iterator<E>;
					public removeAll(collection0: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<E>;
					public add(object0: E): boolean;
					public addAll(collection0: java.util.Collection<any>): boolean;
					public elementSet(): java.util.SortedSet<E>;
					public forEach(action: any /* any*/): void;
					public lastEntry(): com.google.common.collect.Multiset.Entry<E>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<E>;
					public parallelStream(): java.util.stream.Stream<E>;
					public tailMultiset(object0: E, boundType1: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<E>;
					public toArray(objects0: native.Array<any>): native.Array<any>;
					public spliterator(): java.util.Spliterator<E>;
					public elementSet(): java.util.NavigableSet<E>;
					public firstEntry(): com.google.common.collect.Multiset.Entry<E>;
					public setCount(object0: E, int1: number): number;
					public removeIf(filter: any /* any*/): boolean;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<E>;
					public remove(object0: any): boolean;
					public retainAll(collection0: java.util.Collection<any>): boolean;
					public stream(): java.util.stream.Stream<E>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedMultisetBridge<E>  extends com.google.common.collect.Multiset<any> {
					public static class: java.lang.Class<com.google.common.collect.SortedMultisetBridge<any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.SortedMultisetBridge<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						elementSet(): java.util.SortedSet<any>;
						size(): number;
						count(object0: any): number;
						add(object0: any, int1: number): number;
						add(object0: any): boolean;
						remove(object0: any, int1: number): number;
						remove(object0: any): boolean;
						setCount(object0: any, int1: number): number;
						setCount(object0: any, int1: number, int2: number): boolean;
						elementSet(): java.util.Set<any>;
						entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						iterator(): java.util.Iterator<any>;
						contains(object0: any): boolean;
						containsAll(collection0: java.util.Collection<any>): boolean;
						removeAll(collection0: java.util.Collection<any>): boolean;
						retainAll(collection0: java.util.Collection<any>): boolean;
						size(): number;
						isEmpty(): boolean;
						contains(object0: any): boolean;
						iterator(): java.util.Iterator<any>;
						toArray(): native.Array<any>;
						toArray(objects0: native.Array<any>): native.Array<any>;
						add(object0: any): boolean;
						remove(object0: any): boolean;
						containsAll(collection0: java.util.Collection<any>): boolean;
						addAll(collection0: java.util.Collection<any>): boolean;
						removeAll(collection0: java.util.Collection<any>): boolean;
						removeIf(filter: any /* any*/): boolean;
						retainAll(collection0: java.util.Collection<any>): boolean;
						clear(): void;
						equals(object0: any): boolean;
						hashCode(): number;
						spliterator(): java.util.Spliterator<any>;
						stream(): java.util.stream.Stream<any>;
						parallelStream(): java.util.stream.Stream<any>;
						iterator(): java.util.Iterator<any>;
						forEach(action: any /* any*/): void;
						spliterator(): java.util.Spliterator<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public count(object0: any): number;
					public containsAll(collection0: java.util.Collection<any>): boolean;
					public size(): number;
					public remove(object0: any, int1: number): number;
					public contains(object0: any): boolean;
					public toString(): string;
					public iterator(): java.util.Iterator<any>;
					public elementSet(): java.util.SortedSet<any>;
					public toArray(): native.Array<any>;
					public setCount(object0: any, int1: number, int2: number): boolean;
					public clear(): void;
					public setCount(object0: any, int1: number): number;
					public removeAll(collection0: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public addAll(collection0: java.util.Collection<any>): boolean;
					public forEach(action: any /* any*/): void;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(object0: any): boolean;
					public toArray(objects0: native.Array<any>): native.Array<any>;
					public add(object0: any, int1: number): number;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public remove(object0: any): boolean;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public retainAll(collection0: java.util.Collection<any>): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedMultisets extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.SortedMultisets>;
				}
				export module SortedMultisets {
					export class ElementSet<E>  extends com.google.common.collect.Multisets.ElementSet<any> implements java.util.SortedSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.SortedMultisets.ElementSet<any>>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public first(): any;
						public add(e: any): boolean;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class NavigableElementSet<E>  extends com.google.common.collect.SortedMultisets.ElementSet<any> implements java.util.NavigableSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.SortedMultisets.NavigableElementSet<any>>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public floor(e: any): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public higher(e: any): any;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public pollFirst(): any;
						public first(): any;
						public add(e: any): boolean;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public ceiling(e: any): any;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SortedSetMultimap<K, V>  extends com.google.common.collect.SetMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.SortedSetMultimap<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.SortedSetMultimap<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(object0: any): java.util.SortedSet<any>;
						removeAll(object0: any): java.util.SortedSet<any>;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.SortedSet<any>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						valueComparator(): java.util.Comparator<any>;
						get(object0: any): java.util.Set<any>;
						removeAll(object0: any): java.util.Set<any>;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Set<any>;
						entries(): java.util.Set<java.util.Map.Entry<any,any>>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						equals(object0: any): boolean;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						containsEntry(object0: any, object1: any): boolean;
						put(object0: any, object1: any): boolean;
						remove(object0: any, object1: any): boolean;
						putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
						putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
						replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
						removeAll(object0: any): java.util.Collection<any>;
						clear(): void;
						get(object0: any): java.util.Collection<any>;
						keySet(): java.util.Set<any>;
						keys(): com.google.common.collect.Multiset<any>;
						values(): java.util.Collection<any>;
						entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						asMap(): java.util.Map<any,java.util.Collection<any>>;
						equals(object0: any): boolean;
						hashCode(): number;
					});
					public constructor();
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.SortedSet<any>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public putAll(multimap0: com.google.common.collect.Multimap<any,any>): boolean;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public get(object0: any): java.util.Collection<any>;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					public removeAll(object0: any): java.util.SortedSet<any>;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public containsEntry(object0: any, object1: any): boolean;
					public remove(object0: any, object1: any): boolean;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Collection<any>;
					public hashCode(): number;
					public containsValue(object0: any): boolean;
					public get(object0: any): java.util.SortedSet<any>;
					public get(object0: any): java.util.Set<any>;
					public values(): java.util.Collection<any>;
					public put(object0: any, object1: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public removeAll(object0: any): java.util.Set<any>;
					public removeAll(object0: any): java.util.Collection<any>;
					public valueComparator(): java.util.Comparator<any>;
					public putAll(object0: any, iterable1: java.lang.Iterable<any>): boolean;
					public replaceValues(object0: any, iterable1: java.lang.Iterable<any>): java.util.Set<any>;
					public containsKey(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class SparseImmutableTable<R, C, V>  extends com.google.common.collect.RegularImmutableTable<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.SparseImmutableTable<any,any,any>>;
					public column(columnKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public rowMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					public rowKeySet(): java.util.Set<any>;
					/** @deprecated */
					public put(rowKey: any, columnKey: any, value: any): any;
					public columnKeySet(): com.google.common.collect.ImmutableSet<any>;
					public size(): number;
					public rowKeySet(): com.google.common.collect.ImmutableSet<any>;
					public containsColumn(columnKey: any): boolean;
					public clear(): void;
					public cellSet(): com.google.common.collect.ImmutableSet<com.google.common.collect.Table.Cell<any,any,any>>;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public containsRow(rowKey: any): boolean;
					public columnKeySet(): java.util.Set<any>;
					public hashCode(): number;
					/** @deprecated */
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public get(rowKey: any, columnKey: any): any;
					public row(object0: any): java.util.Map<any,any>;
					public row(rowKey: any): com.google.common.collect.ImmutableMap<any,any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public columnMap(): com.google.common.collect.ImmutableMap<any,java.util.Map<any,any>>;
					/** @deprecated */
					public remove(rowKey: any, columnKey: any): any;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					/** @deprecated */
					public clear(): void;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public values(): com.google.common.collect.ImmutableCollection<any>;
					public column(object0: any): java.util.Map<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class StandardRowSortedTable<R, C, V>  extends com.google.common.collect.StandardTable<any,any,any> implements com.google.common.collect.RowSortedTable<any,any,any>  {
					public static class: java.lang.Class<com.google.common.collect.StandardRowSortedTable<any,any,any>>;
					public get(rowKey: any, columnKey: any): any;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public column(columnKey: any): java.util.Map<any,any>;
					public row(rowKey: any): java.util.Map<any,any>;
					public rowKeySet(): java.util.Set<any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public size(): number;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					public rowMap(): java.util.SortedMap<any,java.util.Map<any,any>>;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public containsColumn(columnKey: any): boolean;
					public rowKeySet(): java.util.SortedSet<any>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public clear(): void;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public columnKeySet(): java.util.Set<any>;
					public containsRow(rowKey: any): boolean;
					public hashCode(): number;
				}
				export module StandardRowSortedTable {
					export class RowSortedMap extends com.google.common.collect.StandardTable.RowMap implements java.util.SortedMap<any,java.util.Map<any,any>>  {
						public static class: java.lang.Class<com.google.common.collect.StandardRowSortedTable.RowSortedMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public remove(key: any): java.util.Map<any,any>;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public keySet(): java.util.SortedSet<any>;
						public lastKey(): any;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public firstKey(): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any): java.util.SortedMap<any,java.util.Map<any,any>>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public tailMap(fromKey: any): java.util.SortedMap<any,java.util.Map<any,any>>;
						public remove(key: any): any;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,java.util.Map<any,any>>;
						public get(key: any): java.util.Map<any,any>;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class StandardTable<R, C, V>  extends com.google.common.collect.AbstractTable<any,any,any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.StandardTable<any,any,any>>;
					public get(rowKey: any, columnKey: any): any;
					public put(rowKey: any, columnKey: any, value: any): any;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public column(columnKey: any): java.util.Map<any,any>;
					public row(rowKey: any): java.util.Map<any,any>;
					public rowKeySet(): java.util.Set<any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public size(): number;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					public containsColumn(columnKey: any): boolean;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public clear(): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
					public columnKeySet(): java.util.Set<any>;
					public containsRow(rowKey: any): boolean;
					public hashCode(): number;
				}
				export module StandardTable {
					export class CellIterator extends java.util.Iterator<com.google.common.collect.Table.Cell<any,any,any>> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.CellIterator>;
						public next(): com.google.common.collect.Table.Cell<any,any,any>;
						public hasNext(): boolean;
						public remove(): void;
					}
					export class Column extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.Column>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export module Column {
						export class EntrySet extends com.google.common.collect.Sets.ImprovedAbstractSet<java.util.Map.Entry<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.StandardTable.Column.EntrySet>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public remove(obj: any): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public iterator(): java.util.Iterator<java.util.Map.Entry<any,any>>;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
						export class EntrySetIterator extends com.google.common.collect.AbstractIterator<java.util.Map.Entry<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.StandardTable.Column.EntrySetIterator>;
							public computeNext(): java.util.Map.Entry<any,any>;
							public computeNext(): any;
						}
						export class KeySet extends com.google.common.collect.Maps.KeySet<any,any> {
							public static class: java.lang.Class<com.google.common.collect.StandardTable.Column.KeySet>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public remove(obj: any): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public contains(obj: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
						export class Values extends com.google.common.collect.Maps.Values<any,any> {
							public static class: java.lang.Class<com.google.common.collect.StandardTable.Column.Values>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public remove(obj: any): boolean;
							public contains(o: any): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public equals(obj: any): boolean;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
					}
					export class ColumnKeyIterator extends com.google.common.collect.AbstractIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.ColumnKeyIterator>;
						public computeNext(): any;
					}
					export class ColumnKeySet extends com.google.common.collect.StandardTable.TableSet<any> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.ColumnKeySet>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public contains(obj: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public remove(obj: any): boolean;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class ColumnMap extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,java.util.Map<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.ColumnMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public remove(key: any): java.util.Map<any,any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public createEntrySet(): java.util.Set<java.util.Map.Entry<any,java.util.Map<any,any>>>;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public get(key: any): java.util.Map<any,any>;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export module ColumnMap {
						export class ColumnMapEntrySet extends com.google.common.collect.StandardTable.TableSet<java.util.Map.Entry<any,java.util.Map<any,any>>> {
							public static class: java.lang.Class<com.google.common.collect.StandardTable.ColumnMap.ColumnMapEntrySet>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public remove(obj: any): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public contains(obj: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<java.util.Map.Entry<any,java.util.Map<any,any>>>;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
						export class ColumnMapValues extends com.google.common.collect.Maps.Values<any,java.util.Map<any,any>> {
							public static class: java.lang.Class<com.google.common.collect.StandardTable.ColumnMap.ColumnMapValues>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public remove(obj: any): boolean;
							public contains(o: any): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public equals(obj: any): boolean;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
					}
					export class Row extends com.google.common.collect.Maps.IteratorBasedAbstractMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.Row>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class RowMap extends com.google.common.collect.Maps.ViewCachingAbstractMap<any,java.util.Map<any,any>> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.RowMap>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public remove(key: any): java.util.Map<any,any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public createEntrySet(): java.util.Set<java.util.Map.Entry<any,java.util.Map<any,any>>>;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public get(key: any): java.util.Map<any,any>;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export module RowMap {
						export class EntrySet extends com.google.common.collect.StandardTable.TableSet<java.util.Map.Entry<any,java.util.Map<any,any>>> {
							public static class: java.lang.Class<com.google.common.collect.StandardTable.RowMap.EntrySet>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public remove(obj: any): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public contains(obj: any): boolean;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public iterator(): java.util.Iterator<java.util.Map.Entry<any,java.util.Map<any,any>>>;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
					}
					export abstract class TableSet<T>  extends com.google.common.collect.Sets.ImprovedAbstractSet<any> {
						public static class: java.lang.Class<com.google.common.collect.StandardTable.TableSet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Synchronized extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Synchronized>;
				}
				export module Synchronized {
					export class SynchronizedAsMap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedMap<any,java.util.Collection<any>> {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedAsMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public get(key: any): java.util.Collection<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public containsValue(o: any): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,java.util.Collection<any>>>;
						public clear(): void;
						public values(): java.util.Collection<java.util.Collection<any>>;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedAsMapEntries<K, V>  extends com.google.common.collect.Synchronized.SynchronizedSet<java.util.Map.Entry<any,java.util.Collection<any>>> {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedAsMapEntries<any,any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public iterator(): java.util.Iterator<java.util.Map.Entry<any,java.util.Collection<any>>>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedAsMapValues<V>  extends com.google.common.collect.Synchronized.SynchronizedCollection<java.util.Collection<any>> {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedAsMapValues<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public iterator(): java.util.Iterator<java.util.Collection<any>>;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedBiMap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedBiMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public values(): java.util.Set<any>;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public forcePut(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public inverse(): com.google.common.collect.BiMap<any,any>;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedCollection<E>  extends com.google.common.collect.Synchronized.SynchronizedObject implements java.util.Collection<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedCollection<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedDeque<E>  extends com.google.common.collect.Synchronized.SynchronizedQueue<any> implements java.util.Deque<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedDeque<any>>;
						public descendingIterator(): java.util.Iterator<any>;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public poll(): any;
						public removeFirstOccurrence(o: any): boolean;
						public element(): any;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public peekFirst(): any;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public push(e: any): void;
						public addFirst(e: any): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public pollLast(): any;
						public remove(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public pollFirst(): any;
						public addLast(e: any): void;
						public pop(): any;
						public add(e: any): boolean;
						public peekLast(): any;
						public peek(): any;
						public remove(o: any): boolean;
						public removeFirst(): any;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public offerLast(e: any): boolean;
						public removeLast(): any;
						public getLast(): any;
						public offerFirst(e: any): boolean;
						public getFirst(): any;
						public removeLastOccurrence(o: any): boolean;
						public clear(): void;
						public offer(e: any): boolean;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedEntry<K, V>  extends com.google.common.collect.Synchronized.SynchronizedObject implements java.util.Map.Entry<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedEntry<any,any>>;
						public equals(obj: any): boolean;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public getKey(): any;
						public hashCode(): number;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
					}
					export class SynchronizedList<E>  extends com.google.common.collect.Synchronized.SynchronizedCollection<any> implements java.util.List<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedList<any>>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public equals(obj: any): boolean;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public clear(): void;
						public sort(c: java.util.Comparator<any>): void;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedListMultimap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedMultimap<any,any> implements com.google.common.collect.ListMultimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedListMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public removeAll(key: any): java.util.List<any>;
						public get(key: any): java.util.List<any>;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.List<any>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public keys(): com.google.common.collect.Multiset<any>;
						public equals(o: any): boolean;
						public size(): number;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedMap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedObject implements java.util.Map<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedMap<any,any>>;
						public equals(obj: any): boolean;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedMultimap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedObject implements com.google.common.collect.Multimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public equals(obj: any): boolean;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public keys(): com.google.common.collect.Multiset<any>;
						public equals(o: any): boolean;
						public size(): number;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedMultiset<E>  extends com.google.common.collect.Synchronized.SynchronizedCollection<any> implements com.google.common.collect.Multiset<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedMultiset<any>>;
						public equals(obj: any): boolean;
						public setCount(element: any, oldCount: number, newCount: number): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public elementSet(): java.util.Set<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public setCount(element: any, count: number): number;
						public add(e: any): boolean;
						public add(e: any, n: number): number;
						public count(o: any): number;
						public remove(o: any): boolean;
						public remove(o: any, n: number): number;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public toString(): string;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedNavigableMap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedSortedMap<any,any> implements java.util.NavigableMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedNavigableMap<any,any>>;
						public subMap(fromKey: any, fromInclusive: boolean, toKey: any, toInclusive: boolean): java.util.NavigableMap<any,any>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public firstKey(): any;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public remove(key: any): any;
						public tailMap(fromKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public lowerKey(key: any): any;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public lastKey(): any;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public headMap(toKey: any, inclusive: boolean): java.util.NavigableMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export class SynchronizedNavigableSet<E>  extends com.google.common.collect.Synchronized.SynchronizedSortedSet<any> implements java.util.NavigableSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedNavigableSet<any>>;
						public descendingIterator(): java.util.Iterator<any>;
						public last(): any;
						public floor(e: any): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public subSet(fromElement: any, fromInclusive: boolean, toElement: any, toInclusive: boolean): java.util.NavigableSet<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public higher(e: any): any;
						public descendingSet(): java.util.NavigableSet<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public pollLast(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public pollFirst(): any;
						public first(): any;
						public add(e: any): boolean;
						public lower(e: any): any;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public headSet(toElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public tailSet(fromElement: any, inclusive: boolean): java.util.NavigableSet<any>;
						public ceiling(e: any): any;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedObject extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedObject>;
						public toString(): string;
					}
					export class SynchronizedQueue<E>  extends com.google.common.collect.Synchronized.SynchronizedCollection<any> implements java.util.Queue<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedQueue<any>>;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public poll(): any;
						public element(): any;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public remove(): any;
						public addAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public peek(): any;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public clear(): void;
						public offer(e: any): boolean;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedRandomAccessList<E>  extends com.google.common.collect.Synchronized.SynchronizedList<any> implements java.util.RandomAccess  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedRandomAccessList<any>>;
						public remove(index: number): any;
						public indexOf(o: any): number;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public add(index: number, element: any): void;
						public hashCode(): number;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): any;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public replaceAll(operator: any /* any*/): void;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedSet<E>  extends com.google.common.collect.Synchronized.SynchronizedCollection<any> implements java.util.Set<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedSet<any>>;
						public addAll(c: java.util.Collection<any>): boolean;
						public equals(obj: any): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public add(e: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedSetMultimap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedMultimap<any,any> implements com.google.common.collect.SetMultimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedSetMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public put(key: any, value: any): boolean;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public get(key: any): java.util.Set<any>;
						public keys(): com.google.common.collect.Multiset<any>;
						public removeAll(key: any): java.util.Set<any>;
						public equals(o: any): boolean;
						public size(): number;
						public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedSortedMap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedMap<any,any> implements java.util.SortedMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedSortedMap<any,any>>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public lastKey(): any;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public firstKey(): any;
						public get(key: any): any;
						public putAll(map: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedSortedSet<E>  extends com.google.common.collect.Synchronized.SynchronizedSet<any> implements java.util.SortedSet<any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedSortedSet<any>>;
						public last(): any;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public tailSet(fromElement: any): java.util.SortedSet<any>;
						public comparator(): java.util.Comparator<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public subSet(fromElement: any, toElement: any): java.util.SortedSet<any>;
						public size(): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public first(): any;
						public add(e: any): boolean;
						public headSet(toElement: any): java.util.SortedSet<any>;
						public remove(o: any): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public toArray(a: native.Array<any>): native.Array<any>;
						public clear(): void;
						public forEach(action: any /* any*/): void;
						public toArray(): native.Array<any>;
					}
					export class SynchronizedSortedSetMultimap<K, V>  extends com.google.common.collect.Synchronized.SynchronizedSetMultimap<any,any> implements com.google.common.collect.SortedSetMultimap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedSortedSetMultimap<any,any>>;
						public removeAll(key: any): java.util.Collection<any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.util.Collection<any>>;
						public containsEntry(key: any, value: any): boolean;
						public values(): java.util.Collection<any>;
						public remove(key: any, value: any): boolean;
						public get(key: any): java.util.Collection<any>;
						public valueComparator(): java.util.Comparator<any>;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
						public isEmpty(): boolean;
						public get(key: any): java.util.Set<any>;
						public keys(): com.google.common.collect.Multiset<any>;
						public equals(o: any): boolean;
						public size(): number;
						public put(key: any, value: any): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.SortedSet<any>;
						public containsValue(value: any): boolean;
						public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
						public putAll(key: any, values: java.lang.Iterable<any>): boolean;
						public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
						public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
						public clear(): void;
						public get(key: any): java.util.SortedSet<any>;
						public removeAll(key: any): java.util.Set<any>;
						public removeAll(key: any): java.util.SortedSet<any>;
						public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
						public keySet(): java.util.Set<any>;
					}
					export class SynchronizedTable<R, C, V>  extends com.google.common.collect.Synchronized.SynchronizedObject implements com.google.common.collect.Table<any,any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Synchronized.SynchronizedTable<any,any,any>>;
						public columnKeySet(): java.util.Set<any>;
						public equals(obj: any): boolean;
						public get(rowKey: any, columnKey: any): any;
						public row(rowKey: any): java.util.Map<any,any>;
						public rowKeySet(): java.util.Set<any>;
						public containsValue(value: any): boolean;
						public contains(rowKey: any, columnKey: any): boolean;
						public put(rowKey: any, columnKey: any, value: any): any;
						public putAll(table: com.google.common.collect.Table<any,any,any>): void;
						public hashCode(): number;
						public containsColumn(columnKey: any): boolean;
						public values(): java.util.Collection<any>;
						public column(columnKey: any): java.util.Map<any,any>;
						public containsRow(rowKey: any): boolean;
						public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
						public isEmpty(): boolean;
						public remove(rowKey: any, columnKey: any): any;
						public clear(): void;
						public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
						public size(): number;
						public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Table<R, C, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Table<any,any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.collect.Table<any,any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						contains(object0: any, object1: any): boolean;
						containsRow(object0: any): boolean;
						containsColumn(object0: any): boolean;
						containsValue(object0: any): boolean;
						get(object0: any, object1: any): V;
						isEmpty(): boolean;
						size(): number;
						equals(object0: any): boolean;
						hashCode(): number;
						clear(): void;
						put(object0: R, object1: C, object2: V): V;
						putAll(table0: com.google.common.collect.Table<any,any,any>): void;
						remove(object0: any, object1: any): V;
						row(object0: R): java.util.Map<C,V>;
						column(object0: C): java.util.Map<R,V>;
						cellSet(): java.util.Set<com.google.common.collect.Table.Cell<R,C,V>>;
						rowKeySet(): java.util.Set<R>;
						columnKeySet(): java.util.Set<C>;
						values(): java.util.Collection<V>;
						rowMap(): java.util.Map<R,java.util.Map<C,V>>;
						columnMap(): java.util.Map<C,java.util.Map<R,V>>;
					});
					public constructor();
					public remove(object0: any, object1: any): V;
					public rowMap(): java.util.Map<R,java.util.Map<C,V>>;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public putAll(table0: com.google.common.collect.Table<any,any,any>): void;
					public values(): java.util.Collection<V>;
					public get(object0: any, object1: any): V;
					public columnMap(): java.util.Map<C,java.util.Map<R,V>>;
					public put(object0: R, object1: C, object2: V): V;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<R,C,V>>;
					public size(): number;
					public containsRow(object0: any): boolean;
					public column(object0: C): java.util.Map<R,V>;
					public containsColumn(object0: any): boolean;
					public contains(object0: any, object1: any): boolean;
					public rowKeySet(): java.util.Set<R>;
					public columnKeySet(): java.util.Set<C>;
					public clear(): void;
					public row(object0: R): java.util.Map<C,V>;
					public hashCode(): number;
					public containsValue(object0: any): boolean;
				}
				export module Table {
					export class Cell<R, C, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.Table.Cell<any,any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.collect.Table$Cell interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getRowKey(): R;
							getColumnKey(): C;
							getValue(): V;
							equals(object0: any): boolean;
							hashCode(): number;
						});
						public constructor();
						public getRowKey(): R;
						public equals(obj: any): boolean;
						public getValue(): V;
						public hashCode(): number;
						public getColumnKey(): C;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class Tables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.Tables>;
					public static immutableCell(rowKey: any, columnKey: any, value: any): com.google.common.collect.Table.Cell<any,any,any>;
					public static transformValues(fromTable: com.google.common.collect.Table<any,any,any>, function1: com.google.common.base.Function<any,any>): com.google.common.collect.Table<any,any,any>;
					public static transpose(table: com.google.common.collect.Table<any,any,any>): com.google.common.collect.Table<any,any,any>;
					public static unmodifiableRowSortedTable(table: com.google.common.collect.RowSortedTable<any,any,any>): com.google.common.collect.RowSortedTable<any,any,any>;
					public static newCustomTable(backingMap: java.util.Map<any,any>, factory: com.google.common.base.Supplier<any>): com.google.common.collect.Table<any,any,any>;
					public static synchronizedTable(table: com.google.common.collect.Table<any,any,any>): com.google.common.collect.Table<any,any,any>;
					public static unmodifiableTable(table: com.google.common.collect.Table<any,any,any>): com.google.common.collect.Table<any,any,any>;
				}
				export module Tables {
					export abstract class AbstractCell<R, C, V>  extends com.google.common.collect.Table.Cell<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.Tables.AbstractCell<any,any,any>>;
						public equals(obj: any): boolean;
						public getRowKey(): any;
						public getValue(): any;
						public hashCode(): number;
						public getColumnKey(): any;
						public toString(): string;
					}
					export class ImmutableCell<R, C, V>  extends com.google.common.collect.Tables.AbstractCell<any,any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Tables.ImmutableCell<any,any,any>>;
						public getRowKey(): any;
						public equals(obj: any): boolean;
						public getValue(): any;
						public hashCode(): number;
						public getColumnKey(): any;
					}
					export class TransformedTable<R, C, V1, V2>  extends com.google.common.collect.AbstractTable<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.Tables.TransformedTable<any,any,any,any>>;
						public columnKeySet(): java.util.Set<any>;
						public equals(obj: any): boolean;
						public get(rowKey: any, columnKey: any): any;
						public row(rowKey: any): java.util.Map<any,any>;
						public rowKeySet(): java.util.Set<any>;
						public containsValue(value: any): boolean;
						public contains(rowKey: any, columnKey: any): boolean;
						public put(rowKey: any, columnKey: any, value: any): any;
						public putAll(table: com.google.common.collect.Table<any,any,any>): void;
						public hashCode(): number;
						public containsColumn(columnKey: any): boolean;
						public values(): java.util.Collection<any>;
						public column(columnKey: any): java.util.Map<any,any>;
						public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
						public containsRow(rowKey: any): boolean;
						public remove(rowKey: any, columnKey: any): any;
						public isEmpty(): boolean;
						public clear(): void;
						public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
						public size(): number;
						public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					}
					export class TransposeTable<C, R, V>  extends com.google.common.collect.AbstractTable<any,any,any> {
						public static class: java.lang.Class<com.google.common.collect.Tables.TransposeTable<any,any,any>>;
						public columnKeySet(): java.util.Set<any>;
						public equals(obj: any): boolean;
						public get(rowKey: any, columnKey: any): any;
						public row(rowKey: any): java.util.Map<any,any>;
						public rowKeySet(): java.util.Set<any>;
						public containsValue(value: any): boolean;
						public contains(rowKey: any, columnKey: any): boolean;
						public put(rowKey: any, columnKey: any, value: any): any;
						public putAll(table: com.google.common.collect.Table<any,any,any>): void;
						public hashCode(): number;
						public containsColumn(columnKey: any): boolean;
						public values(): java.util.Collection<any>;
						public column(columnKey: any): java.util.Map<any,any>;
						public containsRow(rowKey: any): boolean;
						public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
						public remove(rowKey: any, columnKey: any): any;
						public isEmpty(): boolean;
						public clear(): void;
						public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
						public size(): number;
						public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					}
					export class UnmodifiableRowSortedMap<R, C, V>  extends com.google.common.collect.Tables.UnmodifiableTable<any,any,any> implements com.google.common.collect.RowSortedTable<any,any,any>  {
						public static class: java.lang.Class<com.google.common.collect.Tables.UnmodifiableRowSortedMap<any,any,any>>;
						public equals(obj: any): boolean;
						public get(rowKey: any, columnKey: any): any;
						public row(rowKey: any): java.util.Map<any,any>;
						public put(rowKey: any, columnKey: any, value: any): any;
						public delegate(): com.google.common.collect.Table<any,any,any>;
						public hashCode(): number;
						public values(): java.util.Collection<any>;
						public column(columnKey: any): java.util.Map<any,any>;
						public delegate(): com.google.common.collect.RowSortedTable<any,any,any>;
						public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
						public isEmpty(): boolean;
						public size(): number;
						public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
						public constructor();
						public columnKeySet(): java.util.Set<any>;
						public rowKeySet(): java.util.Set<any>;
						public containsValue(value: any): boolean;
						public contains(rowKey: any, columnKey: any): boolean;
						public putAll(table: com.google.common.collect.Table<any,any,any>): void;
						public containsColumn(columnKey: any): boolean;
						public constructor(delegate: com.google.common.collect.RowSortedTable<any,any,any>);
						public delegate(): any;
						public rowMap(): java.util.SortedMap<any,java.util.Map<any,any>>;
						public containsRow(rowKey: any): boolean;
						public rowKeySet(): java.util.SortedSet<any>;
						public remove(rowKey: any, columnKey: any): any;
						public clear(): void;
						public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					}
					export class UnmodifiableTable<R, C, V>  extends com.google.common.collect.ForwardingTable<any,any,any> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.collect.Tables.UnmodifiableTable<any,any,any>>;
						public columnKeySet(): java.util.Set<any>;
						public equals(obj: any): boolean;
						public row(rowKey: any): java.util.Map<any,any>;
						public rowKeySet(): java.util.Set<any>;
						public get(rowKey: any, columnKey: any): any;
						public containsValue(value: any): boolean;
						public put(rowKey: any, columnKey: any, value: any): any;
						public putAll(table: com.google.common.collect.Table<any,any,any>): void;
						public contains(rowKey: any, columnKey: any): boolean;
						public delegate(): com.google.common.collect.Table<any,any,any>;
						public hashCode(): number;
						public values(): java.util.Collection<any>;
						public containsColumn(columnKey: any): boolean;
						public delegate(): any;
						public column(columnKey: any): java.util.Map<any,any>;
						public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
						public containsRow(rowKey: any): boolean;
						public remove(rowKey: any, columnKey: any): any;
						public isEmpty(): boolean;
						public clear(): void;
						public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
						public size(): number;
						public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class TopKSelector<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.TopKSelector<any>>;
					public offerAll(elements: java.lang.Iterable<any>): void;
					public static least(k: number, comparator: java.util.Comparator<any>): com.google.common.collect.TopKSelector<any>;
					public static greatest(k: number): com.google.common.collect.TopKSelector<any>;
					public offerAll(elements: java.util.Iterator<any>): void;
					public topK(): java.util.List<T>;
					public static greatest(k: number, comparator: java.util.Comparator<any>): com.google.common.collect.TopKSelector<any>;
					public static least(k: number): com.google.common.collect.TopKSelector<any>;
					public offer(elem: T): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class TransformedIterator<F, T>  extends java.util.Iterator<any> {
					public static class: java.lang.Class<com.google.common.collect.TransformedIterator<any,any>>;
					public next(): any;
					public hasNext(): boolean;
					public remove(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class TransformedListIterator<F, T>  extends com.google.common.collect.TransformedIterator<any,any> implements java.util.ListIterator<any>  {
					public static class: java.lang.Class<com.google.common.collect.TransformedListIterator<any,any>>;
					public set(element: any): void;
					public previousIndex(): number;
					public nextIndex(): number;
					public next(): any;
					public hasPrevious(): boolean;
					public previous(): any;
					public add(element: any): void;
					public hasNext(): boolean;
					public remove(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class TreeBasedTable<R, C, V>  extends com.google.common.collect.StandardRowSortedTable<any,any,any> {
					public static class: java.lang.Class<com.google.common.collect.TreeBasedTable<any,any,any>>;
					public equals(obj: any): boolean;
					public put(rowKey: any, columnKey: any, value: any): any;
					public isEmpty(): boolean;
					public rowKeySet(): java.util.Set<any>;
					public static create(table: com.google.common.collect.TreeBasedTable<any,any,any>): com.google.common.collect.TreeBasedTable<any,any,any>;
					public size(): number;
					public static create(rowComparator: java.util.Comparator<any>, columnComparator: java.util.Comparator<any>): com.google.common.collect.TreeBasedTable<any,any,any>;
					public static create(): com.google.common.collect.TreeBasedTable<any,any,any>;
					public containsColumn(columnKey: any): boolean;
					public clear(): void;
					public rowMap(): java.util.Map<any,java.util.Map<any,any>>;
					public containsRow(rowKey: any): boolean;
					public columnKeySet(): java.util.Set<any>;
					public hashCode(): number;
					/** @deprecated */
					public columnComparator(): java.util.Comparator<any>;
					public get(rowKey: any, columnKey: any): any;
					public row(rowKey: any): java.util.Map<any,any>;
					public column(columnKey: any): java.util.Map<any,any>;
					public contains(rowKey: any, columnKey: any): boolean;
					public remove(rowKey: any, columnKey: any): any;
					public values(): java.util.Collection<any>;
					public rowMap(): java.util.SortedMap<any,java.util.Map<any,any>>;
					public containsValue(value: any): boolean;
					public cellSet(): java.util.Set<com.google.common.collect.Table.Cell<any,any,any>>;
					/** @deprecated */
					public rowComparator(): java.util.Comparator<any>;
					public row(rowKey: any): java.util.SortedMap<any,any>;
					public rowKeySet(): java.util.SortedSet<any>;
					public columnMap(): java.util.Map<any,java.util.Map<any,any>>;
					public putAll(table: com.google.common.collect.Table<any,any,any>): void;
				}
				export module TreeBasedTable {
					export class Factory<C, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.TreeBasedTable.Factory<any,any>>;
						public get(): java.util.TreeMap<C,V>;
						public get(): any;
					}
					export class TreeRow extends com.google.common.collect.StandardTable.Row implements java.util.SortedMap<any,any>  {
						public static class: java.lang.Class<com.google.common.collect.TreeBasedTable.TreeRow>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public getOrDefault(key: any, defaultValue: any): any;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any, value: any): boolean;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public keySet(): java.util.SortedSet<any>;
						public lastKey(): any;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public firstKey(): any;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class TreeMultimap<K, V>  extends com.google.common.collect.AbstractSortedKeySortedSetMultimap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.TreeMultimap<any,any>>;
					public containsKey(key: any): boolean;
					public isEmpty(): boolean;
					public keys(): com.google.common.collect.Multiset<any>;
					public asMap(): java.util.Map<any,java.util.Collection<any>>;
					public size(): number;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Collection<any>;
					public removeAll(key: any): java.util.SortedSet<any>;
					public remove(key: any, value: any): boolean;
					public entries(): java.util.Collection<java.util.Map.Entry<any,any>>;
					/** @deprecated */
					public keyComparator(): java.util.Comparator<any>;
					public equals(object: any): boolean;
					public get(key: any): java.util.SortedSet<any>;
					public get(key: any): java.util.Collection<any>;
					public keySet(): java.util.SortedSet<any>;
					public keySet(): java.util.Set<any>;
					public removeAll(key: any): java.util.Collection<any>;
					public asMap(): java.util.NavigableMap<any,java.util.Collection<any>>;
					public clear(): void;
					public containsEntry(key: any, value: any): boolean;
					public putAll(key: any, values: java.lang.Iterable<any>): boolean;
					public hashCode(): number;
					public removeAll(key: any): java.util.Set<any>;
					public asMap(): java.util.SortedMap<any,java.util.Collection<any>>;
					public get(key: any): java.util.NavigableSet<any>;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.SortedSet<any>;
					public static create(keyComparator: java.util.Comparator<any>, valueComparator: java.util.Comparator<any>): com.google.common.collect.TreeMultimap<any,any>;
					public put(key: any, value: any): boolean;
					public values(): java.util.Collection<any>;
					public static create(): com.google.common.collect.TreeMultimap<any,any>;
					public keySet(): java.util.NavigableSet<any>;
					public containsValue(value: any): boolean;
					public entries(): java.util.Set<java.util.Map.Entry<any,any>>;
					public static create(multimap: com.google.common.collect.Multimap<any,any>): com.google.common.collect.TreeMultimap<any,any>;
					public putAll(multimap: com.google.common.collect.Multimap<any,any>): boolean;
					public replaceValues(key: any, values: java.lang.Iterable<any>): java.util.Set<any>;
					public get(key: any): java.util.Set<any>;
					public valueComparator(): java.util.Comparator<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class TreeMultiset<E>  extends com.google.common.collect.AbstractSortedMultiset<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.TreeMultiset<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public isEmpty(): boolean;
					public add(element: any, occurrences: number): number;
					public spliterator(): java.util.Spliterator<any>;
					public comparator(): java.util.Comparator<any>;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public iterator(): java.util.Iterator<any>;
					public equals(object: any): boolean;
					public toString(): string;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public contains(element: any): boolean;
					public remove(element: any, occurrences: number): number;
					public subMultiset(fromElement: any, fromBoundType: com.google.common.collect.BoundType, toElement: any, toBoundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public tailMultiset(lowerBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public static create(comparator: java.util.Comparator<any>): com.google.common.collect.TreeMultiset<any>;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public static create(elements: java.lang.Iterable<any>): com.google.common.collect.TreeMultiset<any>;
					public removeIf(filter: any /* any*/): boolean;
					public static create(): com.google.common.collect.TreeMultiset<any>;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public headMultiset(upperBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public count(element: any): number;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
				}
				export module TreeMultiset {
					export abstract class Aggregate {
						public static class: java.lang.Class<com.google.common.collect.TreeMultiset.Aggregate>;
						public static DISTINCT: com.google.common.collect.TreeMultiset.Aggregate;
						public static SIZE: com.google.common.collect.TreeMultiset.Aggregate;
						public static values(): native.Array<com.google.common.collect.TreeMultiset.Aggregate>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.collect.TreeMultiset.Aggregate;
					}
					export class AvlNode<E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.TreeMultiset.AvlNode<any>>;
						public count(comparator: java.util.Comparator<any>, e: E): number;
						public toString(): string;
					}
					export class Reference<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.TreeMultiset.Reference<any>>;
						public get(): T;
						public checkAndSet(expected: T, newValue: T): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class TreeRangeMap<K, V>  extends com.google.common.collect.RangeMap<any,any> {
					public static class: java.lang.Class<com.google.common.collect.TreeRangeMap<any,any>>;
					public putAll(rangeMap: com.google.common.collect.RangeMap<any,any>): void;
					public get(key: any): any;
					public getEntry(key: any): java.util.Map.Entry<com.google.common.collect.Range<any>,any>;
					public equals(obj: any): boolean;
					public asDescendingMapOfRanges(): java.util.Map<com.google.common.collect.Range<any>,any>;
					public equals(o: any): boolean;
					public putCoalescing(range: com.google.common.collect.Range<any>, value: any): void;
					public asMapOfRanges(): java.util.Map<com.google.common.collect.Range<any>,any>;
					public toString(): string;
					public put(range: com.google.common.collect.Range<any>, value: any): void;
					public static create(): com.google.common.collect.TreeRangeMap<any,any>;
					public clear(): void;
					public remove(rangeToRemove: com.google.common.collect.Range<any>): void;
					public span(): com.google.common.collect.Range<any>;
					public hashCode(): number;
					public subRangeMap(subRange: com.google.common.collect.Range<any>): com.google.common.collect.RangeMap<any,any>;
				}
				export module TreeRangeMap {
					export class AsMapOfRanges extends com.google.common.collect.Maps.IteratorBasedAbstractMap<com.google.common.collect.Range<any>,any> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeMap.AsMapOfRanges>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public putIfAbsent(key: any, value: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public equals(o: any): boolean;
						public size(): number;
						public replace(key: any, value: any): any;
						public put(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public containsValue(value: any): boolean;
						public get(key: any): any;
						public putAll(m: java.util.Map<any,any>): void;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public remove(key: any): any;
						public clear(): void;
						public keySet(): java.util.Set<any>;
					}
					export class RangeMapEntry<K, V>  extends com.google.common.collect.AbstractMapEntry<com.google.common.collect.Range<any>,any> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeMap.RangeMapEntry<any,any>>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public getValue(): any;
						public setValue(value: any): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public getKey(): com.google.common.collect.Range<any>;
						public hashCode(): number;
						public contains(value: any): boolean;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
					}
					export class SubRangeMap extends com.google.common.collect.RangeMap<any,any> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeMap.SubRangeMap>;
						public asDescendingMapOfRanges(): java.util.Map<com.google.common.collect.Range<any>,any>;
						public equals(obj: any): boolean;
						public get(key: any): any;
						public hashCode(): number;
						public put(range: com.google.common.collect.Range<any>, value: any): void;
						public span(): com.google.common.collect.Range<any>;
						public toString(): string;
						public asMapOfRanges(): java.util.Map<com.google.common.collect.Range<any>,any>;
						public subRangeMap(range: com.google.common.collect.Range<any>): com.google.common.collect.RangeMap<any,any>;
						public remove(range: com.google.common.collect.Range<any>): void;
						public getEntry(key: any): java.util.Map.Entry<com.google.common.collect.Range<any>,any>;
						public clear(): void;
						public equals(o: any): boolean;
						public putAll(rangeMap: com.google.common.collect.RangeMap<any,any>): void;
						public putCoalescing(range: com.google.common.collect.Range<any>, value: any): void;
					}
					export module SubRangeMap {
						export class SubRangeMapAsMap extends java.util.AbstractMap<com.google.common.collect.Range<any>,any> {
							public static class: java.lang.Class<com.google.common.collect.TreeRangeMap.SubRangeMap.SubRangeMapAsMap>;
							public put(key: any, value: any): any;
							public replaceAll(function0: any /* any<any,any,any>*/): void;
							public size(): number;
							public hashCode(): number;
							public putAll(m: java.util.Map<any,any>): void;
							public putIfAbsent(key: any, value: any): any;
							public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
							public entrySet(): java.util.Set<java.util.Map.Entry<com.google.common.collect.Range<any>,any>>;
							public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
							public values(): java.util.Collection<any>;
							public containsKey(key: any): boolean;
							public remove(key: any): any;
							public equals(o: any): boolean;
							public keySet(): java.util.Set<com.google.common.collect.Range<any>>;
							public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
							public clear(): void;
							public get(key: any): any;
							public keySet(): java.util.Set<any>;
							public remove(key: any, value: any): boolean;
							public replace(key: any, oldValue: any, newValue: any): boolean;
							public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
							public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
							public forEach(action: any /* any<any,any>*/): void;
							public getOrDefault(key: any, defaultValue: any): any;
							public containsValue(value: any): boolean;
							public replace(key: any, value: any): any;
							public isEmpty(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class TreeRangeSet<C>  extends com.google.common.collect.AbstractRangeSet<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.TreeRangeSet<any>>;
					public enclosesAll(other: com.google.common.collect.RangeSet<any>): boolean;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public removeAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public remove(range: com.google.common.collect.Range<any>): void;
					public intersects(range: com.google.common.collect.Range<any>): boolean;
					public toString(): string;
					public encloses(range0: com.google.common.collect.Range<any>): boolean;
					public add(rangeToAdd: com.google.common.collect.Range<any>): void;
					public asDescendingSetOfRanges(): java.util.Set<com.google.common.collect.Range<any>>;
					public contains(value: any): boolean;
					public clear(): void;
					public asRanges(): java.util.Set<com.google.common.collect.Range<any>>;
					public subRangeSet(view: com.google.common.collect.Range<any>): com.google.common.collect.RangeSet<any>;
					public static create(ranges: java.lang.Iterable<any>): com.google.common.collect.TreeRangeSet<any>;
					public hashCode(): number;
					public static create(): com.google.common.collect.TreeRangeSet<any>;
					public addAll(other: com.google.common.collect.RangeSet<any>): void;
					public encloses(range: com.google.common.collect.Range<any>): boolean;
					public intersects(otherRange: com.google.common.collect.Range<any>): boolean;
					public add(range: com.google.common.collect.Range<any>): void;
					public rangeContaining(comparable0: any): com.google.common.collect.Range<any>;
					public removeAll(other: com.google.common.collect.RangeSet<any>): void;
					public enclosesAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): boolean;
					public rangeContaining(value: any): com.google.common.collect.Range<any>;
					public addAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
					public complement(): com.google.common.collect.RangeSet<any>;
					public static create(rangeSet: com.google.common.collect.RangeSet<any>): com.google.common.collect.TreeRangeSet<any>;
					public remove(rangeToRemove: com.google.common.collect.Range<any>): void;
					public span(): com.google.common.collect.Range<any>;
				}
				export module TreeRangeSet {
					export class AsRanges extends com.google.common.collect.ForwardingCollection<com.google.common.collect.Range<any>> implements java.util.Set<com.google.common.collect.Range<any>>  {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeSet.AsRanges>;
						public delegate(): java.util.Collection<com.google.common.collect.Range<any>>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public delegate(): java.util.Collection<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public delegate(): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public remove(object: any): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public equals(o: any): boolean;
						public forEach(action: any /* any*/): void;
						public size(): number;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
					export class Complement extends com.google.common.collect.TreeRangeSet<any> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeSet.Complement>;
						public remove(rangeToRemove: com.google.common.collect.Range<any>): void;
						public equals(obj: any): boolean;
						public removeAll(other: com.google.common.collect.RangeSet<any>): void;
						public addAll(other: com.google.common.collect.RangeSet<any>): void;
						public encloses(range: com.google.common.collect.Range<any>): boolean;
						public span(): com.google.common.collect.Range<any>;
						public hashCode(): number;
						public contains(value: any): boolean;
						public subRangeSet(view: com.google.common.collect.Range<any>): com.google.common.collect.RangeSet<any>;
						public intersects(range: com.google.common.collect.Range<any>): boolean;
						public toString(): string;
						public asDescendingSetOfRanges(): java.util.Set<com.google.common.collect.Range<any>>;
						public asRanges(): java.util.Set<com.google.common.collect.Range<any>>;
						public add(rangeToAdd: com.google.common.collect.Range<any>): void;
						public addAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
						public removeAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
						public isEmpty(): boolean;
						public clear(): void;
						public enclosesAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): boolean;
						public complement(): com.google.common.collect.RangeSet<any>;
						public rangeContaining(value: any): com.google.common.collect.Range<any>;
						public enclosesAll(other: com.google.common.collect.RangeSet<any>): boolean;
					}
					export class ComplementRangesByLowerBound<C>  extends com.google.common.collect.AbstractNavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeSet.ComplementRangesByLowerBound<any>>;
						public tailMap(fromKey: com.google.common.collect.Cut<any>, inclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public get(object0: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public subMap(fromKey: com.google.common.collect.Cut<any>, fromInclusive: boolean, toKey: com.google.common.collect.Cut<any>, toInclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public equals(o: any): boolean;
						public tailMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public remove(key: any): any;
						public headMap(toKey: com.google.common.collect.Cut<any>, inclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerKey(key: any): any;
						public subMap(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableMap<any,any>;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public get(key: any): com.google.common.collect.Range<any>;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public headMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export class RangesByUpperBound<C>  extends com.google.common.collect.AbstractNavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeSet.RangesByUpperBound<any>>;
						public tailMap(fromKey: com.google.common.collect.Cut<any>, inclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public get(object0: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public subMap(fromKey: com.google.common.collect.Cut<any>, fromInclusive: boolean, toKey: com.google.common.collect.Cut<any>, toInclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public equals(o: any): boolean;
						public tailMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public remove(key: any): any;
						public headMap(toKey: com.google.common.collect.Cut<any>, inclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerKey(key: any): any;
						public subMap(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableMap<any,any>;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public get(key: any): com.google.common.collect.Range<any>;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public headMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
					export class SubRangeSet extends com.google.common.collect.TreeRangeSet<any> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeSet.SubRangeSet>;
						public remove(rangeToRemove: com.google.common.collect.Range<any>): void;
						public equals(obj: any): boolean;
						public removeAll(other: com.google.common.collect.RangeSet<any>): void;
						public addAll(other: com.google.common.collect.RangeSet<any>): void;
						public encloses(range: com.google.common.collect.Range<any>): boolean;
						public span(): com.google.common.collect.Range<any>;
						public hashCode(): number;
						public contains(value: any): boolean;
						public subRangeSet(view: com.google.common.collect.Range<any>): com.google.common.collect.RangeSet<any>;
						public intersects(range: com.google.common.collect.Range<any>): boolean;
						public toString(): string;
						public asDescendingSetOfRanges(): java.util.Set<com.google.common.collect.Range<any>>;
						public asRanges(): java.util.Set<com.google.common.collect.Range<any>>;
						public add(rangeToAdd: com.google.common.collect.Range<any>): void;
						public addAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
						public removeAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): void;
						public isEmpty(): boolean;
						public clear(): void;
						public enclosesAll(ranges: java.lang.Iterable<com.google.common.collect.Range<any>>): boolean;
						public rangeContaining(value: any): com.google.common.collect.Range<any>;
						public complement(): com.google.common.collect.RangeSet<any>;
						public enclosesAll(other: com.google.common.collect.RangeSet<any>): boolean;
					}
					export class SubRangeSetRangesByLowerBound<C>  extends com.google.common.collect.AbstractNavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>> {
						public static class: java.lang.Class<com.google.common.collect.TreeRangeSet.SubRangeSetRangesByLowerBound<any>>;
						public tailMap(fromKey: com.google.common.collect.Cut<any>, inclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public floorEntry(key: any): java.util.Map.Entry<any,any>;
						public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						public getOrDefault(key: any, defaultValue: any): any;
						public replaceAll(function0: any /* any<any,any,any>*/): void;
						public putIfAbsent(key: any, value: any): any;
						public get(object0: any): any;
						public replace(key: any, oldValue: any, newValue: any): boolean;
						public subMap(fromKey: com.google.common.collect.Cut<any>, fromInclusive: boolean, toKey: com.google.common.collect.Cut<any>, toInclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public equals(o: any): boolean;
						public tailMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
						public size(): number;
						public floorKey(key: any): any;
						public higherKey(key: any): any;
						public replace(key: any, value: any): any;
						public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public ceilingKey(key: any): any;
						public pollFirstEntry(): java.util.Map.Entry<any,any>;
						public higherEntry(key: any): java.util.Map.Entry<any,any>;
						public lastEntry(): java.util.Map.Entry<any,any>;
						public remove(key: any): any;
						public headMap(toKey: com.google.common.collect.Cut<any>, inclusive: boolean): java.util.NavigableMap<com.google.common.collect.Cut<any>,com.google.common.collect.Range<any>>;
						public clear(): void;
						public ceilingEntry(key: any): java.util.Map.Entry<any,any>;
						public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						public headMap(toKey: any): java.util.SortedMap<any,any>;
						public hashCode(): number;
						public containsKey(key: any): boolean;
						public values(): java.util.Collection<any>;
						public comparator(): java.util.Comparator<any>;
						public descendingKeySet(): java.util.NavigableSet<any>;
						public remove(key: any, value: any): boolean;
						public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerKey(key: any): any;
						public subMap(object0: any, boolean1: boolean, object2: any, boolean3: boolean): java.util.NavigableMap<any,any>;
						public firstEntry(): java.util.Map.Entry<any,any>;
						public isEmpty(): boolean;
						public forEach(action: any /* any<any,any>*/): void;
						public get(key: any): com.google.common.collect.Range<any>;
						public pollLastEntry(): java.util.Map.Entry<any,any>;
						public headMap(object0: any, boolean1: boolean): java.util.NavigableMap<any,any>;
						public descendingMap(): java.util.NavigableMap<any,any>;
						public put(key: any, value: any): any;
						public containsValue(value: any): boolean;
						public putAll(m: java.util.Map<any,any>): void;
						public subMap(fromKey: any, toKey: any): java.util.SortedMap<any,any>;
						public tailMap(fromKey: any): java.util.SortedMap<any,any>;
						public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
						public lowerEntry(key: any): java.util.Map.Entry<any,any>;
						public keySet(): java.util.Set<any>;
						public navigableKeySet(): java.util.NavigableSet<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class TreeTraverser<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.collect.TreeTraverser<any>>;
					/** @deprecated */
					public breadthFirstTraversal(root: T): com.google.common.collect.FluentIterable<T>;
					/** @deprecated */
					public postOrderTraversal(root: T): com.google.common.collect.FluentIterable<T>;
					/** @deprecated */
					public static using(nodeToChildrenFunction: com.google.common.base.Function<any,any>): com.google.common.collect.TreeTraverser<any>;
					public constructor();
					/** @deprecated */
					public preOrderTraversal(root: T): com.google.common.collect.FluentIterable<T>;
					public children(object0: T): java.lang.Iterable<T>;
				}
				export module TreeTraverser {
					export class BreadthFirstIterator extends com.google.common.collect.UnmodifiableIterator<any> implements com.google.common.collect.PeekingIterator<any>  {
						public static class: java.lang.Class<com.google.common.collect.TreeTraverser.BreadthFirstIterator>;
						public next(): any;
						public peek(): any;
						public hasNext(): boolean;
						/** @deprecated */
						public remove(): void;
						public remove(): void;
					}
					export class PostOrderIterator extends com.google.common.collect.AbstractIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.TreeTraverser.PostOrderIterator>;
						public computeNext(): any;
					}
					export class PostOrderNode<T>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.collect.TreeTraverser.PostOrderNode<any>>;
					}
					export class PreOrderIterator extends com.google.common.collect.UnmodifiableIterator<any> {
						public static class: java.lang.Class<com.google.common.collect.TreeTraverser.PreOrderIterator>;
						public next(): any;
						public hasNext(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class UnmodifiableIterator<E>  extends java.util.Iterator<any> {
					public static class: java.lang.Class<com.google.common.collect.UnmodifiableIterator<any>>;
					/** @deprecated */
					public remove(): void;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export abstract class UnmodifiableListIterator<E>  extends com.google.common.collect.UnmodifiableIterator<any> implements java.util.ListIterator<any>  {
					public static class: java.lang.Class<com.google.common.collect.UnmodifiableListIterator<any>>;
					public previousIndex(): number;
					public nextIndex(): number;
					public next(): any;
					/** @deprecated */
					public remove(): void;
					public previous(): any;
					/** @deprecated */
					public set(e: any): void;
					public hasNext(): boolean;
					public remove(): void;
					/** @deprecated */
					public add(e: any): void;
					public set(e: any): void;
					public constructor();
					public hasPrevious(): boolean;
					public add(e: any): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class UnmodifiableSortedMultiset<E>  extends com.google.common.collect.Multisets.UnmodifiableMultiset<any> implements com.google.common.collect.SortedMultiset<any>  {
					public static class: java.lang.Class<com.google.common.collect.UnmodifiableSortedMultiset<any>>;
					public delegate(): java.util.Collection<any>;
					public lastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public isEmpty(): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public comparator(): java.util.Comparator<any>;
					public contains(object: any): boolean;
					public containsAll(collection: java.util.Collection<any>): boolean;
					public size(): number;
					public remove(element: any): boolean;
					public setCount(element: any, count: number): number;
					public add(element: any): boolean;
					public pollFirstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public equals(object: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public toString(): string;
					public firstEntry(): com.google.common.collect.Multiset.Entry<any>;
					public elementSet(): java.util.SortedSet<any>;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(element: any, occurrences: number): number;
					public addAll(elementsToAdd: java.util.Collection<any>): boolean;
					public delegate(): com.google.common.collect.SortedMultiset<any>;
					public hashCode(): number;
					public delegate(): any;
					public tailMultiset(lowerBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public forEach(action: any /* any*/): void;
					public setCount(element: any, oldCount: number, newCount: number): boolean;
					public toArray(array: native.Array<any>): native.Array<any>;
					public descendingMultiset(): com.google.common.collect.SortedMultiset<any>;
					public parallelStream(): java.util.stream.Stream<any>;
					public pollLastEntry(): com.google.common.collect.Multiset.Entry<any>;
					public subMultiset(lowerBound: any, lowerBoundType: com.google.common.collect.BoundType, upperBound: any, upperBoundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public retainAll(elementsToRetain: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public stream(): java.util.stream.Stream<any>;
					public elementSet(): java.util.Set<any>;
					public removeAll(elementsToRemove: java.util.Collection<any>): boolean;
					public add(element: any, occurences: number): number;
					public headMultiset(upperBound: any, boundType: com.google.common.collect.BoundType): com.google.common.collect.SortedMultiset<any>;
					public count(element: any): number;
					public delegate(): com.google.common.collect.Multiset<any>;
					public entrySet(): java.util.Set<com.google.common.collect.Multiset.Entry<any>>;
					public elementSet(): java.util.NavigableSet<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module collect {
				export class UsingToStringOrdering extends com.google.common.collect.Ordering<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.collect.UsingToStringOrdering>;
					public equals(obj: any): boolean;
					public nullsLast(): com.google.common.collect.Ordering<any>;
					public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(left: any, right: any): number;
					public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
					public static reverseOrder(): java.util.Comparator<any>;
					public nullsFirst(): com.google.common.collect.Ordering<any>;
					public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public compare(object0: any, object1: any): number;
					public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
					public toString(): string;
					public reversed(): java.util.Comparator<any>;
					public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					public static naturalOrder(): java.util.Comparator<any>;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module escape {
				export abstract class ArrayBasedCharEscaper extends com.google.common.escape.CharEscaper {
					public static class: java.lang.Class<com.google.common.escape.ArrayBasedCharEscaper>;
					public escape(s: string): string;
					public escape(c: string): native.Array<string>;
					public constructor();
					public escape(string: string): string;
					public constructor(replacementMap: java.util.Map<java.lang.Character,string>, safeMin: string, safeMax: string);
					public constructor(escaperMap: com.google.common.escape.ArrayBasedEscaperMap, safeMin: string, safeMax: string);
					public escapeUnsafe(char0: string): native.Array<string>;
					public escape(char0: string): native.Array<string>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export class ArrayBasedEscaperMap extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.escape.ArrayBasedEscaperMap>;
					public static create(replacements: java.util.Map<java.lang.Character,string>): com.google.common.escape.ArrayBasedEscaperMap;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export abstract class ArrayBasedUnicodeEscaper extends com.google.common.escape.UnicodeEscaper {
					public static class: java.lang.Class<com.google.common.escape.ArrayBasedUnicodeEscaper>;
					public constructor(escaperMap: com.google.common.escape.ArrayBasedEscaperMap, safeMin: number, safeMax: number, unsafeReplacement: string);
					public escape(s: string): string;
					public constructor(replacementMap: java.util.Map<java.lang.Character,string>, safeMin: number, safeMax: number, unsafeReplacement: string);
					public nextEscapeIndex(csq: string, index: number, end: number): number;
					public constructor();
					public nextEscapeIndex(csq: string, start: number, end: number): number;
					public escape(string: string): string;
					public escapeUnsafe(int0: number): native.Array<string>;
					public escape(cp: number): native.Array<string>;
					public escape(int0: number): native.Array<string>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export abstract class CharEscaper extends com.google.common.escape.Escaper {
					public static class: java.lang.Class<com.google.common.escape.CharEscaper>;
					public escape(string0: string): string;
					public escapeSlow(s: string, index: number): string;
					public constructor();
					public escape(string: string): string;
					public escape(char0: string): native.Array<string>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export class CharEscaperBuilder extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.escape.CharEscaperBuilder>;
					public toArray(): native.Array<native.Array<string>>;
					public addEscape(c: string, r: string): com.google.common.escape.CharEscaperBuilder;
					public constructor();
					public addEscapes(cs: native.Array<string>, r: string): com.google.common.escape.CharEscaperBuilder;
					public toEscaper(): com.google.common.escape.Escaper;
				}
				export module CharEscaperBuilder {
					export class CharArrayDecorator extends com.google.common.escape.CharEscaper {
						public static class: java.lang.Class<com.google.common.escape.CharEscaperBuilder.CharArrayDecorator>;
						public escape(string: string): string;
						public escape(s: string): string;
						public escape(char0: string): native.Array<string>;
						public escape(c: string): native.Array<string>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export abstract class Escaper extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.escape.Escaper>;
					public escape(string0: string): string;
					public asFunction(): com.google.common.base.Function<string,string>;
					public constructor();
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export class Escapers extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.escape.Escapers>;
					public static computeReplacement(escaper: com.google.common.escape.CharEscaper, c: string): string;
					public static computeReplacement(escaper: com.google.common.escape.UnicodeEscaper, cp: number): string;
					public static nullEscaper(): com.google.common.escape.Escaper;
					public static builder(): com.google.common.escape.Escapers.Builder;
				}
				export module Escapers {
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.escape.Escapers.Builder>;
						public addEscape(c: string, replacement: string): com.google.common.escape.Escapers.Builder;
						public build(): com.google.common.escape.Escaper;
						public setSafeRange(safeMin: string, safeMax: string): com.google.common.escape.Escapers.Builder;
						public setUnsafeReplacement(unsafeReplacement: string): com.google.common.escape.Escapers.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export class Platform extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.escape.Platform>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module escape {
				export abstract class UnicodeEscaper extends com.google.common.escape.Escaper {
					public static class: java.lang.Class<com.google.common.escape.UnicodeEscaper>;
					public escape(string0: string): string;
					public escapeSlow(s: string, index: number): string;
					public constructor();
					public nextEscapeIndex(csq: string, start: number, end: number): number;
					public static codePointAt(seq: string, index: number, end: number): number;
					public escape(string: string): string;
					public escape(int0: number): native.Array<string>;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class AllowConcurrentEvents extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.google.common.eventbus.AllowConcurrentEvents>;
					/**
					 * Constructs a new instance of the com.google.common.eventbus.AllowConcurrentEvents interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						annotationType(): java.lang.Class<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public toString(): string;
					public annotationType(): java.lang.Class<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class AsyncEventBus extends com.google.common.eventbus.EventBus {
					public static class: java.lang.Class<com.google.common.eventbus.AsyncEventBus>;
					public constructor(identifier: string);
					public constructor(executor: java.util.concurrent.Executor);
					public constructor();
					public constructor(exceptionHandler: com.google.common.eventbus.SubscriberExceptionHandler);
					public constructor(identifier: string, executor: java.util.concurrent.Executor);
					public constructor(executor: java.util.concurrent.Executor, subscriberExceptionHandler: com.google.common.eventbus.SubscriberExceptionHandler);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class DeadEvent extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.eventbus.DeadEvent>;
					public toString(): string;
					public getEvent(): any;
					public getSource(): any;
					public constructor(source: any, event: any);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export abstract class Dispatcher extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.eventbus.Dispatcher>;
				}
				export module Dispatcher {
					export class ImmediateDispatcher extends com.google.common.eventbus.Dispatcher {
						public static class: java.lang.Class<com.google.common.eventbus.Dispatcher.ImmediateDispatcher>;
					}
					export class LegacyAsyncDispatcher extends com.google.common.eventbus.Dispatcher {
						public static class: java.lang.Class<com.google.common.eventbus.Dispatcher.LegacyAsyncDispatcher>;
					}
					export module LegacyAsyncDispatcher {
						export class EventWithSubscriber extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.eventbus.Dispatcher.LegacyAsyncDispatcher.EventWithSubscriber>;
						}
					}
					export class PerThreadQueuedDispatcher extends com.google.common.eventbus.Dispatcher {
						public static class: java.lang.Class<com.google.common.eventbus.Dispatcher.PerThreadQueuedDispatcher>;
					}
					export module PerThreadQueuedDispatcher {
						export class Event extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.eventbus.Dispatcher.PerThreadQueuedDispatcher.Event>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class EventBus extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.eventbus.EventBus>;
					public post(event: any): void;
					public register(object: any): void;
					public constructor(identifier: string);
					public toString(): string;
					public unregister(object: any): void;
					public constructor();
					public identifier(): string;
					public constructor(exceptionHandler: com.google.common.eventbus.SubscriberExceptionHandler);
				}
				export module EventBus {
					export class LoggingHandler extends java.lang.Object implements com.google.common.eventbus.SubscriberExceptionHandler {
						public static class: java.lang.Class<com.google.common.eventbus.EventBus.LoggingHandler>;
						public handleException(exception: java.lang.Throwable, context: com.google.common.eventbus.SubscriberExceptionContext): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class Subscribe extends java.lang.Object implements java.lang.annotation.Annotation {
					public static class: java.lang.Class<com.google.common.eventbus.Subscribe>;
					/**
					 * Constructs a new instance of the com.google.common.eventbus.Subscribe interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						equals(object0: any): boolean;
						hashCode(): number;
						toString(): string;
						annotationType(): java.lang.Class<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public toString(): string;
					public annotationType(): java.lang.Class<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class Subscriber extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.eventbus.Subscriber>;
					public equals(obj: any): boolean;
					public hashCode(): number;
				}
				export module Subscriber {
					export class SynchronizedSubscriber extends com.google.common.eventbus.Subscriber {
						public static class: java.lang.Class<com.google.common.eventbus.Subscriber.SynchronizedSubscriber>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class SubscriberExceptionContext extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.eventbus.SubscriberExceptionContext>;
					public getSubscriber(): any;
					public getEvent(): any;
					public getEventBus(): com.google.common.eventbus.EventBus;
					public getSubscriberMethod(): java.lang.reflect.Method;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class SubscriberExceptionHandler extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.eventbus.SubscriberExceptionHandler>;
					/**
					 * Constructs a new instance of the com.google.common.eventbus.SubscriberExceptionHandler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						handleException(throwable0: java.lang.Throwable, subscriberExceptionContext1: com.google.common.eventbus.SubscriberExceptionContext): void;
					});
					public constructor();
					public handleException(throwable0: java.lang.Throwable, subscriberExceptionContext1: com.google.common.eventbus.SubscriberExceptionContext): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module eventbus {
				export class SubscriberRegistry extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.eventbus.SubscriberRegistry>;
				}
				export module SubscriberRegistry {
					export class MethodIdentifier extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.eventbus.SubscriberRegistry.MethodIdentifier>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public equals(o: any): boolean;
					}
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class AbstractBaseGraph<N>  extends com.google.common.graph.BaseGraph<any> {
					public static class: java.lang.Class<com.google.common.graph.AbstractBaseGraph<any>>;
					public adjacentNodes(object0: any): java.util.Set<any>;
					public isOrderingCompatible(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public outDegree(node: any): number;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public predecessors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public allowsSelfLoops(): boolean;
					public isDirected(): boolean;
					public validateEndpoints(endpoints: com.google.common.graph.EndpointPair<any>): void;
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public predecessors(object0: any): java.lang.Iterable<any>;
					public edgeCount(): number;
				}
				export module AbstractBaseGraph {
					export abstract class IncidentEdgeSet<N>  extends java.util.AbstractSet<com.google.common.graph.EndpointPair<any>> {
						public static class: java.lang.Class<com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet<any>>;
						public graph: com.google.common.graph.BaseGraph<any>;
						public node: any;
						public addAll(c: java.util.Collection<any>): boolean;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public add(e: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public static of(graph: com.google.common.graph.BaseGraph<any>, node: any): com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet<any>;
						public remove(o: any): boolean;
						public removeIf(filter: any /* any*/): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public clear(): void;
						public containsAll(c: java.util.Collection<any>): boolean;
						public equals(o: any): boolean;
						public size(): number;
						public toArray(): native.Array<any>;
					}
					export module IncidentEdgeSet {
						export class Directed<N>  extends com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet<any> {
							public static class: java.lang.Class<com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet.Directed<any>>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public contains(obj: any): boolean;
							public iterator(): com.google.common.collect.UnmodifiableIterator<com.google.common.graph.EndpointPair<any>>;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
						export class Undirected<N>  extends com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet<any> {
							public static class: java.lang.Class<com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet.Undirected<any>>;
							public size(): number;
							public iterator(): java.util.Iterator<any>;
							public hashCode(): number;
							public spliterator(): java.util.Spliterator<any>;
							public contains(o: any): boolean;
							public containsAll(c: java.util.Collection<any>): boolean;
							public retainAll(c: java.util.Collection<any>): boolean;
							public clear(): void;
							public toArray(): native.Array<any>;
							public add(e: any): boolean;
							public contains(obj: any): boolean;
							public iterator(): com.google.common.collect.UnmodifiableIterator<com.google.common.graph.EndpointPair<any>>;
							public addAll(c: java.util.Collection<any>): boolean;
							public stream(): java.util.stream.Stream<any>;
							public remove(o: any): boolean;
							public removeAll(c: java.util.Collection<any>): boolean;
							public removeIf(filter: any /* any*/): boolean;
							public equals(o: any): boolean;
							public isEmpty(): boolean;
							public toArray(a: native.Array<any>): native.Array<any>;
							public parallelStream(): java.util.stream.Stream<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class AbstractDirectedNetworkConnections<N, E>  extends com.google.common.graph.NetworkConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.AbstractDirectedNetworkConnections<any,any>>;
					public inEdgeMap: java.util.Map<any,any>;
					public outEdgeMap: java.util.Map<any,any>;
					public inEdges(): java.util.Set<any>;
					public outEdges(): java.util.Set<any>;
					public adjacentNodes(): java.util.Set<any>;
					public addInEdge(edge: any, node: any, isSelfLoop: boolean): void;
					public addOutEdge(edge: any, node: any): void;
					public removeOutEdge(edge: any): any;
					public constructor(inEdgeMap: java.util.Map<any,any>, outEdgeMap: java.util.Map<any,any>, selfLoopCount: number);
					public adjacentNode(edge: any): any;
					public incidentEdges(): java.util.Set<any>;
					public successors(): java.util.Set<any>;
					public edgesConnecting(object0: any): java.util.Set<any>;
					public removeInEdge(edge: any, isSelfLoop: boolean): any;
					public predecessors(): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class AbstractGraph<N>  extends com.google.common.graph.AbstractBaseGraph<any> implements com.google.common.graph.Graph<any>  {
					public static class: java.lang.Class<com.google.common.graph.AbstractGraph<any>>;
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public outDegree(node: any): number;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public predecessors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public allowsSelfLoops(): boolean;
					public isDirected(): boolean;
					public toString(): string;
					public constructor();
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hashCode(): number;
					public predecessors(object0: any): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class AbstractGraphBuilder<N>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.AbstractGraphBuilder<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class AbstractNetwork<N, E>  extends com.google.common.graph.Network<any,any> {
					public static class: java.lang.Class<com.google.common.graph.AbstractNetwork<any,any>>;
					public edgeOrder(): com.google.common.graph.ElementOrder<any>;
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public isOrderingCompatible(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public edgeConnectingOrNull(nodeU: any, nodeV: any): any;
					public edges(): java.util.Set<any>;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public edgeConnectingOrNull(endpoints: com.google.common.graph.EndpointPair<any>): any;
					public edgesConnecting(nodeU: any, nodeV: any): java.util.Set<any>;
					public adjacentEdges(edge: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public outEdges(object0: any): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public predecessors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public incidentNodes(object0: any): com.google.common.graph.EndpointPair<any>;
					public allowsSelfLoops(): boolean;
					public toString(): string;
					public constructor();
					public inDegree(node: any): number;
					public hashCode(): number;
					public allowsParallelEdges(): boolean;
					public incidentEdges(object0: any): java.util.Set<any>;
					public outDegree(node: any): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public edgesConnecting(endpoints: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
					public isDirected(): boolean;
					public validateEndpoints(endpoints: com.google.common.graph.EndpointPair<any>): void;
					public asGraph(): com.google.common.graph.Graph<any>;
					public degree(node: any): number;
					public inEdges(object0: any): java.util.Set<any>;
					public predecessors(object0: any): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class AbstractUndirectedNetworkConnections<N, E>  extends com.google.common.graph.NetworkConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.AbstractUndirectedNetworkConnections<any,any>>;
					public incidentEdgeMap: java.util.Map<any,any>;
					public inEdges(): java.util.Set<any>;
					public outEdges(): java.util.Set<any>;
					public adjacentNodes(): java.util.Set<any>;
					public addInEdge(edge: any, node: any, isSelfLoop: boolean): void;
					public addOutEdge(edge: any, node: any): void;
					public removeOutEdge(edge: any): any;
					public adjacentNode(edge: any): any;
					public incidentEdges(): java.util.Set<any>;
					public successors(): java.util.Set<any>;
					public edgesConnecting(object0: any): java.util.Set<any>;
					public constructor(incidentEdgeMap: java.util.Map<any,any>);
					public removeInEdge(edge: any, isSelfLoop: boolean): any;
					public predecessors(): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class AbstractValueGraph<N, V>  extends com.google.common.graph.AbstractBaseGraph<any> implements com.google.common.graph.ValueGraph<any,any>  {
					public static class: java.lang.Class<com.google.common.graph.AbstractValueGraph<any,any>>;
					public edgeValueOrDefault(object0: any, object1: any, object2: any): any;
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public outDegree(node: any): number;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public edgeValueOrDefault(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): any;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public predecessors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public allowsSelfLoops(): boolean;
					public isDirected(): boolean;
					public toString(): string;
					public asGraph(): com.google.common.graph.Graph<any>;
					public constructor();
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hashCode(): number;
					public predecessors(object0: any): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class BaseGraph<N>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.BaseGraph<any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.BaseGraph<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						nodes(): java.util.Set<N>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<N>>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<N>;
						adjacentNodes(object0: N): java.util.Set<N>;
						predecessors(object0: N): java.util.Set<N>;
						successors(object0: N): java.util.Set<N>;
						incidentEdges(object0: N): java.util.Set<com.google.common.graph.EndpointPair<N>>;
						degree(object0: N): number;
						inDegree(object0: N): number;
						outDegree(object0: N): number;
						hasEdgeConnecting(object0: N, object1: N): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<N>): boolean;
						successors(object0: N): java.lang.Iterable<any>;
						predecessors(object0: N): java.lang.Iterable<any>;
					});
					public constructor();
					public inDegree(object0: N): number;
					public successors(object0: N): java.lang.Iterable<any>;
					public outDegree(object0: N): number;
					public adjacentNodes(object0: N): java.util.Set<N>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<N>>;
					public successors(object0: N): java.util.Set<N>;
					public predecessors(object0: N): java.lang.Iterable<any>;
					public nodes(): java.util.Set<N>;
					public isDirected(): boolean;
					public allowsSelfLoops(): boolean;
					public predecessors(object0: N): java.util.Set<N>;
					public hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<N>): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<N>;
					public degree(object0: N): number;
					public incidentEdges(object0: N): java.util.Set<com.google.common.graph.EndpointPair<N>>;
					public hasEdgeConnecting(object0: N, object1: N): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ConfigurableMutableGraph<N>  extends com.google.common.graph.ForwardingGraph<any> implements com.google.common.graph.MutableGraph<any>  {
					public static class: java.lang.Class<com.google.common.graph.ConfigurableMutableGraph<any>>;
					public equals(obj: any): boolean;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public successors(object0: any): java.lang.Iterable<any>;
					public allowsSelfLoops(): boolean;
					public putEdge(nodeU: any, nodeV: any): boolean;
					public inDegree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public removeEdge(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public hashCode(): number;
					public predecessors(node: any): java.util.Set<any>;
					public removeEdge(nodeU: any, nodeV: any): boolean;
					public outDegree(node: any): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public removeNode(node: any): boolean;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public putEdge(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public degree(node: any): number;
					public addNode(node: any): boolean;
					public predecessors(object0: any): java.lang.Iterable<any>;
					public delegate(): com.google.common.graph.BaseGraph<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ConfigurableMutableNetwork<N, E>  extends com.google.common.graph.ConfigurableNetwork<any,any> implements com.google.common.graph.MutableNetwork<any,any>  {
					public static class: java.lang.Class<com.google.common.graph.ConfigurableMutableNetwork<any,any>>;
					public edgeOrder(): com.google.common.graph.ElementOrder<any>;
					public equals(obj: any): boolean;
					public edgeConnectingOrNull(nodeU: any, nodeV: any): any;
					public edges(): java.util.Set<any>;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public incidentNodes(edge: any): com.google.common.graph.EndpointPair<any>;
					public edgeConnectingOrNull(endpoints: com.google.common.graph.EndpointPair<any>): any;
					public edgesConnecting(nodeU: any, nodeV: any): java.util.Set<any>;
					public adjacentEdges(edge: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public removeEdge(edge: any): boolean;
					public successors(object0: any): java.lang.Iterable<any>;
					public addEdge(nodeU: any, nodeV: any, edge: any): boolean;
					public addEdge(endpoints: com.google.common.graph.EndpointPair<any>, edge: any): boolean;
					public allowsSelfLoops(): boolean;
					public inDegree(node: any): number;
					public hashCode(): number;
					public inEdges(node: any): java.util.Set<any>;
					public predecessors(node: any): java.util.Set<any>;
					public allowsParallelEdges(): boolean;
					public outEdges(node: any): java.util.Set<any>;
					public outDegree(node: any): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public removeNode(node: any): boolean;
					public edgesConnecting(endpoints: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
					public incidentEdges(node: any): java.util.Set<any>;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public degree(node: any): number;
					public addNode(node: any): boolean;
					public predecessors(object0: any): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ConfigurableMutableValueGraph<N, V>  extends com.google.common.graph.ConfigurableValueGraph<any,any> implements com.google.common.graph.MutableValueGraph<any,any>  {
					public static class: java.lang.Class<com.google.common.graph.ConfigurableMutableValueGraph<any,any>>;
					public equals(obj: any): boolean;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodes(): java.util.Set<any>;
					public putEdgeValue(endpoints: com.google.common.graph.EndpointPair<any>, value: any): any;
					public edgeValueOrDefault(endpoints: com.google.common.graph.EndpointPair<any>, defaultValue: any): any;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public successors(object0: any): java.lang.Iterable<any>;
					public allowsSelfLoops(): boolean;
					public inDegree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hashCode(): number;
					public predecessors(node: any): java.util.Set<any>;
					public removeEdge(endpoints: com.google.common.graph.EndpointPair<any>): any;
					public edgeValueOrDefault(nodeU: any, nodeV: any, defaultValue: any): any;
					public outDegree(node: any): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public removeNode(node: any): boolean;
					public removeEdge(nodeU: any, nodeV: any): any;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public putEdgeValue(nodeU: any, nodeV: any, value: any): any;
					public degree(node: any): number;
					public addNode(node: any): boolean;
					public predecessors(object0: any): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ConfigurableNetwork<N, E>  extends com.google.common.graph.AbstractNetwork<any,any> {
					public static class: java.lang.Class<com.google.common.graph.ConfigurableNetwork<any,any>>;
					public edgeToReferenceNode: com.google.common.graph.MapIteratorCache<any,any>;
					public nodeConnections: com.google.common.graph.MapIteratorCache<any,com.google.common.graph.NetworkConnections<any,any>>;
					public edgeOrder(): com.google.common.graph.ElementOrder<any>;
					public equals(obj: any): boolean;
					public edges(): java.util.Set<any>;
					public edgeConnectingOrNull(nodeU: any, nodeV: any): any;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public incidentNodes(edge: any): com.google.common.graph.EndpointPair<any>;
					public edgesConnecting(nodeU: any, nodeV: any): java.util.Set<any>;
					public edgeConnectingOrNull(endpoints: com.google.common.graph.EndpointPair<any>): any;
					public nodes(): java.util.Set<any>;
					public adjacentEdges(edge: any): java.util.Set<any>;
					public containsNode(node: any): boolean;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public allowsSelfLoops(): boolean;
					public containsEdge(edge: any): boolean;
					public inDegree(node: any): number;
					public inEdges(node: any): java.util.Set<any>;
					public predecessors(node: any): java.util.Set<any>;
					public hashCode(): number;
					public allowsParallelEdges(): boolean;
					public outEdges(node: any): java.util.Set<any>;
					public outDegree(node: any): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public edgesConnecting(endpoints: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
					public incidentEdges(node: any): java.util.Set<any>;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public degree(node: any): number;
					public checkedReferenceNode(edge: any): any;
					public checkedConnections(node: any): com.google.common.graph.NetworkConnections<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ConfigurableValueGraph<N, V>  extends com.google.common.graph.AbstractValueGraph<any,any> {
					public static class: java.lang.Class<com.google.common.graph.ConfigurableValueGraph<any,any>>;
					public nodeConnections: com.google.common.graph.MapIteratorCache<any,com.google.common.graph.GraphConnections<any,any>>;
					public equals(obj: any): boolean;
					public edgeValueOrDefault(nodeU: any, nodeV: any, defaultValue: any): any;
					public outDegree(node: any): number;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public edgeValueOrDefault_internal(nodeU: any, nodeV: any, defaultValue: any): any;
					public containsNode(node: any): boolean;
					public edgeValueOrDefault(endpoints: com.google.common.graph.EndpointPair<any>, defaultValue: any): any;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public hasEdgeConnecting_internal(nodeU: any, nodeV: any): boolean;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public allowsSelfLoops(): boolean;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public checkedConnections(node: any): com.google.common.graph.GraphConnections<any,any>;
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public predecessors(node: any): java.util.Set<any>;
					public hashCode(): number;
					public edgeCount(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class DirectedGraphConnections<N, V>  extends com.google.common.graph.GraphConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.DirectedGraphConnections<any,any>>;
					public addPredecessor(node: any, unused: any): void;
					public addSuccessor(node: any, value: any): any;
					public value(node: any): any;
					public successors(): java.util.Set<any>;
					public removeSuccessor(node: any): any;
					public adjacentNodes(): java.util.Set<any>;
					public removePredecessor(node: any): void;
					public predecessors(): java.util.Set<any>;
				}
				export module DirectedGraphConnections {
					export class PredAndSucc extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.graph.DirectedGraphConnections.PredAndSucc>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class DirectedMultiNetworkConnections<N, E>  extends com.google.common.graph.AbstractDirectedNetworkConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.DirectedMultiNetworkConnections<any,any>>;
					public addOutEdge(edge: any, node: any): void;
					public inEdges(): java.util.Set<any>;
					public removeOutEdge(edge: any): any;
					public successors(): java.util.Set<any>;
					public incidentEdges(): java.util.Set<any>;
					public adjacentNode(edge: any): any;
					public outEdges(): java.util.Set<any>;
					public adjacentNodes(): java.util.Set<any>;
					public removeInEdge(edge: any, isSelfLoop: boolean): any;
					public edgesConnecting(node: any): java.util.Set<any>;
					public predecessors(): java.util.Set<any>;
					public addInEdge(edge: any, node: any, isSelfLoop: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class DirectedNetworkConnections<N, E>  extends com.google.common.graph.AbstractDirectedNetworkConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.DirectedNetworkConnections<any,any>>;
					public inEdges(): java.util.Set<any>;
					public outEdges(): java.util.Set<any>;
					public adjacentNodes(): java.util.Set<any>;
					public edgesConnecting(node: any): java.util.Set<any>;
					public addInEdge(edge: any, node: any, isSelfLoop: boolean): void;
					public addOutEdge(edge: any, node: any): void;
					public removeOutEdge(edge: any): any;
					public constructor(inEdgeMap: java.util.Map<any,any>, outEdgeMap: java.util.Map<any,any>, selfLoopCount: number);
					public successors(): java.util.Set<any>;
					public incidentEdges(): java.util.Set<any>;
					public adjacentNode(edge: any): any;
					public removeInEdge(edge: any, isSelfLoop: boolean): any;
					public predecessors(): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class EdgesConnecting<E>  extends java.util.AbstractSet<any> {
					public static class: java.lang.Class<com.google.common.graph.EdgesConnecting<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					public retainAll(c: java.util.Collection<any>): boolean;
					public size(): number;
					public equals(o: any): boolean;
					public contains(o: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public removeAll(c: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(o: any): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public contains(edge: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ElementOrder<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.ElementOrder<any>>;
					public equals(obj: any): boolean;
					public toString(): string;
					public static insertion(): com.google.common.graph.ElementOrder<any>;
					public static natural(): com.google.common.graph.ElementOrder<any>;
					public static unordered(): com.google.common.graph.ElementOrder<any>;
					public hashCode(): number;
					public type(): com.google.common.graph.ElementOrder.Type;
					public comparator(): java.util.Comparator<T>;
					public static sorted(comparator: java.util.Comparator<any>): com.google.common.graph.ElementOrder<any>;
				}
				export module ElementOrder {
					export class Type {
						public static class: java.lang.Class<com.google.common.graph.ElementOrder.Type>;
						public static INSERTION: com.google.common.graph.ElementOrder.Type;
						public static SORTED: com.google.common.graph.ElementOrder.Type;
						public static UNORDERED: com.google.common.graph.ElementOrder.Type;
						public static values(): native.Array<com.google.common.graph.ElementOrder.Type>;
						public static valueOf(name: string): com.google.common.graph.ElementOrder.Type;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class EndpointPair<N>  extends java.lang.Iterable<any> {
					public static class: java.lang.Class<com.google.common.graph.EndpointPair<any>>;
					public equals(obj: any): boolean;
					public static unordered(nodeU: any, nodeV: any): com.google.common.graph.EndpointPair<any>;
					public adjacentNode(node: any): any;
					public spliterator(): java.util.Spliterator<any>;
					public nodeU(): any;
					public source(): any;
					public target(): any;
					public isOrdered(): boolean;
					public iterator(): java.util.Iterator<any>;
					public static ordered(source: any, target: any): com.google.common.graph.EndpointPair<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public hashCode(): number;
					public nodeV(): any;
					public forEach(action: any /* any*/): void;
				}
				export module EndpointPair {
					export class Ordered<N>  extends com.google.common.graph.EndpointPair<any> {
						public static class: java.lang.Class<com.google.common.graph.EndpointPair.Ordered<any>>;
						public equals(obj: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public spliterator(): java.util.Spliterator<any>;
						public hashCode(): number;
						public equals(object0: any): boolean;
						public source(): any;
						public isOrdered(): boolean;
						public target(): any;
						public forEach(action: any /* any*/): void;
						public toString(): string;
					}
					export class Unordered<N>  extends com.google.common.graph.EndpointPair<any> {
						public static class: java.lang.Class<com.google.common.graph.EndpointPair.Unordered<any>>;
						public equals(obj: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
						public spliterator(): java.util.Spliterator<any>;
						public hashCode(): number;
						public equals(object0: any): boolean;
						public source(): any;
						public isOrdered(): boolean;
						public target(): any;
						public forEach(action: any /* any*/): void;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class EndpointPairIterator<N>  extends com.google.common.collect.AbstractIterator<com.google.common.graph.EndpointPair<any>> {
					public static class: java.lang.Class<com.google.common.graph.EndpointPairIterator<any>>;
					public node: any;
					public successorIterator: java.util.Iterator<any>;
					public advance(): boolean;
				}
				export module EndpointPairIterator {
					export class Directed<N>  extends com.google.common.graph.EndpointPairIterator<any> {
						public static class: java.lang.Class<com.google.common.graph.EndpointPairIterator.Directed<any>>;
						public computeNext(): any;
						public computeNext(): com.google.common.graph.EndpointPair<any>;
					}
					export class Undirected<N>  extends com.google.common.graph.EndpointPairIterator<any> {
						public static class: java.lang.Class<com.google.common.graph.EndpointPairIterator.Undirected<any>>;
						public computeNext(): any;
						public computeNext(): com.google.common.graph.EndpointPair<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class ForwardingGraph<N>  extends com.google.common.graph.AbstractGraph<any> {
					public static class: java.lang.Class<com.google.common.graph.ForwardingGraph<any>>;
					public equals(obj: any): boolean;
					public outDegree(node: any): number;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public allowsSelfLoops(): boolean;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public predecessors(node: any): java.util.Set<any>;
					public hashCode(): number;
					public delegate(): com.google.common.graph.BaseGraph<any>;
					public edgeCount(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class ForwardingNetwork<N, E>  extends com.google.common.graph.AbstractNetwork<any,any> {
					public static class: java.lang.Class<com.google.common.graph.ForwardingNetwork<any,any>>;
					public edgeOrder(): com.google.common.graph.ElementOrder<any>;
					public equals(obj: any): boolean;
					public edgeConnectingOrNull(nodeU: any, nodeV: any): any;
					public edges(): java.util.Set<any>;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public incidentNodes(edge: any): com.google.common.graph.EndpointPair<any>;
					public edgeConnectingOrNull(endpoints: com.google.common.graph.EndpointPair<any>): any;
					public edgesConnecting(nodeU: any, nodeV: any): java.util.Set<any>;
					public adjacentEdges(edge: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public allowsSelfLoops(): boolean;
					public inDegree(node: any): number;
					public inEdges(node: any): java.util.Set<any>;
					public predecessors(node: any): java.util.Set<any>;
					public hashCode(): number;
					public allowsParallelEdges(): boolean;
					public outEdges(node: any): java.util.Set<any>;
					public outDegree(node: any): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public delegate(): com.google.common.graph.Network<any,any>;
					public successors(node: any): java.util.Set<any>;
					public edgesConnecting(endpoints: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
					public incidentEdges(node: any): java.util.Set<any>;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public degree(node: any): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class ForwardingValueGraph<N, V>  extends com.google.common.graph.AbstractValueGraph<any,any> {
					public static class: java.lang.Class<com.google.common.graph.ForwardingValueGraph<any,any>>;
					public equals(obj: any): boolean;
					public edgeValueOrDefault(nodeU: any, nodeV: any, defaultValue: any): any;
					public outDegree(node: any): number;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public edgeValueOrDefault(endpoints: com.google.common.graph.EndpointPair<any>, defaultValue: any): any;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public delegate(): com.google.common.graph.ValueGraph<any,any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public allowsSelfLoops(): boolean;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public predecessors(node: any): java.util.Set<any>;
					public hashCode(): number;
					public edgeCount(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class Graph<N>  extends com.google.common.graph.BaseGraph<any> {
					public static class: java.lang.Class<com.google.common.graph.Graph<any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.Graph<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						equals(object0: any): boolean;
						hashCode(): number;
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						successors(object0: any): java.lang.Iterable<any>;
						predecessors(object0: any): java.lang.Iterable<any>;
					});
					public constructor();
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public nodes(): java.util.Set<any>;
					public inDegree(object0: any): number;
					public predecessors(object0: any): java.util.Set<any>;
					public incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public outDegree(object0: any): number;
					public hasEdgeConnecting(object0: any, object1: any): boolean;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
					public isDirected(): boolean;
					public allowsSelfLoops(): boolean;
					public degree(object0: any): number;
					public hashCode(): number;
					public predecessors(object0: any): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class GraphBuilder<N>  extends com.google.common.graph.AbstractGraphBuilder<any> {
					public static class: java.lang.Class<com.google.common.graph.GraphBuilder<any>>;
					public build(): com.google.common.graph.MutableGraph<any>;
					public nodeOrder(nodeOrder: com.google.common.graph.ElementOrder<any>): com.google.common.graph.GraphBuilder<any>;
					public static directed(): com.google.common.graph.GraphBuilder<any>;
					public static from(graph: com.google.common.graph.Graph<any>): com.google.common.graph.GraphBuilder<any>;
					public static undirected(): com.google.common.graph.GraphBuilder<any>;
					public allowsSelfLoops(allowsSelfLoops: boolean): com.google.common.graph.GraphBuilder<any>;
					public expectedNodeCount(expectedNodeCount: number): com.google.common.graph.GraphBuilder<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class GraphConnections<N, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.GraphConnections<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.GraphConnections<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						adjacentNodes(): java.util.Set<N>;
						predecessors(): java.util.Set<N>;
						successors(): java.util.Set<N>;
						value(object0: N): V;
						removePredecessor(object0: N): void;
						removeSuccessor(object0: N): V;
						addPredecessor(object0: N, object1: V): void;
						addSuccessor(object0: N, object1: V): V;
					});
					public constructor();
					public removePredecessor(object0: N): void;
					public addSuccessor(object0: N, object1: V): V;
					public adjacentNodes(): java.util.Set<N>;
					public addPredecessor(object0: N, object1: V): void;
					public predecessors(): java.util.Set<N>;
					public successors(): java.util.Set<N>;
					public value(object0: N): V;
					public removeSuccessor(object0: N): V;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class GraphConstants extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.GraphConstants>;
				}
				export module GraphConstants {
					export class Presence {
						public static class: java.lang.Class<com.google.common.graph.GraphConstants.Presence>;
						public static EDGE_EXISTS: com.google.common.graph.GraphConstants.Presence;
						public static valueOf(name: string): com.google.common.graph.GraphConstants.Presence;
						public static values(): native.Array<com.google.common.graph.GraphConstants.Presence>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class Graphs extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.Graphs>;
					public static transitiveClosure(graph: com.google.common.graph.Graph<any>): com.google.common.graph.Graph<any>;
					public static copyOf(graph: com.google.common.graph.ValueGraph<any,any>): com.google.common.graph.MutableValueGraph<any,any>;
					public static reachableNodes(graph: com.google.common.graph.Graph<any>, node: any): java.util.Set<any>;
					public static transpose(graph: com.google.common.graph.ValueGraph<any,any>): com.google.common.graph.ValueGraph<any,any>;
					public static copyOf(graph: com.google.common.graph.Graph<any>): com.google.common.graph.MutableGraph<any>;
					public static transpose(graph: com.google.common.graph.Graph<any>): com.google.common.graph.Graph<any>;
					public static transpose(network: com.google.common.graph.Network<any,any>): com.google.common.graph.Network<any,any>;
					public static hasCycle(network: com.google.common.graph.Network<any,any>): boolean;
					public static inducedSubgraph(graph: com.google.common.graph.ValueGraph<any,any>, nodes: java.lang.Iterable<any>): com.google.common.graph.MutableValueGraph<any,any>;
					public static inducedSubgraph(graph: com.google.common.graph.Graph<any>, nodes: java.lang.Iterable<any>): com.google.common.graph.MutableGraph<any>;
					public static copyOf(network: com.google.common.graph.Network<any,any>): com.google.common.graph.MutableNetwork<any,any>;
					public static hasCycle(graph: com.google.common.graph.Graph<any>): boolean;
					public static inducedSubgraph(network: com.google.common.graph.Network<any,any>, nodes: java.lang.Iterable<any>): com.google.common.graph.MutableNetwork<any,any>;
				}
				export module Graphs {
					export class NodeVisitState {
						public static class: java.lang.Class<com.google.common.graph.Graphs.NodeVisitState>;
						public static COMPLETE: com.google.common.graph.Graphs.NodeVisitState;
						public static PENDING: com.google.common.graph.Graphs.NodeVisitState;
						public static valueOf(name: string): com.google.common.graph.Graphs.NodeVisitState;
						public static values(): native.Array<com.google.common.graph.Graphs.NodeVisitState>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export class TransposedGraph<N>  extends com.google.common.graph.ForwardingGraph<any> {
						public static class: java.lang.Class<com.google.common.graph.Graphs.TransposedGraph<any>>;
						public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
						public inDegree(node: any): number;
						public predecessors(node: any): java.util.Set<any>;
						public nodes(): java.util.Set<any>;
						public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						public equals(obj: any): boolean;
						public successors(node: any): java.util.Set<any>;
						public hashCode(): number;
						public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
						public isDirected(): boolean;
						public degree(node: any): number;
						public nodeOrder(): com.google.common.graph.ElementOrder<any>;
						public adjacentNodes(node: any): java.util.Set<any>;
						public delegate(): com.google.common.graph.Graph<any>;
						public outDegree(node: any): number;
						public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						public delegate(): com.google.common.graph.BaseGraph<any>;
						public allowsSelfLoops(): boolean;
					}
					export class TransposedNetwork<N, E>  extends com.google.common.graph.ForwardingNetwork<any,any> {
						public static class: java.lang.Class<com.google.common.graph.Graphs.TransposedNetwork<any,any>>;
						public inDegree(node: any): number;
						public equals(obj: any): boolean;
						public edgeConnectingOrNull(endpoints: com.google.common.graph.EndpointPair<any>): any;
						public successors(node: any): java.util.Set<any>;
						public hashCode(): number;
						public edgeConnectingOrNull(nodeU: any, nodeV: any): any;
						public incidentNodes(edge: any): com.google.common.graph.EndpointPair<any>;
						public degree(node: any): number;
						public delegate(): com.google.common.graph.Network<any,any>;
						public outDegree(node: any): number;
						public inEdges(node: any): java.util.Set<any>;
						public allowsParallelEdges(): boolean;
						public outEdges(node: any): java.util.Set<any>;
						public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
						public predecessors(node: any): java.util.Set<any>;
						public nodes(): java.util.Set<any>;
						public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
						public isDirected(): boolean;
						public edgesConnecting(endpoints: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
						public nodeOrder(): com.google.common.graph.ElementOrder<any>;
						public edges(): java.util.Set<any>;
						public adjacentNodes(node: any): java.util.Set<any>;
						public asGraph(): com.google.common.graph.Graph<any>;
						public edgeOrder(): com.google.common.graph.ElementOrder<any>;
						public edgesConnecting(nodeU: any, nodeV: any): java.util.Set<any>;
						public incidentEdges(node: any): java.util.Set<any>;
						public adjacentEdges(edge: any): java.util.Set<any>;
						public allowsSelfLoops(): boolean;
					}
					export class TransposedValueGraph<N, V>  extends com.google.common.graph.ForwardingValueGraph<any,any> {
						public static class: java.lang.Class<com.google.common.graph.Graphs.TransposedValueGraph<any,any>>;
						public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
						public inDegree(node: any): number;
						public predecessors(node: any): java.util.Set<any>;
						public nodes(): java.util.Set<any>;
						public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						public equals(obj: any): boolean;
						public delegate(): com.google.common.graph.ValueGraph<any,any>;
						public successors(node: any): java.util.Set<any>;
						public hashCode(): number;
						public edgeValueOrDefault(nodeU: any, nodeV: any, defaultValue: any): any;
						public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
						public isDirected(): boolean;
						public degree(node: any): number;
						public nodeOrder(): com.google.common.graph.ElementOrder<any>;
						public adjacentNodes(node: any): java.util.Set<any>;
						public outDegree(node: any): number;
						public asGraph(): com.google.common.graph.Graph<any>;
						public edgeValueOrDefault(endpoints: com.google.common.graph.EndpointPair<any>, defaultValue: any): any;
						public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						public allowsSelfLoops(): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ImmutableGraph<N>  extends com.google.common.graph.ForwardingGraph<any> {
					public static class: java.lang.Class<com.google.common.graph.ImmutableGraph<any>>;
					public equals(obj: any): boolean;
					public outDegree(node: any): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public successors(node: any): java.util.Set<any>;
					public static copyOf(graph: com.google.common.graph.Graph<any>): com.google.common.graph.ImmutableGraph<any>;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public isDirected(): boolean;
					public allowsSelfLoops(): boolean;
					/** @deprecated */
					public static copyOf(graph: com.google.common.graph.ImmutableGraph<any>): com.google.common.graph.ImmutableGraph<any>;
					public adjacentNodes(node: any): java.util.Set<any>;
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public predecessors(node: any): java.util.Set<any>;
					public hashCode(): number;
					public delegate(): com.google.common.graph.BaseGraph<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ImmutableNetwork<N, E>  extends com.google.common.graph.ConfigurableNetwork<any,any> {
					public static class: java.lang.Class<com.google.common.graph.ImmutableNetwork<any,any>>;
					public edgeOrder(): com.google.common.graph.ElementOrder<any>;
					public equals(obj: any): boolean;
					public edges(): java.util.Set<any>;
					public edgeConnectingOrNull(nodeU: any, nodeV: any): any;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public incidentNodes(edge: any): com.google.common.graph.EndpointPair<any>;
					public edgesConnecting(nodeU: any, nodeV: any): java.util.Set<any>;
					public edgeConnectingOrNull(endpoints: com.google.common.graph.EndpointPair<any>): any;
					public nodes(): java.util.Set<any>;
					public adjacentEdges(edge: any): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public static copyOf(network: com.google.common.graph.Network<any,any>): com.google.common.graph.ImmutableNetwork<any,any>;
					public allowsSelfLoops(): boolean;
					public asGraph(): com.google.common.graph.ImmutableGraph<any>;
					public inDegree(node: any): number;
					public predecessors(node: any): java.util.Set<any>;
					public inEdges(node: any): java.util.Set<any>;
					public hashCode(): number;
					public allowsParallelEdges(): boolean;
					public outEdges(node: any): java.util.Set<any>;
					public outDegree(node: any): number;
					/** @deprecated */
					public static copyOf(network: com.google.common.graph.ImmutableNetwork<any,any>): com.google.common.graph.ImmutableNetwork<any,any>;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public successors(node: any): java.util.Set<any>;
					public edgesConnecting(endpoints: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
					public incidentEdges(node: any): java.util.Set<any>;
					public isDirected(): boolean;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public degree(node: any): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ImmutableValueGraph<N, V>  extends com.google.common.graph.ConfigurableValueGraph<any,any> {
					public static class: java.lang.Class<com.google.common.graph.ImmutableValueGraph<any,any>>;
					public static copyOf(graph: com.google.common.graph.ValueGraph<any,any>): com.google.common.graph.ImmutableValueGraph<any,any>;
					public equals(obj: any): boolean;
					public outDegree(node: any): number;
					public edgeValueOrDefault(nodeU: any, nodeV: any, defaultValue: any): any;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public hasEdgeConnecting(nodeU: any, nodeV: any): boolean;
					public successors(node: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public hasEdgeConnecting(endpoints: com.google.common.graph.EndpointPair<any>): boolean;
					public edgeValueOrDefault(endpoints: com.google.common.graph.EndpointPair<any>, defaultValue: any): any;
					/** @deprecated */
					public static copyOf(graph: com.google.common.graph.ImmutableValueGraph<any,any>): com.google.common.graph.ImmutableValueGraph<any,any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public isDirected(): boolean;
					public allowsSelfLoops(): boolean;
					public asGraph(): com.google.common.graph.ImmutableGraph<any>;
					public adjacentNodes(node: any): java.util.Set<any>;
					public asGraph(): com.google.common.graph.Graph<any>;
					public inDegree(node: any): number;
					public degree(node: any): number;
					public incidentEdges(node: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public predecessors(node: any): java.util.Set<any>;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class MapIteratorCache<K, V>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.MapIteratorCache<any,any>>;
					public containsKey(key: any): boolean;
					public put(key: K, value: V): V;
					public remove(key: any): V;
					public get(key: any): V;
					public clearCache(): void;
					public getWithoutCaching(key: any): V;
					public clear(): void;
					public unmodifiableKeySet(): java.util.Set<K>;
					public getIfCached(key: any): V;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class MapRetrievalCache<K, V>  extends com.google.common.graph.MapIteratorCache<any,any> {
					public static class: java.lang.Class<com.google.common.graph.MapRetrievalCache<any,any>>;
					public get(key: any): any;
					public clearCache(): void;
					public getIfCached(key: any): any;
				}
				export module MapRetrievalCache {
					export class CacheEntry<K, V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.graph.MapRetrievalCache.CacheEntry<any,any>>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class MultiEdgesConnecting<E>  extends java.util.AbstractSet<any> {
					public static class: java.lang.Class<com.google.common.graph.MultiEdgesConnecting<any>>;
					public toArray(a: native.Array<any>): native.Array<any>;
					public isEmpty(): boolean;
					public parallelStream(): java.util.stream.Stream<any>;
					public add(e: any): boolean;
					public spliterator(): java.util.Spliterator<any>;
					public addAll(c: java.util.Collection<any>): boolean;
					public retainAll(c: java.util.Collection<any>): boolean;
					public size(): number;
					public equals(o: any): boolean;
					public contains(o: any): boolean;
					public iterator(): java.util.Iterator<any>;
					public removeAll(c: java.util.Collection<any>): boolean;
					public removeIf(filter: any /* any*/): boolean;
					public toArray(): native.Array<any>;
					public clear(): void;
					public remove(o: any): boolean;
					public stream(): java.util.stream.Stream<any>;
					public iterator(): com.google.common.collect.UnmodifiableIterator<any>;
					public containsAll(c: java.util.Collection<any>): boolean;
					public hashCode(): number;
					public contains(edge: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class MutableGraph<N>  extends com.google.common.graph.Graph<any> {
					public static class: java.lang.Class<com.google.common.graph.MutableGraph<any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.MutableGraph<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						addNode(object0: any): boolean;
						putEdge(object0: any, object1: any): boolean;
						putEdge(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						removeNode(object0: any): boolean;
						removeEdge(object0: any, object1: any): boolean;
						removeEdge(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						equals(object0: any): boolean;
						hashCode(): number;
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						successors(object0: any): java.lang.Iterable<any>;
						predecessors(object0: any): java.lang.Iterable<any>;
					});
					public constructor();
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public nodes(): java.util.Set<any>;
					public inDegree(object0: any): number;
					public addNode(object0: any): boolean;
					public predecessors(object0: any): java.util.Set<any>;
					public incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public outDegree(object0: any): number;
					public hasEdgeConnecting(object0: any, object1: any): boolean;
					public removeEdge(object0: any, object1: any): boolean;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
					public isDirected(): boolean;
					public allowsSelfLoops(): boolean;
					public putEdge(object0: any, object1: any): boolean;
					public putEdge(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
					public removeEdge(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
					public degree(object0: any): number;
					public hashCode(): number;
					public predecessors(object0: any): java.lang.Iterable<any>;
					public removeNode(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class MutableNetwork<N, E>  extends com.google.common.graph.Network<any,any> {
					public static class: java.lang.Class<com.google.common.graph.MutableNetwork<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.MutableNetwork<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						addNode(object0: any): boolean;
						addEdge(object0: any, object1: any, object2: any): boolean;
						addEdge(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): boolean;
						removeNode(object0: any): boolean;
						removeEdge(object0: any): boolean;
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<any>;
						asGraph(): com.google.common.graph.Graph<any>;
						isDirected(): boolean;
						allowsParallelEdges(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						edgeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<any>;
						inEdges(object0: any): java.util.Set<any>;
						outEdges(object0: any): java.util.Set<any>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						incidentNodes(object0: any): com.google.common.graph.EndpointPair<any>;
						adjacentEdges(object0: any): java.util.Set<any>;
						edgesConnecting(object0: any, object1: any): java.util.Set<any>;
						edgesConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
						edgeConnectingOrNull(object0: any, object1: any): any;
						edgeConnectingOrNull(endpointPair0: com.google.common.graph.EndpointPair<any>): any;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						equals(object0: any): boolean;
						hashCode(): number;
						successors(object0: any): java.lang.Iterable<any>;
						predecessors(object0: any): java.lang.Iterable<any>;
					});
					public constructor();
					public edgeOrder(): com.google.common.graph.ElementOrder<any>;
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public edges(): java.util.Set<any>;
					public edgesConnecting(object0: any, object1: any): java.util.Set<any>;
					public nodes(): java.util.Set<any>;
					public removeEdge(object0: any): boolean;
					public outEdges(object0: any): java.util.Set<any>;
					public addNode(object0: any): boolean;
					public predecessors(object0: any): java.util.Set<any>;
					public outDegree(object0: any): number;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public incidentNodes(object0: any): com.google.common.graph.EndpointPair<any>;
					public allowsSelfLoops(): boolean;
					public edgesConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): java.util.Set<any>;
					public degree(object0: any): number;
					public hashCode(): number;
					public allowsParallelEdges(): boolean;
					public incidentEdges(object0: any): java.util.Set<any>;
					public edgeConnectingOrNull(endpointPair0: com.google.common.graph.EndpointPair<any>): any;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public adjacentEdges(object0: any): java.util.Set<any>;
					public inDegree(object0: any): number;
					public hasEdgeConnecting(object0: any, object1: any): boolean;
					public addEdge(object0: any, object1: any, object2: any): boolean;
					public hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
					public isDirected(): boolean;
					public edgeConnectingOrNull(object0: any, object1: any): any;
					public asGraph(): com.google.common.graph.Graph<any>;
					public inEdges(object0: any): java.util.Set<any>;
					public predecessors(object0: any): java.lang.Iterable<any>;
					public removeNode(object0: any): boolean;
					public addEdge(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class MutableValueGraph<N, V>  extends com.google.common.graph.ValueGraph<any,any> {
					public static class: java.lang.Class<com.google.common.graph.MutableValueGraph<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.MutableValueGraph<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						addNode(object0: any): boolean;
						putEdgeValue(object0: any, object1: any, object2: any): any;
						putEdgeValue(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): any;
						removeNode(object0: any): boolean;
						removeEdge(object0: any, object1: any): any;
						removeEdge(endpointPair0: com.google.common.graph.EndpointPair<any>): any;
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						asGraph(): com.google.common.graph.Graph<any>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						edgeValueOrDefault(object0: any, object1: any, object2: any): any;
						edgeValueOrDefault(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): any;
						equals(object0: any): boolean;
						hashCode(): number;
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						successors(object0: any): java.lang.Iterable<any>;
						predecessors(object0: any): java.lang.Iterable<any>;
					});
					public constructor();
					public edgeValueOrDefault(object0: any, object1: any, object2: any): any;
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public nodes(): java.util.Set<any>;
					public edgeValueOrDefault(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): any;
					public addNode(object0: any): boolean;
					public predecessors(object0: any): java.util.Set<any>;
					public outDegree(object0: any): number;
					public removeEdge(endpointPair0: com.google.common.graph.EndpointPair<any>): any;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public allowsSelfLoops(): boolean;
					public degree(object0: any): number;
					public hashCode(): number;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public putEdgeValue(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): any;
					public inDegree(object0: any): number;
					public incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hasEdgeConnecting(object0: any, object1: any): boolean;
					public putEdgeValue(object0: any, object1: any, object2: any): any;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
					public isDirected(): boolean;
					public asGraph(): com.google.common.graph.Graph<any>;
					public removeEdge(object0: any, object1: any): any;
					public predecessors(object0: any): java.lang.Iterable<any>;
					public removeNode(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class Network<N, E>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.Network<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.Network<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						nodes(): java.util.Set<N>;
						edges(): java.util.Set<E>;
						asGraph(): com.google.common.graph.Graph<N>;
						isDirected(): boolean;
						allowsParallelEdges(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<N>;
						edgeOrder(): com.google.common.graph.ElementOrder<E>;
						adjacentNodes(object0: N): java.util.Set<N>;
						predecessors(object0: N): java.util.Set<N>;
						successors(object0: N): java.util.Set<N>;
						incidentEdges(object0: N): java.util.Set<E>;
						inEdges(object0: N): java.util.Set<E>;
						outEdges(object0: N): java.util.Set<E>;
						degree(object0: N): number;
						inDegree(object0: N): number;
						outDegree(object0: N): number;
						incidentNodes(object0: E): com.google.common.graph.EndpointPair<N>;
						adjacentEdges(object0: E): java.util.Set<E>;
						edgesConnecting(object0: N, object1: N): java.util.Set<E>;
						edgesConnecting(endpointPair0: com.google.common.graph.EndpointPair<N>): java.util.Set<E>;
						edgeConnectingOrNull(object0: N, object1: N): E;
						edgeConnectingOrNull(endpointPair0: com.google.common.graph.EndpointPair<N>): E;
						hasEdgeConnecting(object0: N, object1: N): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<N>): boolean;
						equals(object0: any): boolean;
						hashCode(): number;
						successors(object0: N): java.lang.Iterable<any>;
						predecessors(object0: N): java.lang.Iterable<any>;
					});
					public constructor();
					public equals(obj: any): boolean;
					public inEdges(object0: N): java.util.Set<E>;
					public adjacentNodes(object0: N): java.util.Set<N>;
					public successors(object0: N): java.util.Set<N>;
					public edgeConnectingOrNull(endpointPair0: com.google.common.graph.EndpointPair<N>): E;
					public allowsSelfLoops(): boolean;
					public edgesConnecting(endpointPair0: com.google.common.graph.EndpointPair<N>): java.util.Set<E>;
					public edgeConnectingOrNull(object0: N, object1: N): E;
					public adjacentEdges(object0: E): java.util.Set<E>;
					public hashCode(): number;
					public hasEdgeConnecting(object0: N, object1: N): boolean;
					public allowsParallelEdges(): boolean;
					public inDegree(object0: N): number;
					public edgeOrder(): com.google.common.graph.ElementOrder<E>;
					public successors(object0: N): java.lang.Iterable<any>;
					public outDegree(object0: N): number;
					public asGraph(): com.google.common.graph.Graph<N>;
					public outEdges(object0: N): java.util.Set<E>;
					public edgesConnecting(object0: N, object1: N): java.util.Set<E>;
					public incidentEdges(object0: N): java.util.Set<E>;
					public predecessors(object0: N): java.lang.Iterable<any>;
					public nodes(): java.util.Set<N>;
					public isDirected(): boolean;
					public predecessors(object0: N): java.util.Set<N>;
					public hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<N>): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<N>;
					public degree(object0: N): number;
					public incidentNodes(object0: E): com.google.common.graph.EndpointPair<N>;
					public edges(): java.util.Set<E>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class NetworkBuilder<N, E>  extends com.google.common.graph.AbstractGraphBuilder<any> {
					public static class: java.lang.Class<com.google.common.graph.NetworkBuilder<any,any>>;
					public edgeOrder(edgeOrder: com.google.common.graph.ElementOrder<any>): com.google.common.graph.NetworkBuilder<any,any>;
					public nodeOrder(nodeOrder: com.google.common.graph.ElementOrder<any>): com.google.common.graph.NetworkBuilder<any,any>;
					public expectedEdgeCount(expectedEdgeCount: number): com.google.common.graph.NetworkBuilder<any,any>;
					public allowsParallelEdges(allowsParallelEdges: boolean): com.google.common.graph.NetworkBuilder<any,any>;
					public static directed(): com.google.common.graph.NetworkBuilder<any,any>;
					public static undirected(): com.google.common.graph.NetworkBuilder<any,any>;
					public expectedNodeCount(expectedNodeCount: number): com.google.common.graph.NetworkBuilder<any,any>;
					public allowsSelfLoops(allowsSelfLoops: boolean): com.google.common.graph.NetworkBuilder<any,any>;
					public static from(network: com.google.common.graph.Network<any,any>): com.google.common.graph.NetworkBuilder<any,any>;
					public build(): com.google.common.graph.MutableNetwork<any,any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class NetworkConnections<N, E>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.NetworkConnections<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.NetworkConnections<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						adjacentNodes(): java.util.Set<N>;
						predecessors(): java.util.Set<N>;
						successors(): java.util.Set<N>;
						incidentEdges(): java.util.Set<E>;
						inEdges(): java.util.Set<E>;
						outEdges(): java.util.Set<E>;
						edgesConnecting(object0: N): java.util.Set<E>;
						adjacentNode(object0: E): N;
						removeInEdge(object0: E, boolean1: boolean): N;
						removeOutEdge(object0: E): N;
						addInEdge(object0: E, object1: N, boolean2: boolean): void;
						addOutEdge(object0: E, object1: N): void;
					});
					public constructor();
					public outEdges(): java.util.Set<E>;
					public addOutEdge(object0: E, object1: N): void;
					public adjacentNodes(): java.util.Set<N>;
					public adjacentNode(object0: E): N;
					public addInEdge(object0: E, object1: N, boolean2: boolean): void;
					public removeOutEdge(object0: E): N;
					public inEdges(): java.util.Set<E>;
					public edgesConnecting(object0: N): java.util.Set<E>;
					public predecessors(): java.util.Set<N>;
					public successors(): java.util.Set<N>;
					public incidentEdges(): java.util.Set<E>;
					public removeInEdge(object0: E, boolean1: boolean): N;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class PredecessorsFunction<N>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.PredecessorsFunction<any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.PredecessorsFunction<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						predecessors(object0: N): java.lang.Iterable<any>;
					});
					public constructor();
					public predecessors(object0: N): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class SuccessorsFunction<N>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.SuccessorsFunction<any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.SuccessorsFunction<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						successors(object0: N): java.lang.Iterable<any>;
					});
					public constructor();
					public successors(object0: N): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export abstract class Traverser<N>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.graph.Traverser<any>>;
					public depthFirstPreOrder(object0: N): java.lang.Iterable<N>;
					public static forTree(tree: com.google.common.graph.SuccessorsFunction<any>): com.google.common.graph.Traverser<any>;
					public breadthFirst(object0: N): java.lang.Iterable<N>;
					public static forGraph(graph: com.google.common.graph.SuccessorsFunction<any>): com.google.common.graph.Traverser<any>;
					public depthFirstPreOrder(iterable0: java.lang.Iterable<any>): java.lang.Iterable<N>;
					public depthFirstPostOrder(iterable0: java.lang.Iterable<any>): java.lang.Iterable<N>;
					public breadthFirst(iterable0: java.lang.Iterable<any>): java.lang.Iterable<N>;
					public depthFirstPostOrder(object0: N): java.lang.Iterable<N>;
				}
				export module Traverser {
					export class GraphTraverser<N>  extends com.google.common.graph.Traverser<any> {
						public static class: java.lang.Class<com.google.common.graph.Traverser.GraphTraverser<any>>;
						public depthFirstPostOrder(startNode: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(startNodes: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public breadthFirst(iterable0: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public depthFirstPostOrder(iterable0: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public breadthFirst(startNodes: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public depthFirstPostOrder(object0: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(startNode: any): java.lang.Iterable<any>;
						public breadthFirst(startNode: any): java.lang.Iterable<any>;
						public breadthFirst(object0: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(object0: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(iterable0: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public depthFirstPostOrder(startNodes: java.lang.Iterable<any>): java.lang.Iterable<any>;
					}
					export module GraphTraverser {
						export class BreadthFirstIterator extends com.google.common.collect.UnmodifiableIterator<any> {
							public static class: java.lang.Class<com.google.common.graph.Traverser.GraphTraverser.BreadthFirstIterator>;
							public hasNext(): boolean;
							public next(): any;
						}
						export class DepthFirstIterator extends com.google.common.collect.AbstractIterator<any> {
							public static class: java.lang.Class<com.google.common.graph.Traverser.GraphTraverser.DepthFirstIterator>;
							public computeNext(): any;
						}
						export module DepthFirstIterator {
							export class NodeAndSuccessors extends java.lang.Object {
								public static class: java.lang.Class<com.google.common.graph.Traverser.GraphTraverser.DepthFirstIterator.NodeAndSuccessors>;
							}
						}
					}
					export class Order {
						public static class: java.lang.Class<com.google.common.graph.Traverser.Order>;
						public static POSTORDER: com.google.common.graph.Traverser.Order;
						public static PREORDER: com.google.common.graph.Traverser.Order;
						public static values(): native.Array<com.google.common.graph.Traverser.Order>;
						public static valueOf(name: string): com.google.common.graph.Traverser.Order;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export class TreeTraverser<N>  extends com.google.common.graph.Traverser<any> {
						public static class: java.lang.Class<com.google.common.graph.Traverser.TreeTraverser<any>>;
						public depthFirstPostOrder(startNode: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(startNodes: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public breadthFirst(iterable0: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public depthFirstPostOrder(iterable0: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public breadthFirst(startNodes: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public depthFirstPostOrder(object0: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(startNode: any): java.lang.Iterable<any>;
						public breadthFirst(startNode: any): java.lang.Iterable<any>;
						public breadthFirst(object0: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(object0: any): java.lang.Iterable<any>;
						public depthFirstPreOrder(iterable0: java.lang.Iterable<any>): java.lang.Iterable<any>;
						public depthFirstPostOrder(startNodes: java.lang.Iterable<any>): java.lang.Iterable<any>;
					}
					export module TreeTraverser {
						export class BreadthFirstIterator extends com.google.common.collect.UnmodifiableIterator<any> {
							public static class: java.lang.Class<com.google.common.graph.Traverser.TreeTraverser.BreadthFirstIterator>;
							public hasNext(): boolean;
							public next(): any;
						}
						export class DepthFirstPostOrderIterator extends com.google.common.collect.AbstractIterator<any> {
							public static class: java.lang.Class<com.google.common.graph.Traverser.TreeTraverser.DepthFirstPostOrderIterator>;
							public computeNext(): any;
						}
						export module DepthFirstPostOrderIterator {
							export class NodeAndChildren extends java.lang.Object {
								public static class: java.lang.Class<com.google.common.graph.Traverser.TreeTraverser.DepthFirstPostOrderIterator.NodeAndChildren>;
							}
						}
						export class DepthFirstPreOrderIterator extends com.google.common.collect.UnmodifiableIterator<any> {
							public static class: java.lang.Class<com.google.common.graph.Traverser.TreeTraverser.DepthFirstPreOrderIterator>;
							public hasNext(): boolean;
							public next(): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class UndirectedGraphConnections<N, V>  extends com.google.common.graph.GraphConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.UndirectedGraphConnections<any,any>>;
					public addSuccessor(node: any, value: any): any;
					public value(node: any): any;
					public successors(): java.util.Set<any>;
					public addPredecessor(node: any, value: any): void;
					public removeSuccessor(node: any): any;
					public adjacentNodes(): java.util.Set<any>;
					public removePredecessor(node: any): void;
					public predecessors(): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class UndirectedMultiNetworkConnections<N, E>  extends com.google.common.graph.AbstractUndirectedNetworkConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.UndirectedMultiNetworkConnections<any,any>>;
					public addOutEdge(edge: any, node: any): void;
					public inEdges(): java.util.Set<any>;
					public removeOutEdge(edge: any): any;
					public successors(): java.util.Set<any>;
					public incidentEdges(): java.util.Set<any>;
					public adjacentNode(edge: any): any;
					public outEdges(): java.util.Set<any>;
					public adjacentNodes(): java.util.Set<any>;
					public removeInEdge(edge: any, isSelfLoop: boolean): any;
					public edgesConnecting(node: any): java.util.Set<any>;
					public predecessors(): java.util.Set<any>;
					public addInEdge(edge: any, node: any, isSelfLoop: boolean): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class UndirectedNetworkConnections<N, E>  extends com.google.common.graph.AbstractUndirectedNetworkConnections<any,any> {
					public static class: java.lang.Class<com.google.common.graph.UndirectedNetworkConnections<any,any>>;
					public inEdges(): java.util.Set<any>;
					public outEdges(): java.util.Set<any>;
					public adjacentNodes(): java.util.Set<any>;
					public edgesConnecting(node: any): java.util.Set<any>;
					public addInEdge(edge: any, node: any, isSelfLoop: boolean): void;
					public addOutEdge(edge: any, node: any): void;
					public removeOutEdge(edge: any): any;
					public successors(): java.util.Set<any>;
					public incidentEdges(): java.util.Set<any>;
					public adjacentNode(edge: any): any;
					public constructor(incidentEdgeMap: java.util.Map<any,any>);
					public removeInEdge(edge: any, isSelfLoop: boolean): any;
					public predecessors(): java.util.Set<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ValueGraph<N, V>  extends com.google.common.graph.BaseGraph<any> {
					public static class: java.lang.Class<com.google.common.graph.ValueGraph<any,any>>;
					/**
					 * Constructs a new instance of the com.google.common.graph.ValueGraph<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						asGraph(): com.google.common.graph.Graph<any>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						edgeValueOrDefault(object0: any, object1: any, object2: any): any;
						edgeValueOrDefault(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): any;
						equals(object0: any): boolean;
						hashCode(): number;
						nodes(): java.util.Set<any>;
						edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						isDirected(): boolean;
						allowsSelfLoops(): boolean;
						nodeOrder(): com.google.common.graph.ElementOrder<any>;
						adjacentNodes(object0: any): java.util.Set<any>;
						predecessors(object0: any): java.util.Set<any>;
						successors(object0: any): java.util.Set<any>;
						incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
						degree(object0: any): number;
						inDegree(object0: any): number;
						outDegree(object0: any): number;
						hasEdgeConnecting(object0: any, object1: any): boolean;
						hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
						successors(object0: any): java.lang.Iterable<any>;
						predecessors(object0: any): java.lang.Iterable<any>;
					});
					public constructor();
					public edgeValueOrDefault(object0: any, object1: any, object2: any): any;
					public adjacentNodes(object0: any): java.util.Set<any>;
					public equals(obj: any): boolean;
					public nodeOrder(): com.google.common.graph.ElementOrder<any>;
					public nodes(): java.util.Set<any>;
					public edgeValueOrDefault(endpointPair0: com.google.common.graph.EndpointPair<any>, object1: any): any;
					public inDegree(object0: any): number;
					public predecessors(object0: any): java.util.Set<any>;
					public incidentEdges(object0: any): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public outDegree(object0: any): number;
					public hasEdgeConnecting(object0: any, object1: any): boolean;
					public successors(object0: any): java.util.Set<any>;
					public successors(object0: any): java.lang.Iterable<any>;
					public edges(): java.util.Set<com.google.common.graph.EndpointPair<any>>;
					public hasEdgeConnecting(endpointPair0: com.google.common.graph.EndpointPair<any>): boolean;
					public isDirected(): boolean;
					public allowsSelfLoops(): boolean;
					public asGraph(): com.google.common.graph.Graph<any>;
					public degree(object0: any): number;
					public hashCode(): number;
					public predecessors(object0: any): java.lang.Iterable<any>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module graph {
				export class ValueGraphBuilder<N, V>  extends com.google.common.graph.AbstractGraphBuilder<any> {
					public static class: java.lang.Class<com.google.common.graph.ValueGraphBuilder<any,any>>;
					public static directed(): com.google.common.graph.ValueGraphBuilder<any,any>;
					public expectedNodeCount(expectedNodeCount: number): com.google.common.graph.ValueGraphBuilder<any,any>;
					public build(): com.google.common.graph.MutableValueGraph<any,any>;
					public static from(graph: com.google.common.graph.ValueGraph<any,any>): com.google.common.graph.ValueGraphBuilder<any,any>;
					public nodeOrder(nodeOrder: com.google.common.graph.ElementOrder<any>): com.google.common.graph.ValueGraphBuilder<any,any>;
					public allowsSelfLoops(allowsSelfLoops: boolean): com.google.common.graph.ValueGraphBuilder<any,any>;
					public static undirected(): com.google.common.graph.ValueGraphBuilder<any,any>;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class AbstractByteHasher extends com.google.common.hash.AbstractHasher {
					public static class: java.lang.Class<com.google.common.hash.AbstractByteHasher>;
					public hash(): com.google.common.hash.HashCode;
					public putBytes(b: java.nio.ByteBuffer): com.google.common.hash.Hasher;
					public putBoolean(b: boolean): com.google.common.hash.Hasher;
					public update(byte0: number): void;
					public update(b: native.Array<number>, off: number, len: number): void;
					public putDouble(d: number): com.google.common.hash.Hasher;
					public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
					/** @deprecated */
					public hashCode(): number;
					public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
					public putLong(l: number): com.google.common.hash.Hasher;
					public update(b: native.Array<number>): void;
					public putFloat(f: number): com.google.common.hash.Hasher;
					public putShort(s: number): com.google.common.hash.Hasher;
					public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					public update(b: java.nio.ByteBuffer): void;
					public hashCode(): number;
					public putBytes(bytes: java.nio.ByteBuffer): com.google.common.hash.Hasher;
					public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
					public putByte(b: number): com.google.common.hash.Hasher;
					public putChar(c: string): com.google.common.hash.Hasher;
					public putInt(i: number): com.google.common.hash.Hasher;
					public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class AbstractCompositeHashFunction extends com.google.common.hash.AbstractHashFunction {
					public static class: java.lang.Class<com.google.common.hash.AbstractCompositeHashFunction>;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public hashInt(input: number): com.google.common.hash.HashCode;
					public bits(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class AbstractHashFunction extends java.lang.Object implements com.google.common.hash.HashFunction {
					public static class: java.lang.Class<com.google.common.hash.AbstractHashFunction>;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class AbstractHasher extends java.lang.Object implements com.google.common.hash.Hasher {
					public static class: java.lang.Class<com.google.common.hash.AbstractHasher>;
					public putBytes(b: java.nio.ByteBuffer): com.google.common.hash.Hasher;
					public putShort(short0: number): com.google.common.hash.PrimitiveSink;
					public putInt(int0: number): com.google.common.hash.PrimitiveSink;
					public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
					public putChar(char0: string): com.google.common.hash.PrimitiveSink;
					public putBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.PrimitiveSink;
					public putLong(l: number): com.google.common.hash.Hasher;
					public putShort(s: number): com.google.common.hash.Hasher;
					public putBoolean(boolean0: boolean): com.google.common.hash.PrimitiveSink;
					public putLong(long0: number): com.google.common.hash.PrimitiveSink;
					public hashCode(): number;
					public putByte(byte0: number): com.google.common.hash.PrimitiveSink;
					public putFloat(float0: number): com.google.common.hash.PrimitiveSink;
					public putString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.PrimitiveSink;
					public putInt(i: number): com.google.common.hash.Hasher;
					public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
					public hash(): com.google.common.hash.HashCode;
					public putUnencodedChars(charSequence0: string): com.google.common.hash.PrimitiveSink;
					public putBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.PrimitiveSink;
					public putBoolean(b: boolean): com.google.common.hash.Hasher;
					public putBytes(bytes0: native.Array<number>): com.google.common.hash.PrimitiveSink;
					public putDouble(d: number): com.google.common.hash.Hasher;
					/** @deprecated */
					public hashCode(): number;
					public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
					public putByte(byte0: number): com.google.common.hash.Hasher;
					public putFloat(f: number): com.google.common.hash.Hasher;
					public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					public putDouble(double0: number): com.google.common.hash.PrimitiveSink;
					public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
					public putChar(c: string): com.google.common.hash.Hasher;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class AbstractNonStreamingHashFunction extends com.google.common.hash.AbstractHashFunction {
					public static class: java.lang.Class<com.google.common.hash.AbstractNonStreamingHashFunction>;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public hashInt(input: number): com.google.common.hash.HashCode;
					public bits(): number;
				}
				export module AbstractNonStreamingHashFunction {
					export class BufferingHasher extends com.google.common.hash.AbstractHasher {
						public static class: java.lang.Class<com.google.common.hash.AbstractNonStreamingHashFunction.BufferingHasher>;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public putBytes(b: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						public putBytes(bytes: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					}
					export class ExposedByteArrayOutputStream extends java.io.ByteArrayOutputStream {
						public static class: java.lang.Class<com.google.common.hash.AbstractNonStreamingHashFunction.ExposedByteArrayOutputStream>;
						public close(): void;
						public flush(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class AbstractStreamingHasher extends com.google.common.hash.AbstractHasher {
					public static class: java.lang.Class<com.google.common.hash.AbstractStreamingHasher>;
					public hash(): com.google.common.hash.HashCode;
					public process(byteBuffer0: java.nio.ByteBuffer): void;
					public putBytes(b: java.nio.ByteBuffer): com.google.common.hash.Hasher;
					public putBoolean(b: boolean): com.google.common.hash.Hasher;
					public processRemaining(bb: java.nio.ByteBuffer): void;
					public makeHash(): com.google.common.hash.HashCode;
					public putDouble(d: number): com.google.common.hash.Hasher;
					public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
					/** @deprecated */
					public hashCode(): number;
					public constructor(chunkSize: number, bufferSize: number);
					public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
					public putLong(l: number): com.google.common.hash.Hasher;
					public putFloat(f: number): com.google.common.hash.Hasher;
					public putShort(s: number): com.google.common.hash.Hasher;
					public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					public putBytes(readBuffer: java.nio.ByteBuffer): com.google.common.hash.Hasher;
					public hashCode(): number;
					public constructor(chunkSize: number);
					public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
					public putByte(b: number): com.google.common.hash.Hasher;
					public putChar(c: string): com.google.common.hash.Hasher;
					public putInt(i: number): com.google.common.hash.Hasher;
					public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class BloomFilter<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.BloomFilter<any>>;
					public apply(input: T): boolean;
					public equals(obj: any): boolean;
					/** @deprecated */
					public apply(input: T): boolean;
					public copy(): com.google.common.hash.BloomFilter<T>;
					public equals(object: any): boolean;
					public static readFrom(in0: java.io.InputStream, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.BloomFilter<any>;
					public static create(funnel: com.google.common.hash.Funnel<any>, expectedInsertions: number, fpp: number): com.google.common.hash.BloomFilter<any>;
					public static create(funnel: com.google.common.hash.Funnel<any>, expectedInsertions: number): com.google.common.hash.BloomFilter<any>;
					public approximateElementCount(): number;
					public expectedFpp(): number;
					public hashCode(): number;
					public isCompatible(that: com.google.common.hash.BloomFilter<T>): boolean;
					public mightContain(object: T): boolean;
					public put(object: T): boolean;
					public putAll(that: com.google.common.hash.BloomFilter<T>): void;
					public writeTo(out: java.io.OutputStream): void;
				}
				export module BloomFilter {
					export class SerialForm<T>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.hash.BloomFilter.SerialForm<any>>;
					}
					export class Strategy extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.hash.BloomFilter.Strategy>;
						/**
						 * Constructs a new instance of the com.google.common.hash.BloomFilter$Strategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							put(object0: any, funnel1: com.google.common.hash.Funnel<any>, int2: number, lockFreeBitArray3: com.google.common.hash.BloomFilterStrategies.LockFreeBitArray): boolean;
							mightContain(object0: any, funnel1: com.google.common.hash.Funnel<any>, int2: number, lockFreeBitArray3: com.google.common.hash.BloomFilterStrategies.LockFreeBitArray): boolean;
							ordinal(): number;
						});
						public constructor();
						public ordinal(): number;
						public mightContain(object0: any, funnel1: com.google.common.hash.Funnel<any>, int2: number, lockFreeBitArray3: com.google.common.hash.BloomFilterStrategies.LockFreeBitArray): boolean;
						public put(object0: any, funnel1: com.google.common.hash.Funnel<any>, int2: number, lockFreeBitArray3: com.google.common.hash.BloomFilterStrategies.LockFreeBitArray): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class BloomFilterStrategies extends com.google.common.hash.BloomFilter.Strategy {
					public static class: java.lang.Class<com.google.common.hash.BloomFilterStrategies>;
					public static MURMUR128_MITZ_32: com.google.common.hash.BloomFilterStrategies;
					public static MURMUR128_MITZ_64: com.google.common.hash.BloomFilterStrategies;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static values(): native.Array<com.google.common.hash.BloomFilterStrategies>;
					public put(object0: any, funnel1: com.google.common.hash.Funnel<any>, int2: number, lockFreeBitArray3: com.google.common.hash.BloomFilterStrategies.LockFreeBitArray): boolean;
					public ordinal(): number;
					public mightContain(object0: any, funnel1: com.google.common.hash.Funnel<any>, int2: number, lockFreeBitArray3: com.google.common.hash.BloomFilterStrategies.LockFreeBitArray): boolean;
					public static valueOf(name: string): com.google.common.hash.BloomFilterStrategies;
				}
				export module BloomFilterStrategies {
					export class LockFreeBitArray extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.BloomFilterStrategies.LockFreeBitArray>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public equals(o: any): boolean;
						public static toPlainArray(atomicLongArray: java.util.concurrent.atomic.AtomicLongArray): native.Array<number>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class ChecksumHashFunction extends com.google.common.hash.AbstractHashFunction implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.hash.ChecksumHashFunction>;
					public toString(): string;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
				export module ChecksumHashFunction {
					export class ChecksumHasher extends com.google.common.hash.AbstractByteHasher {
						public static class: java.lang.Class<com.google.common.hash.ChecksumHashFunction.ChecksumHasher>;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public update(b: native.Array<number>, off: number, len: number): void;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public update(b: java.nio.ByteBuffer): void;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public update(b: number): void;
						public update(b: native.Array<number>): void;
						public putBytes(bytes: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public update(bytes: native.Array<number>, off: number, len: number): void;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public update(byte0: number): void;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class Crc32cHashFunction extends com.google.common.hash.AbstractHashFunction {
					public static class: java.lang.Class<com.google.common.hash.Crc32cHashFunction>;
					public toString(): string;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
				export module Crc32cHashFunction {
					export class Crc32cHasher extends com.google.common.hash.AbstractByteHasher {
						public static class: java.lang.Class<com.google.common.hash.Crc32cHashFunction.Crc32cHasher>;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public update(b: native.Array<number>, off: number, len: number): void;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public update(b: java.nio.ByteBuffer): void;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public update(b: number): void;
						public update(b: native.Array<number>): void;
						public putBytes(bytes: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public update(byte0: number): void;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class FarmHashFingerprint64 extends com.google.common.hash.AbstractNonStreamingHashFunction {
					public static class: java.lang.Class<com.google.common.hash.FarmHashFingerprint64>;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.HashCode;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public toString(): string;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class Funnel<T>  extends java.io.Serializable {
					public static class: java.lang.Class<com.google.common.hash.Funnel<any>>;
					/**
					 * Constructs a new instance of the com.google.common.hash.Funnel<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
					});
					public constructor();
					public funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class Funnels extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.Funnels>;
					public static asOutputStream(sink: com.google.common.hash.PrimitiveSink): java.io.OutputStream;
					public static sequentialFunnel(elementFunnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Funnel<any>;
					public static stringFunnel(charset: java.nio.charset.Charset): com.google.common.hash.Funnel<string>;
					public static integerFunnel(): com.google.common.hash.Funnel<java.lang.Integer>;
					public static longFunnel(): com.google.common.hash.Funnel<java.lang.Long>;
					public static byteArrayFunnel(): com.google.common.hash.Funnel<native.Array<number>>;
					public static unencodedCharsFunnel(): com.google.common.hash.Funnel<string>;
				}
				export module Funnels {
					export class ByteArrayFunnel extends com.google.common.hash.Funnel<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.hash.Funnels.ByteArrayFunnel>;
						public static INSTANCE: com.google.common.hash.Funnels.ByteArrayFunnel;
						public funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
						public static valueOf(name: string): com.google.common.hash.Funnels.ByteArrayFunnel;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public funnel(from: native.Array<number>, into: com.google.common.hash.PrimitiveSink): void;
						public static values(): native.Array<com.google.common.hash.Funnels.ByteArrayFunnel>;
						public toString(): string;
					}
					export class IntegerFunnel extends com.google.common.hash.Funnel<java.lang.Integer> {
						public static class: java.lang.Class<com.google.common.hash.Funnels.IntegerFunnel>;
						public static INSTANCE: com.google.common.hash.Funnels.IntegerFunnel;
						public funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
						public funnel(from: java.lang.Integer, into: com.google.common.hash.PrimitiveSink): void;
						public static valueOf(name: string): com.google.common.hash.Funnels.IntegerFunnel;
						public static values(): native.Array<com.google.common.hash.Funnels.IntegerFunnel>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public toString(): string;
					}
					export class LongFunnel extends com.google.common.hash.Funnel<java.lang.Long> {
						public static class: java.lang.Class<com.google.common.hash.Funnels.LongFunnel>;
						public static INSTANCE: com.google.common.hash.Funnels.LongFunnel;
						public funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
						public static values(): native.Array<com.google.common.hash.Funnels.LongFunnel>;
						public static valueOf(name: string): com.google.common.hash.Funnels.LongFunnel;
						public funnel(from: java.lang.Long, into: com.google.common.hash.PrimitiveSink): void;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public toString(): string;
					}
					export class SequentialFunnel<E>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Funnels.SequentialFunnel<any>>;
						public funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public equals(o: any): boolean;
						public funnel(from: java.lang.Iterable<any>, into: com.google.common.hash.PrimitiveSink): void;
						public toString(): string;
					}
					export class SinkAsStream extends java.io.OutputStream {
						public static class: java.lang.Class<com.google.common.hash.Funnels.SinkAsStream>;
						public write(bytes: native.Array<number>, off: number, len: number): void;
						public write(int0: number): void;
						public write(bytes: native.Array<number>): void;
						public close(): void;
						public write(b: native.Array<number>): void;
						public write(b: number): void;
						public flush(): void;
						public toString(): string;
						public write(b: native.Array<number>, off: number, len: number): void;
					}
					export class StringCharsetFunnel extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Funnels.StringCharsetFunnel>;
						public funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public funnel(from: string, into: com.google.common.hash.PrimitiveSink): void;
						public equals(o: any): boolean;
						public toString(): string;
					}
					export module StringCharsetFunnel {
						export class SerializedForm extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<com.google.common.hash.Funnels.StringCharsetFunnel.SerializedForm>;
						}
					}
					export class UnencodedCharsFunnel extends com.google.common.hash.Funnel<string> {
						public static class: java.lang.Class<com.google.common.hash.Funnels.UnencodedCharsFunnel>;
						public static INSTANCE: com.google.common.hash.Funnels.UnencodedCharsFunnel;
						public funnel(object0: any, primitiveSink1: com.google.common.hash.PrimitiveSink): void;
						public static values(): native.Array<com.google.common.hash.Funnels.UnencodedCharsFunnel>;
						public static valueOf(name: string): com.google.common.hash.Funnels.UnencodedCharsFunnel;
						public funnel(from: string, into: com.google.common.hash.PrimitiveSink): void;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class HashCode extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.HashCode>;
					public equals(obj: any): boolean;
					public static fromLong(hash: number): com.google.common.hash.HashCode;
					public asLong(): number;
					public padToLong(): number;
					public static fromBytes(bytes: native.Array<number>): com.google.common.hash.HashCode;
					public writeBytesTo(dest: native.Array<number>, offset: number, maxLength: number): number;
					public asBytes(): native.Array<number>;
					public static fromString(string: string): com.google.common.hash.HashCode;
					public asInt(): number;
					public equals(object: any): boolean;
					public toString(): string;
					public static fromInt(hash: number): com.google.common.hash.HashCode;
					public hashCode(): number;
					public bits(): number;
				}
				export module HashCode {
					export class BytesHashCode extends com.google.common.hash.HashCode implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.hash.HashCode.BytesHashCode>;
						public asLong(): number;
						public padToLong(): number;
						public asInt(): number;
						public asBytes(): native.Array<number>;
						public bits(): number;
					}
					export class IntHashCode extends com.google.common.hash.HashCode implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.hash.HashCode.IntHashCode>;
						public asLong(): number;
						public padToLong(): number;
						public asInt(): number;
						public asBytes(): native.Array<number>;
						public bits(): number;
					}
					export class LongHashCode extends com.google.common.hash.HashCode implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.hash.HashCode.LongHashCode>;
						public asLong(): number;
						public padToLong(): number;
						public asInt(): number;
						public asBytes(): native.Array<number>;
						public bits(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class HashFunction extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.HashFunction>;
					/**
					 * Constructs a new instance of the com.google.common.hash.HashFunction interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						newHasher(): com.google.common.hash.Hasher;
						newHasher(int0: number): com.google.common.hash.Hasher;
						hashInt(int0: number): com.google.common.hash.HashCode;
						hashLong(long0: number): com.google.common.hash.HashCode;
						hashBytes(bytes0: native.Array<number>): com.google.common.hash.HashCode;
						hashBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.HashCode;
						hashBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.HashCode;
						hashUnencodedChars(charSequence0: string): com.google.common.hash.HashCode;
						hashString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.HashCode;
						hashObject(object0: any, funnel1: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
						bits(): number;
					});
					public constructor();
					public hashUnencodedChars(charSequence0: string): com.google.common.hash.HashCode;
					public hashBytes(bytes0: native.Array<number>): com.google.common.hash.HashCode;
					public hashInt(int0: number): com.google.common.hash.HashCode;
					public hashLong(long0: number): com.google.common.hash.HashCode;
					public hashObject(object0: any, funnel1: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public hashBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public hashBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public bits(): number;
					public newHasher(int0: number): com.google.common.hash.Hasher;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class Hasher extends java.lang.Object implements com.google.common.hash.PrimitiveSink {
					public static class: java.lang.Class<com.google.common.hash.Hasher>;
					/**
					 * Constructs a new instance of the com.google.common.hash.Hasher interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						putByte(byte0: number): com.google.common.hash.Hasher;
						putBytes(bytes0: native.Array<number>): com.google.common.hash.Hasher;
						putBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.Hasher;
						putBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						putShort(short0: number): com.google.common.hash.Hasher;
						putInt(int0: number): com.google.common.hash.Hasher;
						putLong(long0: number): com.google.common.hash.Hasher;
						putFloat(float0: number): com.google.common.hash.Hasher;
						putDouble(double0: number): com.google.common.hash.Hasher;
						putBoolean(boolean0: boolean): com.google.common.hash.Hasher;
						putChar(char0: string): com.google.common.hash.Hasher;
						putUnencodedChars(charSequence0: string): com.google.common.hash.Hasher;
						putString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.Hasher;
						putObject(object0: any, funnel1: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						hash(): com.google.common.hash.HashCode;
						hashCode(): number;
						putByte(byte0: number): com.google.common.hash.PrimitiveSink;
						putBytes(bytes0: native.Array<number>): com.google.common.hash.PrimitiveSink;
						putBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.PrimitiveSink;
						putBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.PrimitiveSink;
						putShort(short0: number): com.google.common.hash.PrimitiveSink;
						putInt(int0: number): com.google.common.hash.PrimitiveSink;
						putLong(long0: number): com.google.common.hash.PrimitiveSink;
						putFloat(float0: number): com.google.common.hash.PrimitiveSink;
						putDouble(double0: number): com.google.common.hash.PrimitiveSink;
						putBoolean(boolean0: boolean): com.google.common.hash.PrimitiveSink;
						putChar(char0: string): com.google.common.hash.PrimitiveSink;
						putUnencodedChars(charSequence0: string): com.google.common.hash.PrimitiveSink;
						putString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.PrimitiveSink;
					});
					public constructor();
					public putBytes(bytes0: native.Array<number>): com.google.common.hash.Hasher;
					public putShort(short0: number): com.google.common.hash.PrimitiveSink;
					public putInt(int0: number): com.google.common.hash.Hasher;
					public putInt(int0: number): com.google.common.hash.PrimitiveSink;
					public putBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.Hasher;
					public putChar(char0: string): com.google.common.hash.PrimitiveSink;
					public putBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.Hasher;
					public putLong(long0: number): com.google.common.hash.Hasher;
					public putUnencodedChars(charSequence0: string): com.google.common.hash.Hasher;
					public putBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.PrimitiveSink;
					public putShort(short0: number): com.google.common.hash.Hasher;
					public putString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.Hasher;
					public putChar(char0: string): com.google.common.hash.Hasher;
					public putBoolean(boolean0: boolean): com.google.common.hash.PrimitiveSink;
					public putLong(long0: number): com.google.common.hash.PrimitiveSink;
					public putDouble(double0: number): com.google.common.hash.Hasher;
					public hashCode(): number;
					public putByte(byte0: number): com.google.common.hash.PrimitiveSink;
					public putFloat(float0: number): com.google.common.hash.PrimitiveSink;
					public putString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.PrimitiveSink;
					public hash(): com.google.common.hash.HashCode;
					public putUnencodedChars(charSequence0: string): com.google.common.hash.PrimitiveSink;
					public putBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.PrimitiveSink;
					public putBoolean(boolean0: boolean): com.google.common.hash.Hasher;
					public putBytes(bytes0: native.Array<number>): com.google.common.hash.PrimitiveSink;
					/** @deprecated */
					public hashCode(): number;
					public putByte(byte0: number): com.google.common.hash.Hasher;
					public putFloat(float0: number): com.google.common.hash.Hasher;
					public putObject(object0: any, funnel1: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
					public putDouble(double0: number): com.google.common.hash.PrimitiveSink;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class Hashing extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.Hashing>;
					public static consistentHash(hashCode: com.google.common.hash.HashCode, buckets: number): number;
					/** @deprecated */
					public static sha1(): com.google.common.hash.HashFunction;
					public static combineUnordered(hashCodes: java.lang.Iterable<com.google.common.hash.HashCode>): com.google.common.hash.HashCode;
					public static murmur3_128(): com.google.common.hash.HashFunction;
					public static hmacMd5(key: java.security.Key): com.google.common.hash.HashFunction;
					/** @deprecated */
					public static md5(): com.google.common.hash.HashFunction;
					public static hmacSha256(key: native.Array<number>): com.google.common.hash.HashFunction;
					public static sipHash24(): com.google.common.hash.HashFunction;
					public static hmacSha512(key: java.security.Key): com.google.common.hash.HashFunction;
					public static goodFastHash(minimumBits: number): com.google.common.hash.HashFunction;
					public static hmacSha256(key: java.security.Key): com.google.common.hash.HashFunction;
					public static sipHash24(k0: number, k1: number): com.google.common.hash.HashFunction;
					public static crc32(): com.google.common.hash.HashFunction;
					public static murmur3_32(): com.google.common.hash.HashFunction;
					public static hmacMd5(key: native.Array<number>): com.google.common.hash.HashFunction;
					public static consistentHash(input: number, buckets: number): number;
					public static combineOrdered(hashCodes: java.lang.Iterable<com.google.common.hash.HashCode>): com.google.common.hash.HashCode;
					public static concatenating(first: com.google.common.hash.HashFunction, second: com.google.common.hash.HashFunction, rest: native.Array<com.google.common.hash.HashFunction>): com.google.common.hash.HashFunction;
					public static farmHashFingerprint64(): com.google.common.hash.HashFunction;
					public static hmacSha1(key: native.Array<number>): com.google.common.hash.HashFunction;
					public static sha512(): com.google.common.hash.HashFunction;
					public static adler32(): com.google.common.hash.HashFunction;
					public static hmacSha1(key: java.security.Key): com.google.common.hash.HashFunction;
					public static hmacSha512(key: native.Array<number>): com.google.common.hash.HashFunction;
					public static concatenating(hashFunctions: java.lang.Iterable<com.google.common.hash.HashFunction>): com.google.common.hash.HashFunction;
					public static sha384(): com.google.common.hash.HashFunction;
					public static murmur3_128(seed: number): com.google.common.hash.HashFunction;
					public static crc32c(): com.google.common.hash.HashFunction;
					public static murmur3_32(seed: number): com.google.common.hash.HashFunction;
					public static sha256(): com.google.common.hash.HashFunction;
				}
				export module Hashing {
					export abstract class ChecksumType extends com.google.common.hash.ImmutableSupplier<java.util.zip.Checksum> {
						public static class: java.lang.Class<com.google.common.hash.Hashing.ChecksumType>;
						public static ADLER_32: com.google.common.hash.Hashing.ChecksumType;
						public static CRC_32: com.google.common.hash.Hashing.ChecksumType;
						public hashFunction: com.google.common.hash.HashFunction;
						public static values(): native.Array<com.google.common.hash.Hashing.ChecksumType>;
						public static valueOf(name: string): com.google.common.hash.Hashing.ChecksumType;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public get(): any;
					}
					export class ConcatenatedHashFunction extends com.google.common.hash.AbstractCompositeHashFunction {
						public static class: java.lang.Class<com.google.common.hash.Hashing.ConcatenatedHashFunction>;
						public equals(obj: any): boolean;
						public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
						public hashCode(): number;
						public bits(): number;
						public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
						public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
						public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
						public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
						public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
						public hashLong(input: number): com.google.common.hash.HashCode;
						public hashInt(input: number): com.google.common.hash.HashCode;
						public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
						public newHasher(): com.google.common.hash.Hasher;
						public equals(object: any): boolean;
					}
					export class LinearCongruentialGenerator extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Hashing.LinearCongruentialGenerator>;
						public constructor(seed: number);
						public nextDouble(): number;
					}
					export class Md5Holder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Hashing.Md5Holder>;
					}
					export class Sha1Holder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Hashing.Sha1Holder>;
					}
					export class Sha256Holder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Hashing.Sha256Holder>;
					}
					export class Sha384Holder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Hashing.Sha384Holder>;
					}
					export class Sha512Holder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Hashing.Sha512Holder>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class HashingInputStream extends java.io.FilterInputStream {
					public static class: java.lang.Class<com.google.common.hash.HashingInputStream>;
					public hash(): com.google.common.hash.HashCode;
					public constructor(in0: java.io.InputStream);
					public read(): number;
					public read(b: native.Array<number>, off: number, len: number): number;
					public reset(): void;
					public constructor();
					public markSupported(): boolean;
					public close(): void;
					public read(bytes: native.Array<number>, off: number, len: number): number;
					public constructor(hashFunction: com.google.common.hash.HashFunction, in1: java.io.InputStream);
					public read(b: native.Array<number>): number;
					public mark(readlimit: number): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class HashingOutputStream extends java.io.FilterOutputStream {
					public static class: java.lang.Class<com.google.common.hash.HashingOutputStream>;
					public hash(): com.google.common.hash.HashCode;
					public write(b: native.Array<number>): void;
					public constructor(hashFunction: com.google.common.hash.HashFunction, out: java.io.OutputStream);
					public constructor();
					public write(b: number): void;
					public close(): void;
					public write(b: native.Array<number>, off: number, len: number): void;
					public write(bytes: native.Array<number>, off: number, len: number): void;
					public flush(): void;
					public constructor(out: java.io.OutputStream);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class ImmutableSupplier<T>  extends com.google.common.base.Supplier<any> {
					public static class: java.lang.Class<com.google.common.hash.ImmutableSupplier<any>>;
					/**
					 * Constructs a new instance of the com.google.common.hash.ImmutableSupplier<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						get(): any;
					});
					public constructor();
					public get(): any;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class LittleEndianByteArray extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.LittleEndianByteArray>;
				}
				export module LittleEndianByteArray {
					export abstract class JavaLittleEndianBytes extends com.google.common.hash.LittleEndianByteArray.LittleEndianBytes {
						public static class: java.lang.Class<com.google.common.hash.LittleEndianByteArray.JavaLittleEndianBytes>;
						public static INSTANCE: com.google.common.hash.LittleEndianByteArray.JavaLittleEndianBytes;
						public getLongLittleEndian(bytes0: native.Array<number>, int1: number): number;
						public static valueOf(name: string): com.google.common.hash.LittleEndianByteArray.JavaLittleEndianBytes;
						public static values(): native.Array<com.google.common.hash.LittleEndianByteArray.JavaLittleEndianBytes>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public putLongLittleEndian(bytes0: native.Array<number>, int1: number, long2: number): void;
					}
					export class LittleEndianBytes extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.LittleEndianByteArray.LittleEndianBytes>;
						/**
						 * Constructs a new instance of the com.google.common.hash.LittleEndianByteArray$LittleEndianBytes interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getLongLittleEndian(bytes0: native.Array<number>, int1: number): number;
							putLongLittleEndian(bytes0: native.Array<number>, int1: number, long2: number): void;
						});
						public constructor();
						public getLongLittleEndian(bytes0: native.Array<number>, int1: number): number;
						public putLongLittleEndian(bytes0: native.Array<number>, int1: number, long2: number): void;
					}
					export abstract class UnsafeByteArray extends com.google.common.hash.LittleEndianByteArray.LittleEndianBytes {
						public static class: java.lang.Class<com.google.common.hash.LittleEndianByteArray.UnsafeByteArray>;
						public static UNSAFE_BIG_ENDIAN: com.google.common.hash.LittleEndianByteArray.UnsafeByteArray;
						public static UNSAFE_LITTLE_ENDIAN: com.google.common.hash.LittleEndianByteArray.UnsafeByteArray;
						public getLongLittleEndian(bytes0: native.Array<number>, int1: number): number;
						public static values(): native.Array<com.google.common.hash.LittleEndianByteArray.UnsafeByteArray>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public putLongLittleEndian(bytes0: native.Array<number>, int1: number, long2: number): void;
						public static valueOf(name: string): com.google.common.hash.LittleEndianByteArray.UnsafeByteArray;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class LongAddable extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.LongAddable>;
					/**
					 * Constructs a new instance of the com.google.common.hash.LongAddable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						increment(): void;
						add(long0: number): void;
						sum(): number;
					});
					public constructor();
					public sum(): number;
					public add(long0: number): void;
					public increment(): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class LongAddables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.LongAddables>;
					public static create(): com.google.common.hash.LongAddable;
				}
				export module LongAddables {
					export class PureJavaLongAddable extends java.util.concurrent.atomic.AtomicLong implements com.google.common.hash.LongAddable {
						public static class: java.lang.Class<com.google.common.hash.LongAddables.PureJavaLongAddable>;
						public increment(): void;
						public add(x: number): void;
						public sum(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class LongAdder extends com.google.common.hash.Striped64 implements java.io.Serializable, com.google.common.hash.LongAddable {
					public static class: java.lang.Class<com.google.common.hash.LongAdder>;
					public decrement(): void;
					public intValue(): number;
					public sum(): number;
					public reset(): void;
					public toString(): string;
					public increment(): void;
					public sumThenReset(): number;
					public constructor();
					public doubleValue(): number;
					public add(x: number): void;
					public floatValue(): number;
					public longValue(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class MacHashFunction extends com.google.common.hash.AbstractHashFunction {
					public static class: java.lang.Class<com.google.common.hash.MacHashFunction>;
					public toString(): string;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
				export module MacHashFunction {
					export class MacHasher extends com.google.common.hash.AbstractByteHasher {
						public static class: java.lang.Class<com.google.common.hash.MacHashFunction.MacHasher>;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public update(b: native.Array<number>, off: number, len: number): void;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public update(b: java.nio.ByteBuffer): void;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public update(bytes: java.nio.ByteBuffer): void;
						public update(b: number): void;
						public update(b: native.Array<number>): void;
						public putBytes(bytes: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public update(byte0: number): void;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class MessageDigestHashFunction extends com.google.common.hash.AbstractHashFunction implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.hash.MessageDigestHashFunction>;
					public toString(): string;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public newHasher(): com.google.common.hash.Hasher;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
				export module MessageDigestHashFunction {
					export class MessageDigestHasher extends com.google.common.hash.AbstractByteHasher {
						public static class: java.lang.Class<com.google.common.hash.MessageDigestHashFunction.MessageDigestHasher>;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public update(b: native.Array<number>, off: number, len: number): void;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public update(b: java.nio.ByteBuffer): void;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public update(bytes: java.nio.ByteBuffer): void;
						public update(b: number): void;
						public update(b: native.Array<number>): void;
						public putBytes(bytes: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public update(byte0: number): void;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					}
					export class SerializedForm extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.hash.MessageDigestHashFunction.SerializedForm>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class Murmur3_128HashFunction extends com.google.common.hash.AbstractHashFunction implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.hash.Murmur3_128HashFunction>;
					public equals(obj: any): boolean;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public equals(object: any): boolean;
					public toString(): string;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashCode(): number;
					public newHasher(): com.google.common.hash.Hasher;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
				export module Murmur3_128HashFunction {
					export class Murmur3_128Hasher extends com.google.common.hash.AbstractStreamingHasher {
						public static class: java.lang.Class<com.google.common.hash.Murmur3_128HashFunction.Murmur3_128Hasher>;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public process(bb: java.nio.ByteBuffer): void;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public process(byteBuffer0: java.nio.ByteBuffer): void;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public makeHash(): com.google.common.hash.HashCode;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public putBytes(readBuffer: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public processRemaining(bb: java.nio.ByteBuffer): void;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class Murmur3_32HashFunction extends com.google.common.hash.AbstractHashFunction implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.hash.Murmur3_32HashFunction>;
					public equals(obj: any): boolean;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public equals(object: any): boolean;
					public toString(): string;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashCode(): number;
					public newHasher(): com.google.common.hash.Hasher;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
				export module Murmur3_32HashFunction {
					export class Murmur3_32Hasher extends com.google.common.hash.AbstractHasher {
						public static class: java.lang.Class<com.google.common.hash.Murmur3_32HashFunction.Murmur3_32Hasher>;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public putBytes(b: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						public putBytes(buffer: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public putString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class PrimitiveSink extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.hash.PrimitiveSink>;
					/**
					 * Constructs a new instance of the com.google.common.hash.PrimitiveSink interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						putByte(byte0: number): com.google.common.hash.PrimitiveSink;
						putBytes(bytes0: native.Array<number>): com.google.common.hash.PrimitiveSink;
						putBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.PrimitiveSink;
						putBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.PrimitiveSink;
						putShort(short0: number): com.google.common.hash.PrimitiveSink;
						putInt(int0: number): com.google.common.hash.PrimitiveSink;
						putLong(long0: number): com.google.common.hash.PrimitiveSink;
						putFloat(float0: number): com.google.common.hash.PrimitiveSink;
						putDouble(double0: number): com.google.common.hash.PrimitiveSink;
						putBoolean(boolean0: boolean): com.google.common.hash.PrimitiveSink;
						putChar(char0: string): com.google.common.hash.PrimitiveSink;
						putUnencodedChars(charSequence0: string): com.google.common.hash.PrimitiveSink;
						putString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.PrimitiveSink;
					});
					public constructor();
					public putUnencodedChars(charSequence0: string): com.google.common.hash.PrimitiveSink;
					public putBytes(bytes0: native.Array<number>, int1: number, int2: number): com.google.common.hash.PrimitiveSink;
					public putBytes(bytes0: native.Array<number>): com.google.common.hash.PrimitiveSink;
					public putShort(short0: number): com.google.common.hash.PrimitiveSink;
					public putInt(int0: number): com.google.common.hash.PrimitiveSink;
					public putChar(char0: string): com.google.common.hash.PrimitiveSink;
					public putBytes(byteBuffer0: java.nio.ByteBuffer): com.google.common.hash.PrimitiveSink;
					public putBoolean(boolean0: boolean): com.google.common.hash.PrimitiveSink;
					public putLong(long0: number): com.google.common.hash.PrimitiveSink;
					public putByte(byte0: number): com.google.common.hash.PrimitiveSink;
					public putFloat(float0: number): com.google.common.hash.PrimitiveSink;
					public putDouble(double0: number): com.google.common.hash.PrimitiveSink;
					public putString(charSequence0: string, charset1: java.nio.charset.Charset): com.google.common.hash.PrimitiveSink;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export class SipHashFunction extends com.google.common.hash.AbstractHashFunction implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.hash.SipHashFunction>;
					public equals(obj: any): boolean;
					public hashBytes(input: native.Array<number>): com.google.common.hash.HashCode;
					public hashBytes(input: java.nio.ByteBuffer): com.google.common.hash.HashCode;
					public newHasher(expectedInputSize: number): com.google.common.hash.Hasher;
					public hashLong(input: number): com.google.common.hash.HashCode;
					public hashUnencodedChars(input: string): com.google.common.hash.HashCode;
					public hashString(input: string, charset: java.nio.charset.Charset): com.google.common.hash.HashCode;
					public equals(object: any): boolean;
					public toString(): string;
					public hashBytes(input: native.Array<number>, off: number, len: number): com.google.common.hash.HashCode;
					public hashObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.HashCode;
					public hashCode(): number;
					public newHasher(): com.google.common.hash.Hasher;
					public bits(): number;
					public hashInt(input: number): com.google.common.hash.HashCode;
				}
				export module SipHashFunction {
					export class SipHasher extends com.google.common.hash.AbstractStreamingHasher {
						public static class: java.lang.Class<com.google.common.hash.SipHashFunction.SipHasher>;
						public putShort(s: number): com.google.common.hash.Hasher;
						public putString(charSequence: string, charset: java.nio.charset.Charset): com.google.common.hash.Hasher;
						public processRemaining(buffer: java.nio.ByteBuffer): void;
						public putFloat(f: number): com.google.common.hash.Hasher;
						public putChar(c: string): com.google.common.hash.Hasher;
						public putBoolean(b: boolean): com.google.common.hash.Hasher;
						public putInt(i: number): com.google.common.hash.Hasher;
						public process(byteBuffer0: java.nio.ByteBuffer): void;
						public putUnencodedChars(charSequence: string): com.google.common.hash.Hasher;
						public hashCode(): number;
						public hash(): com.google.common.hash.HashCode;
						public makeHash(): com.google.common.hash.HashCode;
						/** @deprecated */
						public hashCode(): number;
						public putByte(b: number): com.google.common.hash.Hasher;
						public putBytes(readBuffer: java.nio.ByteBuffer): com.google.common.hash.Hasher;
						public putDouble(d: number): com.google.common.hash.Hasher;
						public putLong(l: number): com.google.common.hash.Hasher;
						public process(buffer: java.nio.ByteBuffer): void;
						public processRemaining(bb: java.nio.ByteBuffer): void;
						public putObject(instance: any, funnel: com.google.common.hash.Funnel<any>): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>, off: number, len: number): com.google.common.hash.Hasher;
						public putBytes(bytes: native.Array<number>): com.google.common.hash.Hasher;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module hash {
				export abstract class Striped64 extends java.lang.Number {
					public static class: java.lang.Class<com.google.common.hash.Striped64>;
				}
				export module Striped64 {
					export class Cell extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.hash.Striped64.Cell>;
					}
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module html {
				export class HtmlEscapers extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.html.HtmlEscapers>;
					public static htmlEscaper(): com.google.common.escape.Escaper;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module io {
				export class AppendableWriter extends java.io.Writer {
					public static class: java.lang.Class<com.google.common.io.AppendableWriter>;
					public append(char0: string): java.lang.Appendable;
					public write(cbuf: native.Array<string>, off: number, len: number): void;
					public write(c: number): void;
					public append(csq: string, start: number, end: number): java.io.Writer;
					public append(charSeq: string): java.io.Writer;
					public append(csq: string): java.io.Writer;
					public flush(): void;
					public write(chars0: native.Array<string>, int1: number, int2: number): void;
					public append(charSequence0: string): java.lang.Appendable;
					public write(str: string): void;
					public append(charSeq: string, start: number, end: number): java.io.Writer;
					public close(): void;
					public append(charSequence0: string, int1: number, int2: number): java.lang.Appendable;
					public write(cbuf: native.Array<string>): void;
					public append(c: string): java.io.Writer;
					public write(str: string, off: number, len: number): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export abstract class BaseEncoding extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.BaseEncoding>;
					public static base64Url(): com.google.common.io.BaseEncoding;
					public lowerCase(): com.google.common.io.BaseEncoding;
					public encodingSink(encodedSink: com.google.common.io.CharSink): com.google.common.io.ByteSink;
					public decodingStream(reader0: java.io.Reader): java.io.InputStream;
					public decodingSource(encodedSource: com.google.common.io.CharSource): com.google.common.io.ByteSource;
					public withSeparator(string0: string, int1: number): com.google.common.io.BaseEncoding;
					public static base16(): com.google.common.io.BaseEncoding;
					public encodingStream(writer0: java.io.Writer): java.io.OutputStream;
					public static base64(): com.google.common.io.BaseEncoding;
					public encode(bytes: native.Array<number>): string;
					public encode(bytes: native.Array<number>, off: number, len: number): string;
					public omitPadding(): com.google.common.io.BaseEncoding;
					public decode(chars: string): native.Array<number>;
					public static base32Hex(): com.google.common.io.BaseEncoding;
					public upperCase(): com.google.common.io.BaseEncoding;
					public withPadChar(char0: string): com.google.common.io.BaseEncoding;
					public static base32(): com.google.common.io.BaseEncoding;
					public canDecode(charSequence0: string): boolean;
				}
				export module BaseEncoding {
					export class Alphabet extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.io.BaseEncoding.Alphabet>;
						public equals(obj: any): boolean;
						public equals(other: any): boolean;
						public hashCode(): number;
						public toString(): string;
						public matches(c: string): boolean;
					}
					export class Base16Encoding extends com.google.common.io.BaseEncoding.StandardBaseEncoding {
						public static class: java.lang.Class<com.google.common.io.BaseEncoding.Base16Encoding>;
					}
					export class Base64Encoding extends com.google.common.io.BaseEncoding.StandardBaseEncoding {
						public static class: java.lang.Class<com.google.common.io.BaseEncoding.Base64Encoding>;
					}
					export class DecodingException extends java.io.IOException {
						public static class: java.lang.Class<com.google.common.io.BaseEncoding.DecodingException>;
					}
					export class SeparatedBaseEncoding extends com.google.common.io.BaseEncoding {
						public static class: java.lang.Class<com.google.common.io.BaseEncoding.SeparatedBaseEncoding>;
						public withPadChar(char0: string): com.google.common.io.BaseEncoding;
						public decodingStream(reader0: java.io.Reader): java.io.InputStream;
						public toString(): string;
						public encodingStream(output: java.io.Writer): java.io.OutputStream;
						public omitPadding(): com.google.common.io.BaseEncoding;
						public encodingStream(writer0: java.io.Writer): java.io.OutputStream;
						public decodingStream(reader: java.io.Reader): java.io.InputStream;
						public lowerCase(): com.google.common.io.BaseEncoding;
						public withSeparator(string0: string, int1: number): com.google.common.io.BaseEncoding;
						public upperCase(): com.google.common.io.BaseEncoding;
						public withSeparator(separator: string, afterEveryChars: number): com.google.common.io.BaseEncoding;
						public canDecode(charSequence0: string): boolean;
						public canDecode(chars: string): boolean;
						public withPadChar(padChar: string): com.google.common.io.BaseEncoding;
					}
					export class StandardBaseEncoding extends com.google.common.io.BaseEncoding {
						public static class: java.lang.Class<com.google.common.io.BaseEncoding.StandardBaseEncoding>;
						public equals(obj: any): boolean;
						public equals(other: any): boolean;
						public withPadChar(char0: string): com.google.common.io.BaseEncoding;
						public decodingStream(reader0: java.io.Reader): java.io.InputStream;
						public hashCode(): number;
						public encodingStream(out: java.io.Writer): java.io.OutputStream;
						public toString(): string;
						public omitPadding(): com.google.common.io.BaseEncoding;
						public encodingStream(writer0: java.io.Writer): java.io.OutputStream;
						public decodingStream(reader: java.io.Reader): java.io.InputStream;
						public lowerCase(): com.google.common.io.BaseEncoding;
						public withSeparator(string0: string, int1: number): com.google.common.io.BaseEncoding;
						public upperCase(): com.google.common.io.BaseEncoding;
						public withSeparator(separator: string, afterEveryChars: number): com.google.common.io.BaseEncoding;
						public canDecode(charSequence0: string): boolean;
						public canDecode(chars: string): boolean;
						public withPadChar(padChar: string): com.google.common.io.BaseEncoding;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class ByteArrayDataInput extends java.lang.Object implements java.io.DataInput {
					public static class: java.lang.Class<com.google.common.io.ByteArrayDataInput>;
					/**
					 * Constructs a new instance of the com.google.common.io.ByteArrayDataInput interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						readFully(bytes0: native.Array<number>): void;
						readFully(bytes0: native.Array<number>, int1: number, int2: number): void;
						skipBytes(int0: number): number;
						readBoolean(): boolean;
						readByte(): number;
						readUnsignedByte(): number;
						readShort(): number;
						readUnsignedShort(): number;
						readChar(): string;
						readInt(): number;
						readLong(): number;
						readFloat(): number;
						readDouble(): number;
						readLine(): string;
						readUTF(): string;
						readFully(bytes0: native.Array<number>): void;
						readFully(bytes0: native.Array<number>, int1: number, int2: number): void;
						skipBytes(int0: number): number;
						readBoolean(): boolean;
						readByte(): number;
						readUnsignedByte(): number;
						readShort(): number;
						readUnsignedShort(): number;
						readChar(): string;
						readInt(): number;
						readLong(): number;
						readFloat(): number;
						readDouble(): number;
						readLine(): string;
						readUTF(): string;
					});
					public constructor();
					public readLine(): string;
					public readLong(): number;
					public readFully(bytes0: native.Array<number>): void;
					public readUnsignedShort(): number;
					public readByte(): number;
					public readShort(): number;
					public skipBytes(int0: number): number;
					public readFully(bytes0: native.Array<number>, int1: number, int2: number): void;
					public readBoolean(): boolean;
					public readDouble(): number;
					public readFloat(): number;
					public readUnsignedByte(): number;
					public readChar(): string;
					public readUTF(): string;
					public readInt(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class ByteArrayDataOutput extends java.lang.Object implements java.io.DataOutput {
					public static class: java.lang.Class<com.google.common.io.ByteArrayDataOutput>;
					/**
					 * Constructs a new instance of the com.google.common.io.ByteArrayDataOutput interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						write(int0: number): void;
						write(bytes0: native.Array<number>): void;
						write(bytes0: native.Array<number>, int1: number, int2: number): void;
						writeBoolean(boolean0: boolean): void;
						writeByte(int0: number): void;
						writeShort(int0: number): void;
						writeChar(int0: number): void;
						writeInt(int0: number): void;
						writeLong(long0: number): void;
						writeFloat(float0: number): void;
						writeDouble(double0: number): void;
						writeChars(string0: string): void;
						writeUTF(string0: string): void;
						writeBytes(string0: string): void;
						toByteArray(): native.Array<number>;
						write(int0: number): void;
						write(bytes0: native.Array<number>): void;
						write(bytes0: native.Array<number>, int1: number, int2: number): void;
						writeBoolean(boolean0: boolean): void;
						writeByte(int0: number): void;
						writeShort(int0: number): void;
						writeChar(int0: number): void;
						writeInt(int0: number): void;
						writeLong(long0: number): void;
						writeFloat(float0: number): void;
						writeDouble(double0: number): void;
						writeBytes(string0: string): void;
						writeChars(string0: string): void;
						writeUTF(string0: string): void;
					});
					public constructor();
					public writeLong(long0: number): void;
					public writeUTF(string0: string): void;
					public writeDouble(double0: number): void;
					public writeChar(int0: number): void;
					public writeBoolean(boolean0: boolean): void;
					public write(bytes0: native.Array<number>, int1: number, int2: number): void;
					public writeByte(int0: number): void;
					public writeBytes(string0: string): void;
					public write(int0: number): void;
					/** @deprecated */
					public writeBytes(string0: string): void;
					public toByteArray(): native.Array<number>;
					public writeChars(string0: string): void;
					public writeShort(int0: number): void;
					public writeFloat(float0: number): void;
					public write(bytes0: native.Array<number>): void;
					public writeInt(int0: number): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class ByteProcessor<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.ByteProcessor<any>>;
					/**
					 * Constructs a new instance of the com.google.common.io.ByteProcessor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						processBytes(bytes0: native.Array<number>, int1: number, int2: number): boolean;
						getResult(): T;
					});
					public constructor();
					public processBytes(bytes0: native.Array<number>, int1: number, int2: number): boolean;
					public getResult(): T;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export abstract class ByteSink extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.ByteSink>;
					public asCharSink(charset: java.nio.charset.Charset): com.google.common.io.CharSink;
					public constructor();
					public write(bytes: native.Array<number>): void;
					public openBufferedStream(): java.io.OutputStream;
					public openStream(): java.io.OutputStream;
					public writeFrom(input: java.io.InputStream): number;
				}
				export module ByteSink {
					export class AsCharSink extends com.google.common.io.CharSink {
						public static class: java.lang.Class<com.google.common.io.ByteSink.AsCharSink>;
						public openStream(): java.io.Writer;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export abstract class ByteSource extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.ByteSource>;
					public sizeIfKnown(): com.google.common.base.Optional<java.lang.Long>;
					public isEmpty(): boolean;
					public static concat(sources: native.Array<com.google.common.io.ByteSource>): com.google.common.io.ByteSource;
					public copyTo(sink: com.google.common.io.ByteSink): number;
					public asCharSource(charset: java.nio.charset.Charset): com.google.common.io.CharSource;
					public size(): number;
					public static concat(sources: java.util.Iterator<any>): com.google.common.io.ByteSource;
					public static wrap(b: native.Array<number>): com.google.common.io.ByteSource;
					public copyTo(output: java.io.OutputStream): number;
					public openStream(): java.io.InputStream;
					public read(processor: com.google.common.io.ByteProcessor<any>): any;
					public contentEquals(other: com.google.common.io.ByteSource): boolean;
					public openBufferedStream(): java.io.InputStream;
					public constructor();
					public hash(hashFunction: com.google.common.hash.HashFunction): com.google.common.hash.HashCode;
					public read(): native.Array<number>;
					public static concat(sources: java.lang.Iterable<any>): com.google.common.io.ByteSource;
					public static empty(): com.google.common.io.ByteSource;
					public slice(offset: number, length: number): com.google.common.io.ByteSource;
				}
				export module ByteSource {
					export class AsCharSource extends com.google.common.io.CharSource {
						public static class: java.lang.Class<com.google.common.io.ByteSource.AsCharSource>;
						public read(): string;
						public asByteSource(charset: java.nio.charset.Charset): com.google.common.io.ByteSource;
						public toString(): string;
						public openStream(): java.io.Reader;
					}
					export class ByteArrayByteSource extends com.google.common.io.ByteSource {
						public static class: java.lang.Class<com.google.common.io.ByteSource.ByteArrayByteSource>;
						public read(): native.Array<number>;
						public openBufferedStream(): java.io.InputStream;
						public slice(offset: number, length: number): com.google.common.io.ByteSource;
						public hash(hashFunction: com.google.common.hash.HashFunction): com.google.common.hash.HashCode;
						public read(processor: com.google.common.io.ByteProcessor<any>): any;
						public isEmpty(): boolean;
						public sizeIfKnown(): com.google.common.base.Optional<java.lang.Long>;
						public copyTo(sink: com.google.common.io.ByteSink): number;
						public size(): number;
						public copyTo(output: java.io.OutputStream): number;
						public toString(): string;
						public openStream(): java.io.InputStream;
					}
					export class ConcatenatedByteSource extends com.google.common.io.ByteSource {
						public static class: java.lang.Class<com.google.common.io.ByteSource.ConcatenatedByteSource>;
						public isEmpty(): boolean;
						public sizeIfKnown(): com.google.common.base.Optional<java.lang.Long>;
						public size(): number;
						public toString(): string;
						public openStream(): java.io.InputStream;
					}
					export class EmptyByteSource extends com.google.common.io.ByteSource.ByteArrayByteSource {
						public static class: java.lang.Class<com.google.common.io.ByteSource.EmptyByteSource>;
						public asCharSource(charset: java.nio.charset.Charset): com.google.common.io.CharSource;
						public read(): native.Array<number>;
						public read(processor: com.google.common.io.ByteProcessor<any>): any;
						public toString(): string;
					}
					export class SlicedByteSource extends com.google.common.io.ByteSource {
						public static class: java.lang.Class<com.google.common.io.ByteSource.SlicedByteSource>;
						public openBufferedStream(): java.io.InputStream;
						public slice(offset: number, length: number): com.google.common.io.ByteSource;
						public isEmpty(): boolean;
						public sizeIfKnown(): com.google.common.base.Optional<java.lang.Long>;
						public toString(): string;
						public openStream(): java.io.InputStream;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class ByteStreams extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.ByteStreams>;
					public static nullOutputStream(): java.io.OutputStream;
					public static readFully(in0: java.io.InputStream, b: native.Array<number>): void;
					public static copy(from: java.nio.channels.ReadableByteChannel, to: java.nio.channels.WritableByteChannel): number;
					public static readFully(in0: java.io.InputStream, b: native.Array<number>, off: number, len: number): void;
					public static copy(from: java.io.InputStream, to: java.io.OutputStream): number;
					public static newDataOutput(size: number): com.google.common.io.ByteArrayDataOutput;
					public static exhaust(in0: java.io.InputStream): number;
					public static newDataInput(byteArrayInputStream: java.io.ByteArrayInputStream): com.google.common.io.ByteArrayDataInput;
					public static newDataInput(bytes: native.Array<number>, start: number): com.google.common.io.ByteArrayDataInput;
					public static skipFully(in0: java.io.InputStream, n: number): void;
					public static newDataOutput(byteArrayOutputSteam: java.io.ByteArrayOutputStream): com.google.common.io.ByteArrayDataOutput;
					public static newDataInput(bytes: native.Array<number>): com.google.common.io.ByteArrayDataInput;
					public static toByteArray(in0: java.io.InputStream): native.Array<number>;
					public static newDataOutput(): com.google.common.io.ByteArrayDataOutput;
					public static limit(in0: java.io.InputStream, limit: number): java.io.InputStream;
					public static read(in0: java.io.InputStream, b: native.Array<number>, off: number, len: number): number;
					public static readBytes(input: java.io.InputStream, processor: com.google.common.io.ByteProcessor<any>): any;
				}
				export module ByteStreams {
					export class ByteArrayDataInputStream extends java.lang.Object implements com.google.common.io.ByteArrayDataInput {
						public static class: java.lang.Class<com.google.common.io.ByteStreams.ByteArrayDataInputStream>;
						public readInt(): number;
						public readUTF(): string;
						public readUnsignedByte(): number;
						public readFully(b: native.Array<number>): void;
						public readChar(): string;
						public readDouble(): number;
						public skipBytes(n: number): number;
						public readShort(): number;
						public readByte(): number;
						public readBoolean(): boolean;
						public readFully(b: native.Array<number>, off: number, len: number): void;
						public readUnsignedShort(): number;
						public readFloat(): number;
						public readLong(): number;
						public readLine(): string;
					}
					export class ByteArrayDataOutputStream extends java.lang.Object implements com.google.common.io.ByteArrayDataOutput {
						public static class: java.lang.Class<com.google.common.io.ByteStreams.ByteArrayDataOutputStream>;
						public writeFloat(v: number): void;
						public writeBytes(s: string): void;
						public writeInt(v: number): void;
						public writeChars(s: string): void;
						public write(b: number): void;
						public writeLong(v: number): void;
						public writeBoolean(v: boolean): void;
						public writeByte(v: number): void;
						public toByteArray(): native.Array<number>;
						public write(b: native.Array<number>, off: number, len: number): void;
						public writeDouble(v: number): void;
						public writeUTF(s: string): void;
						public write(b: native.Array<number>): void;
						public writeChar(v: number): void;
						/** @deprecated */
						public writeBytes(s: string): void;
						public writeShort(v: number): void;
					}
					export class LimitedInputStream extends java.io.FilterInputStream {
						public static class: java.lang.Class<com.google.common.io.ByteStreams.LimitedInputStream>;
						public read(): number;
						public read(b: native.Array<number>): number;
						public mark(readlimit: number): void;
						public close(): void;
						public mark(readLimit: number): void;
						public read(b: native.Array<number>, off: number, len: number): number;
						public reset(): void;
						public available(): number;
						public skip(n: number): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class CharSequenceReader extends java.io.Reader {
					public static class: java.lang.Class<com.google.common.io.CharSequenceReader>;
					public read(cbuf: native.Array<string>): number;
					public read(): number;
					public reset(): void;
					public constructor(lock: any);
					public constructor(seq: string);
					public read(target: java.nio.CharBuffer): number;
					public markSupported(): boolean;
					public mark(readAheadLimit: number): void;
					public read(cbuf: native.Array<string>, off: number, len: number): number;
					public constructor();
					public close(): void;
					public ready(): boolean;
					public read(chars0: native.Array<string>, int1: number, int2: number): number;
					public skip(n: number): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export abstract class CharSink extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.CharSink>;
					public write(charSequence: string): void;
					public constructor();
					public writeLines(lines: java.lang.Iterable<any>): void;
					public openBufferedStream(): java.io.Writer;
					public writeLines(lines: java.lang.Iterable<any>, lineSeparator: string): void;
					public writeFrom(readable: java.lang.Readable): number;
					public openStream(): java.io.Writer;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export abstract class CharSource extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.CharSource>;
					public openBufferedStream(): java.io.BufferedReader;
					public openStream(): java.io.Reader;
					public readFirstLine(): string;
					public copyTo(appendable: java.lang.Appendable): number;
					public isEmpty(): boolean;
					public read(): string;
					public static empty(): com.google.common.io.CharSource;
					public copyTo(sink: com.google.common.io.CharSink): number;
					public readLines(processor: com.google.common.io.LineProcessor<any>): any;
					public static wrap(charSequence: string): com.google.common.io.CharSource;
					public static concat(sources: java.lang.Iterable<any>): com.google.common.io.CharSource;
					public length(): number;
					public asByteSource(charset: java.nio.charset.Charset): com.google.common.io.ByteSource;
					public constructor();
					public static concat(sources: native.Array<com.google.common.io.CharSource>): com.google.common.io.CharSource;
					public lengthIfKnown(): com.google.common.base.Optional<java.lang.Long>;
					public readLines(): com.google.common.collect.ImmutableList<string>;
					public static concat(sources: java.util.Iterator<any>): com.google.common.io.CharSource;
				}
				export module CharSource {
					export class AsByteSource extends com.google.common.io.ByteSource {
						public static class: java.lang.Class<com.google.common.io.CharSource.AsByteSource>;
						public asCharSource(charset: java.nio.charset.Charset): com.google.common.io.CharSource;
						public toString(): string;
						public openStream(): java.io.InputStream;
					}
					export class CharSequenceCharSource extends com.google.common.io.CharSource {
						public static class: java.lang.Class<com.google.common.io.CharSource.CharSequenceCharSource>;
						public seq: string;
						public constructor();
						public lengthIfKnown(): com.google.common.base.Optional<java.lang.Long>;
						public length(): number;
						public constructor(seq: string);
						public read(): string;
						public readFirstLine(): string;
						public readLines(processor: com.google.common.io.LineProcessor<any>): any;
						public isEmpty(): boolean;
						public readLines(): com.google.common.collect.ImmutableList<string>;
						public toString(): string;
						public openStream(): java.io.Reader;
					}
					export class ConcatenatedCharSource extends com.google.common.io.CharSource {
						public static class: java.lang.Class<com.google.common.io.CharSource.ConcatenatedCharSource>;
						public lengthIfKnown(): com.google.common.base.Optional<java.lang.Long>;
						public length(): number;
						public isEmpty(): boolean;
						public toString(): string;
						public openStream(): java.io.Reader;
					}
					export class EmptyCharSource extends com.google.common.io.CharSource.StringCharSource {
						public static class: java.lang.Class<com.google.common.io.CharSource.EmptyCharSource>;
						public toString(): string;
					}
					export class StringCharSource extends com.google.common.io.CharSource.CharSequenceCharSource {
						public static class: java.lang.Class<com.google.common.io.CharSource.StringCharSource>;
						public constructor();
						public constructor(seq: string);
						public copyTo(appendable: java.lang.Appendable): number;
						public copyTo(sink: com.google.common.io.CharSink): number;
						public openStream(): java.io.Reader;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class CharStreams extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.CharStreams>;
					public static copy(from: java.lang.Readable, to: java.lang.Appendable): number;
					public toString(): string;
					public static readLines(r: java.lang.Readable): java.util.List<string>;
					public static asWriter(target: java.lang.Appendable): java.io.Writer;
					public static exhaust(readable: java.lang.Readable): number;
					public static skipFully(reader: java.io.Reader, n: number): void;
					public static readLines(readable: java.lang.Readable, processor: com.google.common.io.LineProcessor<any>): any;
					public static toString(r: java.lang.Readable): string;
					public static nullWriter(): java.io.Writer;
				}
				export module CharStreams {
					export class NullWriter extends java.io.Writer {
						public static class: java.lang.Class<com.google.common.io.CharStreams.NullWriter>;
						public write(c: number): void;
						public append(charSequence0: string): java.lang.Appendable;
						public append(charSequence0: string, int1: number, int2: number): java.lang.Appendable;
						public close(): void;
						public write(chars0: native.Array<string>, int1: number, int2: number): void;
						public write(cbuf: native.Array<string>, off: number, len: number): void;
						public flush(): void;
						public write(str: string): void;
						public append(csq: string): java.io.Writer;
						public toString(): string;
						public write(cbuf: native.Array<string>): void;
						public append(c: string): java.io.Writer;
						public append(char0: string): java.lang.Appendable;
						public append(csq: string, start: number, end: number): java.io.Writer;
						public write(str: string, off: number, len: number): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class Closeables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.Closeables>;
					public static closeQuietly(reader: java.io.Reader): void;
					public static close(closeable: java.io.Closeable, swallowIOException: boolean): void;
					public static closeQuietly(inputStream: java.io.InputStream): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class Closer extends java.lang.Object implements java.io.Closeable {
					public static class: java.lang.Class<com.google.common.io.Closer>;
					public rethrow(e: java.lang.Throwable, declaredType: java.lang.Class<any>): java.lang.RuntimeException;
					public static create(): com.google.common.io.Closer;
					public rethrow(e: java.lang.Throwable): java.lang.RuntimeException;
					public rethrow(e: java.lang.Throwable, declaredType1: java.lang.Class<any>, declaredType2: java.lang.Class<any>): java.lang.RuntimeException;
					public close(): void;
					public register(closeable: java.io.Closeable): java.io.Closeable;
				}
				export module Closer {
					export class LoggingSuppressor extends java.lang.Object implements com.google.common.io.Closer.Suppressor {
						public static class: java.lang.Class<com.google.common.io.Closer.LoggingSuppressor>;
						public suppress(closeable: java.io.Closeable, thrown: java.lang.Throwable, suppressed: java.lang.Throwable): void;
					}
					export class SuppressingSuppressor extends java.lang.Object implements com.google.common.io.Closer.Suppressor {
						public static class: java.lang.Class<com.google.common.io.Closer.SuppressingSuppressor>;
						public suppress(closeable: java.io.Closeable, thrown: java.lang.Throwable, suppressed: java.lang.Throwable): void;
					}
					export class Suppressor extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.io.Closer.Suppressor>;
						/**
						 * Constructs a new instance of the com.google.common.io.Closer$Suppressor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							suppress(closeable0: java.io.Closeable, throwable1: java.lang.Throwable, throwable2: java.lang.Throwable): void;
						});
						public constructor();
						public suppress(closeable0: java.io.Closeable, throwable1: java.lang.Throwable, throwable2: java.lang.Throwable): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class CountingInputStream extends java.io.FilterInputStream {
					public static class: java.lang.Class<com.google.common.io.CountingInputStream>;
					public constructor(in0: java.io.InputStream);
					public read(): number;
					public read(b: native.Array<number>, off: number, len: number): number;
					public reset(): void;
					public getCount(): number;
					public constructor();
					public close(): void;
					public read(b: native.Array<number>): number;
					public mark(readlimit: number): void;
					public skip(n: number): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class CountingOutputStream extends java.io.FilterOutputStream {
					public static class: java.lang.Class<com.google.common.io.CountingOutputStream>;
					public write(b: native.Array<number>): void;
					public getCount(): number;
					public constructor();
					public write(b: number): void;
					public close(): void;
					public write(b: native.Array<number>, off: number, len: number): void;
					public flush(): void;
					public constructor(out: java.io.OutputStream);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class FileBackedOutputStream extends java.io.OutputStream {
					public static class: java.lang.Class<com.google.common.io.FileBackedOutputStream>;
					public asByteSource(): com.google.common.io.ByteSource;
					public reset(): void;
					public write(b: native.Array<number>): void;
					public constructor();
					public constructor(fileThreshold: number);
					public write(b: number): void;
					public close(): void;
					public write(b: native.Array<number>, off: number, len: number): void;
					public flush(): void;
					public constructor(fileThreshold: number, resetOnFinalize: boolean);
					public write(int0: number): void;
				}
				export module FileBackedOutputStream {
					export class MemoryOutput extends java.io.ByteArrayOutputStream {
						public static class: java.lang.Class<com.google.common.io.FileBackedOutputStream.MemoryOutput>;
						public close(): void;
						public flush(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class FileWriteMode {
					public static class: java.lang.Class<com.google.common.io.FileWriteMode>;
					public static APPEND: com.google.common.io.FileWriteMode;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static values(): native.Array<com.google.common.io.FileWriteMode>;
					public static valueOf(name: string): com.google.common.io.FileWriteMode;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class Files extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.Files>;
					public static readLines(file: java.io.File, charset: java.nio.charset.Charset): java.util.List<string>;
					public static fileTraverser(): com.google.common.graph.Traverser<java.io.File>;
					public static getFileExtension(fullName: string): string;
					public static newWriter(file: java.io.File, charset: java.nio.charset.Charset): java.io.BufferedWriter;
					/** @deprecated */
					public static readFirstLine(file: java.io.File, charset: java.nio.charset.Charset): string;
					public static isFile(): com.google.common.base.Predicate<java.io.File>;
					public static newReader(file: java.io.File, charset: java.nio.charset.Charset): java.io.BufferedReader;
					public static createTempDir(): java.io.File;
					public static asCharSink(file: java.io.File, charset: java.nio.charset.Charset, modes: native.Array<com.google.common.io.FileWriteMode>): com.google.common.io.CharSink;
					public static toByteArray(file: java.io.File): native.Array<number>;
					public toString(): string;
					public static copy(from: java.io.File, to: java.io.File): void;
					public static getNameWithoutExtension(file: string): string;
					public static copy(from: java.io.File, to: java.io.OutputStream): void;
					/** @deprecated */
					public static toString(file: java.io.File, charset: java.nio.charset.Charset): string;
					public static touch(file: java.io.File): void;
					/** @deprecated */
					public static readBytes(file: java.io.File, processor: com.google.common.io.ByteProcessor<any>): any;
					public static equal(file1: java.io.File, file2: java.io.File): boolean;
					public static asByteSink(file: java.io.File, modes: native.Array<com.google.common.io.FileWriteMode>): com.google.common.io.ByteSink;
					public static asCharSource(file: java.io.File, charset: java.nio.charset.Charset): com.google.common.io.CharSource;
					public static write(from: native.Array<number>, to: java.io.File): void;
					public static asByteSource(file: java.io.File): com.google.common.io.ByteSource;
					/** @deprecated */
					public static write(from: string, to: java.io.File, charset: java.nio.charset.Charset): void;
					public static isDirectory(): com.google.common.base.Predicate<java.io.File>;
					public static map(file: java.io.File, mode: java.nio.channels.FileChannel.MapMode): java.nio.MappedByteBuffer;
					public static move(from: java.io.File, to: java.io.File): void;
					/** @deprecated */
					public static copy(from: java.io.File, charset: java.nio.charset.Charset, to: java.lang.Appendable): void;
					public static simplifyPath(pathname: string): string;
					/** @deprecated */
					public static append(from: string, to: java.io.File, charset: java.nio.charset.Charset): void;
					/** @deprecated */
					public static hash(file: java.io.File, hashFunction: com.google.common.hash.HashFunction): com.google.common.hash.HashCode;
					/** @deprecated */
					public static readLines(file: java.io.File, charset: java.nio.charset.Charset, callback: com.google.common.io.LineProcessor<any>): any;
					public static map(file: java.io.File): java.nio.MappedByteBuffer;
					public static createParentDirs(file: java.io.File): void;
					public static map(file: java.io.File, mode: java.nio.channels.FileChannel.MapMode, size: number): java.nio.MappedByteBuffer;
				}
				export module Files {
					export class FileByteSink extends com.google.common.io.ByteSink {
						public static class: java.lang.Class<com.google.common.io.Files.FileByteSink>;
						public openStream(): java.io.OutputStream;
						public openStream(): java.io.FileOutputStream;
						public toString(): string;
					}
					export class FileByteSource extends com.google.common.io.ByteSource {
						public static class: java.lang.Class<com.google.common.io.Files.FileByteSource>;
						public read(): native.Array<number>;
						public read(processor: com.google.common.io.ByteProcessor<any>): any;
						public sizeIfKnown(): com.google.common.base.Optional<java.lang.Long>;
						public openStream(): java.io.FileInputStream;
						public size(): number;
						public toString(): string;
						public openStream(): java.io.InputStream;
					}
					export abstract class FilePredicate extends com.google.common.base.Predicate<java.io.File> {
						public static class: java.lang.Class<com.google.common.io.Files.FilePredicate>;
						public static IS_DIRECTORY: com.google.common.io.Files.FilePredicate;
						public static IS_FILE: com.google.common.io.Files.FilePredicate;
						public equals(other: any): boolean;
						public static values(): native.Array<com.google.common.io.Files.FilePredicate>;
						public static valueOf(name: string): com.google.common.io.Files.FilePredicate;
						public apply(object0: any): boolean;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class Flushables extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.Flushables>;
					public static flush(flushable: java.io.Flushable, swallowIOException: boolean): void;
					public static flushQuietly(flushable: java.io.Flushable): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export abstract class LineBuffer extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.LineBuffer>;
					public add(cbuf: native.Array<string>, off: number, len: number): void;
					public finish(): void;
					public handleLine(string0: string, string1: string): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class LineProcessor<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.LineProcessor<any>>;
					/**
					 * Constructs a new instance of the com.google.common.io.LineProcessor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						processLine(string0: string): boolean;
						getResult(): T;
					});
					public constructor();
					public processLine(string0: string): boolean;
					public getResult(): T;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class LineReader extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.LineReader>;
					public readLine(): string;
					public constructor(readable: java.lang.Readable);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class LittleEndianDataInputStream extends java.io.FilterInputStream implements java.io.DataInput {
					public static class: java.lang.Class<com.google.common.io.LittleEndianDataInputStream>;
					public readLine(): string;
					public skipBytes(n: number): number;
					public readFully(b: native.Array<number>): void;
					public readLong(): number;
					public readFully(b: native.Array<number>, off: number, len: number): void;
					public readUnsignedShort(): number;
					public readByte(): number;
					public readShort(): number;
					public readBoolean(): boolean;
					public constructor(in0: java.io.InputStream);
					public readDouble(): number;
					public constructor();
					public close(): void;
					public readFloat(): number;
					public readChar(): string;
					public readUTF(): string;
					public readUnsignedByte(): number;
					public readInt(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class LittleEndianDataOutputStream extends java.io.FilterOutputStream implements java.io.DataOutput {
					public static class: java.lang.Class<com.google.common.io.LittleEndianDataOutputStream>;
					public writeChars(s: string): void;
					public writeInt(v: number): void;
					public writeChar(v: number): void;
					public writeBoolean(v: boolean): void;
					public writeUTF(str: string): void;
					public writeDouble(v: number): void;
					public writeLong(v: number): void;
					public writeFloat(v: number): void;
					public flush(): void;
					public writeBytes(s: string): void;
					public write(b: native.Array<number>): void;
					public writeByte(v: number): void;
					public constructor();
					public write(b: number): void;
					public writeShort(v: number): void;
					public close(): void;
					public write(b: native.Array<number>, off: number, len: number): void;
					/** @deprecated */
					public writeBytes(s: string): void;
					public constructor(out: java.io.OutputStream);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class MultiInputStream extends java.io.InputStream {
					public static class: java.lang.Class<com.google.common.io.MultiInputStream>;
					public available(): number;
					public read(): number;
					public read(b: native.Array<number>, off: number, len: number): number;
					public constructor();
					public markSupported(): boolean;
					public close(): void;
					public read(b: native.Array<number>): number;
					public constructor(it: java.util.Iterator<any>);
					public skip(n: number): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class MultiReader extends java.io.Reader {
					public static class: java.lang.Class<com.google.common.io.MultiReader>;
					public read(cbuf: native.Array<string>): number;
					public read(): number;
					public read(cbuf: native.Array<string>, off: number, len: number): number;
					public read(target: java.nio.CharBuffer): number;
					public close(): void;
					public ready(): boolean;
					public read(chars0: native.Array<string>, int1: number, int2: number): number;
					public skip(n: number): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class PatternFilenameFilter extends java.lang.Object implements java.io.FilenameFilter {
					public static class: java.lang.Class<com.google.common.io.PatternFilenameFilter>;
					public accept(dir: java.io.File, fileName: string): boolean;
					public constructor(pattern: java.util.regex.Pattern);
					public constructor(patternStr: string);
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class ReaderInputStream extends java.io.InputStream {
					public static class: java.lang.Class<com.google.common.io.ReaderInputStream>;
					public read(): number;
					public read(b: native.Array<number>, off: number, len: number): number;
					public close(): void;
					public read(b: native.Array<number>): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module io {
				export class Resources extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.io.Resources>;
					public static getResource(contextClass: java.lang.Class<any>, resourceName: string): java.net.URL;
					public static toByteArray(url: java.net.URL): native.Array<number>;
					public static getResource(resourceName: string): java.net.URL;
					public toString(): string;
					public static copy(from: java.net.URL, to: java.io.OutputStream): void;
					public static asByteSource(url: java.net.URL): com.google.common.io.ByteSource;
					public static asCharSource(url: java.net.URL, charset: java.nio.charset.Charset): com.google.common.io.CharSource;
					public static readLines(url: java.net.URL, charset: java.nio.charset.Charset, callback: com.google.common.io.LineProcessor<any>): any;
					public static readLines(url: java.net.URL, charset: java.nio.charset.Charset): java.util.List<string>;
					public static toString(url: java.net.URL, charset: java.nio.charset.Charset): string;
				}
				export module Resources {
					export class UrlByteSource extends com.google.common.io.ByteSource {
						public static class: java.lang.Class<com.google.common.io.Resources.UrlByteSource>;
						public toString(): string;
						public openStream(): java.io.InputStream;
					}
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module math {
				export class BigIntegerMath extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.BigIntegerMath>;
					public static sqrt(x: java.math.BigInteger, mode: java.math.RoundingMode): java.math.BigInteger;
					public static factorial(n: number): java.math.BigInteger;
					public static isPowerOfTwo(x: java.math.BigInteger): boolean;
					public static divide(p: java.math.BigInteger, q: java.math.BigInteger, mode: java.math.RoundingMode): java.math.BigInteger;
					public static log10(x: java.math.BigInteger, mode: java.math.RoundingMode): number;
					public static binomial(n: number, k: number): java.math.BigInteger;
					public static floorPowerOfTwo(x: java.math.BigInteger): java.math.BigInteger;
					public static log2(x: java.math.BigInteger, mode: java.math.RoundingMode): number;
					public static ceilingPowerOfTwo(x: java.math.BigInteger): java.math.BigInteger;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class DoubleMath extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.DoubleMath>;
					/** @deprecated */
					public static mean(values: native.Array<number>): number;
					public static roundToLong(x: number, mode: java.math.RoundingMode): number;
					public static log2(x: number): number;
					/** @deprecated */
					public static mean(values: java.lang.Iterable<any>): number;
					public static roundToInt(x: number, mode: java.math.RoundingMode): number;
					public static log2(x: number, mode: java.math.RoundingMode): number;
					public static isMathematicalInteger(x: number): boolean;
					public static roundToBigInteger(x: number, mode: java.math.RoundingMode): java.math.BigInteger;
					public static fuzzyEquals(a: number, b: number, tolerance: number): boolean;
					public static fuzzyCompare(a: number, b: number, tolerance: number): number;
					public static factorial(n: number): number;
					/** @deprecated */
					public static mean(values: java.util.Iterator<any>): number;
					public static isPowerOfTwo(x: number): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class DoubleUtils extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.DoubleUtils>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class IntMath extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.IntMath>;
					public static sqrt(x: number, mode: java.math.RoundingMode): number;
					public static checkedAdd(a: number, b: number): number;
					public static binomial(n: number, k: number): number;
					public static floorPowerOfTwo(x: number): number;
					public static ceilingPowerOfTwo(x: number): number;
					public static saturatedAdd(a: number, b: number): number;
					public static saturatedMultiply(a: number, b: number): number;
					public static isPrime(n: number): boolean;
					public static saturatedSubtract(a: number, b: number): number;
					public static checkedPow(b: number, k: number): number;
					public static log2(x: number, mode: java.math.RoundingMode): number;
					public static gcd(a: number, b: number): number;
					public static pow(b: number, k: number): number;
					public static saturatedPow(b: number, k: number): number;
					public static factorial(n: number): number;
					public static log10(x: number, mode: java.math.RoundingMode): number;
					public static divide(p: number, q: number, mode: java.math.RoundingMode): number;
					public static checkedMultiply(a: number, b: number): number;
					public static checkedSubtract(a: number, b: number): number;
					public static isPowerOfTwo(x: number): boolean;
					public static mean(x: number, y: number): number;
					public static mod(x: number, m: number): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export abstract class LinearTransformation extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.LinearTransformation>;
					public static forNaN(): com.google.common.math.LinearTransformation;
					public inverse(): com.google.common.math.LinearTransformation;
					public constructor();
					public isHorizontal(): boolean;
					public slope(): number;
					public static mapping(x1: number, y1: number): com.google.common.math.LinearTransformation.LinearTransformationBuilder;
					public isVertical(): boolean;
					public transform(double0: number): number;
					public static horizontal(y: number): com.google.common.math.LinearTransformation;
					public static vertical(x: number): com.google.common.math.LinearTransformation;
				}
				export module LinearTransformation {
					export class LinearTransformationBuilder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.math.LinearTransformation.LinearTransformationBuilder>;
						public and(x2: number, y2: number): com.google.common.math.LinearTransformation;
						public withSlope(slope: number): com.google.common.math.LinearTransformation;
					}
					export class NaNLinearTransformation extends com.google.common.math.LinearTransformation {
						public static class: java.lang.Class<com.google.common.math.LinearTransformation.NaNLinearTransformation>;
						public slope(): number;
						public transform(x: number): number;
						public isVertical(): boolean;
						public transform(double0: number): number;
						public inverse(): com.google.common.math.LinearTransformation;
						public isHorizontal(): boolean;
						public toString(): string;
					}
					export class RegularLinearTransformation extends com.google.common.math.LinearTransformation {
						public static class: java.lang.Class<com.google.common.math.LinearTransformation.RegularLinearTransformation>;
						public slope(): number;
						public transform(x: number): number;
						public isVertical(): boolean;
						public transform(double0: number): number;
						public inverse(): com.google.common.math.LinearTransformation;
						public isHorizontal(): boolean;
						public toString(): string;
					}
					export class VerticalLinearTransformation extends com.google.common.math.LinearTransformation {
						public static class: java.lang.Class<com.google.common.math.LinearTransformation.VerticalLinearTransformation>;
						public slope(): number;
						public transform(x: number): number;
						public isVertical(): boolean;
						public transform(double0: number): number;
						public inverse(): com.google.common.math.LinearTransformation;
						public isHorizontal(): boolean;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class LongMath extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.LongMath>;
					public static sqrt(x: number, mode: java.math.RoundingMode): number;
					public static checkedAdd(a: number, b: number): number;
					public static binomial(n: number, k: number): number;
					public static floorPowerOfTwo(x: number): number;
					public static ceilingPowerOfTwo(x: number): number;
					public static saturatedAdd(a: number, b: number): number;
					public static saturatedMultiply(a: number, b: number): number;
					public static isPrime(n: number): boolean;
					public static saturatedSubtract(a: number, b: number): number;
					public static checkedPow(b: number, k: number): number;
					public static log2(x: number, mode: java.math.RoundingMode): number;
					public static gcd(a: number, b: number): number;
					public static pow(b: number, k: number): number;
					public static saturatedPow(b: number, k: number): number;
					public static factorial(n: number): number;
					public static log10(x: number, mode: java.math.RoundingMode): number;
					public static divide(p: number, q: number, mode: java.math.RoundingMode): number;
					public static checkedMultiply(a: number, b: number): number;
					public static checkedSubtract(a: number, b: number): number;
					public static isPowerOfTwo(x: number): boolean;
					public static mean(x: number, y: number): number;
					public static mod(x: number, m: number): number;
				}
				export module LongMath {
					export abstract class MillerRabinTester {
						public static class: java.lang.Class<com.google.common.math.LongMath.MillerRabinTester>;
						public static LARGE: com.google.common.math.LongMath.MillerRabinTester;
						public static SMALL: com.google.common.math.LongMath.MillerRabinTester;
						public static valueOf(name: string): com.google.common.math.LongMath.MillerRabinTester;
						public static values(): native.Array<com.google.common.math.LongMath.MillerRabinTester>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class MathPreconditions extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.MathPreconditions>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class PairedStats extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.math.PairedStats>;
					public pearsonsCorrelationCoefficient(): number;
					public toByteArray(): native.Array<number>;
					public yStats(): com.google.common.math.Stats;
					public equals(obj: any): boolean;
					public toString(): string;
					public populationCovariance(): number;
					public xStats(): com.google.common.math.Stats;
					public count(): number;
					public leastSquaresFit(): com.google.common.math.LinearTransformation;
					public static fromByteArray(byteArray: native.Array<number>): com.google.common.math.PairedStats;
					public hashCode(): number;
					public sampleCovariance(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class PairedStatsAccumulator extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.PairedStatsAccumulator>;
					public pearsonsCorrelationCoefficient(): number;
					public yStats(): com.google.common.math.Stats;
					public populationCovariance(): number;
					public constructor();
					public xStats(): com.google.common.math.Stats;
					public count(): number;
					public addAll(values: com.google.common.math.PairedStats): void;
					public snapshot(): com.google.common.math.PairedStats;
					public leastSquaresFit(): com.google.common.math.LinearTransformation;
					public sampleCovariance(): number;
					public add(x: number, y: number): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class Quantiles extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.Quantiles>;
					public static scale(scale: number): com.google.common.math.Quantiles.Scale;
					public static median(): com.google.common.math.Quantiles.ScaleAndIndex;
					public constructor();
					public static percentiles(): com.google.common.math.Quantiles.Scale;
					public static quartiles(): com.google.common.math.Quantiles.Scale;
				}
				export module Quantiles {
					export class Scale extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.math.Quantiles.Scale>;
						public indexes(indexes: native.Array<number>): com.google.common.math.Quantiles.ScaleAndIndexes;
						public indexes(indexes: java.util.Collection<java.lang.Integer>): com.google.common.math.Quantiles.ScaleAndIndexes;
						public index(index: number): com.google.common.math.Quantiles.ScaleAndIndex;
					}
					export class ScaleAndIndex extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.math.Quantiles.ScaleAndIndex>;
						public compute(dataset: native.Array<number>): number;
						public compute(dataset: java.util.Collection<any>): number;
						public computeInPlace(dataset: native.Array<number>): number;
					}
					export class ScaleAndIndexes extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.math.Quantiles.ScaleAndIndexes>;
						public computeInPlace(dataset: native.Array<number>): java.util.Map<java.lang.Integer,java.lang.Double>;
						public compute(dataset: java.util.Collection<any>): java.util.Map<java.lang.Integer,java.lang.Double>;
						public compute(dataset: native.Array<number>): java.util.Map<java.lang.Integer,java.lang.Double>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class Stats extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.math.Stats>;
					public sum(): number;
					public equals(obj: any): boolean;
					public static of(values: java.lang.Iterable<any>): com.google.common.math.Stats;
					public sampleVariance(): number;
					public static meanOf(values: java.util.Iterator<any>): number;
					public populationStandardDeviation(): number;
					public count(): number;
					public static of(values: native.Array<number>): com.google.common.math.Stats;
					public static meanOf(values: java.lang.Iterable<any>): number;
					public min(): number;
					public static fromByteArray(byteArray: native.Array<number>): com.google.common.math.Stats;
					public static of(values: java.util.Iterator<any>): com.google.common.math.Stats;
					public toByteArray(): native.Array<number>;
					public populationVariance(): number;
					public toString(): string;
					public mean(): number;
					public sampleStandardDeviation(): number;
					public max(): number;
					public hashCode(): number;
					public static meanOf(values: native.Array<number>): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module math {
				export class StatsAccumulator extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.math.StatsAccumulator>;
					public sum(): number;
					public sampleVariance(): number;
					public addAll(values: native.Array<number>): void;
					public add(value: number): void;
					public populationStandardDeviation(): number;
					public count(): number;
					public snapshot(): com.google.common.math.Stats;
					public addAll(values: com.google.common.math.Stats): void;
					public min(): number;
					public addAll(values: java.util.Iterator<any>): void;
					public populationVariance(): number;
					public constructor();
					public mean(): number;
					public sampleStandardDeviation(): number;
					public max(): number;
					public addAll(values: java.lang.Iterable<any>): void;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module net {
				export class HostAndPort extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.net.HostAndPort>;
					public equals(obj: any): boolean;
					public static fromHost(host: string): com.google.common.net.HostAndPort;
					public getPort(): number;
					public withDefaultPort(defaultPort: number): com.google.common.net.HostAndPort;
					public equals(other: any): boolean;
					public requireBracketsForIPv6(): com.google.common.net.HostAndPort;
					public static fromParts(host: string, port: number): com.google.common.net.HostAndPort;
					public getHost(): string;
					public toString(): string;
					public getPortOrDefault(defaultPort: number): number;
					public static fromString(hostPortString: string): com.google.common.net.HostAndPort;
					public hashCode(): number;
					public hasPort(): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module net {
				export class HostSpecifier extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.net.HostSpecifier>;
					public equals(obj: any): boolean;
					public static fromValid(specifier: string): com.google.common.net.HostSpecifier;
					public toString(): string;
					public equals(other: any): boolean;
					public static isValid(specifier: string): boolean;
					public static from(specifier: string): com.google.common.net.HostSpecifier;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module net {
				export class HttpHeaders extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.net.HttpHeaders>;
					public static ACCEPT: string;
					public static ACCEPT_CHARSET: string;
					public static ACCEPT_ENCODING: string;
					public static ACCEPT_LANGUAGE: string;
					public static ACCEPT_RANGES: string;
					public static ACCESS_CONTROL_ALLOW_CREDENTIALS: string;
					public static ACCESS_CONTROL_ALLOW_HEADERS: string;
					public static ACCESS_CONTROL_ALLOW_METHODS: string;
					public static ACCESS_CONTROL_ALLOW_ORIGIN: string;
					public static ACCESS_CONTROL_EXPOSE_HEADERS: string;
					public static ACCESS_CONTROL_MAX_AGE: string;
					public static ACCESS_CONTROL_REQUEST_HEADERS: string;
					public static ACCESS_CONTROL_REQUEST_METHOD: string;
					public static AGE: string;
					public static ALLOW: string;
					public static AUTHORIZATION: string;
					public static CACHE_CONTROL: string;
					public static CONNECTION: string;
					public static CONTENT_DISPOSITION: string;
					public static CONTENT_ENCODING: string;
					public static CONTENT_LANGUAGE: string;
					public static CONTENT_LENGTH: string;
					public static CONTENT_LOCATION: string;
					public static CONTENT_MD5: string;
					public static CONTENT_RANGE: string;
					public static CONTENT_SECURITY_POLICY: string;
					public static CONTENT_SECURITY_POLICY_REPORT_ONLY: string;
					public static CONTENT_TYPE: string;
					public static COOKIE: string;
					public static DATE: string;
					public static DNT: string;
					public static EARLY_DATA: string;
					public static ETAG: string;
					public static EXPECT: string;
					public static EXPIRES: string;
					public static FOLLOW_ONLY_WHEN_PRERENDER_SHOWN: string;
					public static FORWARDED: string;
					public static FROM: string;
					public static HOST: string;
					public static HTTP2_SETTINGS: string;
					public static IF_MATCH: string;
					public static IF_MODIFIED_SINCE: string;
					public static IF_NONE_MATCH: string;
					public static IF_RANGE: string;
					public static IF_UNMODIFIED_SINCE: string;
					public static LAST_EVENT_ID: string;
					public static LAST_MODIFIED: string;
					public static LINK: string;
					public static LOCATION: string;
					public static MAX_FORWARDS: string;
					public static ORIGIN: string;
					public static ORIGIN_TRIAL: string;
					public static P3P: string;
					public static PING_FROM: string;
					public static PING_TO: string;
					public static PRAGMA: string;
					public static PROXY_AUTHENTICATE: string;
					public static PROXY_AUTHORIZATION: string;
					public static PUBLIC_KEY_PINS: string;
					public static PUBLIC_KEY_PINS_REPORT_ONLY: string;
					public static RANGE: string;
					public static REFERER: string;
					public static REFERRER_POLICY: string;
					public static REFRESH: string;
					public static REPORT_TO: string;
					public static RETRY_AFTER: string;
					public static SEC_FETCH_DEST: string;
					public static SEC_FETCH_MODE: string;
					public static SEC_FETCH_SITE: string;
					public static SEC_FETCH_USER: string;
					public static SEC_METADATA: string;
					public static SEC_PROVIDED_TOKEN_BINDING_ID: string;
					public static SEC_REFERRED_TOKEN_BINDING_ID: string;
					public static SEC_TOKEN_BINDING: string;
					public static SERVER: string;
					public static SERVER_TIMING: string;
					public static SERVICE_WORKER: string;
					public static SERVICE_WORKER_ALLOWED: string;
					public static SET_COOKIE: string;
					public static SET_COOKIE2: string;
					public static SOURCE_MAP: string;
					public static STRICT_TRANSPORT_SECURITY: string;
					public static TE: string;
					public static TIMING_ALLOW_ORIGIN: string;
					public static TRAILER: string;
					public static TRANSFER_ENCODING: string;
					public static UPGRADE: string;
					public static USER_AGENT: string;
					public static VARY: string;
					public static VIA: string;
					public static WARNING: string;
					public static WWW_AUTHENTICATE: string;
					public static X_CONTENT_SECURITY_POLICY: string;
					public static X_CONTENT_SECURITY_POLICY_REPORT_ONLY: string;
					public static X_CONTENT_TYPE_OPTIONS: string;
					public static X_DNS_PREFETCH_CONTROL: string;
					public static X_DOWNLOAD_OPTIONS: string;
					public static X_DO_NOT_TRACK: string;
					public static X_FORWARDED_FOR: string;
					public static X_FORWARDED_HOST: string;
					public static X_FORWARDED_PORT: string;
					public static X_FORWARDED_PROTO: string;
					public static X_FRAME_OPTIONS: string;
					public static X_POWERED_BY: string;
					public static X_REQUESTED_WITH: string;
					public static X_USER_IP: string;
					public static X_WEBKIT_CSP: string;
					public static X_WEBKIT_CSP_REPORT_ONLY: string;
					public static X_XSS_PROTECTION: string;
				}
				export module HttpHeaders {
					export class ReferrerPolicyValues extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.net.HttpHeaders.ReferrerPolicyValues>;
						public static NO_REFERRER: string;
						public static NO_REFFERER_WHEN_DOWNGRADE: string;
						public static ORIGIN: string;
						public static ORIGIN_WHEN_CROSS_ORIGIN: string;
						public static SAME_ORIGIN: string;
						public static STRICT_ORIGIN: string;
						public static STRICT_ORIGIN_WHEN_CROSS_ORIGIN: string;
						public static UNSAFE_URL: string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module net {
				export class InetAddresses extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.net.InetAddresses>;
					public static getCoercedIPv4Address(ip: java.net.InetAddress): java.net.Inet4Address;
					public static isMappedIPv4Address(ipString: string): boolean;
					public static getCompatIPv4Address(ip: java.net.Inet6Address): java.net.Inet4Address;
					public static is6to4Address(ip: java.net.Inet6Address): boolean;
					public static coerceToInteger(ip: java.net.InetAddress): number;
					public static toUriString(ip: java.net.InetAddress): string;
					public static forString(ipString: string): java.net.InetAddress;
					public static getIsatapIPv4Address(ip: java.net.Inet6Address): java.net.Inet4Address;
					public static isInetAddress(ipString: string): boolean;
					public static fromInteger(address: number): java.net.Inet4Address;
					public static get6to4IPv4Address(ip: java.net.Inet6Address): java.net.Inet4Address;
					public static increment(address: java.net.InetAddress): java.net.InetAddress;
					public static isCompatIPv4Address(ip: java.net.Inet6Address): boolean;
					public static getTeredoInfo(ip: java.net.Inet6Address): com.google.common.net.InetAddresses.TeredoInfo;
					public static isUriInetAddress(ipString: string): boolean;
					public static decrement(address: java.net.InetAddress): java.net.InetAddress;
					public static toAddrString(ip: java.net.InetAddress): string;
					public static fromLittleEndianByteArray(addr: native.Array<number>): java.net.InetAddress;
					public static forUriString(hostAddr: string): java.net.InetAddress;
					public static isTeredoAddress(ip: java.net.Inet6Address): boolean;
					public static getEmbeddedIPv4ClientAddress(ip: java.net.Inet6Address): java.net.Inet4Address;
					public static hasEmbeddedIPv4ClientAddress(ip: java.net.Inet6Address): boolean;
					public static isIsatapAddress(ip: java.net.Inet6Address): boolean;
					public static isMaximum(address: java.net.InetAddress): boolean;
				}
				export module InetAddresses {
					export class TeredoInfo extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.net.InetAddresses.TeredoInfo>;
						public getServer(): java.net.Inet4Address;
						public getPort(): number;
						public getFlags(): number;
						public constructor(server: java.net.Inet4Address, client: java.net.Inet4Address, port: number, flags: number);
						public getClient(): java.net.Inet4Address;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module net {
				export class InternetDomainName extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.net.InternetDomainName>;
					public equals(obj: any): boolean;
					public static from(domain: string): com.google.common.net.InternetDomainName;
					public isRegistrySuffix(): boolean;
					public parts(): com.google.common.collect.ImmutableList<string>;
					public hasParent(): boolean;
					public isPublicSuffix(): boolean;
					public isTopDomainUnderRegistrySuffix(): boolean;
					public registrySuffix(): com.google.common.net.InternetDomainName;
					public child(leftParts: string): com.google.common.net.InternetDomainName;
					public equals(object: any): boolean;
					public static isValid(name: string): boolean;
					public toString(): string;
					public hasPublicSuffix(): boolean;
					public isUnderPublicSuffix(): boolean;
					public hasRegistrySuffix(): boolean;
					public topPrivateDomain(): com.google.common.net.InternetDomainName;
					public isTopPrivateDomain(): boolean;
					public isUnderRegistrySuffix(): boolean;
					public topDomainUnderRegistrySuffix(): com.google.common.net.InternetDomainName;
					public publicSuffix(): com.google.common.net.InternetDomainName;
					public hashCode(): number;
					public parent(): com.google.common.net.InternetDomainName;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module net {
				export class MediaType extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.net.MediaType>;
					public static AAC_AUDIO: com.google.common.net.MediaType;
					public static ANY_APPLICATION_TYPE: com.google.common.net.MediaType;
					public static ANY_AUDIO_TYPE: com.google.common.net.MediaType;
					public static ANY_IMAGE_TYPE: com.google.common.net.MediaType;
					public static ANY_TEXT_TYPE: com.google.common.net.MediaType;
					public static ANY_TYPE: com.google.common.net.MediaType;
					public static ANY_VIDEO_TYPE: com.google.common.net.MediaType;
					public static APPLE_MOBILE_CONFIG: com.google.common.net.MediaType;
					public static APPLE_PASSBOOK: com.google.common.net.MediaType;
					public static APPLICATION_BINARY: com.google.common.net.MediaType;
					public static APPLICATION_XML_UTF_8: com.google.common.net.MediaType;
					public static ATOM_UTF_8: com.google.common.net.MediaType;
					public static BASIC_AUDIO: com.google.common.net.MediaType;
					public static BMP: com.google.common.net.MediaType;
					public static BZIP2: com.google.common.net.MediaType;
					public static CACHE_MANIFEST_UTF_8: com.google.common.net.MediaType;
					public static CRW: com.google.common.net.MediaType;
					public static CSS_UTF_8: com.google.common.net.MediaType;
					public static CSV_UTF_8: com.google.common.net.MediaType;
					public static DART_UTF_8: com.google.common.net.MediaType;
					public static EOT: com.google.common.net.MediaType;
					public static EPUB: com.google.common.net.MediaType;
					public static FLV_VIDEO: com.google.common.net.MediaType;
					public static FORM_DATA: com.google.common.net.MediaType;
					public static GIF: com.google.common.net.MediaType;
					public static GZIP: com.google.common.net.MediaType;
					public static HAL_JSON: com.google.common.net.MediaType;
					public static HTML_UTF_8: com.google.common.net.MediaType;
					public static ICO: com.google.common.net.MediaType;
					public static I_CALENDAR_UTF_8: com.google.common.net.MediaType;
					public static JAVASCRIPT_UTF_8: com.google.common.net.MediaType;
					public static JOSE: com.google.common.net.MediaType;
					public static JOSE_JSON: com.google.common.net.MediaType;
					public static JPEG: com.google.common.net.MediaType;
					public static JSON_UTF_8: com.google.common.net.MediaType;
					public static KEY_ARCHIVE: com.google.common.net.MediaType;
					public static KML: com.google.common.net.MediaType;
					public static KMZ: com.google.common.net.MediaType;
					public static L16_AUDIO: com.google.common.net.MediaType;
					public static L24_AUDIO: com.google.common.net.MediaType;
					public static MANIFEST_JSON_UTF_8: com.google.common.net.MediaType;
					public static MBOX: com.google.common.net.MediaType;
					public static MICROSOFT_EXCEL: com.google.common.net.MediaType;
					public static MICROSOFT_OUTLOOK: com.google.common.net.MediaType;
					public static MICROSOFT_POWERPOINT: com.google.common.net.MediaType;
					public static MICROSOFT_WORD: com.google.common.net.MediaType;
					public static MP4_AUDIO: com.google.common.net.MediaType;
					public static MP4_VIDEO: com.google.common.net.MediaType;
					public static MPEG_AUDIO: com.google.common.net.MediaType;
					public static MPEG_VIDEO: com.google.common.net.MediaType;
					public static NACL_APPLICATION: com.google.common.net.MediaType;
					public static NACL_PORTABLE_APPLICATION: com.google.common.net.MediaType;
					public static OCTET_STREAM: com.google.common.net.MediaType;
					public static OGG_AUDIO: com.google.common.net.MediaType;
					public static OGG_CONTAINER: com.google.common.net.MediaType;
					public static OGG_VIDEO: com.google.common.net.MediaType;
					public static OOXML_DOCUMENT: com.google.common.net.MediaType;
					public static OOXML_PRESENTATION: com.google.common.net.MediaType;
					public static OOXML_SHEET: com.google.common.net.MediaType;
					public static OPENDOCUMENT_GRAPHICS: com.google.common.net.MediaType;
					public static OPENDOCUMENT_PRESENTATION: com.google.common.net.MediaType;
					public static OPENDOCUMENT_SPREADSHEET: com.google.common.net.MediaType;
					public static OPENDOCUMENT_TEXT: com.google.common.net.MediaType;
					public static PDF: com.google.common.net.MediaType;
					public static PLAIN_TEXT_UTF_8: com.google.common.net.MediaType;
					public static PNG: com.google.common.net.MediaType;
					public static POSTSCRIPT: com.google.common.net.MediaType;
					public static PROTOBUF: com.google.common.net.MediaType;
					public static PSD: com.google.common.net.MediaType;
					public static QUICKTIME: com.google.common.net.MediaType;
					public static RDF_XML_UTF_8: com.google.common.net.MediaType;
					public static RTF_UTF_8: com.google.common.net.MediaType;
					public static SFNT: com.google.common.net.MediaType;
					public static SHOCKWAVE_FLASH: com.google.common.net.MediaType;
					public static SKETCHUP: com.google.common.net.MediaType;
					public static SOAP_XML_UTF_8: com.google.common.net.MediaType;
					public static SVG_UTF_8: com.google.common.net.MediaType;
					public static TAR: com.google.common.net.MediaType;
					public static TEXT_JAVASCRIPT_UTF_8: com.google.common.net.MediaType;
					public static THREE_GPP2_VIDEO: com.google.common.net.MediaType;
					public static THREE_GPP_VIDEO: com.google.common.net.MediaType;
					public static TIFF: com.google.common.net.MediaType;
					public static TSV_UTF_8: com.google.common.net.MediaType;
					public static VCARD_UTF_8: com.google.common.net.MediaType;
					public static VND_REAL_AUDIO: com.google.common.net.MediaType;
					public static VND_WAVE_AUDIO: com.google.common.net.MediaType;
					public static VORBIS_AUDIO: com.google.common.net.MediaType;
					public static VTT_UTF_8: com.google.common.net.MediaType;
					public static WASM_APPLICATION: com.google.common.net.MediaType;
					public static WAX_AUDIO: com.google.common.net.MediaType;
					public static WEBM_AUDIO: com.google.common.net.MediaType;
					public static WEBM_VIDEO: com.google.common.net.MediaType;
					public static WEBP: com.google.common.net.MediaType;
					public static WMA_AUDIO: com.google.common.net.MediaType;
					public static WML_UTF_8: com.google.common.net.MediaType;
					public static WMV: com.google.common.net.MediaType;
					public static WOFF: com.google.common.net.MediaType;
					public static WOFF2: com.google.common.net.MediaType;
					public static XHTML_UTF_8: com.google.common.net.MediaType;
					public static XML_UTF_8: com.google.common.net.MediaType;
					public static XRD_UTF_8: com.google.common.net.MediaType;
					public static ZIP: com.google.common.net.MediaType;
					public charset(): com.google.common.base.Optional<java.nio.charset.Charset>;
					public withoutParameters(): com.google.common.net.MediaType;
					public withParameters(parameters: com.google.common.collect.Multimap<string,string>): com.google.common.net.MediaType;
					public equals(obj: any): boolean;
					public is(mediaTypeRange: com.google.common.net.MediaType): boolean;
					public subtype(): string;
					public static create(type: string, subtype: string): com.google.common.net.MediaType;
					public hasWildcard(): boolean;
					public parameters(): com.google.common.collect.ImmutableListMultimap<string,string>;
					public toString(): string;
					public withParameter(attribute: string, value: string): com.google.common.net.MediaType;
					public static parse(input: string): com.google.common.net.MediaType;
					public withParameters(attribute: string, values: java.lang.Iterable<string>): com.google.common.net.MediaType;
					public withCharset(charset: java.nio.charset.Charset): com.google.common.net.MediaType;
					public hashCode(): number;
					public type(): string;
				}
				export module MediaType {
					export class Tokenizer extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.net.MediaType.Tokenizer>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module net {
				export class PercentEscaper extends com.google.common.escape.UnicodeEscaper {
					public static class: java.lang.Class<com.google.common.net.PercentEscaper>;
					public escape(s: string): string;
					public nextEscapeIndex(csq: string, index: number, end: number): number;
					public constructor();
					public nextEscapeIndex(csq: string, start: number, end: number): number;
					public escape(string: string): string;
					public escape(cp: number): native.Array<string>;
					public constructor(safeChars: string, plusForSpace: boolean);
					public escape(int0: number): native.Array<string>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module net {
				export class UrlEscapers extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.net.UrlEscapers>;
					public static urlFormParameterEscaper(): com.google.common.escape.Escaper;
					public static urlPathSegmentEscaper(): com.google.common.escape.Escaper;
					public static urlFragmentEscaper(): com.google.common.escape.Escaper;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Booleans extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Booleans>;
					public static indexOf(array: native.Array<boolean>, target: boolean): number;
					public static reverse(array: native.Array<boolean>): void;
					public static toArray(collection: java.util.Collection<java.lang.Boolean>): native.Array<boolean>;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<boolean>>;
					public static concat(arrays: native.Array<native.Array<boolean>>): native.Array<boolean>;
					public static falseFirst(): java.util.Comparator<java.lang.Boolean>;
					public static compare(a: boolean, b: boolean): number;
					public static lastIndexOf(array: native.Array<boolean>, target: boolean): number;
					public static hashCode(value: boolean): number;
					public static reverse(array: native.Array<boolean>, fromIndex: number, toIndex: number): void;
					public static countTrue(values: native.Array<boolean>): number;
					public static asList(backingArray: native.Array<boolean>): java.util.List<java.lang.Boolean>;
					public static join(separator: string, array: native.Array<boolean>): string;
					public static indexOf(array: native.Array<boolean>, target: native.Array<boolean>): number;
					public static ensureCapacity(array: native.Array<boolean>, minLength: number, padding: number): native.Array<boolean>;
					public static contains(array: native.Array<boolean>, target: boolean): boolean;
					public static trueFirst(): java.util.Comparator<java.lang.Boolean>;
					public hashCode(): number;
				}
				export module Booleans {
					export class BooleanArrayAsList extends java.util.AbstractList<java.lang.Boolean> {
						public static class: java.lang.Class<com.google.common.primitives.Booleans.BooleanArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Boolean>;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: java.lang.Boolean): java.lang.Boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public get(index: number): java.lang.Boolean;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class BooleanComparator extends java.util.Comparator<java.lang.Boolean> {
						public static class: java.lang.Class<com.google.common.primitives.Booleans.BooleanComparator>;
						public static FALSE_FIRST: com.google.common.primitives.Booleans.BooleanComparator;
						public static TRUE_FIRST: com.google.common.primitives.Booleans.BooleanComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static valueOf(name: string): com.google.common.primitives.Booleans.BooleanComparator;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static naturalOrder(): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.Booleans.BooleanComparator>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public compare(a: java.lang.Boolean, b: java.lang.Boolean): number;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
					export class LexicographicalComparator extends java.util.Comparator<native.Array<boolean>> {
						public static class: java.lang.Class<com.google.common.primitives.Booleans.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.Booleans.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.Booleans.LexicographicalComparator>;
						public static valueOf(name: string): com.google.common.primitives.Booleans.LexicographicalComparator;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public compare(left: native.Array<boolean>, right: native.Array<boolean>): number;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Bytes extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Bytes>;
					public static asList(backingArray: native.Array<number>): java.util.List<java.lang.Byte>;
					public static indexOf(array: native.Array<number>, target: number): number;
					public static indexOf(array: native.Array<number>, target: native.Array<number>): number;
					public static ensureCapacity(array: native.Array<number>, minLength: number, padding: number): native.Array<number>;
					public static reverse(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static toArray(collection: java.util.Collection<any>): native.Array<number>;
					public static hashCode(value: number): number;
					public static lastIndexOf(array: native.Array<number>, target: number): number;
					public static contains(array: native.Array<number>, target: number): boolean;
					public static reverse(array: native.Array<number>): void;
					public static concat(arrays: native.Array<native.Array<number>>): native.Array<number>;
					public hashCode(): number;
				}
				export module Bytes {
					export class ByteArrayAsList extends java.util.AbstractList<java.lang.Byte> {
						public static class: java.lang.Class<com.google.common.primitives.Bytes.ByteArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public get(index: number): java.lang.Byte;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public set(index: number, element: java.lang.Byte): java.lang.Byte;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Byte>;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Chars extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Chars>;
					public static BYTES: number;
					public static indexOf(array: native.Array<string>, target: string): number;
					public static max(array: native.Array<string>): string;
					public static concat(arrays: native.Array<native.Array<string>>): native.Array<string>;
					public static contains(array: native.Array<string>, target: string): boolean;
					public static sortDescending(array: native.Array<string>, fromIndex: number, toIndex: number): void;
					public static lastIndexOf(array: native.Array<string>, target: string): number;
					public static hashCode(value: string): number;
					public static fromBytes(b1: number, b2: number): string;
					public static asList(backingArray: native.Array<string>): java.util.List<java.lang.Character>;
					public hashCode(): number;
					public static join(separator: string, array: native.Array<string>): string;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<string>>;
					public static min(array: native.Array<string>): string;
					public static reverse(array: native.Array<string>): void;
					public static toArray(collection: java.util.Collection<java.lang.Character>): native.Array<string>;
					public static ensureCapacity(array: native.Array<string>, minLength: number, padding: number): native.Array<string>;
					public static constrainToRange(value: string, min: string, max: string): string;
					public static reverse(array: native.Array<string>, fromIndex: number, toIndex: number): void;
					public static indexOf(array: native.Array<string>, target: native.Array<string>): number;
					public static saturatedCast(value: number): string;
					public static checkedCast(value: number): string;
					public static toByteArray(value: string): native.Array<number>;
					public static fromByteArray(bytes: native.Array<number>): string;
					public static compare(a: string, b: string): number;
					public static sortDescending(array: native.Array<string>): void;
				}
				export module Chars {
					export class CharArrayAsList extends java.util.AbstractList<java.lang.Character> {
						public static class: java.lang.Class<com.google.common.primitives.Chars.CharArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Character>;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public set(index: number, element: java.lang.Character): java.lang.Character;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public get(index: number): java.lang.Character;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class LexicographicalComparator extends java.util.Comparator<native.Array<string>> {
						public static class: java.lang.Class<com.google.common.primitives.Chars.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.Chars.LexicographicalComparator;
						public static valueOf(name: string): com.google.common.primitives.Chars.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.Chars.LexicographicalComparator>;
						public compare(left: native.Array<string>, right: native.Array<string>): number;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Doubles extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Doubles>;
					public static BYTES: number;
					public static isFinite(value: number): boolean;
					public static min(array: native.Array<number>): number;
					public static compare(a: number, b: number): number;
					public static join(separator: string, array: native.Array<number>): string;
					public static constrainToRange(value: number, min: number, max: number): number;
					public static contains(array: native.Array<number>, target: number): boolean;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static asList(backingArray: native.Array<number>): java.util.List<java.lang.Double>;
					public static indexOf(array: native.Array<number>, target: number): number;
					public static max(array: native.Array<number>): number;
					public static indexOf(array: native.Array<number>, target: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static ensureCapacity(array: native.Array<number>, minLength: number, padding: number): native.Array<number>;
					public static reverse(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static toArray(collection: java.util.Collection<any>): native.Array<number>;
					public static tryParse(string: string): java.lang.Double;
					public static hashCode(value: number): number;
					public static lastIndexOf(array: native.Array<number>, target: number): number;
					public static reverse(array: native.Array<number>): void;
					public static concat(arrays: native.Array<native.Array<number>>): native.Array<number>;
					public hashCode(): number;
					public static stringConverter(): com.google.common.base.Converter<string,java.lang.Double>;
				}
				export module Doubles {
					export class DoubleArrayAsList extends java.util.AbstractList<java.lang.Double> {
						public static class: java.lang.Class<com.google.common.primitives.Doubles.DoubleArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public set(index: number, element: java.lang.Double): java.lang.Double;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Double>;
						public get(index: number): java.lang.Double;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class DoubleConverter extends com.google.common.base.Converter<string,java.lang.Double> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.primitives.Doubles.DoubleConverter>;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						public doBackward(value: java.lang.Double): string;
						/** @deprecated */
						public apply(a: any): any;
						public doForward(value: string): java.lang.Double;
						public apply(a: any): any;
						public toString(): string;
						public equals(object: any): boolean;
					}
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.Doubles.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.Doubles.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static valueOf(name: string): com.google.common.primitives.Doubles.LexicographicalComparator;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.Doubles.LexicographicalComparator>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Floats extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Floats>;
					public static BYTES: number;
					public static isFinite(value: number): boolean;
					public static min(array: native.Array<number>): number;
					public static tryParse(string: string): java.lang.Float;
					public static compare(a: number, b: number): number;
					public static join(separator: string, array: native.Array<number>): string;
					public static constrainToRange(value: number, min: number, max: number): number;
					public static contains(array: native.Array<number>, target: number): boolean;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static indexOf(array: native.Array<number>, target: number): number;
					public static asList(backingArray: native.Array<number>): java.util.List<java.lang.Float>;
					public static max(array: native.Array<number>): number;
					public static indexOf(array: native.Array<number>, target: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static ensureCapacity(array: native.Array<number>, minLength: number, padding: number): native.Array<number>;
					public static reverse(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static toArray(collection: java.util.Collection<any>): native.Array<number>;
					public static hashCode(value: number): number;
					public static lastIndexOf(array: native.Array<number>, target: number): number;
					public static reverse(array: native.Array<number>): void;
					public static stringConverter(): com.google.common.base.Converter<string,java.lang.Float>;
					public static concat(arrays: native.Array<native.Array<number>>): native.Array<number>;
					public hashCode(): number;
				}
				export module Floats {
					export class FloatArrayAsList extends java.util.AbstractList<java.lang.Float> {
						public static class: java.lang.Class<com.google.common.primitives.Floats.FloatArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public get(index: number): java.lang.Float;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Float>;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public set(index: number, element: java.lang.Float): java.lang.Float;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class FloatConverter extends com.google.common.base.Converter<string,java.lang.Float> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.primitives.Floats.FloatConverter>;
						public doForward(object0: any): any;
						public doForward(value: string): java.lang.Float;
						public doBackward(object0: any): any;
						/** @deprecated */
						public apply(a: any): any;
						public doBackward(value: java.lang.Float): string;
						public apply(a: any): any;
						public toString(): string;
						public equals(object: any): boolean;
					}
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.Floats.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.Floats.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.Floats.LexicographicalComparator>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public static valueOf(name: string): com.google.common.primitives.Floats.LexicographicalComparator;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class ImmutableDoubleArray extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.primitives.ImmutableDoubleArray>;
					public get(index: number): number;
					public lastIndexOf(target: number): number;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public toArray(): native.Array<number>;
					public indexOf(target: number): number;
					public static of(): com.google.common.primitives.ImmutableDoubleArray;
					public trimmed(): com.google.common.primitives.ImmutableDoubleArray;
					public static copyOf(values: java.lang.Iterable<java.lang.Double>): com.google.common.primitives.ImmutableDoubleArray;
					public static of(first: number, rest: native.Array<number>): com.google.common.primitives.ImmutableDoubleArray;
					public equals(object: any): boolean;
					public toString(): string;
					public static builder(initialCapacity: number): com.google.common.primitives.ImmutableDoubleArray.Builder;
					public static of(e0: number): com.google.common.primitives.ImmutableDoubleArray;
					public contains(target: number): boolean;
					public hashCode(): number;
					public static builder(): com.google.common.primitives.ImmutableDoubleArray.Builder;
					public asList(): java.util.List<java.lang.Double>;
					public static of(e0: number, e1: number, e2: number): com.google.common.primitives.ImmutableDoubleArray;
					public static of(e0: number, e1: number, e2: number, e3: number, e4: number): com.google.common.primitives.ImmutableDoubleArray;
					public subArray(startIndex: number, endIndex: number): com.google.common.primitives.ImmutableDoubleArray;
					public length(): number;
					public static of(e0: number, e1: number, e2: number, e3: number, e4: number, e5: number): com.google.common.primitives.ImmutableDoubleArray;
					public static copyOf(values: native.Array<number>): com.google.common.primitives.ImmutableDoubleArray;
					public static copyOf(values: java.util.Collection<java.lang.Double>): com.google.common.primitives.ImmutableDoubleArray;
					public static of(e0: number, e1: number, e2: number, e3: number): com.google.common.primitives.ImmutableDoubleArray;
					public static of(e0: number, e1: number): com.google.common.primitives.ImmutableDoubleArray;
				}
				export module ImmutableDoubleArray {
					export class AsList extends java.util.AbstractList<java.lang.Double> {
						public static class: java.lang.Class<com.google.common.primitives.ImmutableDoubleArray.AsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Double>;
						public get(index: number): java.lang.Double;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.primitives.ImmutableDoubleArray.Builder>;
						public addAll(values: java.lang.Iterable<java.lang.Double>): com.google.common.primitives.ImmutableDoubleArray.Builder;
						public addAll(values: com.google.common.primitives.ImmutableDoubleArray): com.google.common.primitives.ImmutableDoubleArray.Builder;
						public build(): com.google.common.primitives.ImmutableDoubleArray;
						public addAll(values: java.util.Collection<java.lang.Double>): com.google.common.primitives.ImmutableDoubleArray.Builder;
						public addAll(values: native.Array<number>): com.google.common.primitives.ImmutableDoubleArray.Builder;
						public add(value: number): com.google.common.primitives.ImmutableDoubleArray.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class ImmutableIntArray extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.primitives.ImmutableIntArray>;
					public get(index: number): number;
					public lastIndexOf(target: number): number;
					public subArray(startIndex: number, endIndex: number): com.google.common.primitives.ImmutableIntArray;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public toArray(): native.Array<number>;
					public static of(e0: number): com.google.common.primitives.ImmutableIntArray;
					public indexOf(target: number): number;
					public asList(): java.util.List<java.lang.Integer>;
					public trimmed(): com.google.common.primitives.ImmutableIntArray;
					public static builder(): com.google.common.primitives.ImmutableIntArray.Builder;
					public equals(object: any): boolean;
					public toString(): string;
					public static of(): com.google.common.primitives.ImmutableIntArray;
					public static builder(initialCapacity: number): com.google.common.primitives.ImmutableIntArray.Builder;
					public contains(target: number): boolean;
					public hashCode(): number;
					public static of(e0: number, e1: number, e2: number, e3: number): com.google.common.primitives.ImmutableIntArray;
					public static copyOf(values: java.lang.Iterable<java.lang.Integer>): com.google.common.primitives.ImmutableIntArray;
					public static of(e0: number, e1: number, e2: number, e3: number, e4: number, e5: number): com.google.common.primitives.ImmutableIntArray;
					public static of(e0: number, e1: number, e2: number, e3: number, e4: number): com.google.common.primitives.ImmutableIntArray;
					public static of(e0: number, e1: number, e2: number): com.google.common.primitives.ImmutableIntArray;
					public length(): number;
					public static of(e0: number, e1: number): com.google.common.primitives.ImmutableIntArray;
					public static copyOf(values: native.Array<number>): com.google.common.primitives.ImmutableIntArray;
					public static of(first: number, rest: native.Array<number>): com.google.common.primitives.ImmutableIntArray;
					public static copyOf(values: java.util.Collection<java.lang.Integer>): com.google.common.primitives.ImmutableIntArray;
				}
				export module ImmutableIntArray {
					export class AsList extends java.util.AbstractList<java.lang.Integer> {
						public static class: java.lang.Class<com.google.common.primitives.ImmutableIntArray.AsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public get(index: number): java.lang.Integer;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Integer>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.primitives.ImmutableIntArray.Builder>;
						public addAll(values: native.Array<number>): com.google.common.primitives.ImmutableIntArray.Builder;
						public add(value: number): com.google.common.primitives.ImmutableIntArray.Builder;
						public addAll(values: java.lang.Iterable<java.lang.Integer>): com.google.common.primitives.ImmutableIntArray.Builder;
						public addAll(values: java.util.Collection<java.lang.Integer>): com.google.common.primitives.ImmutableIntArray.Builder;
						public build(): com.google.common.primitives.ImmutableIntArray;
						public addAll(values: com.google.common.primitives.ImmutableIntArray): com.google.common.primitives.ImmutableIntArray.Builder;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class ImmutableLongArray extends java.lang.Object implements java.io.Serializable {
					public static class: java.lang.Class<com.google.common.primitives.ImmutableLongArray>;
					public get(index: number): number;
					public lastIndexOf(target: number): number;
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public static of(): com.google.common.primitives.ImmutableLongArray;
					public toArray(): native.Array<number>;
					public trimmed(): com.google.common.primitives.ImmutableLongArray;
					public static builder(): com.google.common.primitives.ImmutableLongArray.Builder;
					public indexOf(target: number): number;
					public static of(first: number, rest: native.Array<number>): com.google.common.primitives.ImmutableLongArray;
					public asList(): java.util.List<java.lang.Long>;
					public static copyOf(values: java.util.Collection<java.lang.Long>): com.google.common.primitives.ImmutableLongArray;
					public static of(e0: number, e1: number, e2: number, e3: number, e4: number, e5: number): com.google.common.primitives.ImmutableLongArray;
					public equals(object: any): boolean;
					public subArray(startIndex: number, endIndex: number): com.google.common.primitives.ImmutableLongArray;
					public toString(): string;
					public contains(target: number): boolean;
					public hashCode(): number;
					public static of(e0: number, e1: number, e2: number, e3: number, e4: number): com.google.common.primitives.ImmutableLongArray;
					public static copyOf(values: native.Array<number>): com.google.common.primitives.ImmutableLongArray;
					public static builder(initialCapacity: number): com.google.common.primitives.ImmutableLongArray.Builder;
					public static of(e0: number, e1: number, e2: number): com.google.common.primitives.ImmutableLongArray;
					public static of(e0: number, e1: number, e2: number, e3: number): com.google.common.primitives.ImmutableLongArray;
					public length(): number;
					public static of(e0: number): com.google.common.primitives.ImmutableLongArray;
					public static copyOf(values: java.lang.Iterable<java.lang.Long>): com.google.common.primitives.ImmutableLongArray;
					public static of(e0: number, e1: number): com.google.common.primitives.ImmutableLongArray;
				}
				export module ImmutableLongArray {
					export class AsList extends java.util.AbstractList<java.lang.Long> {
						public static class: java.lang.Class<com.google.common.primitives.ImmutableLongArray.AsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public get(index: number): java.lang.Long;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Long>;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class Builder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.primitives.ImmutableLongArray.Builder>;
						public add(value: number): com.google.common.primitives.ImmutableLongArray.Builder;
						public addAll(values: com.google.common.primitives.ImmutableLongArray): com.google.common.primitives.ImmutableLongArray.Builder;
						public addAll(values: native.Array<number>): com.google.common.primitives.ImmutableLongArray.Builder;
						public addAll(values: java.lang.Iterable<java.lang.Long>): com.google.common.primitives.ImmutableLongArray.Builder;
						public addAll(values: java.util.Collection<java.lang.Long>): com.google.common.primitives.ImmutableLongArray.Builder;
						public build(): com.google.common.primitives.ImmutableLongArray;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Ints extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Ints>;
					public static BYTES: number;
					public static MAX_POWER_OF_TWO: number;
					public static min(array: native.Array<number>): number;
					public static compare(a: number, b: number): number;
					public static asList(backingArray: native.Array<number>): java.util.List<java.lang.Integer>;
					public static contains(array: native.Array<number>, target: number): boolean;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static checkedCast(value: number): number;
					public static indexOf(array: native.Array<number>, target: number): number;
					public static saturatedCast(value: number): number;
					public static reverse(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public hashCode(): number;
					public static fromBytes(b1: number, b2: number, b3: number, b4: number): number;
					public static stringConverter(): com.google.common.base.Converter<string,java.lang.Integer>;
					public static join(separator: string, array: native.Array<number>): string;
					public static constrainToRange(value: number, min: number, max: number): number;
					public static fromByteArray(bytes: native.Array<number>): number;
					public static toByteArray(value: number): native.Array<number>;
					public static max(array: native.Array<number>): number;
					public static indexOf(array: native.Array<number>, target: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static ensureCapacity(array: native.Array<number>, minLength: number, padding: number): native.Array<number>;
					public static tryParse(string: string, radix: number): java.lang.Integer;
					public static toArray(collection: java.util.Collection<any>): native.Array<number>;
					public static tryParse(string: string): java.lang.Integer;
					public static hashCode(value: number): number;
					public static lastIndexOf(array: native.Array<number>, target: number): number;
					public static reverse(array: native.Array<number>): void;
					public static concat(arrays: native.Array<native.Array<number>>): native.Array<number>;
				}
				export module Ints {
					export class IntArrayAsList extends java.util.AbstractList<java.lang.Integer> {
						public static class: java.lang.Class<com.google.common.primitives.Ints.IntArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public get(index: number): java.lang.Integer;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Integer>;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public set(index: number, element: java.lang.Integer): java.lang.Integer;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class IntConverter extends com.google.common.base.Converter<string,java.lang.Integer> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.primitives.Ints.IntConverter>;
						public doBackward(value: java.lang.Integer): string;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						/** @deprecated */
						public apply(a: any): any;
						public doForward(value: string): java.lang.Integer;
						public apply(a: any): any;
						public toString(): string;
						public equals(object: any): boolean;
					}
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.Ints.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.Ints.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.Ints.LexicographicalComparator>;
						public static valueOf(name: string): com.google.common.primitives.Ints.LexicographicalComparator;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Longs extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Longs>;
					public static BYTES: number;
					public static MAX_POWER_OF_TWO: number;
					public static min(array: native.Array<number>): number;
					public static compare(a: number, b: number): number;
					public static contains(array: native.Array<number>, target: number): boolean;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static indexOf(array: native.Array<number>, target: number): number;
					public static stringConverter(): com.google.common.base.Converter<string,java.lang.Long>;
					public static tryParse(string: string): java.lang.Long;
					public static reverse(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public hashCode(): number;
					public static tryParse(string: string, radix: number): java.lang.Long;
					public static asList(backingArray: native.Array<number>): java.util.List<java.lang.Long>;
					public static join(separator: string, array: native.Array<number>): string;
					public static constrainToRange(value: number, min: number, max: number): number;
					public static fromByteArray(bytes: native.Array<number>): number;
					public static fromBytes(b1: number, b2: number, b3: number, b4: number, b5: number, b6: number, b7: number, b8: number): number;
					public static toByteArray(value: number): native.Array<number>;
					public static max(array: native.Array<number>): number;
					public static indexOf(array: native.Array<number>, target: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static ensureCapacity(array: native.Array<number>, minLength: number, padding: number): native.Array<number>;
					public static toArray(collection: java.util.Collection<any>): native.Array<number>;
					public static hashCode(value: number): number;
					public static lastIndexOf(array: native.Array<number>, target: number): number;
					public static reverse(array: native.Array<number>): void;
					public static concat(arrays: native.Array<native.Array<number>>): native.Array<number>;
				}
				export module Longs {
					export class AsciiDigits extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.primitives.Longs.AsciiDigits>;
					}
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.Longs.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.Longs.LexicographicalComparator;
						public static valueOf(name: string): com.google.common.primitives.Longs.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public static values(): native.Array<com.google.common.primitives.Longs.LexicographicalComparator>;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
					export class LongArrayAsList extends java.util.AbstractList<java.lang.Long> {
						public static class: java.lang.Class<com.google.common.primitives.Longs.LongArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public get(index: number): java.lang.Long;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Long>;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public set(index: number, element: java.lang.Long): java.lang.Long;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class LongConverter extends com.google.common.base.Converter<string,java.lang.Long> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.primitives.Longs.LongConverter>;
						public doBackward(value: java.lang.Long): string;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						/** @deprecated */
						public apply(a: any): any;
						public doForward(value: string): java.lang.Long;
						public apply(a: any): any;
						public toString(): string;
						public equals(object: any): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class ParseRequest extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.ParseRequest>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Primitives extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Primitives>;
					public static allWrapperTypes(): java.util.Set<java.lang.Class<any>>;
					public static wrap(type: java.lang.Class<any>): java.lang.Class<any>;
					public static isWrapperType(type: java.lang.Class<any>): boolean;
					public static unwrap(type: java.lang.Class<any>): java.lang.Class<any>;
					public static allPrimitiveTypes(): java.util.Set<java.lang.Class<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class Shorts extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.Shorts>;
					public static BYTES: number;
					public static MAX_POWER_OF_TWO: number;
					public static min(array: native.Array<number>): number;
					public static compare(a: number, b: number): number;
					public static contains(array: native.Array<number>, target: number): boolean;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static checkedCast(value: number): number;
					public static indexOf(array: native.Array<number>, target: number): number;
					public static saturatedCast(value: number): number;
					public static reverse(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public hashCode(): number;
					public static stringConverter(): com.google.common.base.Converter<string,java.lang.Short>;
					public static join(separator: string, array: native.Array<number>): string;
					public static constrainToRange(value: number, min: number, max: number): number;
					public static fromByteArray(bytes: native.Array<number>): number;
					public static fromBytes(b1: number, b2: number): number;
					public static toByteArray(value: number): native.Array<number>;
					public static max(array: native.Array<number>): number;
					public static asList(backingArray: native.Array<number>): java.util.List<java.lang.Short>;
					public static indexOf(array: native.Array<number>, target: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static ensureCapacity(array: native.Array<number>, minLength: number, padding: number): native.Array<number>;
					public static toArray(collection: java.util.Collection<any>): native.Array<number>;
					public static hashCode(value: number): number;
					public static lastIndexOf(array: native.Array<number>, target: number): number;
					public static reverse(array: native.Array<number>): void;
					public static concat(arrays: native.Array<native.Array<number>>): native.Array<number>;
				}
				export module Shorts {
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.Shorts.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.Shorts.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static valueOf(name: string): com.google.common.primitives.Shorts.LexicographicalComparator;
						public compare(object0: any, object1: any): number;
						public static values(): native.Array<com.google.common.primitives.Shorts.LexicographicalComparator>;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
					export class ShortArrayAsList extends java.util.AbstractList<java.lang.Short> {
						public static class: java.lang.Class<com.google.common.primitives.Shorts.ShortArrayAsList>;
						public indexOf(o: any): number;
						public remove(index: number): any;
						public listIterator(): java.util.ListIterator<any>;
						public retainAll(c: java.util.Collection<any>): boolean;
						public iterator(): java.util.Iterator<any>;
						public contains(target: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public get(int0: number): any;
						public hashCode(): number;
						public add(index: number, element: any): void;
						public get(index: number): java.lang.Short;
						public lastIndexOf(o: any): number;
						public removeIf(filter: any /* any*/): boolean;
						public contains(o: any): boolean;
						public removeAll(c: java.util.Collection<any>): boolean;
						public subList(fromIndex: number, toIndex: number): java.util.List<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public equals(o: any): boolean;
						public containsAll(c: java.util.Collection<any>): boolean;
						public size(): number;
						public listIterator(index: number): java.util.ListIterator<any>;
						public indexOf(target: any): number;
						public addAll(c: java.util.Collection<any>): boolean;
						public set(index: number, element: java.lang.Short): java.lang.Short;
						public set(index: number, element: any): any;
						public add(e: any): boolean;
						public remove(o: any): boolean;
						public toArray(a: native.Array<any>): native.Array<any>;
						public parallelStream(): java.util.stream.Stream<any>;
						public subList(fromIndex: number, toIndex: number): java.util.List<java.lang.Short>;
						public toString(): string;
						public replaceAll(operator: any /* any*/): void;
						public lastIndexOf(target: any): number;
						public addAll(index: number, c: java.util.Collection<any>): boolean;
						public sort(c: java.util.Comparator<any>): void;
						public clear(): void;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
					}
					export class ShortConverter extends com.google.common.base.Converter<string,java.lang.Short> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.primitives.Shorts.ShortConverter>;
						public doBackward(value: java.lang.Short): string;
						public doForward(object0: any): any;
						public doBackward(object0: any): any;
						/** @deprecated */
						public apply(a: any): any;
						public apply(a: any): any;
						public toString(): string;
						public equals(object: any): boolean;
						public doForward(value: string): java.lang.Short;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class SignedBytes extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.SignedBytes>;
					public static MAX_POWER_OF_TWO: number;
					public static checkedCast(value: number): number;
					public static max(array: native.Array<number>): number;
					public static min(array: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static saturatedCast(value: number): number;
					public static compare(a: number, b: number): number;
					public static join(separator: string, array: native.Array<number>): string;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
				}
				export module SignedBytes {
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.SignedBytes.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.SignedBytes.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.SignedBytes.LexicographicalComparator>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public static valueOf(name: string): com.google.common.primitives.SignedBytes.LexicographicalComparator;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class UnsignedBytes extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.UnsignedBytes>;
					public static MAX_POWER_OF_TWO: number;
					public static MAX_VALUE: number;
					public static min(array: native.Array<number>): number;
					public static toInt(value: number): number;
					public static compare(a: number, b: number): number;
					public static join(separator: string, array: native.Array<number>): string;
					public static parseUnsignedByte(string: string): number;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static toString(x: number, radix: number): string;
					public static checkedCast(value: number): number;
					public toString(): string;
					public static max(array: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static saturatedCast(value: number): number;
					public static toString(x: number): string;
					public static parseUnsignedByte(string: string, radix: number): number;
					public static sort(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static sort(array: native.Array<number>): void;
				}
				export module UnsignedBytes {
					export class LexicographicalComparatorHolder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder>;
					}
					export module LexicographicalComparatorHolder {
						export class PureJavaComparator extends java.util.Comparator<native.Array<number>> {
							public static class: java.lang.Class<com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.PureJavaComparator>;
							public static INSTANCE: com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.PureJavaComparator;
							public static values(): native.Array<com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.PureJavaComparator>;
							public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public compare(left: native.Array<number>, right: native.Array<number>): number;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public toString(): string;
							public static naturalOrder(): java.util.Comparator<any>;
							public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
							public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static valueOf(name: string): com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.PureJavaComparator;
							public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public reversed(): java.util.Comparator<any>;
							public equals(other: any): boolean;
							public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public compare(object0: any, object1: any): number;
							public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static reverseOrder(): java.util.Comparator<any>;
						}
						export class UnsafeComparator extends java.util.Comparator<native.Array<number>> {
							public static class: java.lang.Class<com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.UnsafeComparator>;
							public static INSTANCE: com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.UnsafeComparator;
							public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public compare(left: native.Array<number>, right: native.Array<number>): number;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public toString(): string;
							public static naturalOrder(): java.util.Comparator<any>;
							public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
							public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public reversed(): java.util.Comparator<any>;
							public static valueOf(name: string): com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.UnsafeComparator;
							public equals(other: any): boolean;
							public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public compare(object0: any, object1: any): number;
							public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public static values(): native.Array<com.google.common.primitives.UnsignedBytes.LexicographicalComparatorHolder.UnsafeComparator>;
							public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static reverseOrder(): java.util.Comparator<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class UnsignedInteger extends java.lang.Number implements java.lang.Comparable<com.google.common.primitives.UnsignedInteger>  {
					public static class: java.lang.Class<com.google.common.primitives.UnsignedInteger>;
					public static MAX_VALUE: com.google.common.primitives.UnsignedInteger;
					public static ONE: com.google.common.primitives.UnsignedInteger;
					public static ZERO: com.google.common.primitives.UnsignedInteger;
					public equals(obj: any): boolean;
					public doubleValue(): number;
					public plus(val: com.google.common.primitives.UnsignedInteger): com.google.common.primitives.UnsignedInteger;
					public static valueOf(value: java.math.BigInteger): com.google.common.primitives.UnsignedInteger;
					public floatValue(): number;
					public bigIntegerValue(): java.math.BigInteger;
					public static valueOf(value: number): com.google.common.primitives.UnsignedInteger;
					public minus(val: com.google.common.primitives.UnsignedInteger): com.google.common.primitives.UnsignedInteger;
					public dividedBy(val: com.google.common.primitives.UnsignedInteger): com.google.common.primitives.UnsignedInteger;
					public intValue(): number;
					public times(val: com.google.common.primitives.UnsignedInteger): com.google.common.primitives.UnsignedInteger;
					public static fromIntBits(bits: number): com.google.common.primitives.UnsignedInteger;
					public toString(): string;
					public mod(val: com.google.common.primitives.UnsignedInteger): com.google.common.primitives.UnsignedInteger;
					public static valueOf(string: string): com.google.common.primitives.UnsignedInteger;
					public compareTo(other: com.google.common.primitives.UnsignedInteger): number;
					public longValue(): number;
					public hashCode(): number;
					public static valueOf(string: string, radix: number): com.google.common.primitives.UnsignedInteger;
					public toString(radix: number): string;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class UnsignedInts extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.UnsignedInts>;
					public static parseUnsignedInt(string: string, radix: number): number;
					public static parseUnsignedInt(s: string): number;
					public static min(array: native.Array<number>): number;
					public static compare(a: number, b: number): number;
					public static join(separator: string, array: native.Array<number>): string;
					public static toLong(value: number): number;
					public static decode(stringValue: string): number;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static toString(x: number, radix: number): string;
					public static divide(dividend: number, divisor: number): number;
					public static checkedCast(value: number): number;
					public toString(): string;
					public static max(array: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static saturatedCast(value: number): number;
					public static remainder(dividend: number, divisor: number): number;
					public static toString(x: number): string;
					public static sort(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static sort(array: native.Array<number>): void;
				}
				export module UnsignedInts {
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.UnsignedInts.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.UnsignedInts.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public static valueOf(name: string): com.google.common.primitives.UnsignedInts.LexicographicalComparator;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static values(): native.Array<com.google.common.primitives.UnsignedInts.LexicographicalComparator>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class UnsignedLong extends java.lang.Number {
					public static class: java.lang.Class<com.google.common.primitives.UnsignedLong>;
					public static MAX_VALUE: com.google.common.primitives.UnsignedLong;
					public static ONE: com.google.common.primitives.UnsignedLong;
					public static ZERO: com.google.common.primitives.UnsignedLong;
					public minus(val: com.google.common.primitives.UnsignedLong): com.google.common.primitives.UnsignedLong;
					public plus(val: com.google.common.primitives.UnsignedLong): com.google.common.primitives.UnsignedLong;
					public equals(obj: any): boolean;
					public doubleValue(): number;
					public times(val: com.google.common.primitives.UnsignedLong): com.google.common.primitives.UnsignedLong;
					public static valueOf(value: java.math.BigInteger): com.google.common.primitives.UnsignedLong;
					public static valueOf(string: string): com.google.common.primitives.UnsignedLong;
					public floatValue(): number;
					public bigIntegerValue(): java.math.BigInteger;
					public dividedBy(val: com.google.common.primitives.UnsignedLong): com.google.common.primitives.UnsignedLong;
					public intValue(): number;
					public toString(): string;
					public static valueOf(value: number): com.google.common.primitives.UnsignedLong;
					public static fromLongBits(bits: number): com.google.common.primitives.UnsignedLong;
					public longValue(): number;
					public compareTo(o: com.google.common.primitives.UnsignedLong): number;
					public hashCode(): number;
					public toString(radix: number): string;
					public mod(val: com.google.common.primitives.UnsignedLong): com.google.common.primitives.UnsignedLong;
					public static valueOf(string: string, radix: number): com.google.common.primitives.UnsignedLong;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module primitives {
				export class UnsignedLongs extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.primitives.UnsignedLongs>;
					public static MAX_VALUE: number;
					public static parseUnsignedLong(string: string, radix: number): number;
					public static min(array: native.Array<number>): number;
					public static compare(a: number, b: number): number;
					public static join(separator: string, array: native.Array<number>): string;
					public static decode(stringValue: string): number;
					public static sortDescending(array: native.Array<number>): void;
					public static sortDescending(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static toString(x: number, radix: number): string;
					public static divide(dividend: number, divisor: number): number;
					public toString(): string;
					public static max(array: native.Array<number>): number;
					public static lexicographicalComparator(): java.util.Comparator<native.Array<number>>;
					public static remainder(dividend: number, divisor: number): number;
					public static toString(x: number): string;
					public static parseUnsignedLong(string: string): number;
					public static sort(array: native.Array<number>, fromIndex: number, toIndex: number): void;
					public static sort(array: native.Array<number>): void;
				}
				export module UnsignedLongs {
					export class LexicographicalComparator extends java.util.Comparator<native.Array<number>> {
						public static class: java.lang.Class<com.google.common.primitives.UnsignedLongs.LexicographicalComparator>;
						public static INSTANCE: com.google.common.primitives.UnsignedLongs.LexicographicalComparator;
						public equals(other: any): boolean;
						public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static valueOf(name: string): com.google.common.primitives.UnsignedLongs.LexicographicalComparator;
						public static values(): native.Array<com.google.common.primitives.UnsignedLongs.LexicographicalComparator>;
						public compare(object0: any, object1: any): number;
						public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static reverseOrder(): java.util.Comparator<any>;
						public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public toString(): string;
						public reversed(): java.util.Comparator<any>;
						public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
						public compare(left: native.Array<number>, right: native.Array<number>): number;
						public static naturalOrder(): java.util.Comparator<any>;
						public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
						public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
						public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
					}
					export class ParseOverflowDetection extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.primitives.UnsignedLongs.ParseOverflowDetection>;
					}
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module reflect {
				export abstract class AbstractInvocationHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler {
					public static class: java.lang.Class<com.google.common.reflect.AbstractInvocationHandler>;
					public equals(obj: any): boolean;
					public toString(): string;
					public constructor();
					public invoke(proxy: any, method: java.lang.reflect.Method, objects2: native.Array<any>): any;
					public handleInvocation(object0: any, method1: java.lang.reflect.Method, objects2: native.Array<any>): any;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class ClassPath extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.reflect.ClassPath>;
					public getTopLevelClasses(): com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath.ClassInfo>;
					public getTopLevelClasses(packageName: string): com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath.ClassInfo>;
					public getAllClasses(): com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath.ClassInfo>;
					public getResources(): com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath.ResourceInfo>;
					public static from(classloader: java.lang.ClassLoader): com.google.common.reflect.ClassPath;
					public getTopLevelClassesRecursive(packageName: string): com.google.common.collect.ImmutableSet<com.google.common.reflect.ClassPath.ClassInfo>;
				}
				export module ClassPath {
					export class ClassInfo extends com.google.common.reflect.ClassPath.ResourceInfo {
						public static class: java.lang.Class<com.google.common.reflect.ClassPath.ClassInfo>;
						public getSimpleName(): string;
						public getPackageName(): string;
						public getName(): string;
						public load(): java.lang.Class<any>;
						public toString(): string;
					}
					export class DefaultScanner extends com.google.common.reflect.ClassPath.Scanner {
						public static class: java.lang.Class<com.google.common.reflect.ClassPath.DefaultScanner>;
						public scanJarFile(classLoader0: java.lang.ClassLoader, jarFile1: java.util.jar.JarFile): void;
						public scanJarFile(classloader: java.lang.ClassLoader, file: java.util.jar.JarFile): void;
						public scanDirectory(classLoader0: java.lang.ClassLoader, file1: java.io.File): void;
						public scanDirectory(classloader: java.lang.ClassLoader, directory: java.io.File): void;
					}
					export class ResourceInfo extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.ClassPath.ResourceInfo>;
						public getResourceName(): string;
						public url(): java.net.URL;
						public asCharSource(charset: java.nio.charset.Charset): com.google.common.io.CharSource;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public asByteSource(): com.google.common.io.ByteSource;
						public toString(): string;
					}
					export abstract class Scanner extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.ClassPath.Scanner>;
						public scanJarFile(classLoader0: java.lang.ClassLoader, jarFile1: java.util.jar.JarFile): void;
						public scan(classloader: java.lang.ClassLoader): void;
						public scanDirectory(classLoader0: java.lang.ClassLoader, file1: java.io.File): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class Element extends java.lang.reflect.AccessibleObject implements java.lang.reflect.Member {
					public static class: java.lang.Class<com.google.common.reflect.Element>;
					public equals(obj: any): boolean;
					public getDeclaredAnnotations(): native.Array<java.lang.annotation.Annotation>;
					public isStatic(): boolean;
					public getAnnotations(): native.Array<java.lang.annotation.Annotation>;
					public getOwnerType(): com.google.common.reflect.TypeToken<any>;
					public getDeclaringClass(): java.lang.Class<any>;
					public isAnnotationPresent(annotationClass: java.lang.Class<any>): boolean;
					public toString(): string;
					public isNative(): boolean;
					public getDeclaredAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public isPublic(): boolean;
					public isSynthetic(): boolean;
					public hashCode(): number;
					public isProtected(): boolean;
					public setAccessible(flag: boolean): void;
					public isFinal(): boolean;
					public isSynchronized(): boolean;
					public isAccessible(): boolean;
					public getAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public static setAccessible(array: native.Array<java.lang.reflect.AccessibleObject>, flag: boolean): void;
					public isAbstract(): boolean;
					public isPackagePrivate(): boolean;
					public getModifiers(): number;
					public getName(): string;
					public getAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
					public isPrivate(): boolean;
					public getDeclaredAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class ImmutableTypeToInstanceMap<B>  extends com.google.common.collect.ForwardingMap<com.google.common.reflect.TypeToken<any>,any> implements com.google.common.reflect.TypeToInstanceMap<any>  {
					public static class: java.lang.Class<com.google.common.reflect.ImmutableTypeToInstanceMap<any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					/** @deprecated */
					public putInstance(type: com.google.common.reflect.TypeToken<any>, value: any): any;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public getInstance(type: com.google.common.reflect.TypeToken<any>): any;
					public remove(key: any, value: any): boolean;
					/** @deprecated */
					public putInstance(type: java.lang.Class<any>, value: any): any;
					public equals(object: any): boolean;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public putInstance(type: java.lang.Class<any>, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public getInstance(type: java.lang.Class<any>): any;
					public static builder(): com.google.common.reflect.ImmutableTypeToInstanceMap.Builder<any>;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public putInstance(type: com.google.common.reflect.TypeToken<any>, value: any): any;
					public containsValue(value: any): boolean;
					public static of(): com.google.common.reflect.ImmutableTypeToInstanceMap<any>;
					/** @deprecated */
					public put(key: com.google.common.reflect.TypeToken<any>, value: any): any;
					public replace(key: any, value: any): any;
					public delegate(): java.util.Map<com.google.common.reflect.TypeToken<any>,any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<any,any>;
				}
				export module ImmutableTypeToInstanceMap {
					export class Builder<B>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.ImmutableTypeToInstanceMap.Builder<any>>;
						public put(key: java.lang.Class<any>, value: any): com.google.common.reflect.ImmutableTypeToInstanceMap.Builder<any>;
						public put(key: com.google.common.reflect.TypeToken<any>, value: any): com.google.common.reflect.ImmutableTypeToInstanceMap.Builder<any>;
						public build(): com.google.common.reflect.ImmutableTypeToInstanceMap<B>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export abstract class Invokable<T, R>  extends com.google.common.reflect.Element implements java.lang.reflect.GenericDeclaration  {
					public static class: java.lang.Class<com.google.common.reflect.Invokable<any,any>>;
					public getParameters(): com.google.common.collect.ImmutableList<com.google.common.reflect.Parameter>;
					public static from(constructor: java.lang.reflect.Constructor<any>): com.google.common.reflect.Invokable<any,any>;
					public getDeclaredAnnotations(): native.Array<java.lang.annotation.Annotation>;
					public getAnnotations(): native.Array<java.lang.annotation.Annotation>;
					public getTypeParameters(): native.Array<java.lang.reflect.TypeVariable<any>>;
					public getAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public getOwnerType(): com.google.common.reflect.TypeToken<any>;
					public getDeclaringClass(): java.lang.Class<any>;
					public isAnnotationPresent(annotationClass: java.lang.Class<any>): boolean;
					public isVarArgs(): boolean;
					public isOverridable(): boolean;
					public getModifiers(): number;
					public invoke(receiver: any, objects1: native.Array<any>): any;
					public getDeclaredAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public returning(returnType: com.google.common.reflect.TypeToken<any>): com.google.common.reflect.Invokable<any,any>;
					public getName(): string;
					public isSynthetic(): boolean;
					public returning(returnType: java.lang.Class<any>): com.google.common.reflect.Invokable<any,any>;
					public getAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
					public getReturnType(): com.google.common.reflect.TypeToken<any>;
					public static from(method: java.lang.reflect.Method): com.google.common.reflect.Invokable<any,any>;
					public getExceptionTypes(): com.google.common.collect.ImmutableList<com.google.common.reflect.TypeToken<any>>;
					public getDeclaredAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
				}
				export module Invokable {
					export class ConstructorInvokable<T>  extends com.google.common.reflect.Invokable<any,any> {
						public static class: java.lang.Class<com.google.common.reflect.Invokable.ConstructorInvokable<any>>;
						public getAnnotations(): native.Array<java.lang.annotation.Annotation>;
						public getTypeParameters(): native.Array<java.lang.reflect.TypeVariable<any>>;
						public getDeclaringClass(): java.lang.Class<any>;
						public getDeclaredAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
						public getName(): string;
						public isOverridable(): boolean;
						public getModifiers(): number;
						public getAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
						public isAnnotationPresent(annotationClass: java.lang.Class<any>): boolean;
						public getDeclaredAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
						public isSynthetic(): boolean;
						public getAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
						public isVarArgs(): boolean;
						public getDeclaredAnnotations(): native.Array<java.lang.annotation.Annotation>;
					}
					export class MethodInvokable<T>  extends com.google.common.reflect.Invokable<any,any> {
						public static class: java.lang.Class<com.google.common.reflect.Invokable.MethodInvokable<any>>;
						public getAnnotations(): native.Array<java.lang.annotation.Annotation>;
						public getTypeParameters(): native.Array<java.lang.reflect.TypeVariable<any>>;
						public getDeclaringClass(): java.lang.Class<any>;
						public getDeclaredAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
						public getName(): string;
						public isOverridable(): boolean;
						public getModifiers(): number;
						public getAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
						public isAnnotationPresent(annotationClass: java.lang.Class<any>): boolean;
						public getDeclaredAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
						public isSynthetic(): boolean;
						public getAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
						public isVarArgs(): boolean;
						public getDeclaredAnnotations(): native.Array<java.lang.annotation.Annotation>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class MutableTypeToInstanceMap<B>  extends com.google.common.collect.ForwardingMap<com.google.common.reflect.TypeToken<any>,any> implements com.google.common.reflect.TypeToInstanceMap<any>  {
					public static class: java.lang.Class<com.google.common.reflect.MutableTypeToInstanceMap<any>>;
					public containsKey(key: any): boolean;
					public get(key: any): any;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public size(): number;
					public getInstance(type: com.google.common.reflect.TypeToken<any>): any;
					public remove(key: any, value: any): boolean;
					public equals(object: any): boolean;
					public remove(object: any): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public putInstance(type: java.lang.Class<any>, value: any): any;
					public constructor();
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					/** @deprecated */
					public putAll(map: java.util.Map<any,any>): void;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public delegate(): any;
					public getInstance(type: java.lang.Class<any>): any;
					public putAll(map: java.util.Map<any,any>): void;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public values(): java.util.Collection<any>;
					public putInstance(type: com.google.common.reflect.TypeToken<any>, value: any): any;
					public containsValue(value: any): boolean;
					/** @deprecated */
					public put(key: com.google.common.reflect.TypeToken<any>, value: any): any;
					public replace(key: any, value: any): any;
					public delegate(): java.util.Map<com.google.common.reflect.TypeToken<any>,any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public put(key: any, value: any): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public delegate(): java.util.Map<any,any>;
					public entrySet(): java.util.Set<java.util.Map.Entry<com.google.common.reflect.TypeToken<any>,any>>;
				}
				export module MutableTypeToInstanceMap {
					export class UnmodifiableEntry<K, V>  extends com.google.common.collect.ForwardingMapEntry<any,any> {
						public static class: java.lang.Class<com.google.common.reflect.MutableTypeToInstanceMap.UnmodifiableEntry<any,any>>;
						public delegate(): any;
						public delegate(): java.util.Map.Entry<any,any>;
						public static comparingByValue(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public setValue(value: any): any;
						public getValue(): any;
						public getKey(): any;
						public static comparingByValue(): java.util.Comparator<any>;
						public hashCode(): number;
						public static comparingByKey(): java.util.Comparator<any>;
						public static comparingByKey(cmp: java.util.Comparator<any>): java.util.Comparator<any>;
						public equals(object: any): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class Parameter extends java.lang.Object implements java.lang.reflect.AnnotatedElement {
					public static class: java.lang.Class<com.google.common.reflect.Parameter>;
					public equals(obj: any): boolean;
					public getDeclaredAnnotations(): native.Array<java.lang.annotation.Annotation>;
					public getAnnotation(annotationType: java.lang.Class<any>): java.lang.annotation.Annotation;
					public isAnnotationPresent(annotationType: java.lang.Class<any>): boolean;
					public getAnnotations(): native.Array<java.lang.annotation.Annotation>;
					public getAnnotationsByType(annotationType: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public getAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public getDeclaredAnnotation(annotationType: java.lang.Class<any>): java.lang.annotation.Annotation;
					public getType(): com.google.common.reflect.TypeToken<any>;
					public isAnnotationPresent(annotationClass: java.lang.Class<any>): boolean;
					public getDeclaringInvokable(): com.google.common.reflect.Invokable<any,any>;
					public toString(): string;
					public getDeclaredAnnotationsByType(annotationClass: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public getDeclaredAnnotationsByType(annotationType: java.lang.Class<any>): native.Array<java.lang.annotation.Annotation>;
					public hashCode(): number;
					public getDeclaredAnnotation(annotationClass: java.lang.Class<any>): java.lang.annotation.Annotation;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class Reflection extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.reflect.Reflection>;
					public static initialize(classes: native.Array<java.lang.Class<any>>): void;
					public static getPackageName(clazz: java.lang.Class<any>): string;
					public static newProxy(interfaceType: java.lang.Class<any>, handler: java.lang.reflect.InvocationHandler): any;
					public static getPackageName(classFullName: string): string;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export abstract class TypeCapture<T>  extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.reflect.TypeCapture<any>>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export abstract class TypeParameter<T>  extends com.google.common.reflect.TypeCapture<any> {
					public static class: java.lang.Class<com.google.common.reflect.TypeParameter<any>>;
					public equals(obj: any): boolean;
					public toString(): string;
					public constructor();
					public equals(o: any): boolean;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class TypeResolver extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.reflect.TypeResolver>;
					public where(formal: java.lang.reflect.Type, actual: java.lang.reflect.Type): com.google.common.reflect.TypeResolver;
					public resolveType(type: java.lang.reflect.Type): java.lang.reflect.Type;
					public constructor();
				}
				export module TypeResolver {
					export class TypeMappingIntrospector extends com.google.common.reflect.TypeVisitor {
						public static class: java.lang.Class<com.google.common.reflect.TypeResolver.TypeMappingIntrospector>;
					}
					export class TypeTable extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.TypeResolver.TypeTable>;
					}
					export class TypeVariableKey extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.TypeResolver.TypeVariableKey>;
						public equals(obj: any): boolean;
						public hashCode(): number;
						public toString(): string;
					}
					export class WildcardCapturer extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.TypeResolver.WildcardCapturer>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class TypeToInstanceMap<B>  extends java.util.Map<com.google.common.reflect.TypeToken<any>,any> {
					public static class: java.lang.Class<com.google.common.reflect.TypeToInstanceMap<any>>;
					/**
					 * Constructs a new instance of the com.google.common.reflect.TypeToInstanceMap<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getInstance(class0: java.lang.Class<any>): any;
						getInstance(typeToken0: com.google.common.reflect.TypeToken<any>): any;
						putInstance(class0: java.lang.Class<any>, object1: any): any;
						putInstance(typeToken0: com.google.common.reflect.TypeToken<any>, object1: any): any;
						size(): number;
						isEmpty(): boolean;
						containsKey(object0: any): boolean;
						containsValue(object0: any): boolean;
						get(object0: any): any;
						put(object0: any, object1: any): any;
						remove(object0: any): any;
						putAll(map0: java.util.Map<any,any>): void;
						clear(): void;
						keySet(): java.util.Set<any>;
						values(): java.util.Collection<any>;
						entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
						equals(object0: any): boolean;
						hashCode(): number;
						getOrDefault(key: any, defaultValue: any): any;
						forEach(action: any /* any<any,any>*/): void;
						replaceAll(function0: any /* any<any,any,any>*/): void;
						putIfAbsent(key: any, value: any): any;
						remove(key: any, value: any): boolean;
						replace(key: any, oldValue: any, newValue: any): boolean;
						replace(key: any, value: any): any;
						computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
						computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
						merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					});
					public constructor();
					public equals(obj: any): boolean;
					public isEmpty(): boolean;
					public forEach(action: any /* any<any,any>*/): void;
					public putInstance(class0: java.lang.Class<any>, object1: any): any;
					public remove(object0: any): any;
					public size(): number;
					public putAll(map0: java.util.Map<any,any>): void;
					public remove(key: any, value: any): boolean;
					public getInstance(typeToken0: com.google.common.reflect.TypeToken<any>): any;
					public getOrDefault(key: any, defaultValue: any): any;
					public putIfAbsent(key: any, value: any): any;
					public keySet(): java.util.Set<any>;
					public clear(): void;
					public merge(key: any, value: any, remappingFunction: any /* any<any,any,any>*/): any;
					public hashCode(): number;
					public replace(key: any, oldValue: any, newValue: any): boolean;
					public containsValue(object0: any): boolean;
					public values(): java.util.Collection<any>;
					public replaceAll(function0: any /* any<any,any,any>*/): void;
					public replace(key: any, value: any): any;
					public put(object0: any, object1: any): any;
					public get(object0: any): any;
					public putInstance(typeToken0: com.google.common.reflect.TypeToken<any>, object1: any): any;
					public entrySet(): java.util.Set<java.util.Map.Entry<any,any>>;
					public getInstance(class0: java.lang.Class<any>): any;
					public computeIfAbsent(key: any, mappingFunction: any /* any<any,any>*/): any;
					public compute(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public computeIfPresent(key: any, remappingFunction: any /* any<any,any,any>*/): any;
					public containsKey(object0: any): boolean;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export abstract class TypeToken<T>  extends com.google.common.reflect.TypeCapture<any> implements java.io.Serializable  {
					public static class: java.lang.Class<com.google.common.reflect.TypeToken<any>>;
					public equals(obj: any): boolean;
					public getComponentType(): com.google.common.reflect.TypeToken<any>;
					public wrap(): com.google.common.reflect.TypeToken<any>;
					public unwrap(): com.google.common.reflect.TypeToken<any>;
					public getTypes(): com.google.common.reflect.TypeToken.TypeSet;
					public equals(o: any): boolean;
					public isSupertypeOf(type: java.lang.reflect.Type): boolean;
					public toString(): string;
					public getSupertype(superclass: java.lang.Class<any>): com.google.common.reflect.TypeToken<any>;
					public constructor();
					public isSupertypeOf(type: com.google.common.reflect.TypeToken<any>): boolean;
					public resolveType(type: java.lang.reflect.Type): com.google.common.reflect.TypeToken<any>;
					public where(typeParam: com.google.common.reflect.TypeParameter<any>, typeArg: com.google.common.reflect.TypeToken<any>): com.google.common.reflect.TypeToken<any>;
					public where(typeParam: com.google.common.reflect.TypeParameter<any>, typeArg: java.lang.Class<any>): com.google.common.reflect.TypeToken<any>;
					public hashCode(): number;
					public isSubtypeOf(type: com.google.common.reflect.TypeToken<any>): boolean;
					public getRawType(): java.lang.Class<any>;
					public getType(): java.lang.reflect.Type;
					public static of(type: java.lang.Class<any>): com.google.common.reflect.TypeToken<any>;
					public isArray(): boolean;
					public isSubtypeOf(supertype: java.lang.reflect.Type): boolean;
					public static of(type: java.lang.reflect.Type): com.google.common.reflect.TypeToken<any>;
					public isPrimitive(): boolean;
					public constructor(declaringClass: java.lang.Class<any>);
					public getSubtype(subclass: java.lang.Class<any>): com.google.common.reflect.TypeToken<any>;
					public writeReplace(): any;
					public constructor(constructor: java.lang.reflect.Constructor<any>): com.google.common.reflect.Invokable<any,any>;
					public method(method: java.lang.reflect.Method): com.google.common.reflect.Invokable<any,any>;
				}
				export module TypeToken {
					export class Bounds extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.TypeToken.Bounds>;
					}
					export class ClassSet extends com.google.common.reflect.TypeToken.TypeSet {
						public static class: java.lang.Class<com.google.common.reflect.TypeToken.ClassSet>;
						public contains(object: any): boolean;
						public delegate(): java.util.Set<com.google.common.reflect.TypeToken<any>>;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public interfaces(): com.google.common.reflect.TypeToken.TypeSet;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public size(): number;
						public delegate(): java.util.Collection<any>;
						public classes(): com.google.common.reflect.TypeToken.TypeSet;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): any;
						public remove(object: any): boolean;
						public rawTypes(): java.util.Set<java.lang.Class<any>>;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
					export class InterfaceSet extends com.google.common.reflect.TypeToken.TypeSet {
						public static class: java.lang.Class<com.google.common.reflect.TypeToken.InterfaceSet>;
						public contains(object: any): boolean;
						public delegate(): java.util.Set<com.google.common.reflect.TypeToken<any>>;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public interfaces(): com.google.common.reflect.TypeToken.TypeSet;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public size(): number;
						public delegate(): java.util.Collection<any>;
						public classes(): com.google.common.reflect.TypeToken.TypeSet;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): any;
						public remove(object: any): boolean;
						public rawTypes(): java.util.Set<java.lang.Class<any>>;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
					export class SimpleTypeToken<T>  extends com.google.common.reflect.TypeToken<any> {
						public static class: java.lang.Class<com.google.common.reflect.TypeToken.SimpleTypeToken<any>>;
					}
					export abstract class TypeCollector<K>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.TypeToken.TypeCollector<any>>;
					}
					export module TypeCollector {
						export class ForwardingTypeCollector<K>  extends com.google.common.reflect.TypeToken.TypeCollector<any> {
							public static class: java.lang.Class<com.google.common.reflect.TypeToken.TypeCollector.ForwardingTypeCollector<any>>;
						}
					}
					export abstract class TypeFilter extends com.google.common.base.Predicate<com.google.common.reflect.TypeToken<any>> {
						public static class: java.lang.Class<com.google.common.reflect.TypeToken.TypeFilter>;
						public static IGNORE_TYPE_VARIABLE_OR_WILDCARD: com.google.common.reflect.TypeToken.TypeFilter;
						public static INTERFACE_ONLY: com.google.common.reflect.TypeToken.TypeFilter;
						public equals(other: any): boolean;
						public static values(): native.Array<com.google.common.reflect.TypeToken.TypeFilter>;
						public apply(object0: any): boolean;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.reflect.TypeToken.TypeFilter;
					}
					export class TypeSet extends com.google.common.collect.ForwardingSet<com.google.common.reflect.TypeToken<any>> implements java.io.Serializable  {
						public static class: java.lang.Class<com.google.common.reflect.TypeToken.TypeSet>;
						public contains(object: any): boolean;
						public delegate(): java.util.Set<com.google.common.reflect.TypeToken<any>>;
						public iterator(): java.util.Iterator<any>;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public removeIf(filter: any /* any*/): boolean;
						public interfaces(): com.google.common.reflect.TypeToken.TypeSet;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public size(): number;
						public delegate(): java.util.Collection<any>;
						public classes(): com.google.common.reflect.TypeToken.TypeSet;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public parallelStream(): java.util.stream.Stream<any>;
						public delegate(): any;
						public remove(object: any): boolean;
						public delegate(): java.util.Set<any>;
						public rawTypes(): java.util.Set<java.lang.Class<any>>;
						public clear(): void;
						public add(element: any): boolean;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public equals(object: any): boolean;
						public toArray(): native.Array<any>;
						public addAll(collection: java.util.Collection<any>): boolean;
						public removeAll(collection: java.util.Collection<any>): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export abstract class TypeVisitor extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.reflect.TypeVisitor>;
					public visit(types: native.Array<java.lang.reflect.Type>): void;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module reflect {
				export class Types extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.reflect.Types>;
				}
				export module Types {
					export abstract class ClassOwnership {
						public static class: java.lang.Class<com.google.common.reflect.Types.ClassOwnership>;
						public static LOCAL_CLASS_HAS_NO_OWNER: com.google.common.reflect.Types.ClassOwnership;
						public static OWNED_BY_ENCLOSING_CLASS: com.google.common.reflect.Types.ClassOwnership;
						public static valueOf(name: string): com.google.common.reflect.Types.ClassOwnership;
						public static values(): native.Array<com.google.common.reflect.Types.ClassOwnership>;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					}
					export class GenericArrayTypeImpl extends java.lang.Object implements java.lang.reflect.GenericArrayType, java.io.Serializable {
						public static class: java.lang.Class<com.google.common.reflect.Types.GenericArrayTypeImpl>;
						public equals(obj: any): boolean;
						public getGenericComponentType(): java.lang.reflect.Type;
						public getTypeName(): string;
						public hashCode(): number;
						public toString(): string;
					}
					export abstract class JavaVersion {
						public static class: java.lang.Class<com.google.common.reflect.Types.JavaVersion>;
						public static JAVA6: com.google.common.reflect.Types.JavaVersion;
						public static JAVA7: com.google.common.reflect.Types.JavaVersion;
						public static JAVA8: com.google.common.reflect.Types.JavaVersion;
						public static JAVA9: com.google.common.reflect.Types.JavaVersion;
						public static valueOf(name: string): com.google.common.reflect.Types.JavaVersion;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static values(): native.Array<com.google.common.reflect.Types.JavaVersion>;
					}
					export class NativeTypeVariableEquals<X>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.Types.NativeTypeVariableEquals<any>>;
					}
					export class ParameterizedTypeImpl extends java.lang.Object implements java.lang.reflect.ParameterizedType, java.io.Serializable {
						public static class: java.lang.Class<com.google.common.reflect.Types.ParameterizedTypeImpl>;
						public equals(obj: any): boolean;
						public equals(other: any): boolean;
						public getOwnerType(): java.lang.reflect.Type;
						public getTypeName(): string;
						public hashCode(): number;
						public getRawType(): java.lang.reflect.Type;
						public getActualTypeArguments(): native.Array<java.lang.reflect.Type>;
						public toString(): string;
					}
					export class TypeVariableImpl<D>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.reflect.Types.TypeVariableImpl<any>>;
						public equals(obj: any): boolean;
						public getGenericDeclaration(): D;
						public getBounds(): native.Array<java.lang.reflect.Type>;
						public getTypeName(): string;
						public hashCode(): number;
						public getName(): string;
						public toString(): string;
					}
					export class TypeVariableInvocationHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler {
						public static class: java.lang.Class<com.google.common.reflect.Types.TypeVariableInvocationHandler>;
						public invoke(proxy: any, method: java.lang.reflect.Method, objects2: native.Array<any>): any;
					}
					export class WildcardTypeImpl extends java.lang.Object implements java.lang.reflect.WildcardType, java.io.Serializable {
						public static class: java.lang.Class<com.google.common.reflect.Types.WildcardTypeImpl>;
						public equals(obj: any): boolean;
						public getTypeName(): string;
						public hashCode(): number;
						public getLowerBounds(): native.Array<java.lang.reflect.Type>;
						public getUpperBounds(): native.Array<java.lang.reflect.Type>;
						public toString(): string;
					}
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractCatchingFuture<V, X, F, T>  extends com.google.common.util.concurrent.FluentFuture.TrustedFuture<any> implements java.lang.Runnable  {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractCatchingFuture<any,any,any,any>>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public run(): void;
						public pendingToString(): string;
						public afterDone(): void;
					}
					export module AbstractCatchingFuture {
						export class AsyncCatchingFuture<V, X>  extends com.google.common.util.concurrent.AbstractCatchingFuture<any,any,com.google.common.util.concurrent.AsyncFunction<any,any>,com.google.common.util.concurrent.ListenableFuture<any>> {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractCatchingFuture.AsyncCatchingFuture<any,any>>;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public run(): void;
						}
						export class CatchingFuture<V, X>  extends com.google.common.util.concurrent.AbstractCatchingFuture<any,any,com.google.common.base.Function<any,any>,any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractCatchingFuture.CatchingFuture<any,any>>;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractCheckedFuture<V, X>  extends com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture<any> implements com.google.common.util.concurrent.CheckedFuture<any,any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractCheckedFuture<any,any>>;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public checkedGet(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public constructor();
						public isDone(): boolean;
						public mapException(exception0: java.lang.Exception): any;
						public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
						public isCancelled(): boolean;
						public constructor(delegate: com.google.common.util.concurrent.ListenableFuture<any>);
						public get(): any;
						public checkedGet(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractExecutionThreadService extends java.lang.Object implements com.google.common.util.concurrent.Service {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractExecutionThreadService>;
						public constructor();
						public failureCause(): java.lang.Throwable;
						public executor(): java.util.concurrent.Executor;
						public startUp(): void;
						public startAsync(): com.google.common.util.concurrent.Service;
						public triggerShutdown(): void;
						public isRunning(): boolean;
						public toString(): string;
						public awaitRunning(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public stopAsync(): com.google.common.util.concurrent.Service;
						public addListener(listener: com.google.common.util.concurrent.Service.Listener, executor: java.util.concurrent.Executor): void;
						public shutDown(): void;
						public run(): void;
						public awaitTerminated(): void;
						public serviceName(): string;
						public state(): com.google.common.util.concurrent.Service.State;
						public awaitTerminated(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public awaitRunning(): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractFuture<V>  extends com.google.common.util.concurrent.internal.InternalFutureFailureAccess implements com.google.common.util.concurrent.ListenableFuture<any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture<any>>;
						public setException(throwable: java.lang.Throwable): boolean;
						public setFuture(future: com.google.common.util.concurrent.ListenableFuture<any>): boolean;
						public constructor();
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public isCancelled(): boolean;
						public pendingToString(): string;
						public wasInterrupted(): boolean;
						public afterDone(): void;
						public tryInternalFastPathGetFailure(): java.lang.Throwable;
						public get(): any;
						public toString(): string;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public isDone(): boolean;
						public set(value: any): boolean;
						public interruptTask(): void;
					}
					export module AbstractFuture {
						export abstract class AtomicHelper extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.AtomicHelper>;
						}
						export class Cancellation extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.Cancellation>;
						}
						export class Failure extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.Failure>;
						}
						export class Listener extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.Listener>;
						}
						export class SafeAtomicHelper extends com.google.common.util.concurrent.AbstractFuture.AtomicHelper {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.SafeAtomicHelper>;
						}
						export class SetFuture<V>  extends java.lang.Runnable {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.SetFuture<any>>;
							public run(): void;
						}
						export class SynchronizedHelper extends com.google.common.util.concurrent.AbstractFuture.AtomicHelper {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.SynchronizedHelper>;
						}
						export class Trusted<V>  extends com.google.common.util.concurrent.ListenableFuture<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.Trusted<any>>;
							/**
							 * Constructs a new instance of the com.google.common.util.concurrent.AbstractFuture$Trusted interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
								cancel(boolean0: boolean): boolean;
								isCancelled(): boolean;
								isDone(): boolean;
								get(): any;
								get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
							});
							public constructor();
							public get(): any;
							public cancel(boolean0: boolean): boolean;
							public addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
						}
						export abstract class TrustedFuture<V>  extends com.google.common.util.concurrent.AbstractFuture<any> implements com.google.common.util.concurrent.AbstractFuture.Trusted<any>  {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.TrustedFuture<any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public cancel(mayInterruptIfRunning: boolean): boolean;
						}
						export class UnsafeAtomicHelper extends com.google.common.util.concurrent.AbstractFuture.AtomicHelper {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.UnsafeAtomicHelper>;
						}
						export class Waiter extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractFuture.Waiter>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractIdleService extends java.lang.Object implements com.google.common.util.concurrent.Service {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractIdleService>;
						public constructor();
						public failureCause(): java.lang.Throwable;
						public executor(): java.util.concurrent.Executor;
						public startUp(): void;
						public startAsync(): com.google.common.util.concurrent.Service;
						public isRunning(): boolean;
						public toString(): string;
						public awaitRunning(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public stopAsync(): com.google.common.util.concurrent.Service;
						public addListener(listener: com.google.common.util.concurrent.Service.Listener, executor: java.util.concurrent.Executor): void;
						public shutDown(): void;
						public awaitTerminated(): void;
						public serviceName(): string;
						public state(): com.google.common.util.concurrent.Service.State;
						public awaitTerminated(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public awaitRunning(): void;
					}
					export module AbstractIdleService {
						export class DelegateService extends com.google.common.util.concurrent.AbstractService {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractIdleService.DelegateService>;
							public addListener(listener: com.google.common.util.concurrent.Service.Listener, executor: java.util.concurrent.Executor): void;
							public doStop(): void;
							public doStart(): void;
							public awaitTerminated(): void;
							public startAsync(): com.google.common.util.concurrent.Service;
							public toString(): string;
							public awaitRunning(timeout: number, unit: java.util.concurrent.TimeUnit): void;
							public isRunning(): boolean;
							public state(): com.google.common.util.concurrent.Service.State;
							public awaitRunning(): void;
							public awaitTerminated(timeout: number, unit: java.util.concurrent.TimeUnit): void;
							public failureCause(): java.lang.Throwable;
							public stopAsync(): com.google.common.util.concurrent.Service;
						}
						export class ThreadNameSupplier extends com.google.common.base.Supplier<string> {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractIdleService.ThreadNameSupplier>;
							public get(): string;
							public get(): any;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractListeningExecutorService extends java.util.concurrent.AbstractExecutorService implements com.google.common.util.concurrent.ListeningExecutorService {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractListeningExecutorService>;
						public constructor();
						public isTerminated(): boolean;
						public newTaskFor(runnable: java.lang.Runnable, value: any): java.util.concurrent.RunnableFuture<any>;
						public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
						public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
						public submit(task: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
						public awaitTermination(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
						public execute(runnable0: java.lang.Runnable): void;
						public submit(task: java.lang.Runnable, result: any): com.google.common.util.concurrent.ListenableFuture<any>;
						public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
						public newTaskFor(callable: java.util.concurrent.Callable<any>): java.util.concurrent.RunnableFuture<any>;
						public shutdown(): void;
						public submit(task: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
						public isShutdown(): boolean;
						public invokeAny(tasks: java.util.Collection<any>): any;
						public shutdownNow(): java.util.List<java.lang.Runnable>;
						public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractScheduledService extends java.lang.Object implements com.google.common.util.concurrent.Service {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractScheduledService>;
						public constructor();
						public failureCause(): java.lang.Throwable;
						public runOneIteration(): void;
						public scheduler(): com.google.common.util.concurrent.AbstractScheduledService.Scheduler;
						public startUp(): void;
						public executor(): java.util.concurrent.ScheduledExecutorService;
						public startAsync(): com.google.common.util.concurrent.Service;
						public isRunning(): boolean;
						public toString(): string;
						public awaitRunning(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public stopAsync(): com.google.common.util.concurrent.Service;
						public addListener(listener: com.google.common.util.concurrent.Service.Listener, executor: java.util.concurrent.Executor): void;
						public shutDown(): void;
						public awaitTerminated(): void;
						public serviceName(): string;
						public state(): com.google.common.util.concurrent.Service.State;
						public awaitTerminated(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public awaitRunning(): void;
					}
					export module AbstractScheduledService {
						export abstract class CustomScheduler extends com.google.common.util.concurrent.AbstractScheduledService.Scheduler {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractScheduledService.CustomScheduler>;
							public constructor();
							public getNextSchedule(): com.google.common.util.concurrent.AbstractScheduledService.CustomScheduler.Schedule;
						}
						export module CustomScheduler {
							export class ReschedulableCallable extends com.google.common.util.concurrent.ForwardingFuture<java.lang.Void> implements java.util.concurrent.Callable<java.lang.Void>  {
								public static class: java.lang.Class<com.google.common.util.concurrent.AbstractScheduledService.CustomScheduler.ReschedulableCallable>;
								public delegate(): java.util.concurrent.Future<any>;
								public call(): any;
								public delegate(): any;
								public cancel(mayInterruptIfRunning: boolean): boolean;
								public isCancelled(): boolean;
								public get(): any;
								public reschedule(): void;
								public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
								public isDone(): boolean;
								public call(): java.lang.Void;
								public delegate(): java.util.concurrent.Future<java.lang.Void>;
							}
							export class Schedule extends java.lang.Object {
								public static class: java.lang.Class<com.google.common.util.concurrent.AbstractScheduledService.CustomScheduler.Schedule>;
								public constructor(delay: number, unit: java.util.concurrent.TimeUnit);
							}
						}
						export abstract class Scheduler extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractScheduledService.Scheduler>;
							public static newFixedDelaySchedule(initialDelay: number, delay: number, unit: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.AbstractScheduledService.Scheduler;
							public static newFixedRateSchedule(initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.AbstractScheduledService.Scheduler;
						}
						export class ServiceDelegate extends com.google.common.util.concurrent.AbstractService {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractScheduledService.ServiceDelegate>;
							public addListener(listener: com.google.common.util.concurrent.Service.Listener, executor: java.util.concurrent.Executor): void;
							public doStop(): void;
							public doStart(): void;
							public awaitTerminated(): void;
							public startAsync(): com.google.common.util.concurrent.Service;
							public toString(): string;
							public awaitRunning(timeout: number, unit: java.util.concurrent.TimeUnit): void;
							public isRunning(): boolean;
							public state(): com.google.common.util.concurrent.Service.State;
							public awaitRunning(): void;
							public awaitTerminated(timeout: number, unit: java.util.concurrent.TimeUnit): void;
							public failureCause(): java.lang.Throwable;
							public stopAsync(): com.google.common.util.concurrent.Service;
						}
						export module ServiceDelegate {
							export class Task extends java.lang.Object implements java.lang.Runnable {
								public static class: java.lang.Class<com.google.common.util.concurrent.AbstractScheduledService.ServiceDelegate.Task>;
								public run(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractService extends java.lang.Object implements com.google.common.util.concurrent.Service {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractService>;
						public doCancelStart(): void;
						public doStart(): void;
						public constructor();
						public notifyStarted(): void;
						public notifyStopped(): void;
						public failureCause(): java.lang.Throwable;
						public doStop(): void;
						public startAsync(): com.google.common.util.concurrent.Service;
						public isRunning(): boolean;
						public toString(): string;
						public awaitRunning(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public stopAsync(): com.google.common.util.concurrent.Service;
						public addListener(listener: com.google.common.util.concurrent.Service.Listener, executor: java.util.concurrent.Executor): void;
						public awaitTerminated(): void;
						public state(): com.google.common.util.concurrent.Service.State;
						public awaitTerminated(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public notifyFailed(cause: java.lang.Throwable): void;
						public awaitRunning(): void;
					}
					export module AbstractService {
						export class HasReachedRunningGuard extends com.google.common.util.concurrent.Monitor.Guard {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractService.HasReachedRunningGuard>;
							public isSatisfied(): boolean;
						}
						export class IsStartableGuard extends com.google.common.util.concurrent.Monitor.Guard {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractService.IsStartableGuard>;
							public isSatisfied(): boolean;
						}
						export class IsStoppableGuard extends com.google.common.util.concurrent.Monitor.Guard {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractService.IsStoppableGuard>;
							public isSatisfied(): boolean;
						}
						export class IsStoppedGuard extends com.google.common.util.concurrent.Monitor.Guard {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractService.IsStoppedGuard>;
							public isSatisfied(): boolean;
						}
						export class StateSnapshot extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractService.StateSnapshot>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AbstractTransformFuture<I, O, F, T>  extends com.google.common.util.concurrent.FluentFuture.TrustedFuture<any> implements java.lang.Runnable  {
						public static class: java.lang.Class<com.google.common.util.concurrent.AbstractTransformFuture<any,any,any,any>>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public run(): void;
						public pendingToString(): string;
						public afterDone(): void;
					}
					export module AbstractTransformFuture {
						export class AsyncTransformFuture<I, O>  extends com.google.common.util.concurrent.AbstractTransformFuture<any,any,com.google.common.util.concurrent.AsyncFunction<any,any>,com.google.common.util.concurrent.ListenableFuture<any>> {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractTransformFuture.AsyncTransformFuture<any,any>>;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public run(): void;
						}
						export class TransformFuture<I, O>  extends com.google.common.util.concurrent.AbstractTransformFuture<any,any,com.google.common.base.Function<any,any>,any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.AbstractTransformFuture.TransformFuture<any,any>>;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AggregateFuture<InputT, OutputT>  extends com.google.common.util.concurrent.AbstractFuture.TrustedFuture<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.AggregateFuture<any,any>>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public pendingToString(): string;
						public afterDone(): void;
					}
					export module AggregateFuture {
						export abstract class RunningState extends com.google.common.util.concurrent.AggregateFutureState implements java.lang.Runnable {
							public static class: java.lang.Class<com.google.common.util.concurrent.AggregateFuture.RunningState>;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class AggregateFutureState extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.AggregateFutureState>;
					}
					export module AggregateFutureState {
						export abstract class AtomicHelper extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.AggregateFutureState.AtomicHelper>;
						}
						export class SafeAtomicHelper extends com.google.common.util.concurrent.AggregateFutureState.AtomicHelper {
							public static class: java.lang.Class<com.google.common.util.concurrent.AggregateFutureState.SafeAtomicHelper>;
						}
						export class SynchronizedAtomicHelper extends com.google.common.util.concurrent.AggregateFutureState.AtomicHelper {
							public static class: java.lang.Class<com.google.common.util.concurrent.AggregateFutureState.SynchronizedAtomicHelper>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class AsyncCallable<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.AsyncCallable<any>>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.AsyncCallable<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							call(): com.google.common.util.concurrent.ListenableFuture<V>;
						});
						public constructor();
						public call(): com.google.common.util.concurrent.ListenableFuture<V>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class AsyncFunction<I, O>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.AsyncFunction<any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.AsyncFunction<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							apply(object0: I): com.google.common.util.concurrent.ListenableFuture<O>;
						});
						public constructor();
						public apply(object0: I): com.google.common.util.concurrent.ListenableFuture<O>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class AtomicDouble extends java.lang.Number implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.util.concurrent.AtomicDouble>;
						public constructor(initialValue: number);
						public compareAndSet(expect: number, update: number): boolean;
						public floatValue(): number;
						public constructor();
						public get(): number;
						public addAndGet(delta: number): number;
						public getAndSet(newValue: number): number;
						public getAndAdd(delta: number): number;
						public lazySet(newValue: number): void;
						public intValue(): number;
						public toString(): string;
						public weakCompareAndSet(expect: number, update: number): boolean;
						public doubleValue(): number;
						public set(newValue: number): void;
						public longValue(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class AtomicDoubleArray extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<com.google.common.util.concurrent.AtomicDoubleArray>;
						public lazySet(i: number, newValue: number): void;
						public constructor(array: native.Array<number>);
						public getAndSet(i: number, newValue: number): number;
						public length(): number;
						public get(i: number): number;
						public compareAndSet(i: number, expect: number, update: number): boolean;
						public getAndAdd(i: number, delta: number): number;
						public set(i: number, newValue: number): void;
						public addAndGet(i: number, delta: number): number;
						public weakCompareAndSet(i: number, expect: number, update: number): boolean;
						public toString(): string;
						public constructor(length: number);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class AtomicLongMap<K>  extends java.io.Serializable {
						public static class: java.lang.Class<com.google.common.util.concurrent.AtomicLongMap<any>>;
						public getAndIncrement(key: any): number;
						public get(key: any): number;
						public putAll(m: java.util.Map<any,any>): void;
						public containsKey(key: any): boolean;
						public asMap(): java.util.Map<any,java.lang.Long>;
						public put(key: any, newValue: number): number;
						public incrementAndGet(key: any): number;
						public remove(key: any): number;
						public toString(): string;
						public static create(m: java.util.Map<any,any>): com.google.common.util.concurrent.AtomicLongMap<any>;
						public removeAllZeros(): void;
						public getAndAdd(key: any, delta: number): number;
						public decrementAndGet(key: any): number;
						public isEmpty(): boolean;
						public removeIfZero(key: any): boolean;
						public clear(): void;
						public size(): number;
						public getAndDecrement(key: any): number;
						public addAndGet(key: any, delta: number): number;
						public static create(): com.google.common.util.concurrent.AtomicLongMap<any>;
						public sum(): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Atomics extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Atomics>;
						public static newReference(): java.util.concurrent.atomic.AtomicReference<any>;
						public static newReference(initialValue: any): java.util.concurrent.atomic.AtomicReference<any>;
						public static newReferenceArray(length: number): java.util.concurrent.atomic.AtomicReferenceArray<any>;
						public static newReferenceArray(array: native.Array<any>): java.util.concurrent.atomic.AtomicReferenceArray<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Callables extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Callables>;
						public static returning(value: any): java.util.concurrent.Callable<any>;
						public static asAsyncCallable(callable: java.util.concurrent.Callable<any>, listeningExecutorService: com.google.common.util.concurrent.ListeningExecutorService): com.google.common.util.concurrent.AsyncCallable<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class CheckedFuture<V, X>  extends com.google.common.util.concurrent.ListenableFuture<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.CheckedFuture<any,any>>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.CheckedFuture<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							checkedGet(): any;
							checkedGet(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
							addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
							cancel(boolean0: boolean): boolean;
							isCancelled(): boolean;
							isDone(): boolean;
							get(): any;
							get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
						});
						public constructor();
						public isDone(): boolean;
						public get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
						public isCancelled(): boolean;
						public cancel(boolean0: boolean): boolean;
						public addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
						public get(): any;
						public checkedGet(): any;
						public checkedGet(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class CollectionFuture<V, C>  extends com.google.common.util.concurrent.AggregateFuture<any,any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.CollectionFuture<any,any>>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
					}
					export module CollectionFuture {
						export abstract class CollectionFutureRunningState extends com.google.common.util.concurrent.AggregateFuture.RunningState {
							public static class: java.lang.Class<com.google.common.util.concurrent.CollectionFuture.CollectionFutureRunningState>;
							public run(): void;
						}
						export class ListFuture<V>  extends com.google.common.util.concurrent.CollectionFuture<any,java.util.List<any>> {
							public static class: java.lang.Class<com.google.common.util.concurrent.CollectionFuture.ListFuture<any>>;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						}
						export module ListFuture {
							export class ListFutureRunningState extends com.google.common.util.concurrent.CollectionFuture.CollectionFutureRunningState {
								public static class: java.lang.Class<com.google.common.util.concurrent.CollectionFuture.ListFuture.ListFutureRunningState>;
								public combine(values: java.util.List<com.google.common.base.Optional<any>>): java.util.List<any>;
								public run(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class CombinedFuture<V>  extends com.google.common.util.concurrent.AggregateFuture<any,any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.CombinedFuture<any>>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
					}
					export module CombinedFuture {
						export class AsyncCallableInterruptibleTask extends com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask<com.google.common.util.concurrent.ListenableFuture<any>> {
							public static class: java.lang.Class<com.google.common.util.concurrent.CombinedFuture.AsyncCallableInterruptibleTask>;
							public constructor();
							public constructor(param0: com.google.common.util.concurrent.AsyncCallable<any>, callable: java.util.concurrent.Executor);
							public constructor(param0: com.google.common.util.concurrent.CombinedFuture<any>, listenerExecutor: java.util.concurrent.Executor);
							public constructor(initialValue: any);
							public run(): void;
						}
						export class CallableInterruptibleTask extends com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.CombinedFuture.CallableInterruptibleTask>;
							public constructor();
							public constructor(param0: java.util.concurrent.Callable<any>, callable: java.util.concurrent.Executor);
							public constructor(param0: com.google.common.util.concurrent.CombinedFuture<any>, listenerExecutor: java.util.concurrent.Executor);
							public constructor(initialValue: any);
							public run(): void;
						}
						export abstract class CombinedFutureInterruptibleTask<T>  extends com.google.common.util.concurrent.InterruptibleTask<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask<any>>;
							public constructor();
							public constructor(param0: com.google.common.util.concurrent.CombinedFuture<any>, listenerExecutor: java.util.concurrent.Executor);
							public constructor(initialValue: any);
							public run(): void;
						}
						export class CombinedFutureRunningState extends com.google.common.util.concurrent.AggregateFuture.RunningState {
							public static class: java.lang.Class<com.google.common.util.concurrent.CombinedFuture.CombinedFutureRunningState>;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class CycleDetectingLockFactory extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory>;
						public newReentrantReadWriteLock(lockName: string): java.util.concurrent.locks.ReentrantReadWriteLock;
						public static newInstance(policy: com.google.common.util.concurrent.CycleDetectingLockFactory.Policy): com.google.common.util.concurrent.CycleDetectingLockFactory;
						public static newInstanceWithExplicitOrdering(enumClass: java.lang.Class<any>, policy: com.google.common.util.concurrent.CycleDetectingLockFactory.Policy): com.google.common.util.concurrent.CycleDetectingLockFactory.WithExplicitOrdering<any>;
						public newReentrantLock(lockName: string, fair: boolean): java.util.concurrent.locks.ReentrantLock;
						public newReentrantLock(lockName: string): java.util.concurrent.locks.ReentrantLock;
						public newReentrantReadWriteLock(lockName: string, fair: boolean): java.util.concurrent.locks.ReentrantReadWriteLock;
					}
					export module CycleDetectingLockFactory {
						export class CycleDetectingLock extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.CycleDetectingLock>;
							/**
							 * Constructs a new instance of the com.google.common.util.concurrent.CycleDetectingLockFactory$CycleDetectingLock interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getLockGraphNode(): com.google.common.util.concurrent.CycleDetectingLockFactory.LockGraphNode;
								isAcquiredByCurrentThread(): boolean;
							});
							public constructor();
							public getLockGraphNode(): com.google.common.util.concurrent.CycleDetectingLockFactory.LockGraphNode;
							public isAcquiredByCurrentThread(): boolean;
						}
						export class CycleDetectingReentrantLock extends java.util.concurrent.locks.ReentrantLock implements com.google.common.util.concurrent.CycleDetectingLockFactory.CycleDetectingLock {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.CycleDetectingReentrantLock>;
							public getLockGraphNode(): com.google.common.util.concurrent.CycleDetectingLockFactory.LockGraphNode;
							public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
							public tryLock(): boolean;
							public lock(): void;
							public lockInterruptibly(): void;
							public unlock(): void;
							public newCondition(): java.util.concurrent.locks.Condition;
							public isAcquiredByCurrentThread(): boolean;
						}
						export class CycleDetectingReentrantReadLock extends java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.CycleDetectingReentrantReadLock>;
							public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
							public tryLock(): boolean;
							public lock(): void;
							public lockInterruptibly(): void;
							public unlock(): void;
							public newCondition(): java.util.concurrent.locks.Condition;
						}
						export class CycleDetectingReentrantReadWriteLock extends java.util.concurrent.locks.ReentrantReadWriteLock implements com.google.common.util.concurrent.CycleDetectingLockFactory.CycleDetectingLock {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.CycleDetectingReentrantReadWriteLock>;
							public getLockGraphNode(): com.google.common.util.concurrent.CycleDetectingLockFactory.LockGraphNode;
							public writeLock(): java.util.concurrent.locks.Lock;
							public readLock(): java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock;
							public writeLock(): java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock;
							public readLock(): java.util.concurrent.locks.Lock;
							public isAcquiredByCurrentThread(): boolean;
						}
						export class CycleDetectingReentrantWriteLock extends java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.CycleDetectingReentrantWriteLock>;
							public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
							public tryLock(): boolean;
							public lock(): void;
							public lockInterruptibly(): void;
							public unlock(): void;
							public newCondition(): java.util.concurrent.locks.Condition;
						}
						export class ExampleStackTrace extends java.lang.IllegalStateException {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.ExampleStackTrace>;
						}
						export class LockGraphNode extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.LockGraphNode>;
						}
						export abstract class Policies extends com.google.common.util.concurrent.CycleDetectingLockFactory.Policy {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.Policies>;
							public static DISABLED: com.google.common.util.concurrent.CycleDetectingLockFactory.Policies;
							public static THROW: com.google.common.util.concurrent.CycleDetectingLockFactory.Policies;
							public static WARN: com.google.common.util.concurrent.CycleDetectingLockFactory.Policies;
							public static values(): native.Array<com.google.common.util.concurrent.CycleDetectingLockFactory.Policies>;
							public static valueOf(name: string): com.google.common.util.concurrent.CycleDetectingLockFactory.Policies;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public handlePotentialDeadlock(potentialDeadlockException0: com.google.common.util.concurrent.CycleDetectingLockFactory.PotentialDeadlockException): void;
						}
						export class Policy extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.Policy>;
							/**
							 * Constructs a new instance of the com.google.common.util.concurrent.CycleDetectingLockFactory$Policy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								handlePotentialDeadlock(potentialDeadlockException0: com.google.common.util.concurrent.CycleDetectingLockFactory.PotentialDeadlockException): void;
							});
							public constructor();
							public handlePotentialDeadlock(potentialDeadlockException0: com.google.common.util.concurrent.CycleDetectingLockFactory.PotentialDeadlockException): void;
						}
						export class PotentialDeadlockException extends com.google.common.util.concurrent.CycleDetectingLockFactory.ExampleStackTrace {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.PotentialDeadlockException>;
							public getConflictingStackTrace(): com.google.common.util.concurrent.CycleDetectingLockFactory.ExampleStackTrace;
							public getMessage(): string;
						}
						export class WithExplicitOrdering<E>  extends com.google.common.util.concurrent.CycleDetectingLockFactory {
							public static class: java.lang.Class<com.google.common.util.concurrent.CycleDetectingLockFactory.WithExplicitOrdering<any>>;
							public newReentrantLock(rank: any, fair: boolean): java.util.concurrent.locks.ReentrantLock;
							public newReentrantReadWriteLock(rank: any, fair: boolean): java.util.concurrent.locks.ReentrantReadWriteLock;
							public newReentrantLock(lockName: string, fair: boolean): java.util.concurrent.locks.ReentrantLock;
							public newReentrantReadWriteLock(lockName: string, fair: boolean): java.util.concurrent.locks.ReentrantReadWriteLock;
							public newReentrantLock(rank: any): java.util.concurrent.locks.ReentrantLock;
							public newReentrantReadWriteLock(lockName: string): java.util.concurrent.locks.ReentrantReadWriteLock;
							public newReentrantReadWriteLock(rank: any): java.util.concurrent.locks.ReentrantReadWriteLock;
							public newReentrantLock(lockName: string): java.util.concurrent.locks.ReentrantLock;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class DirectExecutor extends java.util.concurrent.Executor {
						public static class: java.lang.Class<com.google.common.util.concurrent.DirectExecutor>;
						public static INSTANCE: com.google.common.util.concurrent.DirectExecutor;
						public static values(): native.Array<com.google.common.util.concurrent.DirectExecutor>;
						public execute(command: java.lang.Runnable): void;
						public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
						public static valueOf(name: string): com.google.common.util.concurrent.DirectExecutor;
						public toString(): string;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ExecutionError extends java.lang.Error {
						public static class: java.lang.Class<com.google.common.util.concurrent.ExecutionError>;
						public constructor();
						public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
						public constructor(message: string, cause: java.lang.Error);
						public constructor(cause: java.lang.Error);
						public constructor(message: string, cause: java.lang.Throwable);
						public constructor(cause: java.lang.Throwable);
						public constructor(message: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ExecutionList extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.ExecutionList>;
						public constructor();
						public execute(): void;
						public add(runnable: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
					}
					export module ExecutionList {
						export class RunnableExecutorPair extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.ExecutionList.RunnableExecutorPair>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ExecutionSequencer extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.ExecutionSequencer>;
						public submitAsync(callable: com.google.common.util.concurrent.AsyncCallable<any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						public submit(callable: java.util.concurrent.Callable<any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						public static create(): com.google.common.util.concurrent.ExecutionSequencer;
					}
					export module ExecutionSequencer {
						export class RunningState {
							public static class: java.lang.Class<com.google.common.util.concurrent.ExecutionSequencer.RunningState>;
							public static CANCELLED: com.google.common.util.concurrent.ExecutionSequencer.RunningState;
							public static NOT_RUN: com.google.common.util.concurrent.ExecutionSequencer.RunningState;
							public static STARTED: com.google.common.util.concurrent.ExecutionSequencer.RunningState;
							public static values(): native.Array<com.google.common.util.concurrent.ExecutionSequencer.RunningState>;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(name: string): com.google.common.util.concurrent.ExecutionSequencer.RunningState;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class FakeTimeLimiter extends java.lang.Object implements com.google.common.util.concurrent.TimeLimiter {
						public static class: java.lang.Class<com.google.common.util.concurrent.FakeTimeLimiter>;
						public constructor();
						public runUninterruptiblyWithTimeout(runnable: java.lang.Runnable, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): void;
						public newProxy(target: any, interfaceType: java.lang.Class<any>, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): any;
						public runWithTimeout(runnable: java.lang.Runnable, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): void;
						public callUninterruptiblyWithTimeout(callable: java.util.concurrent.Callable<any>, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): any;
						public callWithTimeout(callable: java.util.concurrent.Callable<any>, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class FluentFuture<V>  extends com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.FluentFuture<any>>;
						public catching(exceptionType: java.lang.Class<any>, fallback: com.google.common.base.Function<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.FluentFuture<any>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public catchingAsync(exceptionType: java.lang.Class<any>, fallback: com.google.common.util.concurrent.AsyncFunction<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.FluentFuture<any>;
						public transformAsync(function0: com.google.common.util.concurrent.AsyncFunction<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.FluentFuture<any>;
						public transform(function0: com.google.common.base.Function<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.FluentFuture<any>;
						public withTimeout(timeout: number, unit: java.util.concurrent.TimeUnit, scheduledExecutor: java.util.concurrent.ScheduledExecutorService): com.google.common.util.concurrent.FluentFuture<any>;
						public addCallback(callback: com.google.common.util.concurrent.FutureCallback<any>, executor: java.util.concurrent.Executor): void;
						public static from(future: com.google.common.util.concurrent.ListenableFuture<any>): com.google.common.util.concurrent.FluentFuture<any>;
					}
					export module FluentFuture {
						export abstract class TrustedFuture<V>  extends com.google.common.util.concurrent.FluentFuture<any> implements com.google.common.util.concurrent.AbstractFuture.Trusted<any>  {
							public static class: java.lang.Class<com.google.common.util.concurrent.FluentFuture.TrustedFuture<any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public cancel(mayInterruptIfRunning: boolean): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingBlockingDeque<E>  extends com.google.common.collect.ForwardingDeque<any> implements java.util.concurrent.BlockingDeque<any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingBlockingDeque<any>>;
						public equals(obj: any): boolean;
						public stream(): java.util.stream.Stream<any>;
						public poll(): any;
						public removeFirstOccurrence(o: any): boolean;
						public drainTo(c: java.util.Collection<any>, maxElements: number): number;
						public poll(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public putFirst(e: any): void;
						public peekFirst(): any;
						public size(): number;
						public delegate(): java.util.Queue<any>;
						public delegate(): java.util.concurrent.BlockingDeque<any>;
						public pollLast(): any;
						public remove(): any;
						public addLast(e: any): void;
						public constructor();
						public pop(): any;
						public offerFirst(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public peekLast(): any;
						public remainingCapacity(): number;
						public peek(): any;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public offerLast(e: any): boolean;
						public delegate(): java.util.Deque<any>;
						public getLast(): any;
						public offerFirst(e: any): boolean;
						public removeLastOccurrence(o: any): boolean;
						public take(): any;
						public remove(object: any): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public put(e: any): void;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public descendingIterator(): java.util.Iterator<any>;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public offer(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public offerLast(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public hashCode(): number;
						public element(): any;
						public removeIf(filter: any /* any*/): boolean;
						public drainTo(c: java.util.Collection<any>): number;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public push(e: any): void;
						public addFirst(e: any): void;
						public offer(o: any): boolean;
						public pollFirst(): any;
						public delegate(): java.util.Collection<any>;
						public putLast(e: any): void;
						public removeFirst(): any;
						public parallelStream(): java.util.stream.Stream<any>;
						public removeLast(): any;
						public delegate(): any;
						public getFirst(): any;
						public pollLast(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public takeLast(): any;
						public takeFirst(): any;
						public pollFirst(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public addAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingBlockingQueue<E>  extends com.google.common.collect.ForwardingQueue<any> implements java.util.concurrent.BlockingQueue<any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingBlockingQueue<any>>;
						public equals(obj: any): boolean;
						public contains(object: any): boolean;
						public iterator(): java.util.Iterator<any>;
						public offer(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public stream(): java.util.stream.Stream<any>;
						public hashCode(): number;
						public poll(): any;
						public drainTo(c: java.util.Collection<any>, maxElements: number): number;
						public element(): any;
						public removeIf(filter: any /* any*/): boolean;
						public drainTo(c: java.util.Collection<any>): number;
						public poll(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public toArray(array: native.Array<any>): native.Array<any>;
						public spliterator(): java.util.Spliterator<any>;
						public isEmpty(): boolean;
						public size(): number;
						public delegate(): java.util.Queue<any>;
						public remove(): any;
						public offer(o: any): boolean;
						public constructor();
						public delegate(): java.util.Collection<any>;
						public remainingCapacity(): number;
						public peek(): any;
						public parallelStream(): java.util.stream.Stream<any>;
						public retainAll(collection: java.util.Collection<any>): boolean;
						public delegate(): java.util.concurrent.BlockingQueue<any>;
						public delegate(): any;
						public take(): any;
						public remove(object: any): boolean;
						public clear(): void;
						public add(element: any): boolean;
						public forEach(action: any /* any*/): void;
						public containsAll(collection: java.util.Collection<any>): boolean;
						public addAll(collection: java.util.Collection<any>): boolean;
						public put(e: any): void;
						public removeAll(collection: java.util.Collection<any>): boolean;
						public toArray(): native.Array<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingCheckedFuture<V, X>  extends com.google.common.util.concurrent.ForwardingListenableFuture<any> implements com.google.common.util.concurrent.CheckedFuture<any,any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingCheckedFuture<any,any>>;
						public checkedGet(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public constructor();
						public isCancelled(): boolean;
						public delegate(): java.util.concurrent.Future<any>;
						public delegate(): com.google.common.util.concurrent.CheckedFuture<any,any>;
						public get(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public delegate(): any;
						public isDone(): boolean;
						public delegate(): com.google.common.util.concurrent.ListenableFuture<any>;
						public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
						public checkedGet(): any;
					}
					export module ForwardingCheckedFuture {
						export abstract class SimpleForwardingCheckedFuture<V, X>  extends com.google.common.util.concurrent.ForwardingCheckedFuture<any,any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingCheckedFuture.SimpleForwardingCheckedFuture<any,any>>;
							public constructor();
							public checkedGet(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public isCancelled(): boolean;
							public checkedGet(): any;
							public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
							public cancel(mayInterruptIfRunning: boolean): boolean;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public delegate(): com.google.common.util.concurrent.CheckedFuture<any,any>;
							public isDone(): boolean;
							public constructor(delegate: com.google.common.util.concurrent.CheckedFuture<any,any>);
							public delegate(): com.google.common.util.concurrent.ListenableFuture<any>;
							public delegate(): any;
							public delegate(): java.util.concurrent.Future<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingCondition extends java.lang.Object implements java.util.concurrent.locks.Condition {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingCondition>;
						public awaitUntil(deadline: java.util.Date): boolean;
						public awaitUninterruptibly(): void;
						public signalAll(): void;
						public awaitNanos(nanosTimeout: number): number;
						public await(): void;
						public signal(): void;
						public await(time: number, unit: java.util.concurrent.TimeUnit): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingExecutorService extends com.google.common.collect.ForwardingObject implements java.util.concurrent.ExecutorService {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingExecutorService>;
						public constructor();
						public isTerminated(): boolean;
						public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
						public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
						public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public awaitTermination(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
						public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
						public delegate(): any;
						public shutdown(): void;
						public isShutdown(): boolean;
						public execute(command: java.lang.Runnable): void;
						public invokeAny(tasks: java.util.Collection<any>): any;
						public shutdownNow(): java.util.List<java.lang.Runnable>;
						public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
						public delegate(): java.util.concurrent.ExecutorService;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ForwardingFluentFuture<V>  extends com.google.common.util.concurrent.FluentFuture<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingFluentFuture<any>>;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public isDone(): boolean;
						public isCancelled(): boolean;
						public get(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingFuture<V>  extends com.google.common.collect.ForwardingObject implements java.util.concurrent.Future<any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingFuture<any>>;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public delegate(): any;
						public constructor();
						public isDone(): boolean;
						public isCancelled(): boolean;
						public delegate(): java.util.concurrent.Future<any>;
						public get(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					}
					export module ForwardingFuture {
						export abstract class SimpleForwardingFuture<V>  extends com.google.common.util.concurrent.ForwardingFuture<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingFuture.SimpleForwardingFuture<any>>;
							public constructor();
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public cancel(mayInterruptIfRunning: boolean): boolean;
							public delegate(): any;
							public constructor(delegate: java.util.concurrent.Future<any>);
							public delegate(): java.util.concurrent.Future<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingListenableFuture<V>  extends com.google.common.util.concurrent.ForwardingFuture<any> implements com.google.common.util.concurrent.ListenableFuture<any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingListenableFuture<any>>;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public delegate(): any;
						public constructor();
						public isDone(): boolean;
						public delegate(): com.google.common.util.concurrent.ListenableFuture<any>;
						public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
						public isCancelled(): boolean;
						public delegate(): java.util.concurrent.Future<any>;
						public get(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					}
					export module ForwardingListenableFuture {
						export abstract class SimpleForwardingListenableFuture<V>  extends com.google.common.util.concurrent.ForwardingListenableFuture<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture<any>>;
							public constructor();
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public delegate(): com.google.common.util.concurrent.ListenableFuture<any>;
							public constructor(delegate: com.google.common.util.concurrent.ListenableFuture<any>);
							public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
							public cancel(mayInterruptIfRunning: boolean): boolean;
							public delegate(): any;
							public delegate(): java.util.concurrent.Future<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingListeningExecutorService extends com.google.common.util.concurrent.ForwardingExecutorService implements com.google.common.util.concurrent.ListeningExecutorService {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingListeningExecutorService>;
						public constructor();
						public isTerminated(): boolean;
						public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
						public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
						public submit(task: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public awaitTermination(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
						public delegate(): com.google.common.util.concurrent.ListeningExecutorService;
						public submit(task: java.lang.Runnable, result: any): com.google.common.util.concurrent.ListenableFuture<any>;
						public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
						public delegate(): any;
						public shutdown(): void;
						public submit(task: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
						public isShutdown(): boolean;
						public execute(command: java.lang.Runnable): void;
						public invokeAny(tasks: java.util.Collection<any>): any;
						public shutdownNow(): java.util.List<java.lang.Runnable>;
						public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
						public delegate(): java.util.concurrent.ExecutorService;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ForwardingLock extends java.lang.Object implements java.util.concurrent.locks.Lock {
						public static class: java.lang.Class<com.google.common.util.concurrent.ForwardingLock>;
						public unlock(): void;
						public lockInterruptibly(): void;
						public tryLock(time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public lock(): void;
						public tryLock(): boolean;
						public newCondition(): java.util.concurrent.locks.Condition;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class FutureCallback<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.FutureCallback<any>>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.FutureCallback<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							onSuccess(object0: V): void;
							onFailure(throwable0: java.lang.Throwable): void;
						});
						public constructor();
						public onFailure(throwable0: java.lang.Throwable): void;
						public onSuccess(object0: V): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Futures extends com.google.common.util.concurrent.GwtFuturesCatchingSpecialization {
						public static class: java.lang.Class<com.google.common.util.concurrent.Futures>;
						/** @deprecated */
						public static makeChecked(future: com.google.common.util.concurrent.ListenableFuture<any>, mapper: com.google.common.base.Function<any,any>): com.google.common.util.concurrent.CheckedFuture<any,any>;
						public static whenAllComplete(futures: java.lang.Iterable<any>): com.google.common.util.concurrent.Futures.FutureCombiner<any>;
						public static addCallback(future: com.google.common.util.concurrent.ListenableFuture<any>, callback: com.google.common.util.concurrent.FutureCallback<any>, executor: java.util.concurrent.Executor): void;
						public static transform(input: com.google.common.util.concurrent.ListenableFuture<any>, function1: com.google.common.base.Function<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						public static immediateCancelledFuture(): com.google.common.util.concurrent.ListenableFuture<any>;
						public static allAsList(futures: native.Array<com.google.common.util.concurrent.ListenableFuture<any>>): com.google.common.util.concurrent.ListenableFuture<any>;
						public static whenAllSucceed(futures: java.lang.Iterable<any>): com.google.common.util.concurrent.Futures.FutureCombiner<any>;
						public static catching(input: com.google.common.util.concurrent.ListenableFuture<any>, exceptionType: java.lang.Class<any>, fallback: com.google.common.base.Function<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						/** @deprecated */
						public static immediateFailedCheckedFuture(exception: java.lang.Exception): com.google.common.util.concurrent.CheckedFuture<any,any>;
						public static getUnchecked(future: java.util.concurrent.Future<any>): any;
						public static withTimeout(delegate: com.google.common.util.concurrent.ListenableFuture<any>, time: number, unit: java.util.concurrent.TimeUnit, scheduledExecutor: java.util.concurrent.ScheduledExecutorService): com.google.common.util.concurrent.ListenableFuture<any>;
						public static successfulAsList(futures: java.lang.Iterable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public static lazyTransform(input: java.util.concurrent.Future<any>, function1: com.google.common.base.Function<any,any>): java.util.concurrent.Future<any>;
						public static scheduleAsync(callable: com.google.common.util.concurrent.AsyncCallable<any>, delay: number, timeUnit: java.util.concurrent.TimeUnit, executorService: java.util.concurrent.ScheduledExecutorService): com.google.common.util.concurrent.ListenableFuture<any>;
						public static whenAllSucceed(futures: native.Array<com.google.common.util.concurrent.ListenableFuture<any>>): com.google.common.util.concurrent.Futures.FutureCombiner<any>;
						public static getDone(future: java.util.concurrent.Future<any>): any;
						public static immediateFailedFuture(throwable: java.lang.Throwable): com.google.common.util.concurrent.ListenableFuture<any>;
						public static inCompletionOrder(futures: java.lang.Iterable<any>): com.google.common.collect.ImmutableList<any>;
						public static submitAsync(callable: com.google.common.util.concurrent.AsyncCallable<any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						public static immediateFuture(value: any): com.google.common.util.concurrent.ListenableFuture<any>;
						public static allAsList(futures: java.lang.Iterable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public static getChecked(future: java.util.concurrent.Future<any>, exceptionClass: java.lang.Class<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public static catchingAsync(input: com.google.common.util.concurrent.ListenableFuture<any>, exceptionType: java.lang.Class<any>, fallback: com.google.common.util.concurrent.AsyncFunction<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						public static whenAllComplete(futures: native.Array<com.google.common.util.concurrent.ListenableFuture<any>>): com.google.common.util.concurrent.Futures.FutureCombiner<any>;
						public static transformAsync(input: com.google.common.util.concurrent.ListenableFuture<any>, function1: com.google.common.util.concurrent.AsyncFunction<any,any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						public static getChecked(future: java.util.concurrent.Future<any>, exceptionClass: java.lang.Class<any>): any;
						/** @deprecated */
						public static immediateCheckedFuture(value: any): com.google.common.util.concurrent.CheckedFuture<any,any>;
						public static nonCancellationPropagating(future: com.google.common.util.concurrent.ListenableFuture<any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public static successfulAsList(futures: native.Array<com.google.common.util.concurrent.ListenableFuture<any>>): com.google.common.util.concurrent.ListenableFuture<any>;
					}
					export module Futures {
						export class CallbackListener<V>  extends java.lang.Runnable {
							public static class: java.lang.Class<com.google.common.util.concurrent.Futures.CallbackListener<any>>;
							public toString(): string;
							public run(): void;
						}
						export class FutureCombiner<V>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.Futures.FutureCombiner<any>>;
							public call(combiner: java.util.concurrent.Callable<any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
							public run(combiner: java.lang.Runnable, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
							public callAsync(combiner: com.google.common.util.concurrent.AsyncCallable<any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						}
						export class InCompletionOrderFuture<T>  extends com.google.common.util.concurrent.AbstractFuture<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.Futures.InCompletionOrderFuture<any>>;
							public pendingToString(): string;
							public afterDone(): void;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public cancel(interruptIfRunning: boolean): boolean;
							public cancel(mayInterruptIfRunning: boolean): boolean;
						}
						export class InCompletionOrderState<T>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.Futures.InCompletionOrderState<any>>;
						}
						export class MappingCheckedFuture<V, X>  extends com.google.common.util.concurrent.AbstractCheckedFuture<any,any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.Futures.MappingCheckedFuture<any,any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public checkedGet(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public mapException(e: java.lang.Exception): any;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public checkedGet(): any;
							public mapException(exception0: java.lang.Exception): any;
							public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
							public cancel(mayInterruptIfRunning: boolean): boolean;
						}
						export class NonCancellationPropagatingFuture<V>  extends com.google.common.util.concurrent.AbstractFuture.TrustedFuture<any> implements java.lang.Runnable  {
							public static class: java.lang.Class<com.google.common.util.concurrent.Futures.NonCancellationPropagatingFuture<any>>;
							public pendingToString(): string;
							public afterDone(): void;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class FuturesGetChecked extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.FuturesGetChecked>;
					}
					export module FuturesGetChecked {
						export class GetCheckedTypeValidator extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidator>;
							/**
							 * Constructs a new instance of the com.google.common.util.concurrent.FuturesGetChecked$GetCheckedTypeValidator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								validateClass(class0: java.lang.Class<any>): void;
							});
							public constructor();
							public validateClass(class0: java.lang.Class<any>): void;
						}
						export class GetCheckedTypeValidatorHolder extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder>;
						}
						export module GetCheckedTypeValidatorHolder {
							export class ClassValueValidator extends com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidator {
								public static class: java.lang.Class<com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.ClassValueValidator>;
								public static INSTANCE: com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.ClassValueValidator;
								public validateClass(exceptionClass: java.lang.Class<any>): void;
								public static values(): native.Array<com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.ClassValueValidator>;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
								public static valueOf(name: string): com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.ClassValueValidator;
							}
							export class WeakSetValidator extends com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidator {
								public static class: java.lang.Class<com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator>;
								public static INSTANCE: com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator;
								public validateClass(exceptionClass: java.lang.Class<any>): void;
								public static values(): native.Array<com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator>;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
								public static valueOf(name: string): com.google.common.util.concurrent.FuturesGetChecked.GetCheckedTypeValidatorHolder.WeakSetValidator;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class GwtFluentFutureCatchingSpecialization<V>  extends com.google.common.util.concurrent.AbstractFuture<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization<any>>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class GwtFuturesCatchingSpecialization extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.GwtFuturesCatchingSpecialization>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class ImmediateFuture<V>  extends com.google.common.util.concurrent.ListenableFuture<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.ImmediateFuture<any>>;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public isDone(): boolean;
						public isCancelled(): boolean;
						public get(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					}
					export module ImmediateFuture {
						export class ImmediateCancelledFuture<V>  extends com.google.common.util.concurrent.AbstractFuture.TrustedFuture<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.ImmediateFuture.ImmediateCancelledFuture<any>>;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						}
						export class ImmediateFailedCheckedFuture<V, X>  extends com.google.common.util.concurrent.ImmediateFuture<any> implements com.google.common.util.concurrent.CheckedFuture<any,any>  {
							public static class: java.lang.Class<com.google.common.util.concurrent.ImmediateFuture.ImmediateFailedCheckedFuture<any,any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public checkedGet(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public checkedGet(): any;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public toString(): string;
							public cancel(mayInterruptIfRunning: boolean): boolean;
						}
						export class ImmediateFailedFuture<V>  extends com.google.common.util.concurrent.AbstractFuture.TrustedFuture<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.ImmediateFuture.ImmediateFailedFuture<any>>;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						}
						export class ImmediateSuccessfulCheckedFuture<V, X>  extends com.google.common.util.concurrent.ImmediateFuture<any> implements com.google.common.util.concurrent.CheckedFuture<any,any>  {
							public static class: java.lang.Class<com.google.common.util.concurrent.ImmediateFuture.ImmediateSuccessfulCheckedFuture<any,any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public checkedGet(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public checkedGet(): any;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public toString(): string;
							public cancel(mayInterruptIfRunning: boolean): boolean;
						}
						export class ImmediateSuccessfulFuture<V>  extends com.google.common.util.concurrent.ImmediateFuture<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.ImmediateFuture.ImmediateSuccessfulFuture<any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class InterruptibleTask<T>  extends java.util.concurrent.atomic.AtomicReference<java.lang.Runnable> implements java.lang.Runnable  {
						public static class: java.lang.Class<com.google.common.util.concurrent.InterruptibleTask<any>>;
						public run(): void;
						public toString(): string;
					}
					export module InterruptibleTask {
						export class DoNothingRunnable extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<com.google.common.util.concurrent.InterruptibleTask.DoNothingRunnable>;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class JdkFutureAdapters extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.JdkFutureAdapters>;
						public static listenInPoolThread(future: java.util.concurrent.Future<any>, executor: java.util.concurrent.Executor): com.google.common.util.concurrent.ListenableFuture<any>;
						public static listenInPoolThread(future: java.util.concurrent.Future<any>): com.google.common.util.concurrent.ListenableFuture<any>;
					}
					export module JdkFutureAdapters {
						export class ListenableFutureAdapter<V>  extends com.google.common.util.concurrent.ForwardingFuture<any> implements com.google.common.util.concurrent.ListenableFuture<any>  {
							public static class: java.lang.Class<com.google.common.util.concurrent.JdkFutureAdapters.ListenableFutureAdapter<any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
							public cancel(mayInterruptIfRunning: boolean): boolean;
							public delegate(): any;
							public delegate(): java.util.concurrent.Future<any>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ListenableFuture<V>  extends java.util.concurrent.Future<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.ListenableFuture<any>>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.ListenableFuture<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
							cancel(boolean0: boolean): boolean;
							isCancelled(): boolean;
							isDone(): boolean;
							get(): any;
							get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
						});
						public constructor();
						public isDone(): boolean;
						public get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): any;
						public isCancelled(): boolean;
						public cancel(boolean0: boolean): boolean;
						public addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
						public get(): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ListenableFutureTask<V>  extends java.util.concurrent.FutureTask<any> implements com.google.common.util.concurrent.ListenableFuture<any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.ListenableFutureTask<any>>;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public isDone(): boolean;
						public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
						public run(): void;
						public isCancelled(): boolean;
						public static create(runnable: java.lang.Runnable, result: any): com.google.common.util.concurrent.ListenableFutureTask<any>;
						public static create(callable: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFutureTask<any>;
						public done(): void;
						public get(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ListenableScheduledFuture<V>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.ListenableScheduledFuture<any>>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.ListenableScheduledFuture<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
							getDelay(timeUnit0: java.util.concurrent.TimeUnit): number;
							cancel(boolean0: boolean): boolean;
							isCancelled(): boolean;
							isDone(): boolean;
							get(): V;
							get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): V;
							cancel(boolean0: boolean): boolean;
							isCancelled(): boolean;
							isDone(): boolean;
							get(): V;
							get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): V;
						});
						public constructor();
						public get(long0: number, timeUnit1: java.util.concurrent.TimeUnit): V;
						public isDone(): boolean;
						public get(): V;
						public isCancelled(): boolean;
						public cancel(boolean0: boolean): boolean;
						public addListener(runnable0: java.lang.Runnable, executor1: java.util.concurrent.Executor): void;
						public getDelay(timeUnit0: java.util.concurrent.TimeUnit): number;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ListenerCallQueue<L>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.ListenerCallQueue<any>>;
						public enqueue(event: com.google.common.util.concurrent.ListenerCallQueue.Event<L>, label: string): void;
						public enqueue(event: com.google.common.util.concurrent.ListenerCallQueue.Event<L>): void;
						public dispatch(): void;
						public addListener(listener: L, executor: java.util.concurrent.Executor): void;
					}
					export module ListenerCallQueue {
						export class Event<L>  extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.ListenerCallQueue.Event<any>>;
							/**
							 * Constructs a new instance of the com.google.common.util.concurrent.ListenerCallQueue$Event interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								call(object0: L): void;
							});
							public constructor();
							public call(object0: L): void;
						}
						export class PerListenerQueue<L>  extends java.lang.Runnable {
							public static class: java.lang.Class<com.google.common.util.concurrent.ListenerCallQueue.PerListenerQueue<any>>;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ListeningExecutorService extends java.lang.Object implements java.util.concurrent.ExecutorService {
						public static class: java.lang.Class<com.google.common.util.concurrent.ListeningExecutorService>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.ListeningExecutorService interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							submit(callable0: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
							submit(runnable0: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
							submit(runnable0: java.lang.Runnable, object1: any): com.google.common.util.concurrent.ListenableFuture<any>;
							invokeAll(collection0: java.util.Collection<any>): java.util.List<any>;
							invokeAll(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.List<any>;
							shutdown(): void;
							shutdownNow(): java.util.List<java.lang.Runnable>;
							isShutdown(): boolean;
							isTerminated(): boolean;
							awaitTermination(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
							submit(callable0: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
							submit(runnable0: java.lang.Runnable, object1: any): java.util.concurrent.Future<any>;
							submit(runnable0: java.lang.Runnable): java.util.concurrent.Future<any>;
							invokeAll(collection0: java.util.Collection<any>): java.util.List<any>;
							invokeAll(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.List<any>;
							invokeAny(collection0: java.util.Collection<any>): any;
							invokeAny(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
							execute(runnable0: java.lang.Runnable): void;
						});
						public constructor();
						public invokeAll(collection0: java.util.Collection<any>): java.util.List<any>;
						public isTerminated(): boolean;
						public submit(callable0: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
						public submit(runnable0: java.lang.Runnable, object1: any): java.util.concurrent.Future<any>;
						public submit(callable0: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public submit(runnable0: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
						public awaitTermination(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
						public execute(runnable0: java.lang.Runnable): void;
						public submit(runnable0: java.lang.Runnable): java.util.concurrent.Future<any>;
						public shutdown(): void;
						public invokeAny(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
						public submit(runnable0: java.lang.Runnable, object1: any): com.google.common.util.concurrent.ListenableFuture<any>;
						public isShutdown(): boolean;
						public invokeAny(collection0: java.util.Collection<any>): any;
						public invokeAll(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.List<any>;
						public shutdownNow(): java.util.List<java.lang.Runnable>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ListeningScheduledExecutorService extends java.lang.Object implements java.util.concurrent.ScheduledExecutorService, com.google.common.util.concurrent.ListeningExecutorService {
						public static class: java.lang.Class<com.google.common.util.concurrent.ListeningScheduledExecutorService>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.ListeningScheduledExecutorService interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							schedule(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							schedule(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							scheduleAtFixedRate(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							scheduleWithFixedDelay(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							schedule(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							schedule(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							scheduleAtFixedRate(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							scheduleWithFixedDelay(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							submit(callable0: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
							submit(runnable0: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
							submit(runnable0: java.lang.Runnable, object1: any): com.google.common.util.concurrent.ListenableFuture<any>;
							invokeAll(collection0: java.util.Collection<any>): java.util.List<any>;
							invokeAll(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.List<any>;
							shutdown(): void;
							shutdownNow(): java.util.List<java.lang.Runnable>;
							isShutdown(): boolean;
							isTerminated(): boolean;
							awaitTermination(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
							submit(callable0: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
							submit(runnable0: java.lang.Runnable, object1: any): java.util.concurrent.Future<any>;
							submit(runnable0: java.lang.Runnable): java.util.concurrent.Future<any>;
							invokeAll(collection0: java.util.Collection<any>): java.util.List<any>;
							invokeAll(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.List<any>;
							invokeAny(collection0: java.util.Collection<any>): any;
							invokeAny(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
							shutdown(): void;
							shutdownNow(): java.util.List<java.lang.Runnable>;
							isShutdown(): boolean;
							isTerminated(): boolean;
							awaitTermination(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
							submit(callable0: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
							submit(runnable0: java.lang.Runnable, object1: any): java.util.concurrent.Future<any>;
							submit(runnable0: java.lang.Runnable): java.util.concurrent.Future<any>;
							invokeAll(collection0: java.util.Collection<any>): java.util.List<any>;
							invokeAll(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.List<any>;
							invokeAny(collection0: java.util.Collection<any>): any;
							invokeAny(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
							execute(runnable0: java.lang.Runnable): void;
							execute(runnable0: java.lang.Runnable): void;
						});
						public constructor();
						public scheduleWithFixedDelay(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
						public schedule(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
						public invokeAll(collection0: java.util.Collection<any>): java.util.List<any>;
						public schedule(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
						public isTerminated(): boolean;
						public submit(callable0: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
						public schedule(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
						public submit(runnable0: java.lang.Runnable, object1: any): java.util.concurrent.Future<any>;
						public submit(callable0: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
						public submit(runnable0: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
						public scheduleAtFixedRate(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
						public awaitTermination(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
						public execute(runnable0: java.lang.Runnable): void;
						public submit(runnable0: java.lang.Runnable): java.util.concurrent.Future<any>;
						public schedule(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
						public shutdown(): void;
						public invokeAny(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
						public submit(runnable0: java.lang.Runnable, object1: any): com.google.common.util.concurrent.ListenableFuture<any>;
						public isShutdown(): boolean;
						public invokeAny(collection0: java.util.Collection<any>): any;
						public scheduleAtFixedRate(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
						public invokeAll(collection0: java.util.Collection<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.List<any>;
						public shutdownNow(): java.util.List<java.lang.Runnable>;
						public scheduleWithFixedDelay(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Monitor extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Monitor>;
						public hasQueuedThreads(): boolean;
						public isOccupiedByCurrentThread(): boolean;
						public waitFor(guard: com.google.common.util.concurrent.Monitor.Guard, time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public leave(): void;
						public enterWhenUninterruptibly(guard: com.google.common.util.concurrent.Monitor.Guard, time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public enterInterruptibly(): void;
						public hasQueuedThread(thread: java.lang.Thread): boolean;
						public waitForUninterruptibly(guard: com.google.common.util.concurrent.Monitor.Guard): void;
						public tryEnter(): boolean;
						public enter(time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public enterIfInterruptibly(guard: com.google.common.util.concurrent.Monitor.Guard, time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public tryEnterIf(guard: com.google.common.util.concurrent.Monitor.Guard): boolean;
						public constructor();
						public enterIf(guard: com.google.common.util.concurrent.Monitor.Guard): boolean;
						public enterIfInterruptibly(guard: com.google.common.util.concurrent.Monitor.Guard): boolean;
						public getQueueLength(): number;
						public waitForUninterruptibly(guard: com.google.common.util.concurrent.Monitor.Guard, time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public enterInterruptibly(time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public enterWhen(guard: com.google.common.util.concurrent.Monitor.Guard, time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public getOccupiedDepth(): number;
						public hasWaiters(guard: com.google.common.util.concurrent.Monitor.Guard): boolean;
						public enter(): void;
						public isOccupied(): boolean;
						public enterWhen(guard: com.google.common.util.concurrent.Monitor.Guard): void;
						public isFair(): boolean;
						public constructor(fair: boolean);
						public getWaitQueueLength(guard: com.google.common.util.concurrent.Monitor.Guard): number;
						public waitFor(guard: com.google.common.util.concurrent.Monitor.Guard): void;
						public enterIf(guard: com.google.common.util.concurrent.Monitor.Guard, time: number, unit: java.util.concurrent.TimeUnit): boolean;
						public enterWhenUninterruptibly(guard: com.google.common.util.concurrent.Monitor.Guard): void;
					}
					export module Monitor {
						export abstract class Guard extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.Monitor.Guard>;
							public constructor(monitor: com.google.common.util.concurrent.Monitor);
							public isSatisfied(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class MoreExecutors extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.MoreExecutors>;
						public static getExitingExecutorService(executor: java.util.concurrent.ThreadPoolExecutor): java.util.concurrent.ExecutorService;
						public static getExitingScheduledExecutorService(executor: java.util.concurrent.ScheduledThreadPoolExecutor): java.util.concurrent.ScheduledExecutorService;
						public static directExecutor(): java.util.concurrent.Executor;
						public static getExitingScheduledExecutorService(executor: java.util.concurrent.ScheduledThreadPoolExecutor, terminationTimeout: number, timeUnit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledExecutorService;
						public static listeningDecorator(delegate: java.util.concurrent.ExecutorService): com.google.common.util.concurrent.ListeningExecutorService;
						public static listeningDecorator(delegate: java.util.concurrent.ScheduledExecutorService): com.google.common.util.concurrent.ListeningScheduledExecutorService;
						public static newDirectExecutorService(): com.google.common.util.concurrent.ListeningExecutorService;
						public static newSequentialExecutor(delegate: java.util.concurrent.Executor): java.util.concurrent.Executor;
						public static platformThreadFactory(): java.util.concurrent.ThreadFactory;
						public static getExitingExecutorService(executor: java.util.concurrent.ThreadPoolExecutor, terminationTimeout: number, timeUnit: java.util.concurrent.TimeUnit): java.util.concurrent.ExecutorService;
						public static addDelayedShutdownHook(service: java.util.concurrent.ExecutorService, terminationTimeout: number, timeUnit: java.util.concurrent.TimeUnit): void;
						public static shutdownAndAwaitTermination(service: java.util.concurrent.ExecutorService, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
					}
					export module MoreExecutors {
						export class Application extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.MoreExecutors.Application>;
						}
						export class DirectExecutorService extends com.google.common.util.concurrent.AbstractListeningExecutorService {
							public static class: java.lang.Class<com.google.common.util.concurrent.MoreExecutors.DirectExecutorService>;
							public shutdownNow(): java.util.List<java.lang.Runnable>;
							public submit(task: java.lang.Runnable, result: any): com.google.common.util.concurrent.ListenableFuture<any>;
							public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
							public execute(command: java.lang.Runnable): void;
							public shutdown(): void;
							public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
							public invokeAny(tasks: java.util.Collection<any>): any;
							public submit(task: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
							public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
							public isShutdown(): boolean;
							public awaitTermination(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
							public isTerminated(): boolean;
							public submit(task: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
							public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
							public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
						}
						export class ListeningDecorator extends com.google.common.util.concurrent.AbstractListeningExecutorService {
							public static class: java.lang.Class<com.google.common.util.concurrent.MoreExecutors.ListeningDecorator>;
							public shutdownNow(): java.util.List<java.lang.Runnable>;
							public submit(task: java.lang.Runnable, result: any): com.google.common.util.concurrent.ListenableFuture<any>;
							public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
							public execute(command: java.lang.Runnable): void;
							public shutdown(): void;
							public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
							public invokeAny(tasks: java.util.Collection<any>): any;
							public submit(task: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
							public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
							public isShutdown(): boolean;
							public awaitTermination(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
							public isTerminated(): boolean;
							public submit(task: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
							public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
							public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
						}
						export class ScheduledListeningDecorator extends com.google.common.util.concurrent.MoreExecutors.ListeningDecorator implements com.google.common.util.concurrent.ListeningScheduledExecutorService {
							public static class: java.lang.Class<com.google.common.util.concurrent.MoreExecutors.ScheduledListeningDecorator>;
							public scheduleAtFixedRate(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public schedule(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public shutdownNow(): java.util.List<java.lang.Runnable>;
							public submit(task: java.lang.Runnable, result: any): com.google.common.util.concurrent.ListenableFuture<any>;
							public schedule(command: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							public scheduleWithFixedDelay(command: java.lang.Runnable, initialDelay: number, delay: number, unit: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							public scheduleWithFixedDelay(runnable0: java.lang.Runnable, long1: number, long2: number, timeUnit3: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
							public execute(command: java.lang.Runnable): void;
							public scheduleAtFixedRate(command: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							public schedule(callable: java.util.concurrent.Callable<any>, delay: number, unit: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.ListenableScheduledFuture<any>;
							public invokeAny(tasks: java.util.Collection<any>): any;
							public shutdown(): void;
							public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
							public submit(task: java.lang.Runnable): com.google.common.util.concurrent.ListenableFuture<any>;
							public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
							public isShutdown(): boolean;
							public awaitTermination(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
							public isTerminated(): boolean;
							public schedule(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public submit(task: java.util.concurrent.Callable<any>): com.google.common.util.concurrent.ListenableFuture<any>;
							public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
							public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
						}
						export module ScheduledListeningDecorator {
							export class ListenableScheduledTask<V>  extends com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture<any> implements com.google.common.util.concurrent.ListenableScheduledFuture<any>  {
								public static class: java.lang.Class<com.google.common.util.concurrent.MoreExecutors.ScheduledListeningDecorator.ListenableScheduledTask<any>>;
								public constructor(listenableDelegate: com.google.common.util.concurrent.ListenableFuture<any>, scheduledDelegate: java.util.concurrent.ScheduledFuture<any>);
								public addListener(listener: java.lang.Runnable, exec: java.util.concurrent.Executor): void;
								public cancel(mayInterruptIfRunning: boolean): boolean;
								public get(): any;
								public isCancelled(): boolean;
								public compareTo(other: java.util.concurrent.Delayed): number;
								public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
								public constructor();
								public getDelay(unit: java.util.concurrent.TimeUnit): number;
								public isDone(): boolean;
								public constructor(delegate: com.google.common.util.concurrent.ListenableFuture<any>);
							}
							export class NeverSuccessfulListenableFutureTask extends com.google.common.util.concurrent.AbstractFuture.TrustedFuture<java.lang.Void> implements java.lang.Runnable  {
								public static class: java.lang.Class<com.google.common.util.concurrent.MoreExecutors.ScheduledListeningDecorator.NeverSuccessfulListenableFutureTask>;
								public constructor(delegate: java.lang.Runnable);
								public constructor();
								public run(): void;
								public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Partially extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Partially>;
					}
					export module Partially {
						export class GwtIncompatible extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<com.google.common.util.concurrent.Partially.GwtIncompatible>;
							/**
							 * Constructs a new instance of the com.google.common.util.concurrent.Partially$GwtIncompatible interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								value(): string;
								equals(object0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public value(): string;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Platform extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Platform>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class RateLimiter extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.RateLimiter>;
						public setRate(permitsPerSecond: number): void;
						public tryAcquire(permits: number): boolean;
						public acquire(permits: number): number;
						public static create(permitsPerSecond: number): com.google.common.util.concurrent.RateLimiter;
						public static create(permitsPerSecond: number, warmupPeriod: number, unit: java.util.concurrent.TimeUnit): com.google.common.util.concurrent.RateLimiter;
						public acquire(): number;
						public tryAcquire(): boolean;
						public tryAcquire(permits: number, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public toString(): string;
						public tryAcquire(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public getRate(): number;
					}
					export module RateLimiter {
						export abstract class SleepingStopwatch extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.RateLimiter.SleepingStopwatch>;
							public constructor();
							public sleepMicrosUninterruptibly(long0: number): void;
							public readMicros(): number;
							public static createFromSystemTimer(): com.google.common.util.concurrent.RateLimiter.SleepingStopwatch;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Runnables extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Runnables>;
						public static doNothing(): java.lang.Runnable;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class SequentialExecutor extends java.lang.Object implements java.util.concurrent.Executor {
						public static class: java.lang.Class<com.google.common.util.concurrent.SequentialExecutor>;
						public execute(task: java.lang.Runnable): void;
					}
					export module SequentialExecutor {
						export class QueueWorker extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<com.google.common.util.concurrent.SequentialExecutor.QueueWorker>;
							public run(): void;
						}
						export class WorkerRunningState {
							public static class: java.lang.Class<com.google.common.util.concurrent.SequentialExecutor.WorkerRunningState>;
							public static IDLE: com.google.common.util.concurrent.SequentialExecutor.WorkerRunningState;
							public static QUEUED: com.google.common.util.concurrent.SequentialExecutor.WorkerRunningState;
							public static QUEUING: com.google.common.util.concurrent.SequentialExecutor.WorkerRunningState;
							public static RUNNING: com.google.common.util.concurrent.SequentialExecutor.WorkerRunningState;
							public static values(): native.Array<com.google.common.util.concurrent.SequentialExecutor.WorkerRunningState>;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(name: string): com.google.common.util.concurrent.SequentialExecutor.WorkerRunningState;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Service extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Service>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.Service interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							startAsync(): com.google.common.util.concurrent.Service;
							isRunning(): boolean;
							state(): com.google.common.util.concurrent.Service.State;
							stopAsync(): com.google.common.util.concurrent.Service;
							awaitRunning(): void;
							awaitRunning(long0: number, timeUnit1: java.util.concurrent.TimeUnit): void;
							awaitTerminated(): void;
							awaitTerminated(long0: number, timeUnit1: java.util.concurrent.TimeUnit): void;
							failureCause(): java.lang.Throwable;
							addListener(listener0: com.google.common.util.concurrent.Service.Listener, executor1: java.util.concurrent.Executor): void;
						});
						public constructor();
						public awaitTerminated(long0: number, timeUnit1: java.util.concurrent.TimeUnit): void;
						public stopAsync(): com.google.common.util.concurrent.Service;
						public failureCause(): java.lang.Throwable;
						public awaitTerminated(): void;
						public state(): com.google.common.util.concurrent.Service.State;
						public awaitRunning(long0: number, timeUnit1: java.util.concurrent.TimeUnit): void;
						public startAsync(): com.google.common.util.concurrent.Service;
						public isRunning(): boolean;
						public addListener(listener0: com.google.common.util.concurrent.Service.Listener, executor1: java.util.concurrent.Executor): void;
						public awaitRunning(): void;
					}
					export module Service {
						export abstract class Listener extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.Service.Listener>;
							public constructor();
							public stopping(from: com.google.common.util.concurrent.Service.State): void;
							public starting(): void;
							public terminated(from: com.google.common.util.concurrent.Service.State): void;
							public failed(from: com.google.common.util.concurrent.Service.State, failure: java.lang.Throwable): void;
							public running(): void;
						}
						export abstract class State {
							public static class: java.lang.Class<com.google.common.util.concurrent.Service.State>;
							public static FAILED: com.google.common.util.concurrent.Service.State;
							public static NEW: com.google.common.util.concurrent.Service.State;
							public static RUNNING: com.google.common.util.concurrent.Service.State;
							public static STARTING: com.google.common.util.concurrent.Service.State;
							public static STOPPING: com.google.common.util.concurrent.Service.State;
							public static TERMINATED: com.google.common.util.concurrent.Service.State;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static values(): native.Array<com.google.common.util.concurrent.Service.State>;
							public static valueOf(name: string): com.google.common.util.concurrent.Service.State;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ServiceManager extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager>;
						public constructor(services: java.lang.Iterable<any>);
						public startupTimes(): com.google.common.collect.ImmutableMap<com.google.common.util.concurrent.Service,java.lang.Long>;
						public addListener(listener: com.google.common.util.concurrent.ServiceManager.Listener): void;
						public servicesByState(): com.google.common.collect.ImmutableMultimap<com.google.common.util.concurrent.Service.State,com.google.common.util.concurrent.Service>;
						public addListener(listener: com.google.common.util.concurrent.ServiceManager.Listener, executor: java.util.concurrent.Executor): void;
						public stopAsync(): com.google.common.util.concurrent.ServiceManager;
						public isHealthy(): boolean;
						public startAsync(): com.google.common.util.concurrent.ServiceManager;
						public toString(): string;
						public awaitStopped(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public awaitHealthy(timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public awaitStopped(): void;
						public awaitHealthy(): void;
					}
					export module ServiceManager {
						export class EmptyServiceManagerWarning extends java.lang.Throwable {
							public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager.EmptyServiceManagerWarning>;
						}
						export abstract class Listener extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager.Listener>;
							public constructor();
							public healthy(): void;
							public stopped(): void;
							public failure(service: com.google.common.util.concurrent.Service): void;
						}
						export class NoOpService extends com.google.common.util.concurrent.AbstractService {
							public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager.NoOpService>;
							public addListener(listener: com.google.common.util.concurrent.Service.Listener, executor: java.util.concurrent.Executor): void;
							public doStop(): void;
							public isRunning(): boolean;
							public doStart(): void;
							public state(): com.google.common.util.concurrent.Service.State;
							public awaitTerminated(): void;
							public awaitRunning(): void;
							public awaitTerminated(timeout: number, unit: java.util.concurrent.TimeUnit): void;
							public startAsync(): com.google.common.util.concurrent.Service;
							public awaitRunning(timeout: number, unit: java.util.concurrent.TimeUnit): void;
							public failureCause(): java.lang.Throwable;
							public stopAsync(): com.google.common.util.concurrent.Service;
						}
						export class ServiceListener extends com.google.common.util.concurrent.Service.Listener {
							public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager.ServiceListener>;
							public stopping(from: com.google.common.util.concurrent.Service.State): void;
							public starting(): void;
							public terminated(from: com.google.common.util.concurrent.Service.State): void;
							public failed(from: com.google.common.util.concurrent.Service.State, failure: java.lang.Throwable): void;
							public running(): void;
						}
						export class ServiceManagerState extends java.lang.Object {
							public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager.ServiceManagerState>;
						}
						export module ServiceManagerState {
							export class AwaitHealthGuard extends com.google.common.util.concurrent.Monitor.Guard {
								public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager.ServiceManagerState.AwaitHealthGuard>;
								public isSatisfied(): boolean;
							}
							export class StoppedGuard extends com.google.common.util.concurrent.Monitor.Guard {
								public static class: java.lang.Class<com.google.common.util.concurrent.ServiceManager.ServiceManagerState.StoppedGuard>;
								public isSatisfied(): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class SettableFuture<V>  extends com.google.common.util.concurrent.AbstractFuture.TrustedFuture<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.SettableFuture<any>>;
						public setException(throwable: java.lang.Throwable): boolean;
						public setFuture(future: com.google.common.util.concurrent.ListenableFuture<any>): boolean;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public set(value: any): boolean;
						public static create(): com.google.common.util.concurrent.SettableFuture<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class SimpleTimeLimiter extends java.lang.Object implements com.google.common.util.concurrent.TimeLimiter {
						public static class: java.lang.Class<com.google.common.util.concurrent.SimpleTimeLimiter>;
						public runUninterruptiblyWithTimeout(runnable: java.lang.Runnable, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): void;
						public newProxy(target: any, interfaceType: java.lang.Class<any>, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): any;
						public runWithTimeout(runnable: java.lang.Runnable, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): void;
						public callUninterruptiblyWithTimeout(callable: java.util.concurrent.Callable<any>, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): any;
						public static create(executor: java.util.concurrent.ExecutorService): com.google.common.util.concurrent.SimpleTimeLimiter;
						public callWithTimeout(callable: java.util.concurrent.Callable<any>, timeoutDuration: number, timeoutUnit: java.util.concurrent.TimeUnit): any;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class SmoothRateLimiter extends com.google.common.util.concurrent.RateLimiter {
						public static class: java.lang.Class<com.google.common.util.concurrent.SmoothRateLimiter>;
					}
					export module SmoothRateLimiter {
						export class SmoothBursty extends com.google.common.util.concurrent.SmoothRateLimiter {
							public static class: java.lang.Class<com.google.common.util.concurrent.SmoothRateLimiter.SmoothBursty>;
						}
						export class SmoothWarmingUp extends com.google.common.util.concurrent.SmoothRateLimiter {
							public static class: java.lang.Class<com.google.common.util.concurrent.SmoothRateLimiter.SmoothWarmingUp>;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class Striped<L>  extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Striped<any>>;
						public bulkGet(keys: java.lang.Iterable<any>): java.lang.Iterable<L>;
						public get(object0: any): L;
						public getAt(int0: number): L;
						public static lazyWeakReadWriteLock(stripes: number): com.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock>;
						public static lazyWeakSemaphore(stripes: number, permits: number): com.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore>;
						public static readWriteLock(stripes: number): com.google.common.util.concurrent.Striped<java.util.concurrent.locks.ReadWriteLock>;
						public static lazyWeakLock(stripes: number): com.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock>;
						public static lock(stripes: number): com.google.common.util.concurrent.Striped<java.util.concurrent.locks.Lock>;
						public size(): number;
						public static semaphore(stripes: number, permits: number): com.google.common.util.concurrent.Striped<java.util.concurrent.Semaphore>;
					}
					export module Striped {
						export class CompactStriped<L>  extends com.google.common.util.concurrent.Striped.PowerOfTwoStriped<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.CompactStriped<any>>;
							public size(): number;
							public getAt(index: number): any;
							public getAt(int0: number): any;
						}
						export class LargeLazyStriped<L>  extends com.google.common.util.concurrent.Striped.PowerOfTwoStriped<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.LargeLazyStriped<any>>;
							public size(): number;
							public getAt(index: number): any;
							public getAt(int0: number): any;
						}
						export class PaddedLock extends java.util.concurrent.locks.ReentrantLock {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.PaddedLock>;
							public tryLock(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
							public tryLock(): boolean;
							public lock(): void;
							public lockInterruptibly(): void;
							public unlock(): void;
							public newCondition(): java.util.concurrent.locks.Condition;
						}
						export class PaddedSemaphore extends java.util.concurrent.Semaphore {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.PaddedSemaphore>;
						}
						export abstract class PowerOfTwoStriped<L>  extends com.google.common.util.concurrent.Striped<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.PowerOfTwoStriped<any>>;
							public get(object0: any): any;
							public get(key: any): any;
						}
						export class SmallLazyStriped<L>  extends com.google.common.util.concurrent.Striped.PowerOfTwoStriped<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.SmallLazyStriped<any>>;
							public size(): number;
							public getAt(index: number): any;
							public getAt(int0: number): any;
						}
						export module SmallLazyStriped {
							export class ArrayReference<L>  extends java.lang.ref.WeakReference<any> {
								public static class: java.lang.Class<com.google.common.util.concurrent.Striped.SmallLazyStriped.ArrayReference<any>>;
							}
						}
						export class WeakSafeCondition extends com.google.common.util.concurrent.ForwardingCondition {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.WeakSafeCondition>;
							public await(time: number, unit: java.util.concurrent.TimeUnit): boolean;
							public awaitUninterruptibly(): void;
							public await(): void;
							public signalAll(): void;
							public awaitUntil(deadline: java.util.Date): boolean;
							public signal(): void;
							public awaitNanos(nanosTimeout: number): number;
						}
						export class WeakSafeLock extends com.google.common.util.concurrent.ForwardingLock {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.WeakSafeLock>;
							public tryLock(): boolean;
							public lock(): void;
							public lockInterruptibly(): void;
							public newCondition(): java.util.concurrent.locks.Condition;
							public unlock(): void;
							public tryLock(time: number, unit: java.util.concurrent.TimeUnit): boolean;
						}
						export class WeakSafeReadWriteLock extends java.lang.Object implements java.util.concurrent.locks.ReadWriteLock {
							public static class: java.lang.Class<com.google.common.util.concurrent.Striped.WeakSafeReadWriteLock>;
							public writeLock(): java.util.concurrent.locks.Lock;
							public readLock(): java.util.concurrent.locks.Lock;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class ThreadFactoryBuilder extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.ThreadFactoryBuilder>;
						public constructor();
						public setDaemon(daemon: boolean): com.google.common.util.concurrent.ThreadFactoryBuilder;
						public setThreadFactory(backingThreadFactory: java.util.concurrent.ThreadFactory): com.google.common.util.concurrent.ThreadFactoryBuilder;
						public setPriority(priority: number): com.google.common.util.concurrent.ThreadFactoryBuilder;
						public setNameFormat(nameFormat: string): com.google.common.util.concurrent.ThreadFactoryBuilder;
						public setUncaughtExceptionHandler(uncaughtExceptionHandler: java.lang.Thread.UncaughtExceptionHandler): com.google.common.util.concurrent.ThreadFactoryBuilder;
						public build(): java.util.concurrent.ThreadFactory;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class TimeLimiter extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.TimeLimiter>;
						/**
						 * Constructs a new instance of the com.google.common.util.concurrent.TimeLimiter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							newProxy(object0: any, class1: java.lang.Class<any>, long2: number, timeUnit3: java.util.concurrent.TimeUnit): any;
							callWithTimeout(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
							callUninterruptiblyWithTimeout(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
							runWithTimeout(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
							runUninterruptiblyWithTimeout(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
						});
						public constructor();
						public callUninterruptiblyWithTimeout(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
						public newProxy(object0: any, class1: java.lang.Class<any>, long2: number, timeUnit3: java.util.concurrent.TimeUnit): any;
						public callWithTimeout(callable0: java.util.concurrent.Callable<any>, long1: number, timeUnit2: java.util.concurrent.TimeUnit): any;
						public runUninterruptiblyWithTimeout(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
						public runWithTimeout(runnable0: java.lang.Runnable, long1: number, timeUnit2: java.util.concurrent.TimeUnit): void;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class TimeoutFuture<V>  extends com.google.common.util.concurrent.FluentFuture.TrustedFuture<any> {
						public static class: java.lang.Class<com.google.common.util.concurrent.TimeoutFuture<any>>;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public pendingToString(): string;
						public afterDone(): void;
					}
					export module TimeoutFuture {
						export class Fire<V>  extends java.lang.Runnable {
							public static class: java.lang.Class<com.google.common.util.concurrent.TimeoutFuture.Fire<any>>;
							public run(): void;
						}
						export class TimeoutFutureException extends java.util.concurrent.TimeoutException {
							public static class: java.lang.Class<com.google.common.util.concurrent.TimeoutFuture.TimeoutFutureException>;
							public fillInStackTrace(): java.lang.Throwable;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class TrustedListenableFutureTask<V>  extends com.google.common.util.concurrent.FluentFuture.TrustedFuture<any> implements java.util.concurrent.RunnableFuture<any>  {
						public static class: java.lang.Class<com.google.common.util.concurrent.TrustedListenableFutureTask<any>>;
						public cancel(mayInterruptIfRunning: boolean): boolean;
						public isDone(): boolean;
						public addListener(listener: java.lang.Runnable, executor: java.util.concurrent.Executor): void;
						public run(): void;
						public isCancelled(): boolean;
						public pendingToString(): string;
						public afterDone(): void;
						public get(): any;
						public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
					}
					export module TrustedListenableFutureTask {
						export class TrustedFutureInterruptibleAsyncTask extends com.google.common.util.concurrent.InterruptibleTask<com.google.common.util.concurrent.ListenableFuture<any>> {
							public static class: java.lang.Class<com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleAsyncTask>;
							public run(): void;
						}
						export class TrustedFutureInterruptibleTask extends com.google.common.util.concurrent.InterruptibleTask<any> {
							public static class: java.lang.Class<com.google.common.util.concurrent.TrustedListenableFutureTask.TrustedFutureInterruptibleTask>;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class UncaughtExceptionHandlers extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.UncaughtExceptionHandlers>;
						public static systemExit(): java.lang.Thread.UncaughtExceptionHandler;
					}
					export module UncaughtExceptionHandlers {
						export class Exiter extends java.lang.Object implements java.lang.Thread.UncaughtExceptionHandler {
							public static class: java.lang.Class<com.google.common.util.concurrent.UncaughtExceptionHandlers.Exiter>;
							public uncaughtException(t: java.lang.Thread, e: java.lang.Throwable): void;
						}
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class UncheckedExecutionException extends java.lang.RuntimeException {
						public static class: java.lang.Class<com.google.common.util.concurrent.UncheckedExecutionException>;
						public constructor();
						public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
						public constructor(message: string, cause: java.lang.Throwable);
						public constructor(cause: java.lang.Throwable);
						public constructor(message: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class UncheckedTimeoutException extends java.lang.RuntimeException {
						public static class: java.lang.Class<com.google.common.util.concurrent.UncheckedTimeoutException>;
						public constructor();
						public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
						public constructor(message: string, cause: java.lang.Throwable);
						public constructor(cause: java.lang.Throwable);
						public constructor(message: string);
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export class Uninterruptibles extends java.lang.Object {
						public static class: java.lang.Class<com.google.common.util.concurrent.Uninterruptibles>;
						public static tryAcquireUninterruptibly(semaphore: java.util.concurrent.Semaphore, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public static getUninterruptibly(future: java.util.concurrent.Future<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public static joinUninterruptibly(toJoin: java.lang.Thread): void;
						public static awaitUninterruptibly(latch: java.util.concurrent.CountDownLatch, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public static awaitUninterruptibly(latch: java.util.concurrent.CountDownLatch): void;
						public static putUninterruptibly(queue: java.util.concurrent.BlockingQueue<any>, element: any): void;
						public static takeUninterruptibly(queue: java.util.concurrent.BlockingQueue<any>): any;
						public static joinUninterruptibly(toJoin: java.lang.Thread, timeout: number, unit: java.util.concurrent.TimeUnit): void;
						public static getUninterruptibly(future: java.util.concurrent.Future<any>): any;
						public static sleepUninterruptibly(sleepFor: number, unit: java.util.concurrent.TimeUnit): void;
						public static awaitUninterruptibly(condition: java.util.concurrent.locks.Condition, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public static tryAcquireUninterruptibly(semaphore: java.util.concurrent.Semaphore, permits: number, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class WrappingExecutorService extends java.lang.Object implements java.util.concurrent.ExecutorService {
						public static class: java.lang.Class<com.google.common.util.concurrent.WrappingExecutorService>;
						public constructor(delegate: java.util.concurrent.ExecutorService);
						public isTerminated(): boolean;
						public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
						public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
						public wrapTask(callable0: java.util.concurrent.Callable<any>): java.util.concurrent.Callable<any>;
						public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public awaitTermination(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
						public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
						public shutdown(): void;
						public isShutdown(): boolean;
						public wrapTask(command: java.lang.Runnable): java.lang.Runnable;
						public execute(command: java.lang.Runnable): void;
						public invokeAny(tasks: java.util.Collection<any>): any;
						public shutdownNow(): java.util.List<java.lang.Runnable>;
						public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
					}
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module common {
			export module util {
				export module concurrent {
					export abstract class WrappingScheduledExecutorService extends com.google.common.util.concurrent.WrappingExecutorService implements java.util.concurrent.ScheduledExecutorService {
						public static class: java.lang.Class<com.google.common.util.concurrent.WrappingScheduledExecutorService>;
						public constructor(delegate: java.util.concurrent.ExecutorService);
						public schedule(task: java.util.concurrent.Callable<any>, delay: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
						public isTerminated(): boolean;
						public scheduleWithFixedDelay(command: java.lang.Runnable, initialDelay: number, delay: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
						public invokeAll(tasks: java.util.Collection<any>): java.util.List<any>;
						public schedule(command: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
						public submit(task: java.util.concurrent.Callable<any>): java.util.concurrent.Future<any>;
						public scheduleAtFixedRate(command: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
						public invokeAny(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): any;
						public awaitTermination(timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
						public invokeAll(tasks: java.util.Collection<any>, timeout: number, unit: java.util.concurrent.TimeUnit): java.util.List<any>;
						public submit(task: java.lang.Runnable, result: any): java.util.concurrent.Future<any>;
						public shutdown(): void;
						public isShutdown(): boolean;
						public execute(command: java.lang.Runnable): void;
						public invokeAny(tasks: java.util.Collection<any>): any;
						public shutdownNow(): java.util.List<java.lang.Runnable>;
						public submit(task: java.lang.Runnable): java.util.concurrent.Future<any>;
						public constructor(delegate: java.util.concurrent.ScheduledExecutorService);
					}
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module common {
			export module xml {
				export class XmlEscapers extends java.lang.Object {
					public static class: java.lang.Class<com.google.common.xml.XmlEscapers>;
					public static xmlAttributeEscaper(): com.google.common.escape.Escaper;
					public static xmlContentEscaper(): com.google.common.escape.Escaper;
				}
			}
		}
	}
}


declare module com {
	export module google {
		export module thirdparty {
			export module publicsuffix {
				export class PublicSuffixPatterns extends java.lang.Object {
					public static class: java.lang.Class<com.google.thirdparty.publicsuffix.PublicSuffixPatterns>;
					public static EXACT: com.google.common.collect.ImmutableMap<string,com.google.thirdparty.publicsuffix.PublicSuffixType>;
					public static EXCLUDED: com.google.common.collect.ImmutableMap<string,com.google.thirdparty.publicsuffix.PublicSuffixType>;
					public static UNDER: com.google.common.collect.ImmutableMap<string,com.google.thirdparty.publicsuffix.PublicSuffixType>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module thirdparty {
			export module publicsuffix {
				export class PublicSuffixType {
					public static class: java.lang.Class<com.google.thirdparty.publicsuffix.PublicSuffixType>;
					public static PRIVATE: com.google.thirdparty.publicsuffix.PublicSuffixType;
					public static REGISTRY: com.google.thirdparty.publicsuffix.PublicSuffixType;
					public static valueOf(name: string): com.google.thirdparty.publicsuffix.PublicSuffixType;
					public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
					public static values(): native.Array<com.google.thirdparty.publicsuffix.PublicSuffixType>;
				}
			}
		}
	}
}

declare module com {
	export module google {
		export module thirdparty {
			export module publicsuffix {
				export class TrieParser extends java.lang.Object {
					public static class: java.lang.Class<com.google.thirdparty.publicsuffix.TrieParser>;
				}
			}
		}
	}
}

//Generics information:
//com.google.common.base.Absent:1
//com.google.common.base.AbstractIterator:1
//com.google.common.base.Converter:2
//com.google.common.base.Converter.ConverterComposition:3
//com.google.common.base.Converter.FunctionBasedConverter:2
//com.google.common.base.Converter.IdentityConverter:1
//com.google.common.base.Converter.ReverseConverter:2
//com.google.common.base.Enums.StringConverter:1
//com.google.common.base.Equivalence:1
//com.google.common.base.Equivalence.EquivalentToPredicate:1
//com.google.common.base.Equivalence.Wrapper:1
//com.google.common.base.FinalizablePhantomReference:1
//com.google.common.base.FinalizableSoftReference:1
//com.google.common.base.FinalizableWeakReference:1
//com.google.common.base.Function:2
//com.google.common.base.FunctionalEquivalence:2
//com.google.common.base.Functions.ConstantFunction:1
//com.google.common.base.Functions.ForMapWithDefault:2
//com.google.common.base.Functions.FunctionComposition:3
//com.google.common.base.Functions.FunctionForMapNoDefault:2
//com.google.common.base.Functions.PredicateFunction:1
//com.google.common.base.Functions.SupplierFunction:1
//com.google.common.base.Optional:1
//com.google.common.base.PairwiseEquivalence:1
//com.google.common.base.Predicate:1
//com.google.common.base.Predicates.AndPredicate:1
//com.google.common.base.Predicates.CompositionPredicate:2
//com.google.common.base.Predicates.InPredicate:1
//com.google.common.base.Predicates.IsEqualToPredicate:1
//com.google.common.base.Predicates.NotPredicate:1
//com.google.common.base.Predicates.OrPredicate:1
//com.google.common.base.Present:1
//com.google.common.base.Supplier:1
//com.google.common.base.Suppliers.ExpiringMemoizingSupplier:1
//com.google.common.base.Suppliers.MemoizingSupplier:1
//com.google.common.base.Suppliers.NonSerializableMemoizingSupplier:1
//com.google.common.base.Suppliers.SupplierComposition:2
//com.google.common.base.Suppliers.SupplierFunction:1
//com.google.common.base.Suppliers.SupplierOfInstance:1
//com.google.common.base.Suppliers.ThreadSafeSupplier:1
//com.google.common.cache.AbstractCache:2
//com.google.common.cache.AbstractLoadingCache:2
//com.google.common.cache.Cache:2
//com.google.common.cache.CacheBuilder:2
//com.google.common.cache.CacheLoader:2
//com.google.common.cache.CacheLoader.FunctionToCacheLoader:2
//com.google.common.cache.CacheLoader.SupplierToCacheLoader:1
//com.google.common.cache.ForwardingCache:2
//com.google.common.cache.ForwardingCache.SimpleForwardingCache:2
//com.google.common.cache.ForwardingLoadingCache:2
//com.google.common.cache.ForwardingLoadingCache.SimpleForwardingLoadingCache:2
//com.google.common.cache.LoadingCache:2
//com.google.common.cache.LocalCache:2
//com.google.common.cache.LocalCache.AbstractCacheSet:1
//com.google.common.cache.LocalCache.AbstractReferenceEntry:2
//com.google.common.cache.LocalCache.AccessQueue:2
//com.google.common.cache.LocalCache.HashIterator:1
//com.google.common.cache.LocalCache.LoadingSerializationProxy:2
//com.google.common.cache.LocalCache.LoadingValueReference:2
//com.google.common.cache.LocalCache.LocalLoadingCache:2
//com.google.common.cache.LocalCache.LocalManualCache:2
//com.google.common.cache.LocalCache.ManualSerializationProxy:2
//com.google.common.cache.LocalCache.Segment:2
//com.google.common.cache.LocalCache.SoftValueReference:2
//com.google.common.cache.LocalCache.StrongAccessEntry:2
//com.google.common.cache.LocalCache.StrongAccessWriteEntry:2
//com.google.common.cache.LocalCache.StrongEntry:2
//com.google.common.cache.LocalCache.StrongValueReference:2
//com.google.common.cache.LocalCache.StrongWriteEntry:2
//com.google.common.cache.LocalCache.ValueReference:2
//com.google.common.cache.LocalCache.WeakAccessEntry:2
//com.google.common.cache.LocalCache.WeakAccessWriteEntry:2
//com.google.common.cache.LocalCache.WeakEntry:2
//com.google.common.cache.LocalCache.WeakValueReference:2
//com.google.common.cache.LocalCache.WeakWriteEntry:2
//com.google.common.cache.LocalCache.WeightedSoftValueReference:2
//com.google.common.cache.LocalCache.WeightedStrongValueReference:2
//com.google.common.cache.LocalCache.WeightedWeakValueReference:2
//com.google.common.cache.LocalCache.WriteQueue:2
//com.google.common.cache.ReferenceEntry:2
//com.google.common.cache.RemovalListener:2
//com.google.common.cache.RemovalNotification:2
//com.google.common.cache.Weigher:2
//com.google.common.collect.AbstractBiMap:2
//com.google.common.collect.AbstractBiMap.Inverse:2
//com.google.common.collect.AbstractIndexedListIterator:1
//com.google.common.collect.AbstractIterator:1
//com.google.common.collect.AbstractListMultimap:2
//com.google.common.collect.AbstractMapBasedMultimap:2
//com.google.common.collect.AbstractMapBasedMultimap.Itr:1
//com.google.common.collect.AbstractMapBasedMultiset:1
//com.google.common.collect.AbstractMapBasedMultiset.Itr:1
//com.google.common.collect.AbstractMapEntry:2
//com.google.common.collect.AbstractMultimap:2
//com.google.common.collect.AbstractMultiset:1
//com.google.common.collect.AbstractNavigableMap:2
//com.google.common.collect.AbstractRangeSet:1
//com.google.common.collect.AbstractSequentialIterator:1
//com.google.common.collect.AbstractSetMultimap:2
//com.google.common.collect.AbstractSortedKeySortedSetMultimap:2
//com.google.common.collect.AbstractSortedMultiset:1
//com.google.common.collect.AbstractSortedSetMultimap:2
//com.google.common.collect.AbstractTable:3
//com.google.common.collect.ArrayListMultimap:2
//com.google.common.collect.ArrayListMultimapGwtSerializationDependencies:2
//com.google.common.collect.ArrayTable:3
//com.google.common.collect.ArrayTable.ArrayMap:2
//com.google.common.collect.BaseImmutableMultimap:2
//com.google.common.collect.BiMap:2
//com.google.common.collect.ByFunctionOrdering:2
//com.google.common.collect.CartesianList:1
//com.google.common.collect.ClassToInstanceMap:1
//com.google.common.collect.Collections2.FilteredCollection:1
//com.google.common.collect.Collections2.OrderedPermutationCollection:1
//com.google.common.collect.Collections2.OrderedPermutationIterator:1
//com.google.common.collect.Collections2.PermutationCollection:1
//com.google.common.collect.Collections2.PermutationIterator:1
//com.google.common.collect.Collections2.TransformedCollection:2
//com.google.common.collect.CompactHashMap:2
//com.google.common.collect.CompactHashMap.Itr:1
//com.google.common.collect.CompactHashSet:1
//com.google.common.collect.CompactLinkedHashMap:2
//com.google.common.collect.CompactLinkedHashSet:1
//com.google.common.collect.ComparatorOrdering:1
//com.google.common.collect.CompoundOrdering:1
//com.google.common.collect.ConcurrentHashMultiset:1
//com.google.common.collect.ConsumingQueueIterator:1
//com.google.common.collect.ContiguousSet:1
//com.google.common.collect.Cut:1
//com.google.common.collect.Cut.AboveValue:1
//com.google.common.collect.Cut.BelowValue:1
//com.google.common.collect.DenseImmutableTable:3
//com.google.common.collect.DenseImmutableTable.ImmutableArrayMap:2
//com.google.common.collect.DescendingImmutableSortedMultiset:1
//com.google.common.collect.DescendingImmutableSortedSet:1
//com.google.common.collect.DescendingMultiset:1
//com.google.common.collect.DiscreteDomain:1
//com.google.common.collect.EmptyContiguousSet:1
//com.google.common.collect.EmptyContiguousSet.SerializedForm:1
//com.google.common.collect.EnumBiMap:2
//com.google.common.collect.EnumHashBiMap:2
//com.google.common.collect.EnumMultiset:1
//com.google.common.collect.EnumMultiset.Itr:1
//com.google.common.collect.EvictingQueue:1
//com.google.common.collect.ExplicitOrdering:1
//com.google.common.collect.FilteredEntryMultimap:2
//com.google.common.collect.FilteredEntrySetMultimap:2
//com.google.common.collect.FilteredKeyListMultimap:2
//com.google.common.collect.FilteredKeyMultimap:2
//com.google.common.collect.FilteredKeyMultimap.AddRejectingList:2
//com.google.common.collect.FilteredKeyMultimap.AddRejectingSet:2
//com.google.common.collect.FilteredKeySetMultimap:2
//com.google.common.collect.FilteredMultimap:2
//com.google.common.collect.FilteredMultimapValues:2
//com.google.common.collect.FilteredSetMultimap:2
//com.google.common.collect.FluentIterable:1
//com.google.common.collect.FluentIterable.FromIterableFunction:1
//com.google.common.collect.ForwardingBlockingDeque:1
//com.google.common.collect.ForwardingCollection:1
//com.google.common.collect.ForwardingConcurrentMap:2
//com.google.common.collect.ForwardingDeque:1
//com.google.common.collect.ForwardingImmutableList:1
//com.google.common.collect.ForwardingImmutableMap:2
//com.google.common.collect.ForwardingImmutableSet:1
//com.google.common.collect.ForwardingIterator:1
//com.google.common.collect.ForwardingList:1
//com.google.common.collect.ForwardingListIterator:1
//com.google.common.collect.ForwardingListMultimap:2
//com.google.common.collect.ForwardingMap:2
//com.google.common.collect.ForwardingMapEntry:2
//com.google.common.collect.ForwardingMultimap:2
//com.google.common.collect.ForwardingMultiset:1
//com.google.common.collect.ForwardingNavigableMap:2
//com.google.common.collect.ForwardingNavigableSet:1
//com.google.common.collect.ForwardingQueue:1
//com.google.common.collect.ForwardingSet:1
//com.google.common.collect.ForwardingSetMultimap:2
//com.google.common.collect.ForwardingSortedMap:2
//com.google.common.collect.ForwardingSortedMultiset:1
//com.google.common.collect.ForwardingSortedSet:1
//com.google.common.collect.ForwardingSortedSetMultimap:2
//com.google.common.collect.ForwardingTable:3
//com.google.common.collect.GeneralRange:1
//com.google.common.collect.HashBasedTable:3
//com.google.common.collect.HashBasedTable.Factory:2
//com.google.common.collect.HashBiMap:2
//com.google.common.collect.HashBiMap.EntryForValue:2
//com.google.common.collect.HashBiMap.Inverse:2
//com.google.common.collect.HashBiMap.InverseEntrySet:2
//com.google.common.collect.HashBiMap.View:3
//com.google.common.collect.HashMultimap:2
//com.google.common.collect.HashMultimapGwtSerializationDependencies:2
//com.google.common.collect.HashMultiset:1
//com.google.common.collect.ImmutableAsList:1
//com.google.common.collect.ImmutableBiMap:2
//com.google.common.collect.ImmutableBiMap.Builder:2
//com.google.common.collect.ImmutableClassToInstanceMap:1
//com.google.common.collect.ImmutableClassToInstanceMap.Builder:1
//com.google.common.collect.ImmutableCollection:1
//com.google.common.collect.ImmutableCollection.ArrayBasedBuilder:1
//com.google.common.collect.ImmutableCollection.Builder:1
//com.google.common.collect.ImmutableEntry:2
//com.google.common.collect.ImmutableEnumMap:2
//com.google.common.collect.ImmutableEnumMap.EnumSerializedForm:2
//com.google.common.collect.ImmutableEnumSet:1
//com.google.common.collect.ImmutableEnumSet.EnumSerializedForm:1
//com.google.common.collect.ImmutableList:1
//com.google.common.collect.ImmutableList.Builder:1
//com.google.common.collect.ImmutableList.Itr:1
//com.google.common.collect.ImmutableList.ReverseImmutableList:1
//com.google.common.collect.ImmutableListMultimap:2
//com.google.common.collect.ImmutableListMultimap.Builder:2
//com.google.common.collect.ImmutableMap:2
//com.google.common.collect.ImmutableMap.Builder:2
//com.google.common.collect.ImmutableMap.IteratorBasedImmutableMap:2
//com.google.common.collect.ImmutableMapEntrySet:2
//com.google.common.collect.ImmutableMapEntrySet.EntrySetSerializedForm:2
//com.google.common.collect.ImmutableMapEntrySet.RegularEntrySet:2
//com.google.common.collect.ImmutableMapKeySet:2
//com.google.common.collect.ImmutableMapKeySet.KeySetSerializedForm:1
//com.google.common.collect.ImmutableMapValues:2
//com.google.common.collect.ImmutableMapValues.SerializedForm:1
//com.google.common.collect.ImmutableMultimap:2
//com.google.common.collect.ImmutableMultimap.Builder:2
//com.google.common.collect.ImmutableMultimap.EntryCollection:2
//com.google.common.collect.ImmutableMultimap.Values:2
//com.google.common.collect.ImmutableMultiset:1
//com.google.common.collect.ImmutableMultiset.Builder:1
//com.google.common.collect.ImmutableMultiset.EntrySetSerializedForm:1
//com.google.common.collect.ImmutableMultisetGwtSerializationDependencies:1
//com.google.common.collect.ImmutableRangeMap:2
//com.google.common.collect.ImmutableRangeMap.Builder:2
//com.google.common.collect.ImmutableRangeMap.SerializedForm:2
//com.google.common.collect.ImmutableRangeSet:1
//com.google.common.collect.ImmutableRangeSet.AsSetSerializedForm:1
//com.google.common.collect.ImmutableRangeSet.Builder:1
//com.google.common.collect.ImmutableRangeSet.SerializedForm:1
//com.google.common.collect.ImmutableSet:1
//com.google.common.collect.ImmutableSet.Builder:1
//com.google.common.collect.ImmutableSetMultimap:2
//com.google.common.collect.ImmutableSetMultimap.Builder:2
//com.google.common.collect.ImmutableSetMultimap.EntrySet:2
//com.google.common.collect.ImmutableSortedMap:2
//com.google.common.collect.ImmutableSortedMap.Builder:2
//com.google.common.collect.ImmutableSortedMapFauxverideShim:2
//com.google.common.collect.ImmutableSortedMultiset:1
//com.google.common.collect.ImmutableSortedMultiset.Builder:1
//com.google.common.collect.ImmutableSortedMultiset.SerializedForm:1
//com.google.common.collect.ImmutableSortedMultisetFauxverideShim:1
//com.google.common.collect.ImmutableSortedSet:1
//com.google.common.collect.ImmutableSortedSet.Builder:1
//com.google.common.collect.ImmutableSortedSet.SerializedForm:1
//com.google.common.collect.ImmutableSortedSetFauxverideShim:1
//com.google.common.collect.ImmutableTable:3
//com.google.common.collect.ImmutableTable.Builder:3
//com.google.common.collect.IndexedImmutableSet:1
//com.google.common.collect.Interner:1
//com.google.common.collect.Interners.InternerFunction:1
//com.google.common.collect.Interners.InternerImpl:1
//com.google.common.collect.Iterables.UnmodifiableIterable:1
//com.google.common.collect.Iterators.ArrayItr:1
//com.google.common.collect.Iterators.ConcatenatedIterator:1
//com.google.common.collect.Iterators.MergingIterator:1
//com.google.common.collect.Iterators.PeekingImpl:1
//com.google.common.collect.LexicographicalOrdering:1
//com.google.common.collect.LinkedHashMultimap:2
//com.google.common.collect.LinkedHashMultimap.ValueEntry:2
//com.google.common.collect.LinkedHashMultimap.ValueSetLink:2
//com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies:2
//com.google.common.collect.LinkedHashMultiset:1
//com.google.common.collect.LinkedListMultimap:2
//com.google.common.collect.LinkedListMultimap.KeyList:2
//com.google.common.collect.LinkedListMultimap.Node:2
//com.google.common.collect.ListMultimap:2
//com.google.common.collect.Lists.AbstractListWrapper:1
//com.google.common.collect.Lists.OnePlusArrayList:1
//com.google.common.collect.Lists.Partition:1
//com.google.common.collect.Lists.RandomAccessListWrapper:1
//com.google.common.collect.Lists.RandomAccessPartition:1
//com.google.common.collect.Lists.RandomAccessReverseList:1
//com.google.common.collect.Lists.ReverseList:1
//com.google.common.collect.Lists.TransformingRandomAccessList:2
//com.google.common.collect.Lists.TransformingSequentialList:2
//com.google.common.collect.Lists.TwoPlusArrayList:1
//com.google.common.collect.MapDifference:2
//com.google.common.collect.MapDifference.ValueDifference:1
//com.google.common.collect.MapMakerInternalMap:4
//com.google.common.collect.MapMakerInternalMap.AbstractSerializationProxy:2
//com.google.common.collect.MapMakerInternalMap.AbstractStrongKeyEntry:3
//com.google.common.collect.MapMakerInternalMap.AbstractWeakKeyEntry:3
//com.google.common.collect.MapMakerInternalMap.HashIterator:1
//com.google.common.collect.MapMakerInternalMap.InternalEntry:3
//com.google.common.collect.MapMakerInternalMap.InternalEntryHelper:4
//com.google.common.collect.MapMakerInternalMap.SafeToArraySet:1
//com.google.common.collect.MapMakerInternalMap.Segment:4
//com.google.common.collect.MapMakerInternalMap.SerializationProxy:2
//com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry:1
//com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueEntry.Helper:1
//com.google.common.collect.MapMakerInternalMap.StrongKeyDummyValueSegment:1
//com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry:2
//com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueEntry.Helper:2
//com.google.common.collect.MapMakerInternalMap.StrongKeyStrongValueSegment:2
//com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry:2
//com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueEntry.Helper:2
//com.google.common.collect.MapMakerInternalMap.StrongKeyWeakValueSegment:2
//com.google.common.collect.MapMakerInternalMap.StrongValueEntry:3
//com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry:1
//com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueEntry.Helper:1
//com.google.common.collect.MapMakerInternalMap.WeakKeyDummyValueSegment:1
//com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry:2
//com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueEntry.Helper:2
//com.google.common.collect.MapMakerInternalMap.WeakKeyStrongValueSegment:2
//com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry:2
//com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueEntry.Helper:2
//com.google.common.collect.MapMakerInternalMap.WeakKeyWeakValueSegment:2
//com.google.common.collect.MapMakerInternalMap.WeakValueEntry:3
//com.google.common.collect.MapMakerInternalMap.WeakValueReference:3
//com.google.common.collect.MapMakerInternalMap.WeakValueReferenceImpl:3
//com.google.common.collect.Maps.AbstractFilteredMap:2
//com.google.common.collect.Maps.AsMapView:2
//com.google.common.collect.Maps.BiMapConverter:2
//com.google.common.collect.Maps.DescendingMap:2
//com.google.common.collect.Maps.EntrySet:2
//com.google.common.collect.Maps.EntryTransformer:3
//com.google.common.collect.Maps.FilteredEntryBiMap:2
//com.google.common.collect.Maps.FilteredEntryMap:2
//com.google.common.collect.Maps.FilteredEntryNavigableMap:2
//com.google.common.collect.Maps.FilteredEntrySortedMap:2
//com.google.common.collect.Maps.FilteredKeyMap:2
//com.google.common.collect.Maps.FilteredMapValues:2
//com.google.common.collect.Maps.IteratorBasedAbstractMap:2
//com.google.common.collect.Maps.KeySet:2
//com.google.common.collect.Maps.MapDifferenceImpl:2
//com.google.common.collect.Maps.NavigableAsMapView:2
//com.google.common.collect.Maps.NavigableKeySet:2
//com.google.common.collect.Maps.SortedAsMapView:2
//com.google.common.collect.Maps.SortedKeySet:2
//com.google.common.collect.Maps.SortedMapDifferenceImpl:2
//com.google.common.collect.Maps.TransformedEntriesMap:3
//com.google.common.collect.Maps.TransformedEntriesNavigableMap:3
//com.google.common.collect.Maps.TransformedEntriesSortedMap:3
//com.google.common.collect.Maps.UnmodifiableBiMap:2
//com.google.common.collect.Maps.UnmodifiableEntries:2
//com.google.common.collect.Maps.UnmodifiableEntrySet:2
//com.google.common.collect.Maps.UnmodifiableNavigableMap:2
//com.google.common.collect.Maps.ValueDifferenceImpl:1
//com.google.common.collect.Maps.Values:2
//com.google.common.collect.Maps.ViewCachingAbstractMap:2
//com.google.common.collect.MinMaxPriorityQueue:1
//com.google.common.collect.MinMaxPriorityQueue.Builder:1
//com.google.common.collect.MinMaxPriorityQueue.MoveDesc:1
//com.google.common.collect.Multimap:2
//com.google.common.collect.MultimapBuilder:2
//com.google.common.collect.MultimapBuilder.ArrayListSupplier:1
//com.google.common.collect.MultimapBuilder.EnumSetSupplier:1
//com.google.common.collect.MultimapBuilder.HashSetSupplier:1
//com.google.common.collect.MultimapBuilder.LinkedHashSetSupplier:1
//com.google.common.collect.MultimapBuilder.ListMultimapBuilder:2
//com.google.common.collect.MultimapBuilder.MultimapBuilderWithKeys:1
//com.google.common.collect.MultimapBuilder.SetMultimapBuilder:2
//com.google.common.collect.MultimapBuilder.SortedSetMultimapBuilder:2
//com.google.common.collect.MultimapBuilder.TreeSetSupplier:1
//com.google.common.collect.Multimaps.AsMap:2
//com.google.common.collect.Multimaps.CustomListMultimap:2
//com.google.common.collect.Multimaps.CustomMultimap:2
//com.google.common.collect.Multimaps.CustomSetMultimap:2
//com.google.common.collect.Multimaps.CustomSortedSetMultimap:2
//com.google.common.collect.Multimaps.Entries:2
//com.google.common.collect.Multimaps.Keys:2
//com.google.common.collect.Multimaps.MapMultimap:2
//com.google.common.collect.Multimaps.TransformedEntriesListMultimap:3
//com.google.common.collect.Multimaps.TransformedEntriesMultimap:3
//com.google.common.collect.Multimaps.UnmodifiableListMultimap:2
//com.google.common.collect.Multimaps.UnmodifiableMultimap:2
//com.google.common.collect.Multimaps.UnmodifiableSetMultimap:2
//com.google.common.collect.Multimaps.UnmodifiableSortedSetMultimap:2
//com.google.common.collect.Multiset:1
//com.google.common.collect.Multiset.Entry:1
//com.google.common.collect.Multisets.AbstractEntry:1
//com.google.common.collect.Multisets.ElementSet:1
//com.google.common.collect.Multisets.EntrySet:1
//com.google.common.collect.Multisets.FilteredMultiset:1
//com.google.common.collect.Multisets.ImmutableEntry:1
//com.google.common.collect.Multisets.MultisetIteratorImpl:1
//com.google.common.collect.Multisets.UnmodifiableMultiset:1
//com.google.common.collect.Multisets.ViewMultiset:1
//com.google.common.collect.MutableClassToInstanceMap:1
//com.google.common.collect.MutableClassToInstanceMap.SerializedForm:1
//com.google.common.collect.NullsFirstOrdering:1
//com.google.common.collect.NullsLastOrdering:1
//com.google.common.collect.ObjectCountHashMap:1
//com.google.common.collect.ObjectCountLinkedHashMap:1
//com.google.common.collect.Ordering:1
//com.google.common.collect.PeekingIterator:1
//com.google.common.collect.Range:1
//com.google.common.collect.RangeGwtSerializationDependencies:1
//com.google.common.collect.RangeMap:2
//com.google.common.collect.RangeSet:1
//com.google.common.collect.RegularContiguousSet:1
//com.google.common.collect.RegularContiguousSet.SerializedForm:1
//com.google.common.collect.RegularImmutableAsList:1
//com.google.common.collect.RegularImmutableBiMap:2
//com.google.common.collect.RegularImmutableList:1
//com.google.common.collect.RegularImmutableMap:2
//com.google.common.collect.RegularImmutableMap.EntrySet:2
//com.google.common.collect.RegularImmutableMap.KeySet:1
//com.google.common.collect.RegularImmutableMultiset:1
//com.google.common.collect.RegularImmutableSet:1
//com.google.common.collect.RegularImmutableSortedMultiset:1
//com.google.common.collect.RegularImmutableSortedSet:1
//com.google.common.collect.RegularImmutableTable:3
//com.google.common.collect.ReverseOrdering:1
//com.google.common.collect.RowSortedTable:3
//com.google.common.collect.Serialization.FieldSetter:1
//com.google.common.collect.SetMultimap:2
//com.google.common.collect.Sets.CartesianSet:1
//com.google.common.collect.Sets.DescendingSet:1
//com.google.common.collect.Sets.FilteredNavigableSet:1
//com.google.common.collect.Sets.FilteredSet:1
//com.google.common.collect.Sets.FilteredSortedSet:1
//com.google.common.collect.Sets.ImprovedAbstractSet:1
//com.google.common.collect.Sets.PowerSet:1
//com.google.common.collect.Sets.SetView:1
//com.google.common.collect.Sets.SubSet:1
//com.google.common.collect.Sets.UnmodifiableNavigableSet:1
//com.google.common.collect.SingletonImmutableSet:1
//com.google.common.collect.SingletonImmutableTable:3
//com.google.common.collect.SortedIterable:1
//com.google.common.collect.SortedMapDifference:2
//com.google.common.collect.SortedMultiset:1
//com.google.common.collect.SortedMultisetBridge:1
//com.google.common.collect.SortedMultisets.ElementSet:1
//com.google.common.collect.SortedMultisets.NavigableElementSet:1
//com.google.common.collect.SortedSetMultimap:2
//com.google.common.collect.SparseImmutableTable:3
//com.google.common.collect.StandardRowSortedTable:3
//com.google.common.collect.StandardTable:3
//com.google.common.collect.StandardTable.TableSet:1
//com.google.common.collect.Synchronized.SynchronizedAsMap:2
//com.google.common.collect.Synchronized.SynchronizedAsMapEntries:2
//com.google.common.collect.Synchronized.SynchronizedAsMapValues:1
//com.google.common.collect.Synchronized.SynchronizedBiMap:2
//com.google.common.collect.Synchronized.SynchronizedCollection:1
//com.google.common.collect.Synchronized.SynchronizedDeque:1
//com.google.common.collect.Synchronized.SynchronizedEntry:2
//com.google.common.collect.Synchronized.SynchronizedList:1
//com.google.common.collect.Synchronized.SynchronizedListMultimap:2
//com.google.common.collect.Synchronized.SynchronizedMap:2
//com.google.common.collect.Synchronized.SynchronizedMultimap:2
//com.google.common.collect.Synchronized.SynchronizedMultiset:1
//com.google.common.collect.Synchronized.SynchronizedNavigableMap:2
//com.google.common.collect.Synchronized.SynchronizedNavigableSet:1
//com.google.common.collect.Synchronized.SynchronizedQueue:1
//com.google.common.collect.Synchronized.SynchronizedRandomAccessList:1
//com.google.common.collect.Synchronized.SynchronizedSet:1
//com.google.common.collect.Synchronized.SynchronizedSetMultimap:2
//com.google.common.collect.Synchronized.SynchronizedSortedMap:2
//com.google.common.collect.Synchronized.SynchronizedSortedSet:1
//com.google.common.collect.Synchronized.SynchronizedSortedSetMultimap:2
//com.google.common.collect.Synchronized.SynchronizedTable:3
//com.google.common.collect.Table:3
//com.google.common.collect.Table.Cell:3
//com.google.common.collect.Tables.AbstractCell:3
//com.google.common.collect.Tables.ImmutableCell:3
//com.google.common.collect.Tables.TransformedTable:4
//com.google.common.collect.Tables.TransposeTable:3
//com.google.common.collect.Tables.UnmodifiableRowSortedMap:3
//com.google.common.collect.Tables.UnmodifiableTable:3
//com.google.common.collect.TopKSelector:1
//com.google.common.collect.TransformedIterator:2
//com.google.common.collect.TransformedListIterator:2
//com.google.common.collect.TreeBasedTable:3
//com.google.common.collect.TreeBasedTable.Factory:2
//com.google.common.collect.TreeMultimap:2
//com.google.common.collect.TreeMultiset:1
//com.google.common.collect.TreeMultiset.AvlNode:1
//com.google.common.collect.TreeMultiset.Reference:1
//com.google.common.collect.TreeRangeMap:2
//com.google.common.collect.TreeRangeMap.RangeMapEntry:2
//com.google.common.collect.TreeRangeSet:1
//com.google.common.collect.TreeRangeSet.ComplementRangesByLowerBound:1
//com.google.common.collect.TreeRangeSet.RangesByUpperBound:1
//com.google.common.collect.TreeRangeSet.SubRangeSetRangesByLowerBound:1
//com.google.common.collect.TreeTraverser:1
//com.google.common.collect.TreeTraverser.PostOrderNode:1
//com.google.common.collect.UnmodifiableIterator:1
//com.google.common.collect.UnmodifiableListIterator:1
//com.google.common.collect.UnmodifiableSortedMultiset:1
//com.google.common.graph.AbstractBaseGraph:1
//com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet:1
//com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet.Directed:1
//com.google.common.graph.AbstractBaseGraph.IncidentEdgeSet.Undirected:1
//com.google.common.graph.AbstractDirectedNetworkConnections:2
//com.google.common.graph.AbstractGraph:1
//com.google.common.graph.AbstractGraphBuilder:1
//com.google.common.graph.AbstractNetwork:2
//com.google.common.graph.AbstractUndirectedNetworkConnections:2
//com.google.common.graph.AbstractValueGraph:2
//com.google.common.graph.BaseGraph:1
//com.google.common.graph.ConfigurableMutableGraph:1
//com.google.common.graph.ConfigurableMutableNetwork:2
//com.google.common.graph.ConfigurableMutableValueGraph:2
//com.google.common.graph.ConfigurableNetwork:2
//com.google.common.graph.ConfigurableValueGraph:2
//com.google.common.graph.DirectedGraphConnections:2
//com.google.common.graph.DirectedMultiNetworkConnections:2
//com.google.common.graph.DirectedNetworkConnections:2
//com.google.common.graph.EdgesConnecting:1
//com.google.common.graph.ElementOrder:1
//com.google.common.graph.EndpointPair:1
//com.google.common.graph.EndpointPair.Ordered:1
//com.google.common.graph.EndpointPair.Unordered:1
//com.google.common.graph.EndpointPairIterator:1
//com.google.common.graph.EndpointPairIterator.Directed:1
//com.google.common.graph.EndpointPairIterator.Undirected:1
//com.google.common.graph.ForwardingGraph:1
//com.google.common.graph.ForwardingNetwork:2
//com.google.common.graph.ForwardingValueGraph:2
//com.google.common.graph.Graph:1
//com.google.common.graph.GraphBuilder:1
//com.google.common.graph.GraphConnections:2
//com.google.common.graph.Graphs.TransposedGraph:1
//com.google.common.graph.Graphs.TransposedNetwork:2
//com.google.common.graph.Graphs.TransposedValueGraph:2
//com.google.common.graph.ImmutableGraph:1
//com.google.common.graph.ImmutableNetwork:2
//com.google.common.graph.ImmutableValueGraph:2
//com.google.common.graph.MapIteratorCache:2
//com.google.common.graph.MapRetrievalCache:2
//com.google.common.graph.MapRetrievalCache.CacheEntry:2
//com.google.common.graph.MultiEdgesConnecting:1
//com.google.common.graph.MutableGraph:1
//com.google.common.graph.MutableNetwork:2
//com.google.common.graph.MutableValueGraph:2
//com.google.common.graph.Network:2
//com.google.common.graph.NetworkBuilder:2
//com.google.common.graph.NetworkConnections:2
//com.google.common.graph.PredecessorsFunction:1
//com.google.common.graph.SuccessorsFunction:1
//com.google.common.graph.Traverser:1
//com.google.common.graph.Traverser.GraphTraverser:1
//com.google.common.graph.Traverser.TreeTraverser:1
//com.google.common.graph.UndirectedGraphConnections:2
//com.google.common.graph.UndirectedMultiNetworkConnections:2
//com.google.common.graph.UndirectedNetworkConnections:2
//com.google.common.graph.ValueGraph:2
//com.google.common.graph.ValueGraphBuilder:2
//com.google.common.hash.BloomFilter:1
//com.google.common.hash.BloomFilter.SerialForm:1
//com.google.common.hash.Funnel:1
//com.google.common.hash.Funnels.SequentialFunnel:1
//com.google.common.hash.ImmutableSupplier:1
//com.google.common.io.ByteProcessor:1
//com.google.common.io.LineProcessor:1
//com.google.common.reflect.ImmutableTypeToInstanceMap:1
//com.google.common.reflect.ImmutableTypeToInstanceMap.Builder:1
//com.google.common.reflect.Invokable:2
//com.google.common.reflect.Invokable.ConstructorInvokable:1
//com.google.common.reflect.Invokable.MethodInvokable:1
//com.google.common.reflect.MutableTypeToInstanceMap:1
//com.google.common.reflect.MutableTypeToInstanceMap.UnmodifiableEntry:2
//com.google.common.reflect.TypeCapture:1
//com.google.common.reflect.TypeParameter:1
//com.google.common.reflect.TypeToInstanceMap:1
//com.google.common.reflect.TypeToken:1
//com.google.common.reflect.TypeToken.SimpleTypeToken:1
//com.google.common.reflect.TypeToken.TypeCollector:1
//com.google.common.reflect.TypeToken.TypeCollector.ForwardingTypeCollector:1
//com.google.common.reflect.Types.NativeTypeVariableEquals:1
//com.google.common.reflect.Types.TypeVariableImpl:1
//com.google.common.util.concurrent.AbstractCatchingFuture:4
//com.google.common.util.concurrent.AbstractCatchingFuture.AsyncCatchingFuture:2
//com.google.common.util.concurrent.AbstractCatchingFuture.CatchingFuture:2
//com.google.common.util.concurrent.AbstractCheckedFuture:2
//com.google.common.util.concurrent.AbstractFuture:1
//com.google.common.util.concurrent.AbstractFuture.SetFuture:1
//com.google.common.util.concurrent.AbstractFuture.Trusted:1
//com.google.common.util.concurrent.AbstractFuture.TrustedFuture:1
//com.google.common.util.concurrent.AbstractTransformFuture:4
//com.google.common.util.concurrent.AbstractTransformFuture.AsyncTransformFuture:2
//com.google.common.util.concurrent.AbstractTransformFuture.TransformFuture:2
//com.google.common.util.concurrent.AggregateFuture:2
//com.google.common.util.concurrent.AsyncCallable:1
//com.google.common.util.concurrent.AsyncFunction:2
//com.google.common.util.concurrent.AtomicLongMap:1
//com.google.common.util.concurrent.CheckedFuture:2
//com.google.common.util.concurrent.CollectionFuture:2
//com.google.common.util.concurrent.CollectionFuture.ListFuture:1
//com.google.common.util.concurrent.CombinedFuture:1
//com.google.common.util.concurrent.CombinedFuture.CombinedFutureInterruptibleTask:1
//com.google.common.util.concurrent.CycleDetectingLockFactory.WithExplicitOrdering:1
//com.google.common.util.concurrent.FluentFuture:1
//com.google.common.util.concurrent.FluentFuture.TrustedFuture:1
//com.google.common.util.concurrent.ForwardingBlockingDeque:1
//com.google.common.util.concurrent.ForwardingBlockingQueue:1
//com.google.common.util.concurrent.ForwardingCheckedFuture:2
//com.google.common.util.concurrent.ForwardingCheckedFuture.SimpleForwardingCheckedFuture:2
//com.google.common.util.concurrent.ForwardingFluentFuture:1
//com.google.common.util.concurrent.ForwardingFuture:1
//com.google.common.util.concurrent.ForwardingFuture.SimpleForwardingFuture:1
//com.google.common.util.concurrent.ForwardingListenableFuture:1
//com.google.common.util.concurrent.ForwardingListenableFuture.SimpleForwardingListenableFuture:1
//com.google.common.util.concurrent.FutureCallback:1
//com.google.common.util.concurrent.Futures.CallbackListener:1
//com.google.common.util.concurrent.Futures.FutureCombiner:1
//com.google.common.util.concurrent.Futures.InCompletionOrderFuture:1
//com.google.common.util.concurrent.Futures.InCompletionOrderState:1
//com.google.common.util.concurrent.Futures.MappingCheckedFuture:2
//com.google.common.util.concurrent.Futures.NonCancellationPropagatingFuture:1
//com.google.common.util.concurrent.GwtFluentFutureCatchingSpecialization:1
//com.google.common.util.concurrent.ImmediateFuture:1
//com.google.common.util.concurrent.ImmediateFuture.ImmediateCancelledFuture:1
//com.google.common.util.concurrent.ImmediateFuture.ImmediateFailedCheckedFuture:2
//com.google.common.util.concurrent.ImmediateFuture.ImmediateFailedFuture:1
//com.google.common.util.concurrent.ImmediateFuture.ImmediateSuccessfulCheckedFuture:2
//com.google.common.util.concurrent.ImmediateFuture.ImmediateSuccessfulFuture:1
//com.google.common.util.concurrent.InterruptibleTask:1
//com.google.common.util.concurrent.JdkFutureAdapters.ListenableFutureAdapter:1
//com.google.common.util.concurrent.ListenableFuture:1
//com.google.common.util.concurrent.ListenableFutureTask:1
//com.google.common.util.concurrent.ListenableScheduledFuture:1
//com.google.common.util.concurrent.ListenerCallQueue:1
//com.google.common.util.concurrent.ListenerCallQueue.Event:1
//com.google.common.util.concurrent.ListenerCallQueue.PerListenerQueue:1
//com.google.common.util.concurrent.MoreExecutors.ScheduledListeningDecorator.ListenableScheduledTask:1
//com.google.common.util.concurrent.SettableFuture:1
//com.google.common.util.concurrent.Striped:1
//com.google.common.util.concurrent.Striped.CompactStriped:1
//com.google.common.util.concurrent.Striped.LargeLazyStriped:1
//com.google.common.util.concurrent.Striped.PowerOfTwoStriped:1
//com.google.common.util.concurrent.Striped.SmallLazyStriped:1
//com.google.common.util.concurrent.Striped.SmallLazyStriped.ArrayReference:1
//com.google.common.util.concurrent.TimeoutFuture:1
//com.google.common.util.concurrent.TimeoutFuture.Fire:1
//com.google.common.util.concurrent.TrustedListenableFutureTask:1

