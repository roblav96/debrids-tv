declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class SystemClock extends java.lang.Object implements org.apache.logging.log4j.core.util.Clock, org.apache.logging.log4j.core.time.PreciseClock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.SystemClock>;
							public constructor();
							public init(mutableInstant: org.apache.logging.log4j.core.time.MutableInstant): void;
							public currentTimeMillis(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class AbstractLifeCycle extends java.lang.Object implements org.apache.logging.log4j.core.LifeCycle2 {
						public static class: java.lang.Class<org.apache.logging.log4j.core.AbstractLifeCycle>;
						public static DEFAULT_STOP_TIMEOUT: number;
						public static DEFAULT_STOP_TIMEUNIT: java.util.concurrent.TimeUnit;
						public static LOGGER: org.apache.logging.log4j.Logger;
						public setStarted(): void;
						public setState(newState: org.apache.logging.log4j.core.LifeCycle.State): void;
						public setStopped(): void;
						public constructor();
						public static getStatusLogger(): org.apache.logging.log4j.Logger;
						public isStopped(): boolean;
						public stop(future: java.util.concurrent.Future<any>): boolean;
						public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
						public isStarting(): boolean;
						public setStopping(): void;
						public equalsImpl(obj: any): boolean;
						public getState(): org.apache.logging.log4j.core.LifeCycle.State;
						public stop(): void;
						public isInitialized(): boolean;
						public hashCodeImpl(): number;
						public isStopping(): boolean;
						public start(): void;
						public isStarted(): boolean;
						public initialize(): void;
						public setStarting(): void;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export abstract class AbstractLogEvent extends java.lang.Object implements org.apache.logging.log4j.core.LogEvent {
						public static class: java.lang.Class<org.apache.logging.log4j.core.AbstractLogEvent>;
						public getLevel(): org.apache.logging.log4j.Level;
						public getInstant(): org.apache.logging.log4j.core.time.Instant;
						public getThrown(): java.lang.Throwable;
						public getSource(): java.lang.StackTraceElement;
						public getMutableInstant(): org.apache.logging.log4j.core.time.MutableInstant;
						public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
						public getTimeMillis(): number;
						public setEndOfBatch(endOfBatch: boolean): void;
						public getThreadName(): string;
						public getContextMap(): java.util.Map<string,string>;
						public isIncludeLocation(): boolean;
						public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
						public getThreadPriority(): number;
						public constructor();
						public getMarker(): org.apache.logging.log4j.Marker;
						public getLoggerFqcn(): string;
						public toImmutable(): org.apache.logging.log4j.core.LogEvent;
						public getMessage(): org.apache.logging.log4j.message.Message;
						/** @deprecated */
						public getContextMap(): java.util.Map<string,string>;
						public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
						public getNanoTime(): number;
						public getThreadId(): number;
						public setIncludeLocation(locationRequired: boolean): void;
						public getLoggerName(): string;
						public isEndOfBatch(): boolean;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class Appender extends java.lang.Object implements org.apache.logging.log4j.core.LifeCycle {
						public static class: java.lang.Class<org.apache.logging.log4j.core.Appender>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.Appender interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							append(logEvent0: org.apache.logging.log4j.core.LogEvent): void;
							getName(): string;
							getLayout(): org.apache.logging.log4j.core.Layout<any>;
							ignoreExceptions(): boolean;
							getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							setHandler(errorHandler0: org.apache.logging.log4j.core.ErrorHandler): void;
							getState(): org.apache.logging.log4j.core.LifeCycle.State;
							initialize(): void;
							start(): void;
							stop(): void;
							isStarted(): boolean;
							isStopped(): boolean;
						});
						public constructor();
						public static ELEMENT_TYPE: string;
						public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
						public setHandler(errorHandler0: org.apache.logging.log4j.core.ErrorHandler): void;
						public isStopped(): boolean;
						public append(logEvent0: org.apache.logging.log4j.core.LogEvent): void;
						public ignoreExceptions(): boolean;
						public start(): void;
						public isStarted(): boolean;
						public initialize(): void;
						public getLayout(): org.apache.logging.log4j.core.Layout<any>;
						public getState(): org.apache.logging.log4j.core.LifeCycle.State;
						public stop(): void;
						public getName(): string;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class ContextDataInjector extends java.lang.Object {
						public static class: java.lang.Class<org.apache.logging.log4j.core.ContextDataInjector>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.ContextDataInjector interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							injectContextData(list0: java.util.List<org.apache.logging.log4j.core.config.Property>, stringMap1: org.apache.logging.log4j.util.StringMap): org.apache.logging.log4j.util.StringMap;
							rawContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
						});
						public constructor();
						public injectContextData(list0: java.util.List<org.apache.logging.log4j.core.config.Property>, stringMap1: org.apache.logging.log4j.util.StringMap): org.apache.logging.log4j.util.StringMap;
						public rawContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class Core extends java.lang.Object {
						public static class: java.lang.Class<org.apache.logging.log4j.core.Core>;
						public static CATEGORY_NAME: string;
						public constructor();
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class DefaultLoggerContextAccessor extends java.lang.Object implements org.apache.logging.log4j.core.LoggerContextAccessor {
						public static class: java.lang.Class<org.apache.logging.log4j.core.DefaultLoggerContextAccessor>;
						public static INSTANCE: org.apache.logging.log4j.core.DefaultLoggerContextAccessor;
						public constructor();
						public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class ErrorHandler extends java.lang.Object {
						public static class: java.lang.Class<org.apache.logging.log4j.core.ErrorHandler>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.ErrorHandler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							error(string0: string): void;
							error(string0: string, throwable1: java.lang.Throwable): void;
							error(string0: string, logEvent1: org.apache.logging.log4j.core.LogEvent, throwable2: java.lang.Throwable): void;
						});
						public constructor();
						public error(string0: string, logEvent1: org.apache.logging.log4j.core.LogEvent, throwable2: java.lang.Throwable): void;
						public error(string0: string, throwable1: java.lang.Throwable): void;
						public error(string0: string): void;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class Filter extends java.lang.Object implements org.apache.logging.log4j.core.LifeCycle {
						public static class: java.lang.Class<org.apache.logging.log4j.core.Filter>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.Filter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, objects4: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any, object11: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any, object11: any, object12: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any, object11: any, object12: any, object13: any): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, object3: any, throwable4: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, message3: org.apache.logging.log4j.message.Message, throwable4: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							filter(logEvent0: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							getState(): org.apache.logging.log4j.core.LifeCycle.State;
							initialize(): void;
							start(): void;
							stop(): void;
							isStarted(): boolean;
							isStopped(): boolean;
						});
						public constructor();
						public static ELEMENT_TYPE: string;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, objects4: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
						public isStopped(): boolean;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any, object11: any, object12: any, object13: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any): org.apache.logging.log4j.core.Filter.Result;
						public getState(): org.apache.logging.log4j.core.LifeCycle.State;
						public stop(): void;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any): org.apache.logging.log4j.core.Filter.Result;
						public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any, object11: any, object12: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logEvent0: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
						public start(): void;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, object3: any, throwable4: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
						public isStarted(): boolean;
						public initialize(): void;
						public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any, object11: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, string3: string, object4: any, object5: any, object6: any, object7: any, object8: any, object9: any, object10: any): org.apache.logging.log4j.core.Filter.Result;
						public filter(logger0: org.apache.logging.log4j.core.Logger, level1: org.apache.logging.log4j.Level, marker2: org.apache.logging.log4j.Marker, message3: org.apache.logging.log4j.message.Message, throwable4: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
					}
					export module Filter {
						export class Result {
							public static class: java.lang.Class<org.apache.logging.log4j.core.Filter.Result>;
							public static ACCEPT: org.apache.logging.log4j.core.Filter.Result;
							public static NEUTRAL: org.apache.logging.log4j.core.Filter.Result;
							public static DENY: org.apache.logging.log4j.core.Filter.Result;
							public static values(): native.Array<org.apache.logging.log4j.core.Filter.Result>;
							public static toResult(name: string, defaultResult: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.Filter.Result;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(name: string): org.apache.logging.log4j.core.Filter.Result;
							public static toResult(name: string): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class Layout<T>  extends org.apache.logging.log4j.core.layout.Encoder<org.apache.logging.log4j.core.LogEvent> {
						public static class: java.lang.Class<org.apache.logging.log4j.core.Layout<any>>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.Layout<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getFooter(): native.Array<number>;
							getHeader(): native.Array<number>;
							toByteArray(logEvent0: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							getContentType(): string;
							getContentFormat(): java.util.Map<string,string>;
							encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						});
						public constructor();
						public static ELEMENT_TYPE: string;
						public getHeader(): native.Array<number>;
						public toByteArray(logEvent0: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
						public getFooter(): native.Array<number>;
						public getContentType(): string;
						public encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
						public getContentFormat(): java.util.Map<string,string>;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class LifeCycle extends java.lang.Object {
						public static class: java.lang.Class<org.apache.logging.log4j.core.LifeCycle>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.LifeCycle interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getState(): org.apache.logging.log4j.core.LifeCycle.State;
							initialize(): void;
							start(): void;
							stop(): void;
							isStarted(): boolean;
							isStopped(): boolean;
						});
						public constructor();
						public isStopped(): boolean;
						public start(): void;
						public isStarted(): boolean;
						public initialize(): void;
						public getState(): org.apache.logging.log4j.core.LifeCycle.State;
						public stop(): void;
					}
					export module LifeCycle {
						export class State {
							public static class: java.lang.Class<org.apache.logging.log4j.core.LifeCycle.State>;
							public static INITIALIZING: org.apache.logging.log4j.core.LifeCycle.State;
							public static INITIALIZED: org.apache.logging.log4j.core.LifeCycle.State;
							public static STARTING: org.apache.logging.log4j.core.LifeCycle.State;
							public static STARTED: org.apache.logging.log4j.core.LifeCycle.State;
							public static STOPPING: org.apache.logging.log4j.core.LifeCycle.State;
							public static STOPPED: org.apache.logging.log4j.core.LifeCycle.State;
							public static values(): native.Array<org.apache.logging.log4j.core.LifeCycle.State>;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(name: string): org.apache.logging.log4j.core.LifeCycle.State;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class LifeCycle2 extends java.lang.Object implements org.apache.logging.log4j.core.LifeCycle {
						public static class: java.lang.Class<org.apache.logging.log4j.core.LifeCycle2>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.LifeCycle2 interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							stop(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
							getState(): org.apache.logging.log4j.core.LifeCycle.State;
							initialize(): void;
							start(): void;
							stop(): void;
							isStarted(): boolean;
							isStopped(): boolean;
						});
						public constructor();
						public isStopped(): boolean;
						public start(): void;
						public isStarted(): boolean;
						public initialize(): void;
						public stop(long0: number, timeUnit1: java.util.concurrent.TimeUnit): boolean;
						public getState(): org.apache.logging.log4j.core.LifeCycle.State;
						public stop(): void;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class LogEvent extends java.lang.Object implements java.io.Serializable {
						public static class: java.lang.Class<org.apache.logging.log4j.core.LogEvent>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.LogEvent interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							toImmutable(): org.apache.logging.log4j.core.LogEvent;
							getContextMap(): java.util.Map<string,string>;
							getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
							getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
							getLoggerFqcn(): string;
							getLevel(): org.apache.logging.log4j.Level;
							getLoggerName(): string;
							getMarker(): org.apache.logging.log4j.Marker;
							getMessage(): org.apache.logging.log4j.message.Message;
							getTimeMillis(): number;
							getInstant(): org.apache.logging.log4j.core.time.Instant;
							getSource(): java.lang.StackTraceElement;
							getThreadName(): string;
							getThreadId(): number;
							getThreadPriority(): number;
							getThrown(): java.lang.Throwable;
							getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
							isEndOfBatch(): boolean;
							isIncludeLocation(): boolean;
							setEndOfBatch(boolean0: boolean): void;
							setIncludeLocation(boolean0: boolean): void;
							getNanoTime(): number;
						});
						public constructor();
						public getMarker(): org.apache.logging.log4j.Marker;
						public setIncludeLocation(boolean0: boolean): void;
						public getLevel(): org.apache.logging.log4j.Level;
						public getLoggerFqcn(): string;
						public getInstant(): org.apache.logging.log4j.core.time.Instant;
						public getThrown(): java.lang.Throwable;
						public toImmutable(): org.apache.logging.log4j.core.LogEvent;
						public getSource(): java.lang.StackTraceElement;
						public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
						public getTimeMillis(): number;
						public setEndOfBatch(boolean0: boolean): void;
						/** @deprecated */
						public getContextMap(): java.util.Map<string,string>;
						public getMessage(): org.apache.logging.log4j.message.Message;
						public getThreadName(): string;
						public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
						public isIncludeLocation(): boolean;
						public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
						public getNanoTime(): number;
						public getThreadId(): number;
						public getLoggerName(): string;
						public isEndOfBatch(): boolean;
						public getThreadPriority(): number;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class LogEventListener extends java.lang.Object implements java.util.EventListener {
						public static class: java.lang.Class<org.apache.logging.log4j.core.LogEventListener>;
						public static LOGGER: org.apache.logging.log4j.status.StatusLogger;
						public constructor();
						public log(event: org.apache.logging.log4j.core.LogEvent): void;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class Logger extends org.apache.logging.log4j.spi.AbstractLogger implements org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>  {
						public static class: java.lang.Class<org.apache.logging.log4j.core.Logger>;
						public privateConfig: org.apache.logging.log4j.core.Logger.PrivateConfig;
						public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): boolean;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): boolean;
						public equals(obj: any): boolean;
						public requiresLocation(): boolean;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any): void;
						public constructor(name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory);
						public setLevel(level: org.apache.logging.log4j.Level): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): boolean;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
						public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
						public isEnabled(level: org.apache.logging.log4j.Level): boolean;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
						public log(level: org.apache.logging.log4j.Level, message: any): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): void;
						public equals(o: any): boolean;
						public log(level: org.apache.logging.log4j.Level, msg: org.apache.logging.log4j.message.Message): void;
						public constructor();
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
						public updateConfiguration(newConfig: org.apache.logging.log4j.core.config.Configuration): void;
						public toString(): string;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): void;
						public setAdditive(additive: boolean): void;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
						public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): boolean;
						public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.Supplier<any>): void;
						public log(level: org.apache.logging.log4j.Level, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): boolean;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any): void;
						public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
						public get(): org.apache.logging.log4j.core.config.LoggerConfig;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): void;
						public writeReplace(): any;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
						public isAdditive(): boolean;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
						public getParent(): org.apache.logging.log4j.core.Logger;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): void;
						public log(level: org.apache.logging.log4j.Level, message: string, t: java.lang.Throwable): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): void;
						public log(level: org.apache.logging.log4j.Level, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, fqcn: string, location: java.lang.StackTraceElement, message: org.apache.logging.log4j.message.Message, throwable: java.lang.Throwable): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
						public getFilters(): java.util.Iterator<org.apache.logging.log4j.core.Filter>;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): void;
						public filterCount(): number;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>): void;
						public get(): any;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
						public log(level: org.apache.logging.log4j.Level, message: string): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): boolean;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
						public log(level: org.apache.logging.log4j.Level, message: string, params: native.Array<any>): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): boolean;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): boolean;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): boolean;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): void;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): void;
						public getLevel(): org.apache.logging.log4j.Level;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): boolean;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
						public hashCode(): number;
						public log(level: org.apache.logging.log4j.Level, message: any, t: java.lang.Throwable): void;
						public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): boolean;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): void;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): boolean;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): boolean;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): boolean;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any): void;
						public removeAppender(appender: org.apache.logging.log4j.core.Appender): void;
						public getContext(): org.apache.logging.log4j.core.LoggerContext;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): boolean;
						public constructor(context: org.apache.logging.log4j.core.LoggerContext, name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory);
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
						public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message): void;
						public logMessage(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, fqcn: string, location: java.lang.StackTraceElement, message: org.apache.logging.log4j.message.Message, throwable: java.lang.Throwable): void;
						public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
						public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): void;
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
						public constructor(name: string);
						public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
						public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker): boolean;
						public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.MessageSupplier): void;
					}
					export module Logger {
						export class LoggerProxy extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.Logger.LoggerProxy>;
							public constructor(name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory);
							public readResolve(): any;
						}
						export class PrivateConfig extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.Logger.PrivateConfig>;
							public loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig;
							public config: org.apache.logging.log4j.core.config.Configuration;
							public constructor(this0: org.apache.logging.log4j.core.Logger, config: org.apache.logging.log4j.core.config.Configuration, logger: org.apache.logging.log4j.core.Logger);
							public logEvent(event: org.apache.logging.log4j.core.LogEvent): void;
							public constructor(this0: org.apache.logging.log4j.core.Logger, pc: org.apache.logging.log4j.core.Logger.PrivateConfig, lc: org.apache.logging.log4j.core.config.LoggerConfig);
							public constructor(this0: org.apache.logging.log4j.core.Logger, pc: org.apache.logging.log4j.core.Logger.PrivateConfig, level: org.apache.logging.log4j.Level);
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class LoggerContext extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.spi.LoggerContext, java.lang.AutoCloseable, org.apache.logging.log4j.spi.Terminable, org.apache.logging.log4j.core.config.ConfigurationListener, org.apache.logging.log4j.spi.LoggerContextShutdownEnabled {
						public static class: java.lang.Class<org.apache.logging.log4j.core.LoggerContext>;
						public static PROPERTY_CONFIG: string;
						public getListeners(): java.util.List<org.apache.logging.log4j.spi.LoggerContextShutdownAware>;
						public reconfigure(configuration: org.apache.logging.log4j.core.config.Configuration): void;
						public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
						public putObject(key: string, value: any): any;
						public close(): void;
						public hasLogger(name: string, messageFactoryClass: java.lang.Class<any>): boolean;
						public constructor(name: string, externalContext: any, configLocn: string);
						public setConfigLocation(configLocation: java.net.URI): void;
						public updateLoggers(config: org.apache.logging.log4j.core.config.Configuration): void;
						public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
						public newInstance(ctx: org.apache.logging.log4j.core.LoggerContext, name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory): org.apache.logging.log4j.core.Logger;
						public hasLogger(name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory): boolean;
						public setName(name: string): void;
						public addPropertyChangeListener(listener: java.beans.PropertyChangeListener): void;
						public constructor();
						public getLogger(string0: string, messageFactory1: org.apache.logging.log4j.message.MessageFactory): org.apache.logging.log4j.spi.ExtendedLogger;
						public getLogger(name: string): org.apache.logging.log4j.core.Logger;
						public updateLoggers(): void;
						public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
						public start(): void;
						public terminate(): void;
						public setExternalContext(context: any): void;
						public static getContext(): org.apache.logging.log4j.core.LoggerContext;
						public putObjectIfAbsent(key: string, value: any): any;
						public getExternalContext(): any;
						public getLoggers(): java.util.Collection<org.apache.logging.log4j.core.Logger>;
						public reconfigure(): void;
						public getName(): string;
						public constructor(name: string, externalContext: any, configLocn: java.net.URI);
						public hasLogger(name: string): boolean;
						public onChange(reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable): void;
						public start(config: org.apache.logging.log4j.core.config.Configuration): void;
						public removeObject(key: string): any;
						public getConfigLocation(): java.net.URI;
						public stop(future: java.util.concurrent.Future<any>): boolean;
						public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
						public getObject(key: string): any;
						public removePropertyChangeListener(listener: java.beans.PropertyChangeListener): void;
						public getRootLogger(): org.apache.logging.log4j.core.Logger;
						public addShutdownListener(listener: org.apache.logging.log4j.spi.LoggerContextShutdownAware): void;
						public removeObject(key: string, value: any): boolean;
						public constructor(name: string, externalContext: any);
						public stop(): void;
						public getLogger(name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory): org.apache.logging.log4j.core.Logger;
						public constructor(name: string);
						public getLogger(string0: string): org.apache.logging.log4j.spi.ExtendedLogger;
						public static getContext(loader: java.lang.ClassLoader, currentContext: boolean, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
						public static getContext(currentContext: boolean): org.apache.logging.log4j.core.LoggerContext;
						public setConfiguration(config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.config.Configuration;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class LoggerContextAccessor extends java.lang.Object {
						public static class: java.lang.Class<org.apache.logging.log4j.core.LoggerContextAccessor>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.LoggerContextAccessor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
						});
						public constructor();
						public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class StringLayout extends org.apache.logging.log4j.core.Layout<string> {
						public static class: java.lang.Class<org.apache.logging.log4j.core.StringLayout>;
						/**
						 * Constructs a new instance of the org.apache.logging.log4j.core.StringLayout interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							getCharset(): java.nio.charset.Charset;
							getFooter(): native.Array<number>;
							getHeader(): native.Array<number>;
							toByteArray(logEvent0: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							getContentType(): string;
							getContentFormat(): java.util.Map<string,string>;
							encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						});
						public constructor();
						public static ELEMENT_TYPE: string;
						public getHeader(): native.Array<number>;
						public toByteArray(logEvent0: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
						public getFooter(): native.Array<number>;
						public getContentType(): string;
						public encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						public getCharset(): java.nio.charset.Charset;
						public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
						public getContentFormat(): java.util.Map<string,string>;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export class Version extends java.lang.Object {
						public static class: java.lang.Class<org.apache.logging.log4j.core.Version>;
						public constructor();
						public static getProductString(): string;
						public static main(strings0: native.Array<string>): void;
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export abstract class AbstractAppender extends org.apache.logging.log4j.core.filter.AbstractFilterable implements org.apache.logging.log4j.core.Appender, org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractAppender>;
							public append(logEvent0: org.apache.logging.log4j.core.LogEvent): void;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public toString(): string;
							public requiresLocation(): boolean;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public error(msg: string): void;
							public error(msg: string, t: java.lang.Throwable): void;
							public stop(): void;
							public start(): void;
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
							public ignoreExceptions(): boolean;
							public constructor();
							public initialize(): void;
							public isStarted(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public isStopped(): boolean;
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public static parseInt(s: string, defaultValue: number): number;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): java.io.Serializable;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public error(msg: string, event: org.apache.logging.log4j.core.LogEvent, t: java.lang.Throwable): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
						}
						export module AbstractAppender {
							export abstract class Builder<B>  extends org.apache.logging.log4j.core.filter.AbstractFilterable.Builder<any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any>>;
								public getName(): string;
								public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
								public constructor();
								public setLayout(layout: org.apache.logging.log4j.core.Layout<any>): any;
								public setName(name: string): any;
								public isIgnoreExceptions(): boolean;
								/** @deprecated */
								public withName(name: string): any;
								public setIgnoreExceptions(ignoreExceptions: boolean): any;
								public getOrCreateLayout(): org.apache.logging.log4j.core.Layout<any>;
								public getLayout(): org.apache.logging.log4j.core.Layout<any>;
								/** @deprecated */
								public withConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): any;
								public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): any;
								public getOrCreateLayout(charset: java.nio.charset.Charset): org.apache.logging.log4j.core.Layout<any>;
								/** @deprecated */
								public withLayout(layout: org.apache.logging.log4j.core.Layout<any>): any;
								/** @deprecated */
								public withIgnoreExceptions(ignoreExceptions: boolean): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export abstract class AbstractFileAppender<M>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractFileAppender<any>>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFileName(): string;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module AbstractFileAppender {
							export abstract class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractFileAppender.Builder<any>>;
								public isAppend(): boolean;
								public withFileName(fileName: string): any;
								public withAdvertise(advertise: boolean): any;
								public withAdvertiseUri(advertiseUri: string): any;
								public isAdvertise(): boolean;
								public getFileName(): string;
								public constructor();
								public getAdvertiseUri(): string;
								public getFilePermissions(): string;
								public withLocking(locking: boolean): any;
								public isLocking(): boolean;
								public isCreateOnDemand(): boolean;
								public withFileOwner(fileOwner: string): any;
								public withFileGroup(fileGroup: string): any;
								public withAppend(append: boolean): any;
								public getFileGroup(): string;
								public withCreateOnDemand(createOnDemand: boolean): any;
								public withFilePermissions(filePermissions: string): any;
								public getFileOwner(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export abstract class AbstractManager extends java.lang.Object implements java.lang.AutoCloseable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractManager>;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public count: number;
							public logWarn(message: string, throwable: java.lang.Throwable): void;
							public static hasManager(name: string): boolean;
							public close(): void;
							public logDebug(message: string, throwable: java.lang.Throwable): void;
							public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							public updateData(data: any): void;
							public logError(message: string, throwable: java.lang.Throwable): void;
							public static getManager(name: string, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>, data: any): org.apache.logging.log4j.core.appender.AbstractManager;
							public getCount(): number;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public static narrow(narrowClass: java.lang.Class<any>, manager: org.apache.logging.log4j.core.appender.AbstractManager): org.apache.logging.log4j.core.appender.AbstractManager;
							/** @deprecated */
							public release(): void;
							public getContentFormat(): java.util.Map<string,string>;
							public getName(): string;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public log(level: org.apache.logging.log4j.Level, message: string, throwable: java.lang.Throwable): void;
							public static logger(): org.apache.logging.log4j.status.StatusLogger;
							public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export abstract class AbstractOutputStreamAppender<M>  extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<any>>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, manager: any);
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public writeByteArrayToManager(event: org.apache.logging.log4j.core.LogEvent): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public requiresLocation(): boolean;
							/** @deprecated */
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, manager: any);
							public directEncodeEvent(event: org.apache.logging.log4j.core.LogEvent): void;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public stop(): void;
							public start(): void;
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
							public ignoreExceptions(): boolean;
							public constructor();
							public getManager(): any;
							public getImmediateFlush(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
						}
						export module AbstractOutputStreamAppender {
							export abstract class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any>>;
								public withBufferSize(bufferSize: number): any;
								public isBufferedIo(): boolean;
								public withImmediateFlush(immediateFlush: boolean): any;
								public constructor();
								public getBufferSize(): number;
								public isImmediateFlush(): boolean;
								public withBufferedIo(bufferedIo: boolean): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export abstract class AbstractWriterAppender<M>  extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AbstractWriterAppender<any>>;
							public immediateFlush: boolean;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public requiresLocation(): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public stop(): void;
							public constructor(name: string, layout: org.apache.logging.log4j.core.StringLayout, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, manager: any);
							public start(): void;
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
							public ignoreExceptions(): boolean;
							public constructor();
							public getManager(): any;
							/** @deprecated */
							public constructor(name: string, layout: org.apache.logging.log4j.core.StringLayout, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, manager: any);
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public getStringLayout(): org.apache.logging.log4j.core.StringLayout;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class AppenderLoggingException extends org.apache.logging.log4j.LoggingException {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AppenderLoggingException>;
							public constructor();
							public constructor(message: string, cause: java.lang.Throwable);
							public constructor(cause: java.lang.Throwable);
							public constructor(message: string);
							public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
							public constructor(format: string, objects1: native.Array<any>);
							public constructor(cause: java.lang.Throwable, format: string, objects2: native.Array<any>);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class AppenderSet extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AppenderSet>;
							public static newBuilder(): org.apache.logging.log4j.core.appender.AppenderSet.Builder;
							public createAppender(actualAppenderName: string, sourceAppenderName: string): org.apache.logging.log4j.core.Appender;
						}
						export module AppenderSet {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.AppenderSet> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AppenderSet.Builder>;
								public getNode(): org.apache.logging.log4j.core.config.Node;
								public toString(): string;
								public withNode(node: org.apache.logging.log4j.core.config.Node): org.apache.logging.log4j.core.appender.AppenderSet.Builder;
								public withConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.AppenderSet.Builder;
								public build(): org.apache.logging.log4j.core.appender.AppenderSet;
								public build(): any;
								public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class AsyncAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AsyncAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							/** @deprecated */
							public static createAppender(appenderRefs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, errorRef: string, blocking: boolean, shutdownTimeout: number, size: number, name: string, includeLocation: boolean, filter: org.apache.logging.log4j.core.Filter, config: org.apache.logging.log4j.core.config.Configuration, ignoreExceptions: boolean): org.apache.logging.log4j.core.appender.AsyncAppender;
							public isIncludeLocation(): boolean;
							public isBlocking(): boolean;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public requiresLocation(): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public logMessageInCurrentThread(logEvent: org.apache.logging.log4j.core.LogEvent): void;
							public stop(): void;
							public start(): void;
							public getErrorRef(): string;
							public logMessageInBackgroundThread(logEvent: org.apache.logging.log4j.core.LogEvent): void;
							public static newBuilder(): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
							public getAppenderRefStrings(): native.Array<string>;
							public ignoreExceptions(): boolean;
							public getQueueRemainingCapacity(): number;
							public hasFilter(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public append(logEvent: org.apache.logging.log4j.core.LogEvent): void;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getQueueCapacity(): number;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public getQueueSize(): number;
						}
						export module AsyncAppender {
							export class AsyncThread extends org.apache.logging.log4j.core.util.Log4jThread {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AsyncAppender.AsyncThread>;
								public constructor(target: java.lang.Runnable);
								public shutdown(): void;
								public constructor(name: string);
								public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable, name: string);
								public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable, name: string, stackSize: number);
								public constructor(target: java.lang.Runnable, name: string);
								public constructor();
								public run(): void;
								public constructor(param0: java.util.List<org.apache.logging.log4j.core.config.AppenderControl>, appenders: java.util.concurrent.BlockingQueue<org.apache.logging.log4j.core.LogEvent>);
								public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable);
								public constructor(group: java.lang.ThreadGroup, name: string);
							}
							export class Builder<B>  extends org.apache.logging.log4j.core.filter.AbstractFilterable.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.AsyncAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>>;
								public setIncludeLocation(includeLocation: boolean): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public setErrorRef(errorRef: string): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public setBlockingQueueFactory(blockingQueueFactory: org.apache.logging.log4j.core.async.BlockingQueueFactory<org.apache.logging.log4j.core.LogEvent>): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public constructor();
								public setAppenderRefs(appenderRefs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public setIgnoreExceptions(ignoreExceptions: boolean): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public setShutdownTimeout(shutdownTimeout: number): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public setBufferSize(bufferSize: number): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public setBlocking(blocking: boolean): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public build(): any;
								public setName(name: string): org.apache.logging.log4j.core.appender.AsyncAppender.Builder<any>;
								public build(): org.apache.logging.log4j.core.appender.AsyncAppender;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class ConfigurationFactoryData extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConfigurationFactoryData>;
							public configuration: org.apache.logging.log4j.core.config.Configuration;
							public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration);
							public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class ConsoleAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.appender.OutputStreamManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConsoleAppender>;
							public static PLUGIN_NAME: string;
							/** @deprecated */
							public static createAppender(layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, targetStr: string, name: string, follow: string, ignore: string): org.apache.logging.log4j.core.appender.ConsoleAppender;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public static createDefaultAppenderForLayout(layout: org.apache.logging.log4j.core.Layout<any>): org.apache.logging.log4j.core.appender.ConsoleAppender;
							public static newBuilder(): org.apache.logging.log4j.core.appender.ConsoleAppender.Builder<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							/** @deprecated */
							public static createAppender(layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, target: org.apache.logging.log4j.core.appender.ConsoleAppender.Target, name: string, follow: boolean, direct: boolean, ignoreExceptions: boolean): org.apache.logging.log4j.core.appender.ConsoleAppender;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public getTarget(): org.apache.logging.log4j.core.appender.ConsoleAppender.Target;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module ConsoleAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.ConsoleAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConsoleAppender.Builder<any>>;
								public setDirect(shouldDirect: boolean): any;
								public setTarget(aTarget: org.apache.logging.log4j.core.appender.ConsoleAppender.Target): any;
								public setFollow(shouldFollow: boolean): any;
								public build(): any;
								public build(): org.apache.logging.log4j.core.appender.ConsoleAppender;
								public constructor();
							}
							export class ConsoleManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.OutputStreamManager,org.apache.logging.log4j.core.appender.ConsoleAppender.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConsoleAppender.ConsoleManagerFactory>;
								public createManager(string0: string, object1: any): any;
								public createManager(name: string, data: org.apache.logging.log4j.core.appender.ConsoleAppender.FactoryData): org.apache.logging.log4j.core.appender.OutputStreamManager;
							}
							export class FactoryData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConsoleAppender.FactoryData>;
								public constructor(os: java.io.OutputStream, type: string, layout: org.apache.logging.log4j.core.Layout<any>);
							}
							export class SystemErrStream extends java.io.OutputStream {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConsoleAppender.SystemErrStream>;
								public write(int0: number): void;
								public flush(): void;
								public write(b: native.Array<number>): void;
								public write(b: number): void;
								public constructor();
								public close(): void;
								public write(b: native.Array<number>, off: number, len: number): void;
							}
							export class SystemOutStream extends java.io.OutputStream {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConsoleAppender.SystemOutStream>;
								public write(int0: number): void;
								public flush(): void;
								public write(b: native.Array<number>): void;
								public write(b: number): void;
								public constructor();
								public close(): void;
								public write(b: native.Array<number>, off: number, len: number): void;
							}
							export abstract class Target {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ConsoleAppender.Target>;
								public static SYSTEM_OUT: org.apache.logging.log4j.core.appender.ConsoleAppender.Target;
								public static SYSTEM_ERR: org.apache.logging.log4j.core.appender.ConsoleAppender.Target;
								public getDefaultCharset(): java.nio.charset.Charset;
								public static valueOf(name: string): org.apache.logging.log4j.core.appender.ConsoleAppender.Target;
								public static values(): native.Array<org.apache.logging.log4j.core.appender.ConsoleAppender.Target>;
								public getCharset(property: string, defaultCharset: java.nio.charset.Charset): java.nio.charset.Charset;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class CountingNoOpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.CountingNoOpAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>);
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public requiresLocation(): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public stop(): void;
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
							public ignoreExceptions(): boolean;
							public constructor();
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public getCount(): number;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public static createAppender(name: string): org.apache.logging.log4j.core.appender.CountingNoOpAppender;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class DefaultErrorHandler extends java.lang.Object implements org.apache.logging.log4j.core.ErrorHandler {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.DefaultErrorHandler>;
							public error(msg: string): void;
							public error(msg: string, t: java.lang.Throwable): void;
							public error(msg: string, event: org.apache.logging.log4j.core.LogEvent, t: java.lang.Throwable): void;
							public constructor(appender: org.apache.logging.log4j.core.Appender);
							public getAppender(): org.apache.logging.log4j.core.Appender;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class FailoverAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.FailoverAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public static createAppender(name: string, primary: string, failovers: native.Array<string>, retryIntervalSeconds: string, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter, ignore: string): org.apache.logging.log4j.core.appender.FailoverAppender;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public toString(): string;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public start(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class FailoversPlugin extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.FailoversPlugin>;
							public static createFailovers(refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>): native.Array<string>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class FileAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.appender.FileManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.FileAppender>;
							public static PLUGIN_NAME: string;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							/** @deprecated */
							public static createAppender(fileName: string, append: string, locking: string, name: string, immediateFlush: string, ignoreExceptions: string, bufferedIo: string, bufferSizeStr: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, advertise: string, advertiseUri: string, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.FileAppender;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public static newBuilder(): org.apache.logging.log4j.core.appender.FileAppender.Builder<any>;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFileName(): string;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module FileAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.FileAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.FileAppender.Builder<any>>;
								public isAppend(): boolean;
								public withFileName(fileName: string): any;
								public withAdvertise(advertise: boolean): any;
								public withAdvertiseUri(advertiseUri: string): any;
								public isAdvertise(): boolean;
								public getFileName(): string;
								public constructor();
								public getAdvertiseUri(): string;
								public getFilePermissions(): string;
								public withLocking(locking: boolean): any;
								public isLocking(): boolean;
								public isCreateOnDemand(): boolean;
								public withFileOwner(fileOwner: string): any;
								public build(): org.apache.logging.log4j.core.appender.FileAppender;
								public withFileGroup(fileGroup: string): any;
								public withAppend(append: boolean): any;
								public getFileGroup(): string;
								public withCreateOnDemand(createOnDemand: boolean): any;
								public build(): any;
								public withFilePermissions(filePermissions: string): any;
								public getFileOwner(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class FileManager extends org.apache.logging.log4j.core.appender.OutputStreamManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.FileManager>;
							public close(): void;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public static getFileManager(fileName: string, append: boolean, locking: boolean, bufferedIo: boolean, createOnDemand: boolean, advertiseUri: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, filePermissions: string, fileOwner: string, fileGroup: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.FileManager;
							public getByteBuffer(): java.nio.ByteBuffer;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
							public write(bytes: native.Array<number>, immediateFlush: boolean): void;
							public writeToDestination(bytes: native.Array<number>, offset: number, length: number): void;
							/** @deprecated */
							public constructor(fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, writeHeader: boolean);
							/** @deprecated */
							public constructor(fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
							public getFileOwner(): string;
							public isAppend(): boolean;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, createOnDemand: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, writeHeader: boolean, buffer: java.nio.ByteBuffer);
							public isAttributeViewEnabled(): boolean;
							public write(bytes: native.Array<number>, offset: number, length: number, immediateFlush: boolean): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public getFileGroup(): string;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public getContentFormat(): java.util.Map<string,string>;
							/** @deprecated */
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, createOnDemand: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public write(bytes: native.Array<number>, offset: number, length: number): void;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public getFilePermissions(): java.util.Set<java.nio.file.attribute.PosixFilePermission>;
							public createOutputStream(): java.io.OutputStream;
							public write(bytes: native.Array<number>): void;
							public getFileName(): string;
							public defineAttributeView(path: java.nio.file.Path): void;
							public isCreateOnDemand(): boolean;
							public writeBytes(data: java.nio.ByteBuffer): void;
							public getBufferSize(): number;
							public isLocking(): boolean;
						}
						export module FileManager {
							export class FactoryData extends org.apache.logging.log4j.core.appender.ConfigurationFactoryData {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.FileManager.FactoryData>;
								public constructor(configuration: org.apache.logging.log4j.core.config.Configuration);
								public constructor(append: boolean, locking: boolean, bufferedIo: boolean, bufferSize: number, createOnDemand: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, configuration: org.apache.logging.log4j.core.config.Configuration);
							}
							export class FileManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.FileManager,org.apache.logging.log4j.core.appender.FileManager.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.FileManager.FileManagerFactory>;
								public createManager(string0: string, object1: any): any;
								public createManager(name: string, data: org.apache.logging.log4j.core.appender.FileManager.FactoryData): org.apache.logging.log4j.core.appender.FileManager;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class HttpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.HttpAppender>;
							public static newBuilder(): org.apache.logging.log4j.core.appender.HttpAppender.Builder<any>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public toString(): string;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public start(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module HttpAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.HttpAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.HttpAppender.Builder<any>>;
								public setReadTimeoutMillis(readTimeoutMillis: number): any;
								public getConnectTimeoutMillis(): number;
								public setMethod(method: string): any;
								public getUrl(): java.net.URL;
								public getSslConfiguration(): org.apache.logging.log4j.core.net.ssl.SslConfiguration;
								public setVerifyHostname(verifyHostname: boolean): any;
								public constructor();
								public setSslConfiguration(sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration): any;
								public setConnectTimeoutMillis(connectTimeoutMillis: number): any;
								public setUrl(url: java.net.URL): any;
								public getMethod(): string;
								public isVerifyHostname(): boolean;
								public build(): any;
								public build(): org.apache.logging.log4j.core.appender.HttpAppender;
								public setHeaders(headers: native.Array<org.apache.logging.log4j.core.config.Property>): any;
								public getReadTimeoutMillis(): number;
								public getHeaders(): native.Array<org.apache.logging.log4j.core.config.Property>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export abstract class HttpManager extends org.apache.logging.log4j.core.appender.AbstractManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.HttpManager>;
							public close(): void;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public send(layout0: org.apache.logging.log4j.core.Layout<any>, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public startup(): void;
							public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class HttpURLConnectionManager extends org.apache.logging.log4j.core.appender.HttpManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.HttpURLConnectionManager>;
							public close(): void;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public send(layout0: org.apache.logging.log4j.core.Layout<any>, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
							public send(layout: org.apache.logging.log4j.core.Layout<any>, event: org.apache.logging.log4j.core.LogEvent): void;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, url: java.net.URL, method: string, connectTimeoutMillis: number, readTimeoutMillis: number, headers: native.Array<org.apache.logging.log4j.core.config.Property>, sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration, verifyHostname: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class ManagerFactory<M, T>  extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ManagerFactory<any,any>>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.appender.ManagerFactory<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								createManager(string0: string, object1: T): M;
							});
							public constructor();
							public createManager(string0: string, object1: T): M;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class MemoryMappedFileAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.appender.MemoryMappedFileManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.MemoryMappedFileAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public getRegionLength(): number;
							public static newBuilder(): org.apache.logging.log4j.core.appender.MemoryMappedFileAppender.Builder<any>;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFileName(): string;
							/** @deprecated */
							public static createAppender(fileName: string, append: string, name: string, immediateFlush: string, regionLengthStr: string, ignore: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, advertise: string, advertiseURI: string, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.MemoryMappedFileAppender;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module MemoryMappedFileAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.MemoryMappedFileAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.MemoryMappedFileAppender.Builder<any>>;
								public setAdvertise(advertise: boolean): any;
								public setRegionLength(regionLength: number): any;
								public setAdvertiseURI(advertiseURI: string): any;
								public setAppend(append: boolean): any;
								public build(): any;
								public constructor();
								public setFileName(fileName: string): any;
								public build(): org.apache.logging.log4j.core.appender.MemoryMappedFileAppender;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class MemoryMappedFileManager extends org.apache.logging.log4j.core.appender.OutputStreamManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.MemoryMappedFileManager>;
							public close(): void;
							public static mmap(fileChannel: java.nio.channels.FileChannel, fileName: string, start: number, size: number): java.nio.MappedByteBuffer;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public closeOutputStream(): boolean;
							public getByteBuffer(): java.nio.ByteBuffer;
							public flushBuffer(buf: java.nio.ByteBuffer): void;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
							public flushBuffer(buffer: java.nio.ByteBuffer): void;
							public write(bytes: native.Array<number>, immediateFlush: boolean): void;
							public static getFileManager(fileName: string, append: boolean, immediateFlush: boolean, regionLength: number, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>): org.apache.logging.log4j.core.appender.MemoryMappedFileManager;
							public setEndOfBatch(endOfBatch: boolean): void;
							public write(bytes: native.Array<number>, offset: number, length: number, immediateFlush: boolean): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public getRegionLength(): number;
							public isEndOfBatch(): java.lang.Boolean;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public getContentFormat(): java.util.Map<string,string>;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public write(bytes: native.Array<number>, offset: number, length: number): void;
							public isImmediateFlush(): boolean;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public constructor(file: java.io.RandomAccessFile, fileName: string, os: java.io.OutputStream, immediateFlush: boolean, position: number, regionLength: number, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public flush(): void;
							public write(bytes: native.Array<number>): void;
							public getFileName(): string;
							public writeBytes(data: java.nio.ByteBuffer): void;
						}
						export module MemoryMappedFileManager {
							export class FactoryData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.MemoryMappedFileManager.FactoryData>;
								public constructor(append: boolean, immediateFlush: boolean, regionLength: number, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>);
							}
							export class MemoryMappedFileManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.MemoryMappedFileManager,org.apache.logging.log4j.core.appender.MemoryMappedFileManager.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.MemoryMappedFileManager.MemoryMappedFileManagerFactory>;
								public createManager(name: string, data: org.apache.logging.log4j.core.appender.MemoryMappedFileManager.FactoryData): org.apache.logging.log4j.core.appender.MemoryMappedFileManager;
								public createManager(string0: string, object1: any): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class NullAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.NullAppender>;
							public static PLUGIN_NAME: string;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public static createAppender(name: string): org.apache.logging.log4j.core.appender.NullAppender;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class OutputStreamAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.appender.OutputStreamManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.OutputStreamAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public static newBuilder(): org.apache.logging.log4j.core.appender.OutputStreamAppender.Builder<any>;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public static createAppender(layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, target: java.io.OutputStream, name: string, follow: boolean, ignore: boolean): org.apache.logging.log4j.core.appender.OutputStreamAppender;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module OutputStreamAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.OutputStreamAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.OutputStreamAppender.Builder<any>>;
								public setTarget(aTarget: java.io.OutputStream): any;
								public setFollow(shouldFollow: boolean): any;
								public build(): any;
								public constructor();
								public build(): org.apache.logging.log4j.core.appender.OutputStreamAppender;
							}
							export class FactoryData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.OutputStreamAppender.FactoryData>;
								public constructor(os: java.io.OutputStream, type: string, layout: org.apache.logging.log4j.core.Layout<any>);
							}
							export class OutputStreamManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.OutputStreamManager,org.apache.logging.log4j.core.appender.OutputStreamAppender.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.OutputStreamAppender.OutputStreamManagerFactory>;
								public createManager(name: string, data: org.apache.logging.log4j.core.appender.OutputStreamAppender.FactoryData): org.apache.logging.log4j.core.appender.OutputStreamManager;
								public createManager(string0: string, object1: any): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class OutputStreamManager extends org.apache.logging.log4j.core.appender.AbstractManager implements org.apache.logging.log4j.core.layout.ByteBufferDestination {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.OutputStreamManager>;
							public layout: org.apache.logging.log4j.core.Layout<any>;
							public byteBuffer: java.nio.ByteBuffer;
							public close(): void;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public closeOutputStream(): boolean;
							public getByteBuffer(): java.nio.ByteBuffer;
							public flushBuffer(buf: java.nio.ByteBuffer): void;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
							public isOpen(): boolean;
							public write(bytes: native.Array<number>, immediateFlush: boolean): void;
							public getOutputStream(): java.io.OutputStream;
							public writeToDestination(bytes: native.Array<number>, offset: number, length: number): void;
							public skipFooter(skipFooter: boolean): void;
							public writeFooter(): void;
							public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public write(bytes: native.Array<number>, offset: number, length: number, immediateFlush: boolean): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public flushDestination(): void;
							public static getManager(name: string, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>, data: any): org.apache.logging.log4j.core.appender.AbstractManager;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public setOutputStream(os: java.io.OutputStream): void;
							public hasOutputStream(): boolean;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public writeHeader(os: java.io.OutputStream): void;
							public write(bytes: native.Array<number>, offset: number, length: number): void;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public static getManager(name: string, data: any, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>): org.apache.logging.log4j.core.appender.OutputStreamManager;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public flush(): void;
							public createOutputStream(): java.io.OutputStream;
							public write(bytes: native.Array<number>): void;
							public writeBytes(data: java.nio.ByteBuffer): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class RandomAccessFileAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.appender.RandomAccessFileManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RandomAccessFileAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							/** @deprecated */
							public static createAppender(fileName: string, append: string, name: string, immediateFlush: string, bufferSizeStr: string, ignore: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, advertise: string, advertiseURI: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.RandomAccessFileAppender;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public static newBuilder(): org.apache.logging.log4j.core.appender.RandomAccessFileAppender.Builder<any>;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFileName(): string;
							public getBufferSize(): number;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module RandomAccessFileAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.RandomAccessFileAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RandomAccessFileAppender.Builder<any>>;
								public setAdvertise(advertise: boolean): any;
								public setAdvertiseURI(advertiseURI: string): any;
								public setAppend(append: boolean): any;
								public build(): org.apache.logging.log4j.core.appender.RandomAccessFileAppender;
								public build(): any;
								public constructor();
								public setFileName(fileName: string): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class RandomAccessFileManager extends org.apache.logging.log4j.core.appender.OutputStreamManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RandomAccessFileManager>;
							public static getFileManager(fileName: string, append: boolean, immediateFlush: boolean, bufferSize: number, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.RandomAccessFileManager;
							public setEndOfBatch(endOfBatch: boolean): void;
							public close(): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, file: java.io.RandomAccessFile, fileName: string, os: java.io.OutputStream, bufferSize: number, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public closeOutputStream(): boolean;
							public isEndOfBatch(): java.lang.Boolean;
							public getByteBuffer(): java.nio.ByteBuffer;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
							public writeToDestination(bytes: native.Array<number>, offset: number, length: number): void;
							public getContentFormat(): java.util.Map<string,string>;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public flush(): void;
							public getFileName(): string;
							public writeBytes(data: java.nio.ByteBuffer): void;
							public getBufferSize(): number;
						}
						export module RandomAccessFileManager {
							export class FactoryData extends org.apache.logging.log4j.core.appender.ConfigurationFactoryData {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RandomAccessFileManager.FactoryData>;
								public constructor(configuration: org.apache.logging.log4j.core.config.Configuration);
								public constructor(append: boolean, immediateFlush: boolean, bufferSize: number, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, configuration: org.apache.logging.log4j.core.config.Configuration);
							}
							export class RandomAccessFileManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.RandomAccessFileManager,org.apache.logging.log4j.core.appender.RandomAccessFileManager.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RandomAccessFileManager.RandomAccessFileManagerFactory>;
								public createManager(string0: string, object1: any): any;
								public createManager(name: string, data: org.apache.logging.log4j.core.appender.RandomAccessFileManager.FactoryData): org.apache.logging.log4j.core.appender.RandomAccessFileManager;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class RollingFileAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.appender.rolling.RollingFileManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RollingFileAppender>;
							public static PLUGIN_NAME: string;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							/** @deprecated */
							public static createAppender(fileName: string, filePattern: string, append: string, name: string, bufferedIO: string, bufferSizeStr: string, immediateFlush: string, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignore: string, advertise: string, advertiseUri: string, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.RollingFileAppender;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public static newBuilder(): org.apache.logging.log4j.core.appender.RollingFileAppender.Builder<any>;
							public getFilePattern(): string;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFileName(): string;
							public getTriggeringPolicy(): org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module RollingFileAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.RollingFileAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RollingFileAppender.Builder<any>>;
								public withAdvertise(advertise: boolean): any;
								public getFileName(): string;
								public build(): org.apache.logging.log4j.core.appender.RollingFileAppender;
								public withPolicy(policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy): any;
								public isLocking(): boolean;
								public isCreateOnDemand(): boolean;
								public withFileOwner(fileOwner: string): any;
								public getFileGroup(): string;
								public getFileOwner(): string;
								public isAppend(): boolean;
								public withFileName(fileName: string): any;
								public getStrategy(): org.apache.logging.log4j.core.appender.rolling.RolloverStrategy;
								public withStrategy(strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy): any;
								public withAdvertiseUri(advertiseUri: string): any;
								public isAdvertise(): boolean;
								public constructor();
								public getAdvertiseUri(): string;
								public getFilePermissions(): string;
								public withLocking(locking: boolean): any;
								public withFilePattern(filePattern: string): any;
								public withFileGroup(fileGroup: string): any;
								public withAppend(append: boolean): any;
								public withCreateOnDemand(createOnDemand: boolean): any;
								public build(): any;
								public getFilePattern(): string;
								public getPolicy(): org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy;
								public withFilePermissions(filePermissions: string): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class RollingRandomAccessFileAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public static newBuilder(): org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender.Builder<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public getFilePattern(): string;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							/** @deprecated */
							public static createAppender(fileName: string, filePattern: string, append: string, name: string, immediateFlush: string, bufferSizeStr: string, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: string, advertise: string, advertiseURI: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFileName(): string;
							public getBufferSize(): number;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module RollingRandomAccessFileAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender.Builder<any>>;
								public withFileName(fileName: string): any;
								public withStrategy(strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy): any;
								public withAdvertise(advertise: boolean): any;
								public constructor();
								public withPolicy(policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy): any;
								public withAdvertiseURI(advertiseURI: string): any;
								public withFileOwner(fileOwner: string): any;
								public withFilePattern(filePattern: string): any;
								public withFileGroup(fileGroup: string): any;
								public withAppend(append: boolean): any;
								public build(): any;
								public build(): org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender;
								public withFilePermissions(filePermissions: string): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class ScriptAppenderSelector extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ScriptAppenderSelector>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public static newBuilder(): org.apache.logging.log4j.core.appender.ScriptAppenderSelector.Builder;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module ScriptAppenderSelector {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.Appender> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.ScriptAppenderSelector.Builder>;
								public getScript(): org.apache.logging.log4j.core.script.AbstractScript;
								public withScript(script: org.apache.logging.log4j.core.script.AbstractScript): org.apache.logging.log4j.core.appender.ScriptAppenderSelector.Builder;
								public getName(): string;
								public withConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.ScriptAppenderSelector.Builder;
								public build(): org.apache.logging.log4j.core.Appender;
								public getAppenderSet(): org.apache.logging.log4j.core.appender.AppenderSet;
								public build(): any;
								public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
								public withName(name: string): org.apache.logging.log4j.core.appender.ScriptAppenderSelector.Builder;
								public constructor();
								public withAppenderNodeSet(appenderSet: org.apache.logging.log4j.core.appender.AppenderSet): org.apache.logging.log4j.core.appender.ScriptAppenderSelector.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class SmtpAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.SmtpAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							/** @deprecated */
							public static createAppender(config: org.apache.logging.log4j.core.config.Configuration, name: string, to: string, cc: string, bcc: string, from: string, replyTo: string, subject: string, smtpProtocol: string, smtpHost: string, smtpPortStr: string, smtpUsername: string, smtpPassword: string, smtpDebug: string, bufferSizeStr: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignore: string): org.apache.logging.log4j.core.appender.SmtpAppender;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public static newBuilder(): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module SmtpAppender {
							export class Builder extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<org.apache.logging.log4j.core.appender.SmtpAppender.Builder> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.SmtpAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.SmtpAppender.Builder>;
								public setBcc(bcc: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setSmtpPort(smtpPort: number): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public build(): org.apache.logging.log4j.core.appender.SmtpAppender;
								public setSmtpDebug(smtpDebug: boolean): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setSubject(subject: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public constructor();
								public setSmtpPassword(smtpPassword: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setLayout(layout: org.apache.logging.log4j.core.Layout<any>): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setLayout(layout: org.apache.logging.log4j.core.Layout<any>): any;
								public setFilter(filter: org.apache.logging.log4j.core.Filter): any;
								public setSmtpUsername(smtpUsername: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setFilter(filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public build(): any;
								public setSmtpProtocol(smtpProtocol: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setSmtpHost(smtpHost: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setFrom(from: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setSslConfiguration(sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setCc(cc: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setTo(to: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setReplyTo(replyTo: string): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
								public setBufferSize(bufferSize: number): org.apache.logging.log4j.core.appender.SmtpAppender.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class SocketAppender extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender<org.apache.logging.log4j.core.net.AbstractSocketManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.SocketAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, manager: any);
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public requiresLocation(): boolean;
							/** @deprecated */
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, manager: any);
							public directEncodeEvent(event: org.apache.logging.log4j.core.LogEvent): void;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public static createSocketManager(name: string, protocol: org.apache.logging.log4j.core.net.Protocol, host: string, port: number, connectTimeoutMillis: number, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions): org.apache.logging.log4j.core.net.AbstractSocketManager;
							public stop(): void;
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
							public ignoreExceptions(): boolean;
							public constructor();
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, manager: org.apache.logging.log4j.core.net.AbstractSocketManager, ignoreExceptions: boolean, immediateFlush: boolean, advertiser: org.apache.logging.log4j.core.net.Advertiser, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
							/** @deprecated */
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, manager: org.apache.logging.log4j.core.net.AbstractSocketManager, ignoreExceptions: boolean, immediateFlush: boolean, advertiser: org.apache.logging.log4j.core.net.Advertiser);
							/** @deprecated */
							public static createAppender(host: string, port: number, protocol: org.apache.logging.log4j.core.net.Protocol, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, name: string, immediateFlush: boolean, ignoreExceptions: boolean, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, advertise: boolean, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.SocketAppender;
							/** @deprecated */
							public static createAppender(host: string, portNum: string, protocolIn: string, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, connectTimeoutMillis: number, delayMillis: string, immediateFail: string, name: string, immediateFlush: string, ignore: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, advertise: string, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.SocketAppender;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public static newBuilder(): org.apache.logging.log4j.core.appender.SocketAppender.Builder;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							/** @deprecated */
							public static createSocketManager(name: string, protocol: org.apache.logging.log4j.core.net.Protocol, host: string, port: number, connectTimeoutMillis: number, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number): org.apache.logging.log4j.core.net.AbstractSocketManager;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
						}
						export module SocketAppender {
							export abstract class AbstractBuilder<B>  extends org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder<any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.SocketAppender.AbstractBuilder<any>>;
								public withProtocol(protocol: org.apache.logging.log4j.core.net.Protocol): any;
								public withImmediateFail(immediateFail: boolean): any;
								public getSocketOptions(): org.apache.logging.log4j.core.net.SocketOptions;
								public withAdvertise(advertise: boolean): any;
								public getReconnectDelayMillis(): number;
								public getConnectTimeoutMillis(): number;
								public getSslConfiguration(): org.apache.logging.log4j.core.net.ssl.SslConfiguration;
								public constructor();
								public withConnectTimeoutMillis(connectTimeoutMillis: number): any;
								public withPort(port: number): any;
								public getHost(): string;
								public getImmediateFail(): boolean;
								public withHost(host: string): any;
								public withSocketOptions(socketOptions: org.apache.logging.log4j.core.net.SocketOptions): any;
								public getProtocol(): org.apache.logging.log4j.core.net.Protocol;
								public getAdvertise(): boolean;
								public withSslConfiguration(sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration): any;
								public getPort(): number;
								public withReconnectDelayMillis(reconnectDelayMillis: number): any;
							}
							export class Builder extends org.apache.logging.log4j.core.appender.SocketAppender.AbstractBuilder<org.apache.logging.log4j.core.appender.SocketAppender.Builder> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.SocketAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.SocketAppender.Builder>;
								public build(): org.apache.logging.log4j.core.appender.SocketAppender;
								public build(): any;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class SyslogAppender extends org.apache.logging.log4j.core.appender.SocketAppender {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.SyslogAppender>;
							public static RFC5424: string;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, manager: any);
							public static newSyslogAppenderBuilder(): org.apache.logging.log4j.core.appender.SyslogAppender.Builder<any>;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public requiresLocation(): boolean;
							/** @deprecated */
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, manager: any);
							public getFilter(): org.apache.logging.log4j.core.Filter;
							/** @deprecated */
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, manager: org.apache.logging.log4j.core.net.AbstractSocketManager, advertiser: org.apache.logging.log4j.core.net.Advertiser);
							public stop(): void;
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							/** @deprecated */
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
							public ignoreExceptions(): boolean;
							public constructor();
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, manager: org.apache.logging.log4j.core.net.AbstractSocketManager, ignoreExceptions: boolean, immediateFlush: boolean, advertiser: org.apache.logging.log4j.core.net.Advertiser, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
							/** @deprecated */
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, manager: org.apache.logging.log4j.core.net.AbstractSocketManager, ignoreExceptions: boolean, immediateFlush: boolean, advertiser: org.apache.logging.log4j.core.net.Advertiser);
							/** @deprecated */
							public static createAppender(host: string, port: number, protocol: org.apache.logging.log4j.core.net.Protocol, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, name: string, immediateFlush: boolean, ignoreExceptions: boolean, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, advertise: boolean, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.SocketAppender;
							/** @deprecated */
							public static createAppender(host: string, portNum: string, protocolIn: string, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, connectTimeoutMillis: number, delayMillis: string, immediateFail: string, name: string, immediateFlush: string, ignore: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, advertise: string, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.SocketAppender;
							public constructor(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, immediateFlush: boolean, manager: org.apache.logging.log4j.core.net.AbstractSocketManager, advertiser: org.apache.logging.log4j.core.net.Advertiser, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							/** @deprecated */
							public static createAppender(host: string, port: number, protocolStr: string, sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, name: string, immediateFlush: boolean, ignoreExceptions: boolean, facility: org.apache.logging.log4j.core.net.Facility, id: string, enterpriseNumber: number, includeMdc: boolean, mdcId: string, mdcPrefix: string, eventPrefix: string, newLine: boolean, escapeNL: string, appName: string, msgId: string, excludes: string, includes: string, required: string, format: string, filter: org.apache.logging.log4j.core.Filter, configuration: org.apache.logging.log4j.core.config.Configuration, charset: java.nio.charset.Charset, exceptionPattern: string, loggerFields: native.Array<org.apache.logging.log4j.core.layout.LoggerFields>, advertise: boolean): org.apache.logging.log4j.core.appender.SyslogAppender;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
						}
						export module SyslogAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.SocketAppender.AbstractBuilder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.SocketAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.SyslogAppender.Builder<any>>;
								public getEventPrefix(): string;
								public getEscapeNL(): string;
								public setId(id: string): any;
								public setRequired(required: string): any;
								public getMdcId(): string;
								public setEscapeNL(escapeNL: string): any;
								public getMsgId(): string;
								public setExceptionPattern(exceptionPattern: string): any;
								public isIncludeMdc(): boolean;
								public getExcludes(): string;
								public setAppName(appName: string): any;
								public getMdcPrefix(): string;
								public setCharsetName(charset: java.nio.charset.Charset): any;
								public setEnterpriseNumber(enterpriseNumber: number): any;
								public setMdcPrefix(mdcPrefix: string): any;
								public getEnterpriseNumber(): number;
								public getAppName(): string;
								public isNewLine(): boolean;
								public getCharsetName(): java.nio.charset.Charset;
								public setFacility(facility: org.apache.logging.log4j.core.net.Facility): any;
								public setFormat(format: string): any;
								public getLoggerFields(): native.Array<org.apache.logging.log4j.core.layout.LoggerFields>;
								public getExceptionPattern(): string;
								public setMsgId(msgId: string): any;
								public getRequired(): string;
								public constructor();
								public setEventPrefix(eventPrefix: string): any;
								public setMdcId(mdcId: string): any;
								public setLoggerFields(loggerFields: native.Array<org.apache.logging.log4j.core.layout.LoggerFields>): any;
								public getIncludes(): string;
								public setNewLine(newLine: boolean): any;
								public getFacility(): org.apache.logging.log4j.core.net.Facility;
								public setIncludeMdc(includeMdc: boolean): any;
								public setExcludes(excludes: string): any;
								public build(): org.apache.logging.log4j.core.appender.SyslogAppender;
								public setIncludes(includes: string): any;
								public build(): any;
								public getId(): string;
								public getFormat(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class TlsSyslogFrame extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.TlsSyslogFrame>;
							public constructor(message: string);
							public hashCode(): number;
							public equals(obj: any): boolean;
							public toString(): string;
							public getMessage(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class WriterAppender extends org.apache.logging.log4j.core.appender.AbstractWriterAppender<org.apache.logging.log4j.core.appender.WriterManager> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.WriterAppender>;
							public getLayout(): org.apache.logging.log4j.core.Layout<any>;
							public static createAppender(layout: org.apache.logging.log4j.core.StringLayout, filter: org.apache.logging.log4j.core.Filter, target: java.io.Writer, name: string, follow: boolean, ignore: boolean): org.apache.logging.log4j.core.appender.WriterAppender;
							public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
							public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public requiresLocation(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public append(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public getName(): string;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public static newBuilder(): org.apache.logging.log4j.core.appender.WriterAppender.Builder<any>;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public ignoreExceptions(): boolean;
						}
						export module WriterAppender {
							export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.WriterAppender>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.WriterAppender.Builder<any>>;
								public setTarget(aTarget: java.io.Writer): any;
								public setFollow(shouldFollow: boolean): any;
								public build(): any;
								public constructor();
								public build(): org.apache.logging.log4j.core.appender.WriterAppender;
							}
							export class FactoryData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.WriterAppender.FactoryData>;
								public constructor(writer: java.io.Writer, type: string, layout: org.apache.logging.log4j.core.StringLayout);
							}
							export class WriterManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.WriterManager,org.apache.logging.log4j.core.appender.WriterAppender.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.WriterAppender.WriterManagerFactory>;
								public createManager(name: string, data: org.apache.logging.log4j.core.appender.WriterAppender.FactoryData): org.apache.logging.log4j.core.appender.WriterManager;
								public createManager(string0: string, object1: any): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export class WriterManager extends org.apache.logging.log4j.core.appender.AbstractManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.appender.WriterManager>;
							public layout: org.apache.logging.log4j.core.StringLayout;
							public setWriter(writer: java.io.Writer): void;
							public close(): void;
							public static getManager(name: string, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>, data: any): org.apache.logging.log4j.core.appender.AbstractManager;
							public isOpen(): boolean;
							public getWriter(): java.io.Writer;
							public writeFooter(): void;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public flush(): void;
							public static getManager(name: string, data: any, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>): org.apache.logging.log4j.core.appender.WriterManager;
							public closeWriter(): void;
							public write(str: string): void;
							public constructor(writer: java.io.Writer, streamName: string, layout: org.apache.logging.log4j.core.StringLayout, writeHeader: boolean);
							public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export abstract class AbstractDatabaseAppender<T>  extends org.apache.logging.log4j.core.appender.AbstractAppender {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender<any>>;
								public static DEFAULT_RECONNECT_INTERVAL_MILLIS: number;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								/** @deprecated */
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, manager: any);
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public replaceManager(manager: any): void;
								public hasFilter(): boolean;
								public requiresLocation(): boolean;
								public append(event: org.apache.logging.log4j.core.LogEvent): void;
								/** @deprecated */
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, manager: any);
								public getName(): string;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public ignoreExceptions(): boolean;
								public constructor();
								/** @deprecated */
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, ignoreExceptions: boolean, manager: any);
								public getLayout(): org.apache.logging.log4j.core.Layout<org.apache.logging.log4j.core.LogEvent>;
								public getManager(): any;
								public getLayout(): org.apache.logging.log4j.core.Layout<any>;
								public stop(): void;
								public start(): void;
								/** @deprecated */
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							}
							export module AbstractDatabaseAppender {
								export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender.Builder<any>>;
									public constructor();
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export abstract class AbstractDatabaseManager extends org.apache.logging.log4j.core.appender.AbstractManager implements java.io.Flushable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager>;
								/** @deprecated */
								public writeInternal(event: org.apache.logging.log4j.core.LogEvent): void;
								public toString(): string;
								public constructor(name: string, bufferSize: number);
								public shutdown(): boolean;
								public static getManager(name: string, data: org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager.AbstractFactoryData, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>): org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager;
								/** @deprecated */
								public write(event: org.apache.logging.log4j.core.LogEvent): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
								public commitAndClose(): boolean;
								public connectAndStart(): void;
								public writeThrough(event: org.apache.logging.log4j.core.LogEvent, serializable: java.io.Serializable): void;
								public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public static getManager(name: string, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>, data: any): org.apache.logging.log4j.core.appender.AbstractManager;
								public constructor(name: string, bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>);
								public flush(): void;
								public startup(): void;
								public isRunning(): boolean;
								public writeInternal(logEvent0: org.apache.logging.log4j.core.LogEvent, serializable1: java.io.Serializable): void;
								public write(event: org.apache.logging.log4j.core.LogEvent, serializable: java.io.Serializable): void;
								public isBuffered(): boolean;
								public buffer(event: org.apache.logging.log4j.core.LogEvent): void;
								public close(): void;
								public startupInternal(): void;
								public shutdownInternal(): boolean;
							}
							export module AbstractDatabaseManager {
								export abstract class AbstractFactoryData extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager.AbstractFactoryData>;
									public getBufferSize(): number;
									public getLayout(): org.apache.logging.log4j.core.Layout<any>;
									public constructor(bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export class ColumnMapping extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.ColumnMapping>;
								public toString(): string;
								public getNameKey(): string;
								public getName(): string;
								public getType(): java.lang.Class<any>;
								public static newBuilder(): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
								public static toKey(name: string): string;
								public getLiteralValue(): string;
								public getLayout(): org.apache.logging.log4j.core.StringLayout;
								public getParameter(): string;
								public getSource(): string;
							}
							export module ColumnMapping {
								export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.db.ColumnMapping> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder>;
									public setLayout(layout: org.apache.logging.log4j.core.StringLayout): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
									public constructor();
									public build(): any;
									public setLiteral(literal: string): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
									public setType(type: java.lang.Class<any>): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
									public build(): org.apache.logging.log4j.core.appender.db.ColumnMapping;
									public toString(): string;
									public setParameter(parameter: string): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
									public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
									public setName(name: string): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
									public setPattern(pattern: string): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
									public setSource(source: string): org.apache.logging.log4j.core.appender.db.ColumnMapping.Builder;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export class DbAppenderLoggingException extends org.apache.logging.log4j.core.appender.AppenderLoggingException {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.DbAppenderLoggingException>;
								public constructor(message: string);
								public constructor(cause: java.lang.Throwable);
								public constructor(cause: java.lang.Throwable, format: string, objects2: native.Array<any>);
								public constructor(format: string, objects1: native.Array<any>);
								public constructor(message: string, cause: java.lang.Throwable);
								public constructor();
								public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export abstract class AbstractConnectionSource extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource>;
									public constructor();
									public getState(): org.apache.logging.log4j.core.LifeCycle.State;
									public initialize(): void;
									public start(): void;
									public toString(): string;
									public isStarted(): boolean;
									public getConnection(): java.sql.Connection;
									public isStopped(): boolean;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public stop(future: java.util.concurrent.Future<any>): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class AbstractDriverManagerConnectionSource extends org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.AbstractDriverManagerConnectionSource>;
									public getConnectionString(): string;
									public constructor();
									public toString(): string;
									public static getLogger(): org.apache.logging.log4j.Logger;
									public stop(future: java.util.concurrent.Future<any>): boolean;
									public getActualConnectionString(): string;
									public loadDriver(className: string): void;
									public loadDriver(): void;
									public toString(value: native.Array<string>): string;
									public getConnection(): java.sql.Connection;
									public getPassword(): native.Array<string>;
									public getProperties(): native.Array<org.apache.logging.log4j.core.config.Property>;
									public getUserName(): native.Array<string>;
									public toProperties(properties: native.Array<org.apache.logging.log4j.core.config.Property>): java.util.Properties;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public constructor(driverClassName: string, connectionString: string, actualConnectionString: string, userName: native.Array<string>, password: native.Array<string>, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
									public getDriverClassName(): string;
								}
								export module AbstractDriverManagerConnectionSource {
									export class Builder<B>  extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.AbstractDriverManagerConnectionSource.Builder<any>>;
										public connectionString: string;
										public driverClassName: string;
										public password: native.Array<string>;
										public properties: native.Array<org.apache.logging.log4j.core.config.Property>;
										public userName: native.Array<string>;
										public asBuilder(): B;
										public getDriverClassName(): string;
										public setDriverClassName(driverClassName: string): B;
										public setPassword(password: native.Array<string>): B;
										public getPassword(): native.Array<string>;
										public constructor();
										public getProperties(): native.Array<org.apache.logging.log4j.core.config.Property>;
										public setConnectionString(connectionString: string): B;
										public setProperties(properties: native.Array<org.apache.logging.log4j.core.config.Property>): B;
										public setUserName(userName: native.Array<string>): B;
										public getUserName(): native.Array<string>;
										public getConnectionString(): string;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class ColumnConfig extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>;
									public getColumnName(): string;
									/** @deprecated */
									public static createColumnConfig(config: org.apache.logging.log4j.core.config.Configuration, name: string, pattern: string, literalValue: string, eventTimestamp: string, unicode: string, clob: string): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig;
									public getLayout(): org.apache.logging.log4j.core.layout.PatternLayout;
									public isClob(): boolean;
									public toString(): string;
									public isUnicode(): boolean;
									public getLiteralValue(): string;
									public static newBuilder(): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
									public getColumnNameKey(): string;
									public isEventTimestamp(): boolean;
								}
								export module ColumnConfig {
									export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder>;
										public setPattern(pattern: string): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
										public setEventTimestamp(eventTimestamp: boolean): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
										public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
										public constructor();
										public setClob(clob: boolean): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
										public setLiteral(literal: string): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
										public build(): any;
										public build(): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig;
										public setUnicode(unicode: boolean): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
										public setName(name: string): org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig.Builder;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class ConnectionSource extends java.lang.Object implements org.apache.logging.log4j.core.LifeCycle {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										getConnection(): java.sql.Connection;
										toString(): string;
										getState(): org.apache.logging.log4j.core.LifeCycle.State;
										initialize(): void;
										start(): void;
										stop(): void;
										isStarted(): boolean;
										isStopped(): boolean;
									});
									public constructor();
									public getState(): org.apache.logging.log4j.core.LifeCycle.State;
									public initialize(): void;
									public start(): void;
									public toString(): string;
									public isStarted(): boolean;
									public getConnection(): java.sql.Connection;
									public isStopped(): boolean;
									public stop(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class DataSourceConnectionSource extends org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.DataSourceConnectionSource>;
									public static createConnectionSource(jndiName: string): org.apache.logging.log4j.core.appender.db.jdbc.DataSourceConnectionSource;
									public toString(): string;
									public getConnection(): java.sql.Connection;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public stop(future: java.util.concurrent.Future<any>): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class DriverManagerConnectionSource extends org.apache.logging.log4j.core.appender.db.jdbc.AbstractDriverManagerConnectionSource {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.DriverManagerConnectionSource>;
									public constructor();
									public static newBuilder(): org.apache.logging.log4j.core.appender.db.jdbc.DriverManagerConnectionSource.Builder<any>;
									public toString(): string;
									public toString(value: native.Array<string>): string;
									public getConnection(): java.sql.Connection;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public constructor(driverClassName: string, connectionString: string, actualConnectionString: string, userName: native.Array<string>, password: native.Array<string>, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
									public stop(future: java.util.concurrent.Future<any>): boolean;
								}
								export module DriverManagerConnectionSource {
									export class Builder<B>  extends org.apache.logging.log4j.core.appender.db.jdbc.AbstractDriverManagerConnectionSource.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.db.jdbc.DriverManagerConnectionSource>  {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.DriverManagerConnectionSource.Builder<any>>;
										public build(): org.apache.logging.log4j.core.appender.db.jdbc.DriverManagerConnectionSource;
										public constructor();
										public build(): any;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class FactoryMethodConnectionSource extends org.apache.logging.log4j.core.appender.db.jdbc.AbstractConnectionSource {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.FactoryMethodConnectionSource>;
									public static createConnectionSource(className: string, methodName: string): org.apache.logging.log4j.core.appender.db.jdbc.FactoryMethodConnectionSource;
									public toString(): string;
									public getConnection(): java.sql.Connection;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public stop(future: java.util.concurrent.Future<any>): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class JdbcAppender extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender<org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender>;
									public append(event: org.apache.logging.log4j.core.LogEvent): void;
									public ignoreExceptions(): boolean;
									/** @deprecated */
									public static createAppender(name: string, ignore: string, filter: org.apache.logging.log4j.core.Filter, connectionSource: org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource, bufferSize: string, tableName: string, columnConfigs: native.Array<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>): org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;
									public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
									public toString(): string;
									public hasFilter(): boolean;
									public getName(): string;
									public static newBuilder(): org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender.Builder<any>;
									public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
									public stop(future: java.util.concurrent.Future<any>): boolean;
									public getLayout(): org.apache.logging.log4j.core.Layout<org.apache.logging.log4j.core.LogEvent>;
									public getFilter(): org.apache.logging.log4j.core.Filter;
									public requiresLocation(): boolean;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
									public getLayout(): org.apache.logging.log4j.core.Layout<any>;
									public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								}
								export module JdbcAppender {
									export class Builder<B>  extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender>  {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender.Builder<any>>;
										public setTableName(tableName: string): any;
										public setConnectionSource(connectionSource: org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource): any;
										public setBufferSize(bufferSize: number): any;
										public constructor();
										public setColumnConfigs(columnConfigs: native.Array<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>): any;
										public setReconnectIntervalMillis(reconnectIntervalMillis: number): void;
										public getReconnectIntervalMillis(): number;
										public build(): org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender;
										public setColumnMappings(columnMappings: native.Array<org.apache.logging.log4j.core.appender.db.ColumnMapping>): any;
										public build(): any;
										public setImmediateFail(immediateFail: boolean): void;
										public setTruncateStrings(truncateStrings: boolean): any;
										public isImmediateFail(): boolean;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module db {
							export module jdbc {
								export class JdbcDatabaseManager extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager>;
									/** @deprecated */
									public writeInternal(event: org.apache.logging.log4j.core.LogEvent): void;
									public close(): void;
									public static getManager(name: string, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>, data: any): org.apache.logging.log4j.core.appender.AbstractManager;
									public static getManager(name: string, data: org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager.AbstractFactoryData, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>): org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager;
									public getConnectionSource(): org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource;
									public connectAndStart(): void;
									public getSqlStatement(): string;
									public closeResources(logExceptions: boolean): void;
									public shutdownInternal(): boolean;
									public getTableName(): string;
									public startupInternal(): void;
									/** @deprecated */
									public static getManager(name: string, bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>, connectionSource: org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource, tableName: string, columnConfigs: native.Array<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>, columnMappings: native.Array<org.apache.logging.log4j.core.appender.db.ColumnMapping>): org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager;
									/** @deprecated */
									public static getManager(name: string, bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>, connectionSource: org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource, tableName: string, columnConfigs: native.Array<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>, columnMappings: native.Array<org.apache.logging.log4j.core.appender.db.ColumnMapping>, immediateFail: boolean, reconnectIntervalMillis: number): org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager;
									public writeInternal(logEvent0: org.apache.logging.log4j.core.LogEvent, serializable1: java.io.Serializable): void;
									public static getManager(name: string, bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>, connectionSource: org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource, tableName: string, columnConfigs: native.Array<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>, columnMappings: native.Array<org.apache.logging.log4j.core.appender.db.ColumnMapping>, immediateFail: boolean, reconnectIntervalMillis: number, truncateStrings: boolean): org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager;
									public commitAndClose(): boolean;
									public writeThrough(event: org.apache.logging.log4j.core.LogEvent, serializable: java.io.Serializable): void;
									public flush(): void;
									/** @deprecated */
									public static getJDBCDatabaseManager(name: string, bufferSize: number, connectionSource: org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource, tableName: string, columnConfigs: native.Array<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>): org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager;
									public writeInternal(event: org.apache.logging.log4j.core.LogEvent, serializable: java.io.Serializable): void;
								}
								export module JdbcDatabaseManager {
									export class FactoryData extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager.AbstractFactoryData {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager.FactoryData>;
										public toString(): string;
										public constructor(bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>);
										public constructor(bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>, connectionSource: org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource, tableName: string, columnConfigs: native.Array<org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig>, columnMappings: native.Array<org.apache.logging.log4j.core.appender.db.ColumnMapping>, immediateFail: boolean, reconnectIntervalMillis: number, truncateStrings: boolean);
									}
									export class JdbcDatabaseManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager,org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager.FactoryData> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager.JdbcDatabaseManagerFactory>;
										public createManager(name: string, data: org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager.FactoryData): org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager;
										public createManager(string0: string, object1: any): any;
									}
									export class Reconnector extends org.apache.logging.log4j.core.util.Log4jThread {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager.Reconnector>;
										public run(): void;
										public shutdown(): void;
										public toString(): string;
										public latch(): void;
									}
									export class ResultSetColumnMetaData extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager.ResultSetColumnMetaData>;
										public getName(): string;
										public getTypeName(): string;
										public getNameKey(): string;
										public getClassName(): string;
										public isStringType(): boolean;
										public truncate(string: string): string;
										public getSchemaName(): string;
										public getType(): number;
										public getScale(): number;
										public getCatalogName(): string;
										public getTableName(): string;
										public constructor(rsMetaData: java.sql.ResultSetMetaData, j: number);
										public getPrecision(): number;
										public toString(): string;
										public getLabel(): string;
										public getDisplaySize(): number;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export class JmsAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.JmsAppender>;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
								public static newBuilder(): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, manager: org.apache.logging.log4j.core.appender.mom.JmsManager);
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>);
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getManager(): org.apache.logging.log4j.core.appender.mom.JmsManager;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public hasFilter(): boolean;
								public requiresLocation(): boolean;
								public append(event: org.apache.logging.log4j.core.LogEvent): void;
								/** @deprecated */
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>);
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public getName(): string;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public ignoreExceptions(): boolean;
								public constructor();
								/** @deprecated */
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean, manager: org.apache.logging.log4j.core.appender.mom.JmsManager);
								public getLayout(): org.apache.logging.log4j.core.Layout<any>;
								public stop(): void;
								/** @deprecated */
								public constructor(name: string, filter: org.apache.logging.log4j.core.Filter, layout: org.apache.logging.log4j.core.Layout<any>, ignoreExceptions: boolean);
							}
							export module JmsAppender {
								export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.mom.JmsAppender>  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>>;
									public static DEFAULT_RECONNECT_INTERVAL_MILLIS: number;
									public setProviderUrl(providerUrl: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									/** @deprecated */
									public setUsername(username: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setFactoryBindingName(factoryBindingName: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setImmediateFail(immediateFail: boolean): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public toString(): string;
									public setUrlPkgPrefixes(urlPkgPrefixes: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public build(): org.apache.logging.log4j.core.appender.mom.JmsAppender;
									public setPassword(password: native.Array<string>): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public build(): any;
									/** @deprecated */
									public setPassword(password: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setReconnectIntervalMillis(reconnectIntervalMillis: number): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setFactoryName(factoryName: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setSecurityPrincipalName(securityPrincipalName: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setSecurityCredentials(securityCredentials: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setDestinationBindingName(destinationBindingName: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setUserName(userName: string): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
									public setJmsManager(jmsManager: org.apache.logging.log4j.core.appender.mom.JmsManager): org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export class JmsManager extends org.apache.logging.log4j.core.appender.AbstractManager {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.JmsManager>;
								public getJmsManagerConfiguration(): org.apache.logging.log4j.core.appender.mom.JmsManager.JmsManagerConfiguration;
								public static getJmsManager(name: string, jndiProperties: java.util.Properties, connectionFactoryName: string, destinationName: string, userName: string, password: native.Array<string>, immediateFail: boolean, reconnectIntervalMillis: number): org.apache.logging.log4j.core.appender.mom.JmsManager;
								public createMessage(object: java.io.Serializable): javax.jms.Message;
								public createMessageConsumer(): javax.jms.MessageConsumer;
								public close(): void;
								public createMessageProducer(session: javax.jms.Session, destination: javax.jms.Destination): javax.jms.MessageProducer;
								public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							}
							export module JmsManager {
								export class JmsManagerConfiguration extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.JmsManager.JmsManagerConfiguration>;
									public getDestinationName(): string;
									public getJndiManager(): org.apache.logging.log4j.core.net.JndiManager;
									public getJndiProperties(): java.util.Properties;
									public getReconnectIntervalMillis(): number;
									public getConnectionFactoryName(): string;
									public isImmediateFail(): boolean;
									public toString(): string;
									public getUserName(): string;
									public getPassword(): native.Array<string>;
									public isRetry(): boolean;
								}
								export class JmsManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.mom.JmsManager,org.apache.logging.log4j.core.appender.mom.JmsManager.JmsManagerConfiguration> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.JmsManager.JmsManagerFactory>;
									public createManager(name: string, data: org.apache.logging.log4j.core.appender.mom.JmsManager.JmsManagerConfiguration): org.apache.logging.log4j.core.appender.mom.JmsManager;
									public createManager(string0: string, object1: any): any;
								}
								export class Reconnector extends org.apache.logging.log4j.core.util.Log4jThread {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.JmsManager.Reconnector>;
									public latch(): void;
									public shutdown(): void;
									public run(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export module jeromq {
								export class JeroMqAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender>;
									public append(event: org.apache.logging.log4j.core.LogEvent): void;
									public ignoreExceptions(): boolean;
									public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
									public toString(): string;
									public hasFilter(): boolean;
									public getName(): string;
									public stop(future: java.util.concurrent.Future<any>): boolean;
									public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
									public getFilter(): org.apache.logging.log4j.core.Filter;
									public requiresLocation(): boolean;
									public getLayout(): org.apache.logging.log4j.core.Layout<any>;
									public static createAppender(name: string, layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, properties: native.Array<org.apache.logging.log4j.core.config.Property>, ignoreExceptions: boolean, affinity: number, backlog: number, delayAttachOnConnect: boolean, identity: native.Array<number>, ipv4Only: boolean, linger: number, maxMsgSize: number, rcvHwm: number, receiveBufferSize: number, receiveTimeOut: number, reconnectIVL: number, reconnectIVLMax: number, sendBufferSize: number, sendTimeOut: number, sndHwm: number, tcpKeepAlive: number, tcpKeepAliveCount: number, tcpKeepAliveIdle: number, tcpKeepAliveInterval: number, xpubVerbose: boolean): org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender;
									public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public stop(): void;
									public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export module jeromq {
								export class JeroMqManager extends org.apache.logging.log4j.core.appender.AbstractManager {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager>;
									public static SYS_PROPERTY_ENABLE_SHUTDOWN_HOOK: string;
									public static SYS_PROPERTY_IO_THREADS: string;
									public send(data: native.Array<number>): boolean;
									public close(): void;
									public static getJeroMqManager(name: string, affinity: number, backlog: number, delayAttachOnConnect: boolean, identity: native.Array<number>, ipv4Only: boolean, linger: number, maxMsgSize: number, rcvHwm: number, receiveBufferSize: number, receiveTimeOut: number, reconnectIVL: number, reconnectIVLMax: number, sendBufferSize: number, sendTimeOut: number, sndHwm: number, tcpKeepAlive: number, tcpKeepAliveCount: number, tcpKeepAliveIdle: number, tcpKeepAliveInterval: number, xpubVerbose: boolean, endpoints: java.util.List<string>): org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager;
									public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public static getContext(): org.zeromq.ZMQ.Context;
								}
								export module JeroMqManager {
									export class JeroMqConfiguration extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager.JeroMqConfiguration>;
										public toString(): string;
									}
									export class JeroMqManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager,org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager.JeroMqConfiguration> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager.JeroMqManagerFactory>;
										public createManager(string0: string, object1: any): any;
										public createManager(name: string, data: org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager.JeroMqConfiguration): org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export module kafka {
								export class DefaultKafkaProducerFactory extends java.lang.Object implements org.apache.logging.log4j.core.appender.mom.kafka.KafkaProducerFactory {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.kafka.DefaultKafkaProducerFactory>;
									public constructor();
									public newKafkaProducer(config: java.util.Properties): org.apache.kafka.clients.producer.Producer<native.Array<number>,native.Array<number>>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export module kafka {
								export class KafkaAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender>;
									public append(event: org.apache.logging.log4j.core.LogEvent): void;
									public ignoreExceptions(): boolean;
									public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
									public toString(): string;
									public hasFilter(): boolean;
									public getName(): string;
									public static newBuilder(): org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender.Builder<any>;
									public stop(future: java.util.concurrent.Future<any>): boolean;
									public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
									/** @deprecated */
									public static createAppender(layout: org.apache.logging.log4j.core.Layout<any>, filter: org.apache.logging.log4j.core.Filter, name: string, ignoreExceptions: boolean, topic: string, properties: native.Array<org.apache.logging.log4j.core.config.Property>, configuration: org.apache.logging.log4j.core.config.Configuration, key: string): org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
									public getFilter(): org.apache.logging.log4j.core.Filter;
									public requiresLocation(): boolean;
									public start(): void;
									public getLayout(): org.apache.logging.log4j.core.Layout<any>;
									public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public stop(): void;
									public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								}
								export module KafkaAppender {
									export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender>  {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender.Builder<any>>;
										public getRetryCount(): java.lang.Integer;
										public getTopic(): string;
										public build(): org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender;
										public setTopic(topic: string): any;
										public setSyncSend(syncSend: boolean): any;
										public constructor();
										public setKey(key: string): any;
										public build(): any;
										public isSyncSend(): boolean;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export module kafka {
								export class KafkaManager extends org.apache.logging.log4j.core.appender.AbstractManager {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager>;
									public static DEFAULT_TIMEOUT_MILLIS: string;
									public send(msg: native.Array<number>): void;
									public close(): void;
									public getTopic(): string;
									public static getManager(name: string, factory: org.apache.logging.log4j.core.appender.ManagerFactory<any,any>, data: any): org.apache.logging.log4j.core.appender.AbstractManager;
									public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, topic: string, syncSend: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, key: string);
									public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public static getManager(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, topic: string, syncSend: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, key: string): org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager;
									public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
									public startup(): void;
								}
								export module KafkaManager {
									export class FactoryData extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager.FactoryData>;
										public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, topic: string, syncSend: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, key: string);
									}
									export class KafkaManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager,org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager.FactoryData> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager.KafkaManagerFactory>;
										public createManager(name: string, data: org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager.FactoryData): org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager;
										public createManager(string0: string, object1: any): any;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module mom {
							export module kafka {
								export class KafkaProducerFactory extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.mom.kafka.KafkaProducerFactory>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.appender.mom.kafka.KafkaProducerFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										newKafkaProducer(properties0: java.util.Properties): org.apache.kafka.clients.producer.Producer<native.Array<number>,native.Array<number>>;
									});
									public constructor();
									public newKafkaProducer(properties0: java.util.Properties): org.apache.kafka.clients.producer.Producer<native.Array<number>,native.Array<number>>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module nosql {
							export abstract class AbstractNoSqlConnection<W, T>  extends org.apache.logging.log4j.core.appender.nosql.NoSqlConnection<any,any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.AbstractNoSqlConnection<any,any>>;
								public createObject(): any;
								public insertObject(noSqlObject0: org.apache.logging.log4j.core.appender.nosql.NoSqlObject<any>): void;
								public isClosed(): boolean;
								public createList(int0: number): native.Array<any>;
								public constructor();
								public closeImpl(): void;
								public close(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module nosql {
							export class DefaultNoSqlObject extends org.apache.logging.log4j.core.appender.nosql.NoSqlObject<java.util.Map<string,any>> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.DefaultNoSqlObject>;
								public set(field: string, value: org.apache.logging.log4j.core.appender.nosql.NoSqlObject<any>): void;
								public unwrap(): any;
								public set(field: string, values: native.Array<any>): void;
								public unwrap(): java.util.Map<string,any>;
								public set(field: string, values: native.Array<org.apache.logging.log4j.core.appender.nosql.NoSqlObject<java.util.Map<string,any>>>): void;
								public set(field: string, value: any): void;
								public constructor();
								public set(field: string, values: native.Array<org.apache.logging.log4j.core.appender.nosql.NoSqlObject<any>>): void;
								public set(field: string, value: org.apache.logging.log4j.core.appender.nosql.NoSqlObject<java.util.Map<string,any>>): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module nosql {
							export class NoSqlAppender extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender<org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager<any>> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlAppender>;
								public toString(): string;
								public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
								public getName(): string;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public ignoreExceptions(): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								/** @deprecated */
								public static createAppender(name: string, ignore: string, filter: org.apache.logging.log4j.core.Filter, bufferSize: string, provider: org.apache.logging.log4j.core.appender.nosql.NoSqlProvider<any>): org.apache.logging.log4j.core.appender.nosql.NoSqlAppender;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getLayout(): org.apache.logging.log4j.core.Layout<org.apache.logging.log4j.core.LogEvent>;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getLayout(): org.apache.logging.log4j.core.Layout<any>;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public hasFilter(): boolean;
								public requiresLocation(): boolean;
								public stop(): void;
								public static newBuilder(): org.apache.logging.log4j.core.appender.nosql.NoSqlAppender.Builder<any>;
								public append(event: org.apache.logging.log4j.core.LogEvent): void;
							}
							export module NoSqlAppender {
								export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.nosql.NoSqlAppender>  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlAppender.Builder<any>>;
									public constructor();
									public build(): any;
									public setBufferSize(bufferSize: number): any;
									public setProvider(provider: org.apache.logging.log4j.core.appender.nosql.NoSqlProvider<any>): any;
									public build(): org.apache.logging.log4j.core.appender.nosql.NoSqlAppender;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module nosql {
							export class NoSqlConnection<W, T>  extends java.io.Closeable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlConnection<any,any>>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.nosql.NoSqlConnection<any,any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									createObject(): any;
									createList(int0: number): native.Array<any>;
									insertObject(noSqlObject0: org.apache.logging.log4j.core.appender.nosql.NoSqlObject<any>): void;
									close(): void;
									isClosed(): boolean;
									close(): void;
									close(): void;
								});
								public constructor();
								public createObject(): any;
								public insertObject(noSqlObject0: org.apache.logging.log4j.core.appender.nosql.NoSqlObject<any>): void;
								public isClosed(): boolean;
								public createList(int0: number): native.Array<any>;
								public close(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module nosql {
							export class NoSqlDatabaseManager<W>  extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager<any>>;
								/** @deprecated */
								public writeInternal(event: org.apache.logging.log4j.core.LogEvent): void;
								public flush(): void;
								public writeInternal(logEvent0: org.apache.logging.log4j.core.LogEvent, serializable1: java.io.Serializable): void;
								public connectAndStart(): void;
								public commitAndClose(): boolean;
								public static getNoSqlDatabaseManager(name: string, bufferSize: number, provider: org.apache.logging.log4j.core.appender.nosql.NoSqlProvider<any>): org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager<any>;
								public writeInternal(event: org.apache.logging.log4j.core.LogEvent, serializable: java.io.Serializable): void;
								public close(): void;
								public startupInternal(): void;
								public shutdownInternal(): boolean;
							}
							export module NoSqlDatabaseManager {
								export class FactoryData extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager.AbstractFactoryData {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager.FactoryData>;
									public constructor(bufferSize: number, layout: org.apache.logging.log4j.core.Layout<any>);
									public constructor(bufferSize: number, provider: org.apache.logging.log4j.core.appender.nosql.NoSqlProvider<any>);
								}
								export class NoSQLDatabaseManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager<any>,org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager.FactoryData> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager.NoSQLDatabaseManagerFactory>;
									public createManager(string0: string, object1: any): any;
									public createManager(name: string, data: org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager.FactoryData): org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module nosql {
							export class NoSqlObject<W>  extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlObject<any>>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.nosql.NoSqlObject<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									set(string0: string, object1: any): void;
									set(string0: string, noSqlObject1: org.apache.logging.log4j.core.appender.nosql.NoSqlObject<W>): void;
									set(string0: string, objects1: native.Array<any>): void;
									set(string0: string, noSqlObjects1: native.Array<org.apache.logging.log4j.core.appender.nosql.NoSqlObject<W>>): void;
									unwrap(): W;
								});
								public constructor();
								public set(string0: string, noSqlObject1: org.apache.logging.log4j.core.appender.nosql.NoSqlObject<W>): void;
								public set(string0: string, object1: any): void;
								public set(string0: string, objects1: native.Array<any>): void;
								public set(string0: string, noSqlObjects1: native.Array<org.apache.logging.log4j.core.appender.nosql.NoSqlObject<W>>): void;
								public unwrap(): W;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module nosql {
							export class NoSqlProvider<C>  extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.nosql.NoSqlProvider<any>>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.nosql.NoSqlProvider<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									getConnection(): C;
									toString(): string;
								});
								public constructor();
								public getConnection(): C;
								public toString(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rewrite {
							export class LoggerNameLevelRewritePolicy extends java.lang.Object implements org.apache.logging.log4j.core.appender.rewrite.RewritePolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy>;
								public static createPolicy(loggerNamePrefix: string, levelPairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>): org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy;
								public rewrite(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.LogEvent;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rewrite {
							export class MapRewritePolicy extends java.lang.Object implements org.apache.logging.log4j.core.appender.rewrite.RewritePolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy>;
								public static LOGGER: org.apache.logging.log4j.Logger;
								public toString(): string;
								public rewrite(source: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.LogEvent;
								public static createPolicy(mode: string, pairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>): org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy;
							}
							export module MapRewritePolicy {
								export class Mode {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy.Mode>;
									public static Add: org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy.Mode;
									public static Update: org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy.Mode;
									public static values(): native.Array<org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy.Mode>;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public static valueOf(name: string): org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy.Mode;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rewrite {
							export class PropertiesRewritePolicy extends java.lang.Object implements org.apache.logging.log4j.core.appender.rewrite.RewritePolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy>;
								public static LOGGER: org.apache.logging.log4j.Logger;
								public toString(): string;
								public rewrite(source: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.LogEvent;
								public static createPolicy(config: org.apache.logging.log4j.core.config.Configuration, props: native.Array<org.apache.logging.log4j.core.config.Property>): org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rewrite {
							export class RewriteAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rewrite.RewriteAppender>;
								public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
								public getName(): string;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public ignoreExceptions(): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public static createAppender(name: string, ignore: string, appenderRefs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, config: org.apache.logging.log4j.core.config.Configuration, rewritePolicy: org.apache.logging.log4j.core.appender.rewrite.RewritePolicy, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.appender.rewrite.RewriteAppender;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getLayout(): org.apache.logging.log4j.core.Layout<any>;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public hasFilter(): boolean;
								public requiresLocation(): boolean;
								public stop(): void;
								public start(): void;
								public append(event: org.apache.logging.log4j.core.LogEvent): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rewrite {
							export class RewritePolicy extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rewrite.RewritePolicy>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rewrite.RewritePolicy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									rewrite(logEvent0: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.LogEvent;
								});
								public constructor();
								public rewrite(logEvent0: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.LogEvent;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export abstract class AbstractRolloverStrategy extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.RolloverStrategy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy>;
								public static LOGGER: org.apache.logging.log4j.Logger;
								public static PATTERN_COUNTER: java.util.regex.Pattern;
								public strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor;
								public getEligibleFiles(path: string, pattern: string): java.util.SortedMap<java.lang.Integer,java.nio.file.Path>;
								public getEligibleFiles(currentFile: string, path: string, logfilePattern: string, isAscending: boolean): java.util.SortedMap<java.lang.Integer,java.nio.file.Path>;
								public constructor(strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor);
								public merge(compressAction: org.apache.logging.log4j.core.appender.rolling.action.Action, custom: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopOnError: boolean): org.apache.logging.log4j.core.appender.rolling.action.Action;
								public getEligibleFiles(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): java.util.SortedMap<java.lang.Integer,java.nio.file.Path>;
								public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
								public getEligibleFiles(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager, isAscending: boolean): java.util.SortedMap<java.lang.Integer,java.nio.file.Path>;
								public suffixLength(lowFilename: string): number;
								/** @deprecated */
								public getEligibleFiles(path: string, logfilePattern: string, isAscending: boolean): java.util.SortedMap<java.lang.Integer,java.nio.file.Path>;
								public rollover(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): org.apache.logging.log4j.core.appender.rolling.RolloverDescription;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export abstract class AbstractTriggeringPolicy extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy>;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public stop(): void;
								public constructor();
								public initialize(): void;
								public initialize(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public isTriggeringEvent(logEvent0: org.apache.logging.log4j.core.LogEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class CompositeTriggeringPolicy extends org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy>;
								public toString(): string;
								public initialize(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public getTriggeringPolicies(): native.Array<org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy>;
								public static createPolicy(triggeringPolicy: native.Array<org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy>): org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy;
								public stop(): void;
								public initialize(): void;
								public isTriggeringEvent(event: org.apache.logging.log4j.core.LogEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class CronTriggeringPolicy extends org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy>;
								public toString(): string;
								public static createPolicy(configuration: org.apache.logging.log4j.core.config.Configuration, evaluateOnStartup: string, schedule: string): org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public stop(): void;
								public initialize(): void;
								public initialize(aManager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public isTriggeringEvent(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public getCronExpression(): org.apache.logging.log4j.core.util.CronExpression;
							}
							export module CronTriggeringPolicy {
								export class CronTrigger extends java.lang.Object implements java.lang.Runnable {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy.CronTrigger>;
									public run(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class DefaultRolloverStrategy extends org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy>;
								public toString(): string;
								public isUseMax(): boolean;
								public constructor(strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor);
								public getMaxIndex(): number;
								public getMinIndex(): number;
								/** @deprecated */
								public constructor(minIndex: number, maxIndex: number, useMax: boolean, compressionLevel: number, strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor, customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopCustomActionsOnError: boolean);
								public constructor(minIndex: number, maxIndex: number, useMax: boolean, compressionLevel: number, strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor, customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopCustomActionsOnError: boolean, tempCompressedFilePatternString: string);
								public getTempCompressedFilePattern(): org.apache.logging.log4j.core.appender.rolling.PatternProcessor;
								public static newBuilder(): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
								/** @deprecated */
								public static createStrategy(max: string, min: string, fileIndex: string, compressionLevelStr: string, customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopCustomActionsOnError: boolean, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy;
								public rollover(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): org.apache.logging.log4j.core.appender.rolling.RolloverDescription;
								public getCustomActions(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.Action>;
								public isStopCustomActionsOnError(): boolean;
								public getCompressionLevel(): number;
							}
							export module DefaultRolloverStrategy {
								export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder>;
									public constructor();
									public build(): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy;
									public withFileIndex(fileIndex: string): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public withStopCustomActionsOnError(stopCustomActionsOnError: boolean): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public getMax(): string;
									public withConfig(config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public getFileIndex(): string;
									public isStopCustomActionsOnError(): boolean;
									public withMax(max: string): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public withCustomActions(customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public withMin(min: string): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public getCompressionLevelStr(): string;
									public build(): any;
									public getMin(): string;
									public withCompressionLevelStr(compressionLevelStr: string): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public getCustomActions(): native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>;
									public withTempCompressedFilePattern(tempCompressedFilePattern: string): org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy.Builder;
									public getConfig(): org.apache.logging.log4j.core.config.Configuration;
									public getTempCompressedFilePattern(): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class DirectFileRolloverStrategy extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.DirectFileRolloverStrategy>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rolling.DirectFileRolloverStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									getCurrentFileName(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): string;
									clearCurrentFileName(): void;
								});
								public constructor();
								public getCurrentFileName(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): string;
								public clearCurrentFileName(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class DirectWriteRolloverStrategy extends org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy implements org.apache.logging.log4j.core.appender.rolling.DirectFileRolloverStrategy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy>;
								public toString(): string;
								public clearCurrentFileName(): void;
								public constructor(strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor);
								public getMaxFiles(): number;
								public constructor(maxFiles: number, compressionLevel: number, strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor, customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopCustomActionsOnError: boolean, tempCompressedFilePatternString: string);
								/** @deprecated */
								public static createStrategy(maxFiles: string, compressionLevelStr: string, customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopCustomActionsOnError: boolean, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy;
								public static newBuilder(): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder;
								public getCurrentFileName(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): string;
								public getTempCompressedFilePattern(): org.apache.logging.log4j.core.appender.rolling.PatternProcessor;
								/** @deprecated */
								public constructor(maxFiles: number, compressionLevel: number, strSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor, customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopCustomActionsOnError: boolean);
								public rollover(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): org.apache.logging.log4j.core.appender.rolling.RolloverDescription;
								public getCustomActions(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.Action>;
								public isStopCustomActionsOnError(): boolean;
								public getCompressionLevel(): number;
							}
							export module DirectWriteRolloverStrategy {
								export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder>;
									public constructor();
									public withCustomActions(customActions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder;
									public getMaxFiles(): string;
									public withMaxFiles(maxFiles: string): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder;
									public withStopCustomActionsOnError(stopCustomActionsOnError: boolean): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder;
									public withConfig(config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder;
									public build(): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy;
									public isStopCustomActionsOnError(): boolean;
									public getCompressionLevelStr(): string;
									public build(): any;
									public withTempCompressedFilePattern(tempCompressedFilePattern: string): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder;
									public getCustomActions(): native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>;
									public getConfig(): org.apache.logging.log4j.core.config.Configuration;
									public getTempCompressedFilePattern(): string;
									public withCompressionLevelStr(compressionLevelStr: string): org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy.Builder;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export abstract class FileExtension {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.FileExtension>;
								public static ZIP: org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static GZ: org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static BZIP2: org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static DEFLATE: org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static PACK200: org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static XZ: org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static valueOf(name: string): org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static lookupForFile(fileName: string): org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static lookup(fileExtension: string): org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public static values(): native.Array<org.apache.logging.log4j.core.appender.rolling.FileExtension>;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class FileSize extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.FileSize>;
								public static parse(string: string, defaultValue: number): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class NoOpTriggeringPolicy extends org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.NoOpTriggeringPolicy>;
								public static INSTANCE: org.apache.logging.log4j.core.appender.rolling.NoOpTriggeringPolicy;
								public initialize(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public isTriggeringEvent(logEvent: org.apache.logging.log4j.core.LogEvent): boolean;
								public stop(): void;
								public constructor();
								public static createPolicy(): org.apache.logging.log4j.core.appender.rolling.NoOpTriggeringPolicy;
								public initialize(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class OnStartupTriggeringPolicy extends org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.OnStartupTriggeringPolicy>;
								public toString(): string;
								public initialize(manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public static createPolicy(minSize: number): org.apache.logging.log4j.core.appender.rolling.OnStartupTriggeringPolicy;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public stop(): void;
								public initialize(): void;
								public isTriggeringEvent(event: org.apache.logging.log4j.core.LogEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class PatternProcessor extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.PatternProcessor>;
								public static LOGGER: org.apache.logging.log4j.Logger;
								public getPrevFileTime(): number;
								public toString(): string;
								public formatFileName(subst: org.apache.logging.log4j.core.lookup.StrSubstitutor, buf: java.lang.StringBuilder, obj: any): void;
								public getFrequency(): org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public constructor(pattern: string);
								public formatFileName(subst: org.apache.logging.log4j.core.lookup.StrSubstitutor, buf: java.lang.StringBuilder, useCurrentTime: boolean, obj: any): void;
								public constructor(pattern: string, copy: org.apache.logging.log4j.core.appender.rolling.PatternProcessor);
								public getFileExtension(): org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public getCurrentFileTime(): number;
								public getNextFileTime(): number;
								public formatFileName(buf: java.lang.StringBuilder, objects: native.Array<any>): void;
								public getNextTime(currentMillis: number, increment: number, modulus: boolean): number;
								public setPrevFileTime(prevFileTime: number): void;
								public updateTime(): void;
								public setCurrentFileTime(currentFileTime: number): void;
								public setTimeBased(isTimeBased: boolean): void;
								public getPattern(): string;
								public formatFileName(buf: java.lang.StringBuilder, useCurrentTime: boolean, obj: any): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class RollingFileManager extends org.apache.logging.log4j.core.appender.FileManager {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingFileManager>;
								public size: number;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, createOnDemand: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public write(bytes: native.Array<number>): void;
								public updateData(data: any): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
								public rollover(): void;
								public getFileExtension(): org.apache.logging.log4j.core.appender.rolling.FileExtension;
								public rollover(prevFileTime: java.util.Date, prevRollTime: java.util.Date): void;
								public getFileName(): string;
								public writeBytes(data: java.nio.ByteBuffer): void;
								/** @deprecated */
								public constructor(fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, writeHeader: boolean);
								public static getFileManager(fileName: string, append: boolean, locking: boolean, bufferedIo: boolean, createOnDemand: boolean, advertiseUri: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, filePermissions: string, fileOwner: string, fileGroup: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.FileManager;
								public static getFileManager(fileName: string, pattern: string, append: boolean, bufferedIO: boolean, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, immediateFlush: boolean, createOnDemand: boolean, filePermissions: string, fileOwner: string, fileGroup: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.RollingFileManager;
								public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public write(bytes: native.Array<number>, offset: number, length: number): void;
								public isRenameEmptyFiles(): boolean;
								public isDirectWrite(): boolean;
								public writeBytes(data: native.Array<number>, offset: number, length: number): void;
								public writeToDestination(bytes: native.Array<number>, offset: number, length: number): void;
								public write(bytes: native.Array<number>, offset: number, length: number, immediateFlush: boolean): void;
								public setRenameEmptyFiles(renameEmptyFiles: boolean): void;
								public checkRollover(event: org.apache.logging.log4j.core.LogEvent): void;
								public setPatternProcessor(patternProcessor: org.apache.logging.log4j.core.appender.rolling.PatternProcessor): void;
								public initialize(): void;
								public setRolloverStrategy(rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
								public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
								/** @deprecated */
								public constructor(fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, createOnDemand: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public getPatternProcessor(): org.apache.logging.log4j.core.appender.rolling.PatternProcessor;
								public createFileAfterRollover(): void;
								/** @deprecated */
								public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
								public getFileSize(): number;
								public getFileTime(): number;
								public getByteBuffer(): java.nio.ByteBuffer;
								public setTriggeringPolicy(triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy): void;
								public write(bytes: native.Array<number>, immediateFlush: boolean): void;
								/** @deprecated */
								public constructor(fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
								public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
								/** @deprecated */
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, createOnDemand: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public close(): void;
								public getTriggeringPolicy(): org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy;
								/** @deprecated */
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, createOnDemand: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								/** @deprecated */
								public constructor(fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, writeHeader: boolean);
								public getRolloverStrategy(): org.apache.logging.log4j.core.appender.rolling.RolloverStrategy;
							}
							export module RollingFileManager {
								export class AsyncAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingFileManager.AsyncAction>;
									public constructor();
									public close(): void;
									public isComplete(): boolean;
									public execute(): boolean;
									public toString(): string;
									public constructor(act: org.apache.logging.log4j.core.appender.rolling.action.Action, manager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager);
								}
								export class EmptyQueue extends java.util.concurrent.ArrayBlockingQueue<java.lang.Runnable> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingFileManager.EmptyQueue>;
									public remove(): any;
									public poll(timeout: number, unit: java.util.concurrent.TimeUnit): any;
									public iterator(): java.util.Iterator<any>;
									public removeIf(filter: any /* any*/): boolean;
									public drainTo(c: java.util.Collection<any>, maxElements: number): number;
									public add(e: any): boolean;
									public retainAll(c: java.util.Collection<any>): boolean;
									public offer(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
									public add(runnable: java.lang.Runnable): boolean;
									public remainingCapacity(): number;
									public contains(o: any): boolean;
									public poll(): any;
									public offer(runnable: java.lang.Runnable, timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public put(runnable: java.lang.Runnable): void;
									public put(e: any): void;
									public stream(): java.util.stream.Stream<any>;
									public isEmpty(): boolean;
									public addAll(c: java.util.Collection<any>): boolean;
									public toArray(): native.Array<any>;
									public hashCode(): number;
									public toArray(a: native.Array<any>): native.Array<any>;
									public parallelStream(): java.util.stream.Stream<any>;
									public size(): number;
									public remove(o: any): boolean;
									public element(): any;
									public clear(): void;
									public spliterator(): java.util.Spliterator<any>;
									public drainTo(c: java.util.Collection<any>): number;
									public addAll(collection: java.util.Collection<any>): boolean;
									public equals(obj: any): boolean;
									public removeAll(c: java.util.Collection<any>): boolean;
									public peek(): any;
									public offer(e: any): boolean;
									public take(): any;
									public containsAll(c: java.util.Collection<any>): boolean;
								}
								export class FactoryData extends org.apache.logging.log4j.core.appender.ConfigurationFactoryData {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingFileManager.FactoryData>;
									public constructor(configuration: org.apache.logging.log4j.core.config.Configuration);
									public constructor(fileName: string, pattern: string, append: boolean, bufferedIO: boolean, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, immediateFlush: boolean, createOnDemand: boolean, filePermissions: string, fileOwner: string, fileGroup: string, configuration: org.apache.logging.log4j.core.config.Configuration);
									public getPattern(): string;
									public getRolloverStrategy(): org.apache.logging.log4j.core.appender.rolling.RolloverStrategy;
									public getTriggeringPolicy(): org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy;
									public toString(): string;
								}
								export class RollingFileManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.rolling.RollingFileManager,org.apache.logging.log4j.core.appender.rolling.RollingFileManager.FactoryData> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingFileManager.RollingFileManagerFactory>;
									public createManager(string0: string, object1: any): any;
									public createManager(name: string, data: org.apache.logging.log4j.core.appender.rolling.RollingFileManager.FactoryData): org.apache.logging.log4j.core.appender.rolling.RollingFileManager;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class RollingRandomAccessFileManager extends org.apache.logging.log4j.core.appender.rolling.RollingFileManager {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager>;
								public static DEFAULT_BUFFER_SIZE: number;
								public static getRollingRandomAccessFileManager(fileName: string, filePattern: string, isAppend: boolean, immediateFlush: boolean, bufferSize: number, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager;
								public closeOutputStream(): boolean;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, createOnDemand: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public write(bytes: native.Array<number>): void;
								public updateData(data: any): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
								public writeBytes(data: java.nio.ByteBuffer): void;
								/** @deprecated */
								public constructor(fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, writeHeader: boolean);
								public getBufferSize(): number;
								public setEndOfBatch(endOfBatch: boolean): void;
								public write(bytes: native.Array<number>, offset: number, length: number): void;
								public writeBytes(data: native.Array<number>, offset: number, length: number): void;
								public flush(): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, raf: java.io.RandomAccessFile, fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, immediateFlush: boolean, bufferSize: number, size: number, initialTime: number, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, writeHeader: boolean);
								public writeToDestination(bytes: native.Array<number>, offset: number, length: number): void;
								public write(bytes: native.Array<number>, offset: number, length: number, immediateFlush: boolean): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
								public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
								/** @deprecated */
								public constructor(fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, createOnDemand: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								/** @deprecated */
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, raf: java.io.RandomAccessFile, fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, immediateFlush: boolean, bufferSize: number, size: number, time: number, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
								public createFileAfterRollover(): void;
								public isEndOfBatch(): java.lang.Boolean;
								/** @deprecated */
								public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
								public getByteBuffer(): java.nio.ByteBuffer;
								public write(bytes: native.Array<number>, immediateFlush: boolean): void;
								/** @deprecated */
								public constructor(fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
								public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
								/** @deprecated */
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, createOnDemand: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
								public close(): void;
								/** @deprecated */
								public constructor(fileName: string, pattern: string, os: java.io.OutputStream, append: boolean, size: number, initialTime: number, triggeringPolicy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, rolloverStrategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, writeHeader: boolean);
								/** @deprecated */
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, fileName: string, os: java.io.OutputStream, append: boolean, locking: boolean, createOnDemand: boolean, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, buffer: java.nio.ByteBuffer);
							}
							export module RollingRandomAccessFileManager {
								export class FactoryData extends org.apache.logging.log4j.core.appender.ConfigurationFactoryData {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager.FactoryData>;
									public constructor(configuration: org.apache.logging.log4j.core.config.Configuration);
									public getPattern(): string;
									public getRolloverStrategy(): org.apache.logging.log4j.core.appender.rolling.RolloverStrategy;
									public getTriggeringPolicy(): org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy;
									public constructor(fileName: string, pattern: string, append: boolean, immediateFlush: boolean, bufferSize: number, policy: org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, strategy: org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, advertiseURI: string, layout: org.apache.logging.log4j.core.Layout<any>, filePermissions: string, fileOwner: string, fileGroup: string, configuration: org.apache.logging.log4j.core.config.Configuration);
								}
								export class RollingRandomAccessFileManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager,org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager.FactoryData> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager.RollingRandomAccessFileManagerFactory>;
									public createManager(string0: string, object1: any): any;
									public createManager(name: string, data: org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager.FactoryData): org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class RolloverDescription extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RolloverDescription>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rolling.RolloverDescription interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									getActiveFileName(): string;
									getAppend(): boolean;
									getSynchronous(): org.apache.logging.log4j.core.appender.rolling.action.Action;
									getAsynchronous(): org.apache.logging.log4j.core.appender.rolling.action.Action;
								});
								public constructor();
								public getAppend(): boolean;
								public getActiveFileName(): string;
								public getSynchronous(): org.apache.logging.log4j.core.appender.rolling.action.Action;
								public getAsynchronous(): org.apache.logging.log4j.core.appender.rolling.action.Action;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class RolloverDescriptionImpl extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.RolloverDescription {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RolloverDescriptionImpl>;
								public getAppend(): boolean;
								public getActiveFileName(): string;
								public getSynchronous(): org.apache.logging.log4j.core.appender.rolling.action.Action;
								public constructor(activeFileName: string, append: boolean, synchronous: org.apache.logging.log4j.core.appender.rolling.action.Action, asynchronous: org.apache.logging.log4j.core.appender.rolling.action.Action);
								public getAsynchronous(): org.apache.logging.log4j.core.appender.rolling.action.Action;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class RolloverFrequency {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RolloverFrequency>;
								public static ANNUALLY: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static MONTHLY: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static WEEKLY: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static DAILY: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static HOURLY: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static EVERY_MINUTE: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static EVERY_SECOND: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static EVERY_MILLISECOND: org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static valueOf(name: string): org.apache.logging.log4j.core.appender.rolling.RolloverFrequency;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
								public static values(): native.Array<org.apache.logging.log4j.core.appender.rolling.RolloverFrequency>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class RolloverStrategy extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.RolloverStrategy>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rolling.RolloverStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									rollover(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): org.apache.logging.log4j.core.appender.rolling.RolloverDescription;
								});
								public constructor();
								public rollover(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): org.apache.logging.log4j.core.appender.rolling.RolloverDescription;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class SizeBasedTriggeringPolicy extends org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy>;
								public toString(): string;
								public static createPolicy(size: string): org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy;
								public getMaxFileSize(): number;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public constructor(maxFileSize: number);
								public stop(): void;
								public constructor();
								public initialize(): void;
								public initialize(aManager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public isTriggeringEvent(event: org.apache.logging.log4j.core.LogEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class TimeBasedTriggeringPolicy extends org.apache.logging.log4j.core.appender.rolling.AbstractTriggeringPolicy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy>;
								public toString(): string;
								public getNextRolloverMillis(): number;
								/** @deprecated */
								public static createPolicy(interval: string, modulate: string): org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public static newBuilder(): org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy.Builder;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public stop(): void;
								public initialize(): void;
								public initialize(aManager: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public getInterval(): number;
								public isTriggeringEvent(event: org.apache.logging.log4j.core.LogEvent): boolean;
							}
							export module TimeBasedTriggeringPolicy {
								export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy.Builder>;
									public constructor();
									public withInterval(interval: number): org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy.Builder;
									public build(): any;
									public build(): org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy;
									public withMaxRandomDelay(maxRandomDelay: number): org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy.Builder;
									public isModulate(): boolean;
									public withModulate(modulate: boolean): org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy.Builder;
									public getMaxRandomDelay(): number;
									public getInterval(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export class TriggeringPolicy extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									initialize(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
									isTriggeringEvent(logEvent0: org.apache.logging.log4j.core.LogEvent): boolean;
								});
								public constructor();
								public initialize(rollingFileManager0: org.apache.logging.log4j.core.appender.rolling.RollingFileManager): void;
								public isTriggeringEvent(logEvent0: org.apache.logging.log4j.core.LogEvent): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export abstract class AbstractAction extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.Action {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.AbstractAction>;
									public static LOGGER: org.apache.logging.log4j.Logger;
									public constructor();
									public close(): void;
									public isComplete(): boolean;
									public reportException(ex: java.lang.Exception): void;
									public execute(): boolean;
									public isInterrupted(): boolean;
									public run(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export abstract class AbstractPathAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction>;
									public constructor();
									public close(): void;
									public isComplete(): boolean;
									public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
									public isFollowSymbolicLinks(): boolean;
									public toString(): string;
									public createFileVisitor(path0: java.nio.file.Path, list1: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): java.nio.file.FileVisitor<java.nio.file.Path>;
									public getOptions(): java.util.Set<java.nio.file.FileVisitOption>;
									public getMaxDepth(): number;
									public getPathConditions(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									public getBasePathString(): string;
									public execute(): boolean;
									public constructor(basePath: string, followSymbolicLinks: boolean, maxDepth: number, pathFilters: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>, subst: org.apache.logging.log4j.core.lookup.StrSubstitutor);
									public getBasePath(): java.nio.file.Path;
									public execute(visitor: java.nio.file.FileVisitor<java.nio.file.Path>): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class Action extends java.lang.Object implements java.lang.Runnable {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.Action>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rolling.action.Action interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										execute(): boolean;
										close(): void;
										isComplete(): boolean;
										run(): void;
									});
									public constructor();
									public close(): void;
									public isComplete(): boolean;
									public execute(): boolean;
									public run(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class CommonsCompressAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.CommonsCompressAction>;
									public constructor();
									public static execute(name: string, source: java.io.File, destination: java.io.File, deleteSource: boolean): boolean;
									public close(): void;
									public isComplete(): boolean;
									public reportException(ex: java.lang.Exception): void;
									public isDeleteSource(): boolean;
									public execute(): boolean;
									public toString(): string;
									public constructor(name: string, source: java.io.File, destination: java.io.File, deleteSource: boolean);
									public getName(): string;
									public getDestination(): java.io.File;
									public getSource(): java.io.File;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class CompositeAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.CompositeAction>;
									public constructor();
									public close(): void;
									public isComplete(): boolean;
									public getActions(): native.Array<org.apache.logging.log4j.core.appender.rolling.action.Action>;
									public execute(): boolean;
									public isStopOnError(): boolean;
									public toString(): string;
									public constructor(actions: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.Action>, stopOnError: boolean);
									public run(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class DeleteAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.DeleteAction>;
									public delete(path: java.nio.file.Path): void;
									public close(): void;
									public isComplete(): boolean;
									public execute(): boolean;
									public static createDeleteAction(basePath: string, followLinks: boolean, maxDepth: number, testMode: boolean, sorterParameter: org.apache.logging.log4j.core.appender.rolling.action.PathSorter, pathConditions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>, scriptCondition: org.apache.logging.log4j.core.appender.rolling.action.ScriptCondition, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.action.DeleteAction;
									public isTestMode(): boolean;
									public createFileVisitor(visitorBaseDir: java.nio.file.Path, conditions: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): java.nio.file.FileVisitor<java.nio.file.Path>;
									public createFileVisitor(path0: java.nio.file.Path, list1: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): java.nio.file.FileVisitor<java.nio.file.Path>;
									public execute(visitor: java.nio.file.FileVisitor<java.nio.file.Path>): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class DeletingVisitor extends java.nio.file.SimpleFileVisitor<java.nio.file.Path> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor>;
									public constructor();
									public visitFile(file: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): java.nio.file.FileVisitResult;
									public postVisitDirectory(dir: any, exc: java.io.IOException): java.nio.file.FileVisitResult;
									public visitFileFailed(file: java.nio.file.Path, ioException: java.io.IOException): java.nio.file.FileVisitResult;
									public delete(file: java.nio.file.Path): void;
									public isTestMode(): boolean;
									public preVisitDirectory(dir: any, attrs: java.nio.file.attribute.BasicFileAttributes): java.nio.file.FileVisitResult;
									public visitFile(file: any, attrs: java.nio.file.attribute.BasicFileAttributes): java.nio.file.FileVisitResult;
									public visitFileFailed(file: any, exc: java.io.IOException): java.nio.file.FileVisitResult;
									public constructor(basePath: java.nio.file.Path, pathConditions: java.util.List<any>, testMode: boolean);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class Duration extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.Duration>;
									public static ZERO: org.apache.logging.log4j.core.appender.rolling.action.Duration;
									public hashCode(): number;
									public equals(obj: any): boolean;
									public compareTo(other: org.apache.logging.log4j.core.appender.rolling.action.Duration): number;
									public toMillis(): number;
									public toString(): string;
									public static parse(text: string): org.apache.logging.log4j.core.appender.rolling.action.Duration;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class FileRenameAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.FileRenameAction>;
									public constructor();
									public constructor(src: java.io.File, dst: java.io.File, renameEmptyFiles: boolean);
									public close(): void;
									public isComplete(): boolean;
									public static execute(source: java.io.File, destination: java.io.File, renameEmptyFiles: boolean): boolean;
									public execute(): boolean;
									public toString(): string;
									public isRenameEmptyFiles(): boolean;
									public getDestination(): java.io.File;
									public getSource(): java.io.File;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class GzCompressAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.GzCompressAction>;
									public constructor();
									public close(): void;
									public isComplete(): boolean;
									public reportException(ex: java.lang.Exception): void;
									public isDeleteSource(): boolean;
									public constructor(source: java.io.File, destination: java.io.File, deleteSource: boolean, compressionLevel: number);
									/** @deprecated */
									public constructor(source: java.io.File, destination: java.io.File, deleteSource: boolean);
									public toString(): string;
									/** @deprecated */
									public static execute(source: java.io.File, destination: java.io.File, deleteSource: boolean): boolean;
									public execute(): boolean;
									public static execute(source: java.io.File, destination: java.io.File, deleteSource: boolean, compressionLevel: number): boolean;
									public getDestination(): java.io.File;
									public getSource(): java.io.File;
								}
								export module GzCompressAction {
									export class ConfigurableLevelGZIPOutputStream extends java.util.zip.GZIPOutputStream {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.GzCompressAction.ConfigurableLevelGZIPOutputStream>;
										public flush(): void;
										public close(): void;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class IfAccumulatedFileCount extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileCount>;
									public getNestedConditions(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									public accept(basePath: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
									public toString(): string;
									public static createFileCountCondition(threshold: number, nestedConditions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileCount;
									public beforeFileTreeWalk(): void;
									public getThresholdCount(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class IfAccumulatedFileSize extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileSize>;
									public getNestedConditions(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									public static createFileSizeCondition(size: string, nestedConditions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileSize;
									public getThresholdBytes(): number;
									public accept(basePath: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
									public toString(): string;
									public beforeFileTreeWalk(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class IfAll extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.IfAll>;
									public static beforeFileTreeWalk(nestedConditions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): void;
									public static accept(list: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>, baseDir: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
									public toString(): string;
									public static createAndCondition(components: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): org.apache.logging.log4j.core.appender.rolling.action.IfAll;
									public beforeFileTreeWalk(): void;
									public getDeleteFilters(): native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									public accept(baseDir: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class IfAny extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.IfAny>;
									public static createOrCondition(components: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): org.apache.logging.log4j.core.appender.rolling.action.IfAny;
									public toString(): string;
									public beforeFileTreeWalk(): void;
									public getDeleteFilters(): native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									public accept(baseDir: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class IfFileName extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.IfFileName>;
									public getSyntaxAndPattern(): string;
									public getNestedConditions(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									public accept(basePath: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
									public toString(): string;
									public beforeFileTreeWalk(): void;
									public static createNameCondition(glob: string, regex: string, nestedConditions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): org.apache.logging.log4j.core.appender.rolling.action.IfFileName;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class IfLastModified extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.IfLastModified>;
									public getNestedConditions(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									public static createAgeCondition(age: org.apache.logging.log4j.core.appender.rolling.action.Duration, nestedConditions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): org.apache.logging.log4j.core.appender.rolling.action.IfLastModified;
									public accept(basePath: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
									public toString(): string;
									public getAge(): org.apache.logging.log4j.core.appender.rolling.action.Duration;
									public beforeFileTreeWalk(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class IfNot extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.IfNot>;
									public static createNotCondition(condition: org.apache.logging.log4j.core.appender.rolling.action.PathCondition): org.apache.logging.log4j.core.appender.rolling.action.IfNot;
									public toString(): string;
									public getWrappedFilter(): org.apache.logging.log4j.core.appender.rolling.action.PathCondition;
									public beforeFileTreeWalk(): void;
									public accept(baseDir: java.nio.file.Path, relativePath: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class PathCondition extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rolling.action.PathCondition interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										beforeFileTreeWalk(): void;
										accept(path0: java.nio.file.Path, path1: java.nio.file.Path, basicFileAttributes2: java.nio.file.attribute.BasicFileAttributes): boolean;
									});
									public constructor();
									public accept(path0: java.nio.file.Path, path1: java.nio.file.Path, basicFileAttributes2: java.nio.file.attribute.BasicFileAttributes): boolean;
									public beforeFileTreeWalk(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class PathSortByModificationTime extends java.lang.Object implements org.apache.logging.log4j.core.appender.rolling.action.PathSorter, java.io.Serializable {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.PathSortByModificationTime>;
									public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public compare(path1: org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes, path2: org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes): number;
									public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static createSorter(recentFirst: boolean): org.apache.logging.log4j.core.appender.rolling.action.PathSorter;
									public static naturalOrder(): java.util.Comparator<any>;
									public reversed(): java.util.Comparator<any>;
									public constructor(recentFirst: boolean);
									public isRecentFirst(): boolean;
									public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public equals(obj: any): boolean;
									public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
									public static reverseOrder(): java.util.Comparator<any>;
									public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public compare(object0: any, object1: any): number;
									public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class PathSorter extends java.util.Comparator<org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.PathSorter>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.appender.rolling.action.PathSorter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										compare(object0: any, object1: any): number;
										equals(object0: any): boolean;
										reversed(): java.util.Comparator<any>;
										thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
										thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
										reverseOrder(): java.util.Comparator<any>;
										naturalOrder(): java.util.Comparator<any>;
										nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
									});
									public constructor();
									public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static naturalOrder(): java.util.Comparator<any>;
									public reversed(): java.util.Comparator<any>;
									public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public equals(obj: any): boolean;
									public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
									public static reverseOrder(): java.util.Comparator<any>;
									public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public compare(object0: any, object1: any): number;
									public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class PathWithAttributes extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes>;
									public getPath(): java.nio.file.Path;
									public constructor(path: java.nio.file.Path, attributes: java.nio.file.attribute.BasicFileAttributes);
									public toString(): string;
									public getAttributes(): java.nio.file.attribute.BasicFileAttributes;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class PosixViewAttributeAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction>;
									public createFileVisitor(basePath: java.nio.file.Path, conditions: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): java.nio.file.FileVisitor<java.nio.file.Path>;
									public close(): void;
									public isComplete(): boolean;
									public execute(): boolean;
									public static newBuilder(): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
									public getFileGroup(): string;
									public getFileOwner(): string;
									public toString(): string;
									public createFileVisitor(path0: java.nio.file.Path, list1: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): java.nio.file.FileVisitor<java.nio.file.Path>;
									public getFilePermissions(): java.util.Set<java.nio.file.attribute.PosixFilePermission>;
									public execute(visitor: java.nio.file.FileVisitor<java.nio.file.Path>): boolean;
								}
								export module PosixViewAttributeAction {
									export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder>;
										public withFileOwner(fileOwner: string): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public withSubst(subst: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public withFilePermissionsString(filePermissionsString: string): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public withFileGroup(fileGroup: string): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public constructor();
										public withFollowLinks(followLinks: boolean): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public withConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public build(): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction;
										public withPathConditions(pathConditions: native.Array<org.apache.logging.log4j.core.appender.rolling.action.PathCondition>): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public withMaxDepth(maxDepth: number): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public withFilePermissions(filePermissions: java.util.Set<java.nio.file.attribute.PosixFilePermission>): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
										public build(): any;
										public withBasePath(basePath: string): org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction.Builder;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class ScriptCondition extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.ScriptCondition>;
									public static createCondition(script: org.apache.logging.log4j.core.script.AbstractScript, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.rolling.action.ScriptCondition;
									public constructor(script: org.apache.logging.log4j.core.script.AbstractScript, configuration: org.apache.logging.log4j.core.config.Configuration);
									public selectFilesToDelete(basePath: java.nio.file.Path, candidates: java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes>): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class SortingVisitor extends java.nio.file.SimpleFileVisitor<java.nio.file.Path> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.SortingVisitor>;
									public visitFile(path: java.nio.file.Path, attrs: java.nio.file.attribute.BasicFileAttributes): java.nio.file.FileVisitResult;
									public constructor();
									public postVisitDirectory(dir: any, exc: java.io.IOException): java.nio.file.FileVisitResult;
									public constructor(sorter: org.apache.logging.log4j.core.appender.rolling.action.PathSorter);
									public visitFileFailed(file: java.nio.file.Path, ioException: java.io.IOException): java.nio.file.FileVisitResult;
									public getSortedPaths(): java.util.List<org.apache.logging.log4j.core.appender.rolling.action.PathWithAttributes>;
									public preVisitDirectory(dir: any, attrs: java.nio.file.attribute.BasicFileAttributes): java.nio.file.FileVisitResult;
									public visitFile(file: any, attrs: java.nio.file.attribute.BasicFileAttributes): java.nio.file.FileVisitResult;
									public visitFileFailed(file: any, exc: java.io.IOException): java.nio.file.FileVisitResult;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module rolling {
							export module action {
								export class ZipCompressAction extends org.apache.logging.log4j.core.appender.rolling.action.AbstractAction {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.rolling.action.ZipCompressAction>;
									public constructor();
									public close(): void;
									public isComplete(): boolean;
									public reportException(ex: java.lang.Exception): void;
									public static execute(source: java.io.File, destination: java.io.File, deleteSource: boolean, level: number): boolean;
									public isDeleteSource(): boolean;
									public getLevel(): number;
									public execute(): boolean;
									public constructor(source: java.io.File, destination: java.io.File, deleteSource: boolean, level: number);
									public toString(): string;
									public getDestination(): java.io.File;
									public getSource(): java.io.File;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module routing {
							export class IdlePurgePolicy extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.appender.routing.PurgePolicy, java.lang.Runnable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy>;
								public toString(): string;
								public purge(): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public constructor(timeToLive: number, checkInterval: number, scheduler: org.apache.logging.log4j.core.config.ConfigurationScheduler);
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public stop(): void;
								public update(key: string, event: org.apache.logging.log4j.core.LogEvent): void;
								public constructor();
								public run(): void;
								public static createPurgePolicy(timeToLive: string, checkInterval: string, timeUnit: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.routing.PurgePolicy;
								public initialize(): void;
								public initialize(routingAppender: org.apache.logging.log4j.core.appender.routing.RoutingAppender): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module routing {
							export class PurgePolicy extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.PurgePolicy>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.appender.routing.PurgePolicy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									purge(): void;
									update(string0: string, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
									initialize(routingAppender0: org.apache.logging.log4j.core.appender.routing.RoutingAppender): void;
								});
								public constructor();
								public update(string0: string, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
								public purge(): void;
								public initialize(routingAppender0: org.apache.logging.log4j.core.appender.routing.RoutingAppender): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module routing {
							export class Route extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.Route>;
								public getNode(): org.apache.logging.log4j.core.config.Node;
								public toString(): string;
								public getAppenderRef(): string;
								public getKey(): string;
								public static createRoute(appenderRef: string, key: string, node: org.apache.logging.log4j.core.config.Node): org.apache.logging.log4j.core.appender.routing.Route;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module routing {
							export class Routes extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.Routes>;
								public getRoute(key: string): org.apache.logging.log4j.core.appender.routing.Route;
								public getRoutes(): native.Array<org.apache.logging.log4j.core.appender.routing.Route>;
								public toString(): string;
								/** @deprecated */
								public static createRoutes(pattern: string, routes: native.Array<org.apache.logging.log4j.core.appender.routing.Route>): org.apache.logging.log4j.core.appender.routing.Routes;
								public static newBuilder(): org.apache.logging.log4j.core.appender.routing.Routes.Builder;
								public getPattern(event: org.apache.logging.log4j.core.LogEvent, scriptStaticVariables: java.util.concurrent.ConcurrentMap<any,any>): string;
								public getPatternScript(): org.apache.logging.log4j.core.script.AbstractScript;
							}
							export module Routes {
								export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.routing.Routes> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.Routes.Builder>;
									public getPattern(): string;
									public constructor();
									public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
									public build(): any;
									public withPatternScript(patternScript: org.apache.logging.log4j.core.script.AbstractScript): org.apache.logging.log4j.core.appender.routing.Routes.Builder;
									public withPattern(pattern: string): org.apache.logging.log4j.core.appender.routing.Routes.Builder;
									public build(): org.apache.logging.log4j.core.appender.routing.Routes;
									public getPatternScript(): org.apache.logging.log4j.core.script.AbstractScript;
									public getRoutes(): native.Array<org.apache.logging.log4j.core.appender.routing.Route>;
									public withConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.appender.routing.Routes.Builder;
									public withRoutes(routes: native.Array<org.apache.logging.log4j.core.appender.routing.Route>): org.apache.logging.log4j.core.appender.routing.Routes.Builder;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module appender {
						export module routing {
							export class RoutingAppender extends org.apache.logging.log4j.core.appender.AbstractAppender {
								public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.RoutingAppender>;
								public static STATIC_VARIABLES_KEY: string;
								public getScriptStaticVariables(): java.util.concurrent.ConcurrentMap<any,any>;
								public setHandler(handler: org.apache.logging.log4j.core.ErrorHandler): void;
								public getDefaultRouteScript(): org.apache.logging.log4j.core.script.AbstractScript;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public static newBuilder(): org.apache.logging.log4j.core.appender.routing.RoutingAppender.Builder<any>;
								public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public getHandler(): org.apache.logging.log4j.core.ErrorHandler;
								/** @deprecated */
								public static createAppender(name: string, ignore: string, routes: org.apache.logging.log4j.core.appender.routing.Routes, config: org.apache.logging.log4j.core.config.Configuration, rewritePolicy: org.apache.logging.log4j.core.appender.rewrite.RewritePolicy, purgePolicy: org.apache.logging.log4j.core.appender.routing.PurgePolicy, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.appender.routing.RoutingAppender;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getPurgePolicy(): org.apache.logging.log4j.core.appender.routing.PurgePolicy;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getDefaultRoute(): org.apache.logging.log4j.core.appender.routing.Route;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public hasFilter(): boolean;
								public requiresLocation(): boolean;
								public append(event: org.apache.logging.log4j.core.LogEvent): void;
								public deleteAppender(key: string): void;
								public getName(): string;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public ignoreExceptions(): boolean;
								public getRewritePolicy(): org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;
								public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.config.AppenderControl>;
								public getLayout(): org.apache.logging.log4j.core.Layout<any>;
								public getRoutes(): org.apache.logging.log4j.core.appender.routing.Routes;
								public stop(): void;
								public start(): void;
							}
							export module RoutingAppender {
								export class Builder<B>  extends org.apache.logging.log4j.core.appender.AbstractAppender.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.appender.routing.RoutingAppender>  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.RoutingAppender.Builder<any>>;
									public constructor();
									public withRoutes(routes: org.apache.logging.log4j.core.appender.routing.Routes): any;
									public getRewritePolicy(): org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;
									public getPurgePolicy(): org.apache.logging.log4j.core.appender.routing.PurgePolicy;
									public build(): any;
									public withPurgePolicy(purgePolicy: org.apache.logging.log4j.core.appender.routing.PurgePolicy): void;
									public withRewritePolicy(rewritePolicy: org.apache.logging.log4j.core.appender.rewrite.RewritePolicy): any;
									public withDefaultRouteScript(defaultRouteScript: org.apache.logging.log4j.core.script.AbstractScript): any;
									public getRoutes(): org.apache.logging.log4j.core.appender.routing.Routes;
									public getDefaultRouteScript(): org.apache.logging.log4j.core.script.AbstractScript;
									public build(): org.apache.logging.log4j.core.appender.routing.RoutingAppender;
								}
								export class CreatedRouteAppenderControl extends org.apache.logging.log4j.core.appender.routing.RoutingAppender.RouteAppenderControl {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.RoutingAppender.CreatedRouteAppenderControl>;
									public getFilter(): org.apache.logging.log4j.core.Filter;
									public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
									public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public hasFilter(): boolean;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public stop(future: java.util.concurrent.Future<any>): boolean;
								}
								export class ReferencedRouteAppenderControl extends org.apache.logging.log4j.core.appender.routing.RoutingAppender.RouteAppenderControl {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.RoutingAppender.ReferencedRouteAppenderControl>;
									public getFilter(): org.apache.logging.log4j.core.Filter;
									public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
									public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public hasFilter(): boolean;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public stop(future: java.util.concurrent.Future<any>): boolean;
								}
								export abstract class RouteAppenderControl extends org.apache.logging.log4j.core.config.AppenderControl {
									public static class: java.lang.Class<org.apache.logging.log4j.core.appender.routing.RoutingAppender.RouteAppenderControl>;
									public getFilter(): org.apache.logging.log4j.core.Filter;
									public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
									public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public hasFilter(): boolean;
									public stop(): void;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public stop(future: java.util.concurrent.Future<any>): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export abstract class AbstractAsyncExceptionHandler<T>  extends com.lmax.disruptor.ExceptionHandler<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AbstractAsyncExceptionHandler<any>>;
							public handleOnShutdownException(throwable: java.lang.Throwable): void;
							public handleOnStartException(throwable: java.lang.Throwable): void;
							public handleEventException(throwable: java.lang.Throwable, sequence: number, event: any): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class ArrayBlockingQueueFactory<E>  extends org.apache.logging.log4j.core.async.BlockingQueueFactory<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.ArrayBlockingQueueFactory<any>>;
							public constructor();
							public static createFactory(): org.apache.logging.log4j.core.async.ArrayBlockingQueueFactory<any>;
							public create(capacity: number): java.util.concurrent.BlockingQueue<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLogger extends org.apache.logging.log4j.core.Logger implements com.lmax.disruptor.EventTranslatorVararg<org.apache.logging.log4j.core.async.RingBufferLogEvent>  {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLogger>;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
							public constructor(name: string);
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): void;
							public constructor(context: org.apache.logging.log4j.core.LoggerContext, name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory, loggerDisruptor: org.apache.logging.log4j.core.async.AsyncLoggerDisruptor);
							public actualAsyncLog(event: org.apache.logging.log4j.core.async.RingBufferLogEvent): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): boolean;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): void;
							public log(level: org.apache.logging.log4j.Level, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker): boolean;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): boolean;
							public constructor(context: org.apache.logging.log4j.core.LoggerContext, name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory);
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message): void;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
							public constructor(name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory);
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any): void;
							public get(): any;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): void;
							public logMessage(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, fqcn: string, location: java.lang.StackTraceElement, message: org.apache.logging.log4j.message.Message, throwable: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, fqcn: string, location: java.lang.StackTraceElement, message: org.apache.logging.log4j.message.Message, throwable: java.lang.Throwable): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): boolean;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): void;
							public constructor();
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
							public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.Supplier<any>): void;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): boolean;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): void;
							public log(level: org.apache.logging.log4j.Level, message: string): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): boolean;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any): void;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
							public get(): org.apache.logging.log4j.core.config.LoggerConfig;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, msg: org.apache.logging.log4j.message.Message): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): boolean;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): boolean;
							public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.Supplier<any>, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): boolean;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): boolean;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): boolean;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: org.apache.logging.log4j.message.Message, thrown: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): void;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any): void;
							public translateTo(event: org.apache.logging.log4j.core.async.RingBufferLogEvent, sequence: number, objects2: native.Array<any>): void;
							public log(level: org.apache.logging.log4j.Level, message: any, t: java.lang.Throwable): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
							public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.MessageSupplier): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level): boolean;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, t: java.lang.Throwable): boolean;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, message: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.Supplier<any>): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any): void;
							public log(level: org.apache.logging.log4j.Level, message: string, params: native.Array<any>): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, params: native.Array<any>): void;
							public log(level: org.apache.logging.log4j.Level, message: string, t: java.lang.Throwable): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, paramSuppliers: native.Array<org.apache.logging.log4j.util.Supplier<any>>): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): boolean;
							public updateConfiguration(newConfig: org.apache.logging.log4j.core.config.Configuration): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: any, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): boolean;
							public log(level: org.apache.logging.log4j.Level, msgSupplier: org.apache.logging.log4j.util.MessageSupplier, t: java.lang.Throwable): void;
							public log(level: org.apache.logging.log4j.Level, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any): boolean;
							public log(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any): void;
							public logMessage(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): void;
							public logIfEnabled(fqcn: string, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): void;
							public isEnabled(level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, message: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): boolean;
						}
						export module AsyncLogger {
							export abstract class TranslatorType extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLogger.TranslatorType>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerConfig extends org.apache.logging.log4j.core.config.LoggerConfig {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerConfig>;
							public constructor(name: string, appenders: java.util.List<org.apache.logging.log4j.core.config.AppenderRef>, filter: org.apache.logging.log4j.core.Filter, level: org.apache.logging.log4j.Level, additive: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, includeLocation: boolean);
							/** @deprecated */
							public static includeLocation(includeLocationConfigValue: string): boolean;
							/** @deprecated */
							public static createLogger(additivity: string, levelName: string, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
							/** @deprecated */
							public static createLogger(additivity: string, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
							public createRingBufferAdmin(contextName: string): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public requiresLocation(): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public static includeLocation(includeLocationConfigValue: string): boolean;
							public log(event: org.apache.logging.log4j.core.LogEvent, predicate: org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate): void;
							public stop(): void;
							public start(): void;
							public static includeLocation(includeLocationConfigValue: string, configuration: org.apache.logging.log4j.core.config.Configuration): boolean;
							public static createLogger(additivity: boolean, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
							public callAppenders(event: org.apache.logging.log4j.core.LogEvent): void;
							public constructor();
							public log(loggerName: string, fqcn: string, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public constructor(name: string, level: org.apache.logging.log4j.Level, additive: boolean);
							public log(loggerName: string, fqcn: string, location: java.lang.StackTraceElement, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public log(event: org.apache.logging.log4j.core.LogEvent): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
						}
						export module AsyncLoggerConfig {
							export class RootLogger extends org.apache.logging.log4j.core.config.LoggerConfig {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerConfig.RootLogger>;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public static createLogger(additivity: boolean, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public constructor();
								public constructor(name: string, appenders: java.util.List<org.apache.logging.log4j.core.config.AppenderRef>, filter: org.apache.logging.log4j.core.Filter, level: org.apache.logging.log4j.Level, additive: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, includeLocation: boolean);
								/** @deprecated */
								public static createLogger(additivity: string, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								/** @deprecated */
								public static createLogger(additivity: string, levelName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
								public static createLogger(additivity: string, level: org.apache.logging.log4j.Level, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public constructor(name: string, level: org.apache.logging.log4j.Level, additive: boolean);
								public hasFilter(): boolean;
								public requiresLocation(): boolean;
								public stop(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerConfigDefaultExceptionHandler extends org.apache.logging.log4j.core.async.AbstractAsyncExceptionHandler<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor.Log4jEventWrapper> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerConfigDefaultExceptionHandler>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerConfigDelegate extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								createRingBufferAdmin(string0: string, string1: string): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
								getEventRoute(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.async.EventRoute;
								enqueueEvent(logEvent0: org.apache.logging.log4j.core.LogEvent, asyncLoggerConfig1: org.apache.logging.log4j.core.async.AsyncLoggerConfig): void;
								tryEnqueue(logEvent0: org.apache.logging.log4j.core.LogEvent, asyncLoggerConfig1: org.apache.logging.log4j.core.async.AsyncLoggerConfig): boolean;
								setLogEventFactory(logEventFactory0: org.apache.logging.log4j.core.impl.LogEventFactory): void;
							});
							public constructor();
							public enqueueEvent(logEvent0: org.apache.logging.log4j.core.LogEvent, asyncLoggerConfig1: org.apache.logging.log4j.core.async.AsyncLoggerConfig): void;
							public getEventRoute(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.async.EventRoute;
							public tryEnqueue(logEvent0: org.apache.logging.log4j.core.LogEvent, asyncLoggerConfig1: org.apache.logging.log4j.core.async.AsyncLoggerConfig): boolean;
							public createRingBufferAdmin(string0: string, string1: string): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
							public setLogEventFactory(logEventFactory0: org.apache.logging.log4j.core.impl.LogEventFactory): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerConfigDisruptor extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor>;
							public constructor();
							public enqueueEvent(event: org.apache.logging.log4j.core.LogEvent, asyncLoggerConfig: org.apache.logging.log4j.core.async.AsyncLoggerConfig): void;
							public tryEnqueue(event: org.apache.logging.log4j.core.LogEvent, asyncLoggerConfig: org.apache.logging.log4j.core.async.AsyncLoggerConfig): boolean;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public start(): void;
							public getEventRoute(logLevel: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.async.EventRoute;
							public createRingBufferAdmin(contextName: string, loggerConfigName: string): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
							public setLogEventFactory(logEventFactory: org.apache.logging.log4j.core.impl.LogEventFactory): void;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
						}
						export module AsyncLoggerConfigDisruptor {
							export class Log4jEventWrapper extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor.Log4jEventWrapper>;
								public toString(): string;
								public clear(): void;
								public constructor(mutableLogEvent: org.apache.logging.log4j.core.impl.MutableLogEvent);
								public constructor();
							}
							export class Log4jEventWrapperHandler extends com.lmax.disruptor.SequenceReportingEventHandler<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor.Log4jEventWrapper> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor.Log4jEventWrapperHandler>;
								public setSequenceCallback(sequenceCallback: com.lmax.disruptor.Sequence): void;
								public onEvent(event: org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor.Log4jEventWrapper, sequence: number, endOfBatch: boolean): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerContext extends org.apache.logging.log4j.core.LoggerContext {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerContext>;
							public setName(name: string): void;
							public close(): void;
							public removeObject(key: string, value: any): boolean;
							public setUseThreadLocals(useThreadLocals: boolean): void;
							public constructor(name: string);
							public getLogger(string0: string): org.apache.logging.log4j.spi.ExtendedLogger;
							public constructor(name: string, externalContext: any, configLocn: java.net.URI);
							public stop(): void;
							public start(): void;
							public hasLogger(name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory): boolean;
							public getLogger(name: string): org.apache.logging.log4j.core.Logger;
							public start(config: org.apache.logging.log4j.core.config.Configuration): void;
							public getLogger(string0: string, messageFactory1: org.apache.logging.log4j.message.MessageFactory): org.apache.logging.log4j.spi.ExtendedLogger;
							public constructor();
							public hasLogger(name: string, messageFactoryClass: java.lang.Class<any>): boolean;
							public onChange(reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable): void;
							public createRingBufferAdmin(): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
							public putObject(key: string, value: any): any;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public getExternalContext(): any;
							public removeObject(key: string): any;
							public newInstance(ctx: org.apache.logging.log4j.core.LoggerContext, name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory): org.apache.logging.log4j.core.Logger;
							public getObject(key: string): any;
							public addShutdownListener(listener: org.apache.logging.log4j.spi.LoggerContextShutdownAware): void;
							public constructor(name: string, externalContext: any);
							public getLogger(name: string, messageFactory: org.apache.logging.log4j.message.MessageFactory): org.apache.logging.log4j.core.Logger;
							public terminate(): void;
							public constructor(name: string, externalContext: any, configLocn: string);
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getListeners(): java.util.List<org.apache.logging.log4j.spi.LoggerContextShutdownAware>;
							public hasLogger(name: string): boolean;
							public putObjectIfAbsent(key: string, value: any): any;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerContextSelector extends org.apache.logging.log4j.core.selector.ClassLoaderContextSelector {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerContextSelector>;
							public constructor();
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public toContextMapKey(loader: java.lang.ClassLoader): string;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): org.apache.logging.log4j.core.LoggerContext;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public defaultContextName(): string;
							public getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public removeContext(context: org.apache.logging.log4j.core.LoggerContext): void;
							public createContext(name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public contextShutdown(loggerContext: org.apache.logging.log4j.spi.LoggerContext): void;
							public static isSelected(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerDefaultExceptionHandler extends org.apache.logging.log4j.core.async.AbstractAsyncExceptionHandler<org.apache.logging.log4j.core.async.RingBufferLogEvent> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerDefaultExceptionHandler>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncLoggerDisruptor extends org.apache.logging.log4j.core.AbstractLifeCycle {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncLoggerDisruptor>;
							public createRingBufferAdmin(jmxContextName: string): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public start(): void;
							public setUseThreadLocals(allow: boolean): void;
							public getContextName(): string;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public setContextName(name: string): void;
							public isUseThreadLocals(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncQueueFullMessageUtil extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncQueueFullMessageUtil>;
							public static logWarningToStatusLogger(): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncQueueFullPolicy extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncQueueFullPolicy>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.async.AsyncQueueFullPolicy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getRoute(long0: number, level1: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.async.EventRoute;
							});
							public constructor();
							public getRoute(long0: number, level1: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.async.EventRoute;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class AsyncQueueFullPolicyFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.AsyncQueueFullPolicyFactory>;
							public constructor();
							public static create(): org.apache.logging.log4j.core.async.AsyncQueueFullPolicy;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class BlockingQueueFactory<E>  extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.BlockingQueueFactory<any>>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.async.BlockingQueueFactory<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								create(int0: number): java.util.concurrent.BlockingQueue<E>;
							});
							public constructor();
							public static ELEMENT_TYPE: string;
							public create(int0: number): java.util.concurrent.BlockingQueue<E>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class DefaultAsyncQueueFullPolicy extends java.lang.Object implements org.apache.logging.log4j.core.async.AsyncQueueFullPolicy {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.DefaultAsyncQueueFullPolicy>;
							public constructor();
							public getRoute(backgroundThreadId: number, level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.async.EventRoute;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class DiscardingAsyncQueueFullPolicy extends org.apache.logging.log4j.core.async.DefaultAsyncQueueFullPolicy {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.DiscardingAsyncQueueFullPolicy>;
							public constructor();
							public constructor(thresholdLevel: org.apache.logging.log4j.Level);
							public getThresholdLevel(): org.apache.logging.log4j.Level;
							public getRoute(backgroundThreadId: number, level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.async.EventRoute;
							public static getDiscardCount(router: org.apache.logging.log4j.core.async.AsyncQueueFullPolicy): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class DisruptorBlockingQueueFactory<E>  extends org.apache.logging.log4j.core.async.BlockingQueueFactory<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.DisruptorBlockingQueueFactory<any>>;
							public static createFactory(spinPolicy: com.conversantmedia.util.concurrent.SpinPolicy): org.apache.logging.log4j.core.async.DisruptorBlockingQueueFactory<any>;
							public create(capacity: number): java.util.concurrent.BlockingQueue<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class DisruptorUtil extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.DisruptorUtil>;
							public static getExecutorThreadId(executor: java.util.concurrent.ExecutorService): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export abstract class EventRoute {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.EventRoute>;
							public static ENQUEUE: org.apache.logging.log4j.core.async.EventRoute;
							public static SYNCHRONOUS: org.apache.logging.log4j.core.async.EventRoute;
							public static DISCARD: org.apache.logging.log4j.core.async.EventRoute;
							public static valueOf(name: string): org.apache.logging.log4j.core.async.EventRoute;
							public static values(): native.Array<org.apache.logging.log4j.core.async.EventRoute>;
							public logMessage(asyncLoggerConfig0: org.apache.logging.log4j.core.async.AsyncLoggerConfig, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public logMessage(asyncAppender0: org.apache.logging.log4j.core.appender.AsyncAppender, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
							public logMessage(asyncLogger0: org.apache.logging.log4j.core.async.AsyncLogger, string1: string, level2: org.apache.logging.log4j.Level, marker3: org.apache.logging.log4j.Marker, message4: org.apache.logging.log4j.message.Message, throwable5: java.lang.Throwable): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class InternalAsyncUtil extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.InternalAsyncUtil>;
							public constructor();
							public static makeMessageImmutable(msg: org.apache.logging.log4j.message.Message): org.apache.logging.log4j.message.Message;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class JCToolsBlockingQueueFactory<E>  extends org.apache.logging.log4j.core.async.BlockingQueueFactory<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory<any>>;
							public static createFactory(waitStrategy: org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy): org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory<any>;
							public create(capacity: number): java.util.concurrent.BlockingQueue<any>;
						}
						export module JCToolsBlockingQueueFactory {
							export class Idle extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.Idle>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory$Idle interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									idle(int0: number): number;
								});
								public constructor();
								public idle(int0: number): number;
							}
							export class MpscBlockingQueue<E>  extends org.jctools.queues.MpscArrayQueue<any> implements java.util.concurrent.BlockingQueue<any>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.MpscBlockingQueue<any>>;
								public toArray(): native.Array<any>;
								public size(): number;
								public peek(): any;
								public remove(): any;
								public removeAll(collection0: java.util.Collection<any>): boolean;
								public element(): any;
								public poll(timeout: number, unit: java.util.concurrent.TimeUnit): any;
								public offer(e: any): boolean;
								public removeIf(filter: any /* any*/): boolean;
								public equals(object0: any): boolean;
								public contains(object0: any): boolean;
								public put(e: any): void;
								public spliterator(): java.util.Spliterator<any>;
								public toArray(objects0: native.Array<any>): native.Array<any>;
								public stream(): java.util.stream.Stream<any>;
								public forEach(action: any /* any*/): void;
								public offer(e: any, timeout: number, unit: java.util.concurrent.TimeUnit): boolean;
								public addAll(collection0: java.util.Collection<any>): boolean;
								public add(object0: any): boolean;
								public parallelStream(): java.util.stream.Stream<any>;
								public take(): any;
								public remove(object0: any): boolean;
								public poll(): any;
								public clear(): void;
								public retainAll(collection0: java.util.Collection<any>): boolean;
								public drainTo(c: java.util.Collection<any>, maxElements: number): number;
								public isEmpty(): boolean;
								public containsAll(collection0: java.util.Collection<any>): boolean;
								public iterator(): java.util.Iterator<any>;
								public drainTo(c: java.util.Collection<any>): number;
								public remainingCapacity(): number;
								public hashCode(): number;
							}
							export class WaitStrategy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy>;
								public static SPIN: org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy;
								public static YIELD: org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy;
								public static PARK: org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy;
								public static PROGRESSIVE: org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy;
								public static valueOf(name: string): org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy;
								public static values(): native.Array<org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.WaitStrategy>;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class LinkedTransferQueueFactory<E>  extends org.apache.logging.log4j.core.async.BlockingQueueFactory<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.LinkedTransferQueueFactory<any>>;
							public constructor();
							public create(capacity: number): java.util.concurrent.BlockingQueue<any>;
							public static createFactory(): org.apache.logging.log4j.core.async.LinkedTransferQueueFactory<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class RingBufferLogEvent extends java.lang.Object implements org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.message.ReusableMessage, java.lang.CharSequence, org.apache.logging.log4j.message.ParameterVisitable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.RingBufferLogEvent>;
							public static FACTORY: org.apache.logging.log4j.core.async.RingBufferLogEvent.Factory;
							public getInstant(): org.apache.logging.log4j.core.time.Instant;
							public getContextMap(): java.util.Map<string,string>;
							public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
							public getMessage(): org.apache.logging.log4j.message.Message;
							public getSource(): java.lang.StackTraceElement;
							public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
							public toString(): string;
							public isIncludeLocation(): boolean;
							public getTimeMillis(): number;
							public length(): number;
							public getFormat(): string;
							/** @deprecated */
							public getContextMap(): java.util.Map<string,string>;
							public getLoggerFqcn(): string;
							public getNanoTime(): number;
							public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
							public chars(): java.util.stream.IntStream;
							public getMarker(): org.apache.logging.log4j.Marker;
							public memento(): org.apache.logging.log4j.message.Message;
							public getParameters(): native.Array<any>;
							public constructor();
							public getThreadName(): string;
							public setEndOfBatch(endOfBatch: boolean): void;
							public swapParameters(emptyReplacement: native.Array<any>): native.Array<any>;
							public getThreadPriority(): number;
							public getThreadId(): number;
							public initializeBuilder(builder: org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder): void;
							public setIncludeLocation(includeLocation: boolean): void;
							public clear(): void;
							public getParameterCount(): number;
							public forEachParameter(action: org.apache.logging.log4j.message.ParameterConsumer, state: any): void;
							public setValues(anAsyncLogger: org.apache.logging.log4j.core.async.AsyncLogger, aLoggerName: string, aMarker: org.apache.logging.log4j.Marker, theFqcn: string, aLevel: org.apache.logging.log4j.Level, msg: org.apache.logging.log4j.message.Message, aThrowable: java.lang.Throwable, mutableContextData: org.apache.logging.log4j.util.StringMap, aContextStack: org.apache.logging.log4j.ThreadContext.ContextStack, threadId: number, threadName: string, threadPriority: number, aLocation: java.lang.StackTraceElement, clock: org.apache.logging.log4j.core.util.Clock, nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
							public createMemento(): org.apache.logging.log4j.core.LogEvent;
							public charAt(index: number): string;
							public codePoints(): java.util.stream.IntStream;
							public execute(endOfBatch: boolean): void;
							public formatTo(buffer: java.lang.StringBuilder): void;
							public subSequence(start: number, end: number): string;
							public getThrown(): java.lang.Throwable;
							public getLevel(): org.apache.logging.log4j.Level;
							public getThrowable(): java.lang.Throwable;
							public getFormattedMessage(): string;
							public getLoggerName(): string;
							public toImmutable(): org.apache.logging.log4j.core.LogEvent;
							public isEndOfBatch(): boolean;
						}
						export module RingBufferLogEvent {
							export class Factory extends com.lmax.disruptor.EventFactory<org.apache.logging.log4j.core.async.RingBufferLogEvent> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.async.RingBufferLogEvent.Factory>;
								public newInstance(): org.apache.logging.log4j.core.async.RingBufferLogEvent;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class RingBufferLogEventHandler extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.RingBufferLogEventHandler>;
							public constructor();
							public setSequenceCallback(sequenceCallback: com.lmax.disruptor.Sequence): void;
							public getThreadId(): number;
							public onStart(): void;
							public onShutdown(): void;
							public onEvent(event: org.apache.logging.log4j.core.async.RingBufferLogEvent, sequence: number, endOfBatch: boolean): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export class RingBufferLogEventTranslator extends com.lmax.disruptor.EventTranslator<org.apache.logging.log4j.core.async.RingBufferLogEvent> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.RingBufferLogEventTranslator>;
							public marker: org.apache.logging.log4j.Marker;
							public fqcn: string;
							public level: org.apache.logging.log4j.Level;
							public message: org.apache.logging.log4j.message.Message;
							public thrown: java.lang.Throwable;
							public constructor();
							public setBasicValues(anAsyncLogger: org.apache.logging.log4j.core.async.AsyncLogger, aLoggerName: string, aMarker: org.apache.logging.log4j.Marker, theFqcn: string, aLevel: org.apache.logging.log4j.Level, msg: org.apache.logging.log4j.message.Message, aThrowable: java.lang.Throwable, aContextStack: org.apache.logging.log4j.ThreadContext.ContextStack, aLocation: java.lang.StackTraceElement, aClock: org.apache.logging.log4j.core.util.Clock, aNanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
							public updateThreadValues(): void;
							public translateTo(event: org.apache.logging.log4j.core.async.RingBufferLogEvent, sequence: number): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module async {
						export abstract class ThreadNameCachingStrategy {
							public static class: java.lang.Class<org.apache.logging.log4j.core.async.ThreadNameCachingStrategy>;
							public static CACHED: org.apache.logging.log4j.core.async.ThreadNameCachingStrategy;
							public static UNCACHED: org.apache.logging.log4j.core.async.ThreadNameCachingStrategy;
							public static values(): native.Array<org.apache.logging.log4j.core.async.ThreadNameCachingStrategy>;
							public static valueOf(name: string): org.apache.logging.log4j.core.async.ThreadNameCachingStrategy;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static create(): org.apache.logging.log4j.core.async.ThreadNameCachingStrategy;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export abstract class AbstractConfiguration extends org.apache.logging.log4j.core.filter.AbstractFilterable implements org.apache.logging.log4j.core.config.Configuration {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.AbstractConfiguration>;
							public rootNode: org.apache.logging.log4j.core.config.Node;
							public listeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>;
							public pluginPackages: java.util.List<string>;
							public pluginManager: org.apache.logging.log4j.core.config.plugins.util.PluginManager;
							public shutdownTimeoutMillis: number;
							public scriptManager: org.apache.logging.log4j.core.script.ScriptManager;
							public setName(name: string): void;
							public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
							public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
							public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public setPluginManager(pluginManager: org.apache.logging.log4j.core.config.plugins.util.PluginManager): void;
							public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public initializeWatchers(reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configSource: org.apache.logging.log4j.core.config.ConfigurationSource, monitorIntervalSeconds: number): void;
							public removeAppender(appenderName: string): void;
							public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public stop(): void;
							public preConfigure(node: org.apache.logging.log4j.core.config.Node): void;
							public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
							public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
							public isStarted(): boolean;
							public isStopped(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public doConfigure(): void;
							public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
							public getPluginManager(): org.apache.logging.log4j.core.config.plugins.util.PluginManager;
							public setup(): void;
							public createAdvertiser(advertiserString: string, configSource: org.apache.logging.log4j.core.config.ConfigurationSource, buffer: native.Array<number>, contentType: string): void;
							public getProperties(): java.util.Map<string,string>;
							public setToDefault(): void;
							public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
							public removeLogger(loggerName: string): void;
							public getDefaultStatus(): org.apache.logging.log4j.Level;
							public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
							public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public static toByteArray(is: java.io.InputStream): native.Array<number>;
							public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
							public isShutdownHookEnabled(): boolean;
							public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
							public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
							public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
							public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
							public start(): void;
							public getLogger(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
							public addComponent(componentName: string, obj: any): void;
							public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
							public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public constructor();
							public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
							public getPluginPackages(): java.util.List<string>;
							public initialize(): void;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getShutdownTimeoutMillis(): number;
							public setScriptManager(scriptManager: org.apache.logging.log4j.core.script.ScriptManager): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
							public getRootNode(): org.apache.logging.log4j.core.config.Node;
							public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
							public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
							public getComponent(componentName: string): any;
							public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
							public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class AppenderControl extends org.apache.logging.log4j.core.filter.AbstractFilterable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.AppenderControl>;
							public constructor();
							public hashCode(): number;
							public equals(obj: any): boolean;
							public constructor(appender: org.apache.logging.log4j.core.Appender, level: org.apache.logging.log4j.Level, filter: org.apache.logging.log4j.core.Filter);
							public toString(): string;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public getAppenderName(): string;
							public callAppender(event: org.apache.logging.log4j.core.LogEvent): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public getAppender(): org.apache.logging.log4j.core.Appender;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class AppenderControlArraySet extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.AppenderControlArraySet>;
							public constructor();
							public remove(name: string): org.apache.logging.log4j.core.config.AppenderControl;
							public get(): native.Array<org.apache.logging.log4j.core.config.AppenderControl>;
							public clear(): native.Array<org.apache.logging.log4j.core.config.AppenderControl>;
							public add(control: org.apache.logging.log4j.core.config.AppenderControl): boolean;
							public asMap(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
							public toString(): string;
							public isEmpty(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class AppenderRef extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.AppenderRef>;
							public static createAppenderRef(ref: string, level: org.apache.logging.log4j.Level, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.AppenderRef;
							public getRef(): string;
							public toString(): string;
							public getLevel(): org.apache.logging.log4j.Level;
							public getFilter(): org.apache.logging.log4j.core.Filter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class AppendersPlugin extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.AppendersPlugin>;
							public static createAppenders(appenders: native.Array<org.apache.logging.log4j.core.Appender>): java.util.concurrent.ConcurrentMap<string,org.apache.logging.log4j.core.Appender>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class AwaitCompletionReliabilityStrategy extends java.lang.Object implements org.apache.logging.log4j.core.config.ReliabilityStrategy, org.apache.logging.log4j.core.config.LocationAwareReliabilityStrategy {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy>;
							public afterLogEvent(): void;
							public beforeStopConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public constructor(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig);
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, location: java.lang.StackTraceElement, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public beforeStopAppenders(): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, event: org.apache.logging.log4j.core.LogEvent): void;
							public getActiveLoggerConfig(next: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>): org.apache.logging.log4j.core.config.LoggerConfig;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class AwaitUnconditionallyReliabilityStrategy extends java.lang.Object implements org.apache.logging.log4j.core.config.ReliabilityStrategy, org.apache.logging.log4j.core.config.LocationAwareReliabilityStrategy {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.AwaitUnconditionallyReliabilityStrategy>;
							public afterLogEvent(): void;
							public beforeStopConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public constructor(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig);
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, location: java.lang.StackTraceElement, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public beforeStopAppenders(): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, event: org.apache.logging.log4j.core.LogEvent): void;
							public getActiveLoggerConfig(next: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>): org.apache.logging.log4j.core.config.LoggerConfig;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Configuration extends java.lang.Object implements org.apache.logging.log4j.core.filter.Filterable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Configuration>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.Configuration interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getName(): string;
								getLoggerConfig(string0: string): org.apache.logging.log4j.core.config.LoggerConfig;
								getAppender(string0: string): org.apache.logging.log4j.core.Appender;
								getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
								addAppender(appender0: org.apache.logging.log4j.core.Appender): void;
								getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
								addLoggerAppender(logger0: org.apache.logging.log4j.core.Logger, appender1: org.apache.logging.log4j.core.Appender): void;
								addLoggerFilter(logger0: org.apache.logging.log4j.core.Logger, filter1: org.apache.logging.log4j.core.Filter): void;
								setLoggerAdditive(logger0: org.apache.logging.log4j.core.Logger, boolean1: boolean): void;
								addLogger(string0: string, loggerConfig1: org.apache.logging.log4j.core.config.LoggerConfig): void;
								removeLogger(string0: string): void;
								getPluginPackages(): java.util.List<string>;
								getProperties(): java.util.Map<string,string>;
								getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
								addListener(configurationListener0: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								removeListener(configurationListener0: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
								createConfiguration(node0: org.apache.logging.log4j.core.config.Node, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
								getComponent(string0: string): any;
								addComponent(string0: string, object1: any): void;
								setAdvertiser(advertiser0: org.apache.logging.log4j.core.net.Advertiser): void;
								getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
								isShutdownHookEnabled(): boolean;
								getShutdownTimeoutMillis(): number;
								getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
								getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
								getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
								getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
								getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
								getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
								getReliabilityStrategy(loggerConfig0: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
								getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
								setNanoClock(nanoClock0: org.apache.logging.log4j.core.util.NanoClock): void;
								getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
								addFilter(filter0: org.apache.logging.log4j.core.Filter): void;
								removeFilter(filter0: org.apache.logging.log4j.core.Filter): void;
								getFilter(): org.apache.logging.log4j.core.Filter;
								hasFilter(): boolean;
								isFiltered(logEvent0: org.apache.logging.log4j.core.LogEvent): boolean;
								getState(): org.apache.logging.log4j.core.LifeCycle.State;
								initialize(): void;
								start(): void;
								stop(): void;
								isStarted(): boolean;
								isStopped(): boolean;
							});
							public constructor();
							public static CONTEXT_PROPERTIES: string;
							public setAdvertiser(advertiser0: org.apache.logging.log4j.core.net.Advertiser): void;
							public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
							public createConfiguration(node0: org.apache.logging.log4j.core.config.Node, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
							public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
							public getReliabilityStrategy(loggerConfig0: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public removeListener(configurationListener0: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public removeFilter(filter0: org.apache.logging.log4j.core.Filter): void;
							public addListener(configurationListener0: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public isFiltered(logEvent0: org.apache.logging.log4j.core.LogEvent): boolean;
							public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
							public isShutdownHookEnabled(): boolean;
							public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public removeLogger(string0: string): void;
							public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
							public stop(): void;
							public start(): void;
							public addFilter(filter0: org.apache.logging.log4j.core.Filter): void;
							public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public getAppender(string0: string): org.apache.logging.log4j.core.Appender;
							public addLoggerAppender(logger0: org.apache.logging.log4j.core.Logger, appender1: org.apache.logging.log4j.core.Appender): void;
							public getPluginPackages(): java.util.List<string>;
							public addLoggerFilter(logger0: org.apache.logging.log4j.core.Logger, filter1: org.apache.logging.log4j.core.Filter): void;
							public initialize(): void;
							public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
							public isStarted(): boolean;
							public hasFilter(): boolean;
							public isStopped(): boolean;
							public getComponent(string0: string): any;
							public addComponent(string0: string, object1: any): void;
							public addAppender(appender0: org.apache.logging.log4j.core.Appender): void;
							public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
							public getShutdownTimeoutMillis(): number;
							public addLogger(string0: string, loggerConfig1: org.apache.logging.log4j.core.config.LoggerConfig): void;
							public getLoggerConfig(string0: string): org.apache.logging.log4j.core.config.LoggerConfig;
							public getName(): string;
							public getProperties(): java.util.Map<string,string>;
							public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
							public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
							public setNanoClock(nanoClock0: org.apache.logging.log4j.core.util.NanoClock): void;
							public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
							public setLoggerAdditive(logger0: org.apache.logging.log4j.core.Logger, boolean1: boolean): void;
							public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ConfigurationAware extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationAware>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.ConfigurationAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								setConfiguration(configuration0: org.apache.logging.log4j.core.config.Configuration): void;
							});
							public constructor();
							public setConfiguration(configuration0: org.apache.logging.log4j.core.config.Configuration): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ConfigurationException extends java.lang.RuntimeException {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationException>;
							public constructor();
							public constructor(message: string, cause: java.lang.Throwable);
							public constructor(cause: java.lang.Throwable);
							public constructor(message: string);
							public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export abstract class ConfigurationFactory extends org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory>;
							public static CONFIGURATION_FACTORY_PROPERTY: string;
							public static CONFIGURATION_FILE_PROPERTY: string;
							public static LOG4J1_CONFIGURATION_FILE_PROPERTY: string;
							public static LOG4J1_EXPERIMENTAL: string;
							public static AUTHORIZATION_PROVIDER: string;
							public static CATEGORY: string;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public static TEST_PREFIX: string;
							public static DEFAULT_PREFIX: string;
							public static LOG4J1_VERSION: string;
							public static LOG4J2_VERSION: string;
							public substitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public constructor();
							public static resetConfigurationFactory(): void;
							public static setConfigurationFactory(factory: org.apache.logging.log4j.core.config.ConfigurationFactory): void;
							public isActive(): boolean;
							public getSupportedTypes(): native.Array<string>;
							public static authorizationProvider(props: org.apache.logging.log4j.util.PropertiesUtil): org.apache.logging.log4j.core.util.AuthorizationProvider;
							public getTestPrefix(): string;
							public static removeConfigurationFactory(factory: org.apache.logging.log4j.core.config.ConfigurationFactory): void;
							public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.config.Configuration;
							public static getAuthorizationProvider(): org.apache.logging.log4j.core.util.AuthorizationProvider;
							public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.Configuration;
							public getDefaultPrefix(): string;
							public getConfiguration(loggerContext0: org.apache.logging.log4j.core.LoggerContext, configurationSource1: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
							public getVersion(): string;
							public static getInstance(): org.apache.logging.log4j.core.config.ConfigurationFactory;
							public getInputFromString(config: string, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.ConfigurationSource;
						}
						export module ConfigurationFactory {
							export class Factory extends org.apache.logging.log4j.core.config.ConfigurationFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFactory.Factory>;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.Configuration;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.config.Configuration;
								public getSupportedTypes(): native.Array<string>;
								public getConfiguration(loggerContext0: org.apache.logging.log4j.core.LoggerContext, configurationSource1: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ConfigurationFileWatcher extends org.apache.logging.log4j.core.util.AbstractWatcher implements org.apache.logging.log4j.core.util.FileWatcher {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationFileWatcher>;
							public fileModified(file: java.io.File): void;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, lastModifiedMillis: number);
							public getSource(): org.apache.logging.log4j.core.util.Source;
							public getLastModified(): number;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>);
							public getListeners(): java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>;
							public newWatcher(reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, listeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, lastModifiedMillis: number): org.apache.logging.log4j.core.util.Watcher;
							public modified(): void;
							public isModified(): boolean;
							public watching(source: org.apache.logging.log4j.core.util.Source): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ConfigurationListener extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationListener>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.ConfigurationListener interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								onChange(reconfigurable0: org.apache.logging.log4j.core.config.Reconfigurable): void;
							});
							public constructor();
							public onChange(reconfigurable0: org.apache.logging.log4j.core.config.Reconfigurable): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ConfigurationScheduler extends org.apache.logging.log4j.core.AbstractLifeCycle {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationScheduler>;
							public constructor();
							public decrementScheduledItems(): void;
							public incrementScheduledItems(): void;
							public scheduleAtFixedRate(command: java.lang.Runnable, initialDelay: number, period: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public constructor(name: string);
							public scheduleWithCron(cronExpression: org.apache.logging.log4j.core.util.CronExpression, startDate: java.util.Date, command: java.lang.Runnable): org.apache.logging.log4j.core.config.CronScheduledFuture<any>;
							public schedule(callable: java.util.concurrent.Callable<any>, delay: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public toString(): string;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public isExecutorServiceSet(): boolean;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public schedule(command: java.lang.Runnable, delay: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public scheduleWithFixedDelay(command: java.lang.Runnable, initialDelay: number, delay: number, unit: java.util.concurrent.TimeUnit): java.util.concurrent.ScheduledFuture<any>;
							public start(): void;
							public nextFireInterval(fireDate: java.util.Date): number;
							public scheduleWithCron(cronExpression: org.apache.logging.log4j.core.util.CronExpression, command: java.lang.Runnable): org.apache.logging.log4j.core.config.CronScheduledFuture<any>;
						}
						export module ConfigurationScheduler {
							export class CronRunnable extends java.lang.Object implements java.lang.Runnable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationScheduler.CronRunnable>;
								public toString(): string;
								public run(): void;
								public setScheduledFuture(future: org.apache.logging.log4j.core.config.CronScheduledFuture<any>): void;
								public constructor(this0: org.apache.logging.log4j.core.config.ConfigurationScheduler, runnable: java.lang.Runnable, cronExpression: org.apache.logging.log4j.core.util.CronExpression);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ConfigurationSource extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ConfigurationSource>;
							public static NULL_SOURCE: org.apache.logging.log4j.core.config.ConfigurationSource;
							public static COMPOSITE_SOURCE: org.apache.logging.log4j.core.config.ConfigurationSource;
							public setData(data: native.Array<number>): void;
							public setModifiedMillis(modifiedMillis: number): void;
							public getInputStream(): java.io.InputStream;
							public constructor(source: org.apache.logging.log4j.core.util.Source, data: native.Array<number>, lastModified: number);
							public getFile(): java.io.File;
							public toString(): string;
							public setSource(source: org.apache.logging.log4j.core.util.Source): void;
							public constructor(stream: java.io.InputStream, file: java.io.File);
							public constructor(stream: java.io.InputStream);
							public getURL(): java.net.URL;
							public getURI(): java.net.URI;
							public getLastModified(): number;
							public static fromUri(configLocation: java.net.URI): org.apache.logging.log4j.core.config.ConfigurationSource;
							public static fromResource(resource: string, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.ConfigurationSource;
							public getLocation(): string;
							public constructor(stream: java.io.InputStream, url: java.net.URL, lastModified: number);
							public resetInputStream(): org.apache.logging.log4j.core.config.ConfigurationSource;
							public constructor(stream: java.io.InputStream, url: java.net.URL);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Configurator extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Configurator>;
							public static setRootLevel(level: org.apache.logging.log4j.Level): void;
							public static initialize(loader: java.lang.ClassLoader, configuration: org.apache.logging.log4j.core.config.Configuration, externalContext: any): org.apache.logging.log4j.core.LoggerContext;
							public static reconfigure(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public static initialize(name: string, loader: java.lang.ClassLoader, configLocation: string): org.apache.logging.log4j.core.LoggerContext;
							public static initialize(name: string, loader: java.lang.ClassLoader, configLocations: java.util.List<java.net.URI>, externalContext: any): org.apache.logging.log4j.core.LoggerContext;
							public static reconfigure(): void;
							public static shutdown(ctx: org.apache.logging.log4j.core.LoggerContext, timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public static initialize(name: string, loader: java.lang.ClassLoader, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public static setLevel(levelMap: java.util.Map<string,org.apache.logging.log4j.Level>): void;
							public static initialize(loader: java.lang.ClassLoader, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.LoggerContext;
							public static initialize(name: string, configLocation: string): org.apache.logging.log4j.core.LoggerContext;
							public static initialize(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.LoggerContext;
							public static setLevel(loggerName: string, level: org.apache.logging.log4j.Level): void;
							public static shutdown(ctx: org.apache.logging.log4j.core.LoggerContext): void;
							public static initialize(name: string, loader: java.lang.ClassLoader, configLocation: string, externalContext: any): org.apache.logging.log4j.core.LoggerContext;
							public static reconfigure(uri: java.net.URI): void;
							public static initialize(loader: java.lang.ClassLoader, source: org.apache.logging.log4j.core.config.ConfigurationSource, externalContext: any): org.apache.logging.log4j.core.LoggerContext;
							public static initialize(loader: java.lang.ClassLoader, source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.LoggerContext;
							public static setAllLevels(parentLogger: string, level: org.apache.logging.log4j.Level): void;
							public static initialize(name: string, loader: java.lang.ClassLoader, configLocation: java.net.URI, externalContext: any): org.apache.logging.log4j.core.LoggerContext;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class CronScheduledFuture<V>  extends java.util.concurrent.ScheduledFuture<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.CronScheduledFuture<any>>;
							public get(): any;
							public get(timeout: number, unit: java.util.concurrent.TimeUnit): any;
							public isCancelled(): boolean;
							public isDone(): boolean;
							public cancel(mayInterruptIfRunning: boolean): boolean;
							public constructor(future: java.util.concurrent.ScheduledFuture<any>, runDate: java.util.Date);
							public getDelay(unit: java.util.concurrent.TimeUnit): number;
							public getFireTime(): java.util.Date;
							public compareTo(delayed: java.util.concurrent.Delayed): number;
						}
						export module CronScheduledFuture {
							export class FutureData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.CronScheduledFuture.FutureData>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class CustomLevelConfig extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.CustomLevelConfig>;
							public getIntLevel(): number;
							public hashCode(): number;
							public static createLevel(levelName: string, intLevel: number): org.apache.logging.log4j.core.config.CustomLevelConfig;
							public equals(object: any): boolean;
							public equals(obj: any): boolean;
							public toString(): string;
							public getLevelName(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class CustomLevels extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.CustomLevels>;
							public static createCustomLevels(customLevels: native.Array<org.apache.logging.log4j.core.config.CustomLevelConfig>): org.apache.logging.log4j.core.config.CustomLevels;
							public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class DefaultAdvertiser extends java.lang.Object implements org.apache.logging.log4j.core.net.Advertiser {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.DefaultAdvertiser>;
							public constructor();
							public unadvertise(advertisedObject: any): void;
							public advertise(properties: java.util.Map<string,string>): any;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class DefaultConfiguration extends org.apache.logging.log4j.core.config.AbstractConfiguration {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.DefaultConfiguration>;
							public static DEFAULT_NAME: string;
							public static DEFAULT_LEVEL: string;
							public static DEFAULT_PATTERN: string;
							public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
							public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
							public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
							public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
							public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
							public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
							public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
							public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public isShutdownHookEnabled(): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
							public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
							public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
							public stop(): void;
							public addComponent(componentName: string, obj: any): void;
							public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
							public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public constructor();
							public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
							public getPluginPackages(): java.util.List<string>;
							public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
							public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public doConfigure(): void;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
							public getShutdownTimeoutMillis(): number;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public getProperties(): java.util.Map<string,string>;
							public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public removeLogger(loggerName: string): void;
							public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
							public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
							public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
							public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
							public getComponent(componentName: string): any;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class DefaultReliabilityStrategy extends java.lang.Object implements org.apache.logging.log4j.core.config.ReliabilityStrategy, org.apache.logging.log4j.core.config.LocationAwareReliabilityStrategy {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.DefaultReliabilityStrategy>;
							public afterLogEvent(): void;
							public beforeStopConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public constructor(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig);
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, location: java.lang.StackTraceElement, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public beforeStopAppenders(): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, event: org.apache.logging.log4j.core.LogEvent): void;
							public getActiveLoggerConfig(next: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>): org.apache.logging.log4j.core.config.LoggerConfig;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class HttpWatcher extends org.apache.logging.log4j.core.util.AbstractWatcher {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.HttpWatcher>;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, lastModifiedMillis: number);
							public getSource(): org.apache.logging.log4j.core.util.Source;
							public getLastModified(): number;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>);
							public getListeners(): java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>;
							public newWatcher(reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, listeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, lastModifiedMillis: number): org.apache.logging.log4j.core.util.Watcher;
							public modified(): void;
							public isModified(): boolean;
							public watching(source: org.apache.logging.log4j.core.util.Source): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class LocationAwareReliabilityStrategy extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.LocationAwareReliabilityStrategy>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.LocationAwareReliabilityStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								log(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, string1: string, string2: string, stackTraceElement3: java.lang.StackTraceElement, marker4: org.apache.logging.log4j.Marker, level5: org.apache.logging.log4j.Level, message6: org.apache.logging.log4j.message.Message, throwable7: java.lang.Throwable): void;
							});
							public constructor();
							public log(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, string1: string, string2: string, stackTraceElement3: java.lang.StackTraceElement, marker4: org.apache.logging.log4j.Marker, level5: org.apache.logging.log4j.Level, message6: org.apache.logging.log4j.message.Message, throwable7: java.lang.Throwable): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class LockingReliabilityStrategy extends java.lang.Object implements org.apache.logging.log4j.core.config.ReliabilityStrategy, org.apache.logging.log4j.core.config.LocationAwareReliabilityStrategy {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.LockingReliabilityStrategy>;
							public afterLogEvent(): void;
							public beforeStopConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public constructor(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig);
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, loggerName: string, fqcn: string, location: java.lang.StackTraceElement, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public beforeStopAppenders(): void;
							public log(reconfigured: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, event: org.apache.logging.log4j.core.LogEvent): void;
							public getActiveLoggerConfig(next: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>): org.apache.logging.log4j.core.config.LoggerConfig;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class LoggerConfig extends org.apache.logging.log4j.core.filter.AbstractFilterable implements org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.LoggerConfig>;
							public static ROOT: string;
							public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
							public constructor(name: string, appenders: java.util.List<org.apache.logging.log4j.core.config.AppenderRef>, filter: org.apache.logging.log4j.core.Filter, level: org.apache.logging.log4j.Level, additive: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, includeLocation: boolean);
							/** @deprecated */
							public static includeLocation(includeLocationConfigValue: string): boolean;
							public setLevel(level: org.apache.logging.log4j.Level): void;
							public getAppenderRefs(): java.util.List<org.apache.logging.log4j.core.config.AppenderRef>;
							public isAdditive(): boolean;
							public toString(): string;
							/** @deprecated */
							public static createLogger(additivity: string, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
							public isIncludeLocation(): boolean;
							public requiresLocation(): boolean;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public log(event: org.apache.logging.log4j.core.LogEvent, predicate: org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate): void;
							public stop(): void;
							public static includeLocation(includeLocationConfigValue: string, configuration: org.apache.logging.log4j.core.config.Configuration): boolean;
							public static createLogger(additivity: boolean, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
							public getReliabilityStrategy(): org.apache.logging.log4j.core.config.ReliabilityStrategy;
							public removeAppender(name: string): void;
							public callAppenders(event: org.apache.logging.log4j.core.LogEvent): void;
							public constructor();
							public setAdditive(additive: boolean): void;
							public log(loggerName: string, fqcn: string, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public addAppender(appender: org.apache.logging.log4j.core.Appender, level: org.apache.logging.log4j.Level, filter: org.apache.logging.log4j.core.Filter): void;
							/** @deprecated */
							public getProperties(): java.util.Map<org.apache.logging.log4j.core.config.Property,java.lang.Boolean>;
							public hasAppenders(): boolean;
							public setParent(parent: org.apache.logging.log4j.core.config.LoggerConfig): void;
							public setLogEventFactory(logEventFactory: org.apache.logging.log4j.core.impl.LogEventFactory): void;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public isPropertiesRequireLookup(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public clearAppenders(): void;
							public constructor(name: string, level: org.apache.logging.log4j.Level, additive: boolean);
							public log(loggerName: string, fqcn: string, location: java.lang.StackTraceElement, marker: org.apache.logging.log4j.Marker, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public getPropertyList(): java.util.List<org.apache.logging.log4j.core.config.Property>;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public getLogEventFactory(): org.apache.logging.log4j.core.impl.LogEventFactory;
							public getLevel(): org.apache.logging.log4j.Level;
							public getParent(): org.apache.logging.log4j.core.config.LoggerConfig;
							public log(event: org.apache.logging.log4j.core.LogEvent): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
						}
						export module LoggerConfig {
							export abstract class LoggerConfigPredicate {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate>;
								public static ALL: org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate;
								public static ASYNCHRONOUS_ONLY: org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate;
								public static SYNCHRONOUS_ONLY: org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate;
								public static valueOf(name: string): org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
								public static values(): native.Array<org.apache.logging.log4j.core.config.LoggerConfig.LoggerConfigPredicate>;
							}
							export class RootLogger extends org.apache.logging.log4j.core.config.LoggerConfig {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.LoggerConfig.RootLogger>;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public static createLogger(additivity: boolean, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public constructor();
								public constructor(name: string, appenders: java.util.List<org.apache.logging.log4j.core.config.AppenderRef>, filter: org.apache.logging.log4j.core.Filter, level: org.apache.logging.log4j.Level, additive: boolean, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, includeLocation: boolean);
								/** @deprecated */
								public static createLogger(additivity: string, level: org.apache.logging.log4j.Level, loggerName: string, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public static createLogger(additivity: string, level: org.apache.logging.log4j.Level, includeLocation: string, refs: native.Array<org.apache.logging.log4j.core.config.AppenderRef>, properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration, filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.config.LoggerConfig;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public constructor(name: string, level: org.apache.logging.log4j.Level, additive: boolean);
								public hasFilter(): boolean;
								public requiresLocation(): boolean;
								public stop(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Loggers extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Loggers>;
							public getRoot(): org.apache.logging.log4j.core.config.LoggerConfig;
							public getMap(): java.util.concurrent.ConcurrentMap<string,org.apache.logging.log4j.core.config.LoggerConfig>;
							public constructor(map: java.util.concurrent.ConcurrentMap<string,org.apache.logging.log4j.core.config.LoggerConfig>, root: org.apache.logging.log4j.core.config.LoggerConfig);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class LoggersPlugin extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.LoggersPlugin>;
							public static createLoggers(loggers: native.Array<org.apache.logging.log4j.core.config.LoggerConfig>): org.apache.logging.log4j.core.config.Loggers;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Node extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Node>;
							public static CATEGORY: string;
							public constructor();
							public setValue(value: string): void;
							public isInstanceOf(clazz: java.lang.Class<any>): boolean;
							public getObject(clazz: java.lang.Class<any>): any;
							public getValue(): string;
							public toString(): string;
							public getParent(): org.apache.logging.log4j.core.config.Node;
							public getChildren(): java.util.List<org.apache.logging.log4j.core.config.Node>;
							public constructor(parent: org.apache.logging.log4j.core.config.Node, name: string, type: org.apache.logging.log4j.core.config.plugins.util.PluginType<any>);
							public constructor(node: org.apache.logging.log4j.core.config.Node);
							public isRoot(): boolean;
							public getName(): string;
							public setObject(obj: any): void;
							public hasChildren(): boolean;
							public getAttributes(): java.util.Map<string,string>;
							public getObject(): any;
							public getType(): org.apache.logging.log4j.core.config.plugins.util.PluginType<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class NullConfiguration extends org.apache.logging.log4j.core.config.AbstractConfiguration {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.NullConfiguration>;
							public static NULL_NAME: string;
							public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
							public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
							public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
							public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
							public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
							public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
							public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
							public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
							public isShutdownHookEnabled(): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
							public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
							public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
							public stop(): void;
							public addComponent(componentName: string, obj: any): void;
							public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
							public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public constructor();
							public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
							public getPluginPackages(): java.util.List<string>;
							public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
							public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public hasFilter(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
							public getShutdownTimeoutMillis(): number;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getName(): string;
							public getProperties(): java.util.Map<string,string>;
							public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public removeLogger(loggerName: string): void;
							public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
							public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
							public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
							public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
							public getComponent(componentName: string): any;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
							public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Order extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Order>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.Order interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								value(): number;
								equals(object0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
							public value(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class OrderComparator extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.OrderComparator>;
							public constructor();
							public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public equals(obj: any): boolean;
							public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static naturalOrder(): java.util.Comparator<any>;
							public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
							public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public compare(lhs: java.lang.Class<any>, rhs: java.lang.Class<any>): number;
							public reversed(): java.util.Comparator<any>;
							public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public static getInstance(): java.util.Comparator<java.lang.Class<any>>;
							public compare(object0: any, object1: any): number;
							public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
							public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
							public static reverseOrder(): java.util.Comparator<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class PropertiesPlugin extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.PropertiesPlugin>;
							public static configureSubstitutor(properties: native.Array<org.apache.logging.log4j.core.config.Property>, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.lookup.StrLookup;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Property extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Property>;
							public static EMPTY_ARRAY: native.Array<org.apache.logging.log4j.core.config.Property>;
							public isValueNeedsLookup(): boolean;
							public static createProperty(name: string, value: string): org.apache.logging.log4j.core.config.Property;
							public getName(): string;
							public getValue(): string;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Reconfigurable extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Reconfigurable>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.Reconfigurable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								reconfigure(): org.apache.logging.log4j.core.config.Configuration;
							});
							public constructor();
							public reconfigure(): org.apache.logging.log4j.core.config.Configuration;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ReliabilityStrategy extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ReliabilityStrategy>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.ReliabilityStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								log(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, string1: string, string2: string, marker3: org.apache.logging.log4j.Marker, level4: org.apache.logging.log4j.Level, message5: org.apache.logging.log4j.message.Message, throwable6: java.lang.Throwable): void;
								log(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
								getActiveLoggerConfig(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>): org.apache.logging.log4j.core.config.LoggerConfig;
								afterLogEvent(): void;
								beforeStopAppenders(): void;
								beforeStopConfiguration(configuration0: org.apache.logging.log4j.core.config.Configuration): void;
							});
							public constructor();
							public log(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, logEvent1: org.apache.logging.log4j.core.LogEvent): void;
							public afterLogEvent(): void;
							public log(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>, string1: string, string2: string, marker3: org.apache.logging.log4j.Marker, level4: org.apache.logging.log4j.Level, message5: org.apache.logging.log4j.message.Message, throwable6: java.lang.Throwable): void;
							public beforeStopConfiguration(configuration0: org.apache.logging.log4j.core.config.Configuration): void;
							public getActiveLoggerConfig(supplier0: org.apache.logging.log4j.util.Supplier<org.apache.logging.log4j.core.config.LoggerConfig>): org.apache.logging.log4j.core.config.LoggerConfig;
							public beforeStopAppenders(): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ReliabilityStrategyFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ReliabilityStrategyFactory>;
							public static getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class Scheduled extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.Scheduled>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.config.Scheduled interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								equals(object0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public equals(obj: any): boolean;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export class ScriptsPlugin extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.config.ScriptsPlugin>;
							public static createScripts(scripts: native.Array<org.apache.logging.log4j.core.script.AbstractScript>): native.Array<org.apache.logging.log4j.core.script.AbstractScript>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class AppenderComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.FilterableComponentBuilder<org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(layoutComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder): org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
										getName(): string;
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public add(layoutComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder): org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public getName(): string;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class AppenderRefComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.FilterableComponentBuilder<org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class Component extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.Component>;
									public constructor();
									public constructor(pluginType: string, name: string, value: string);
									public addAttribute(key: string, newValue: string): string;
									public getAttributes(): java.util.Map<string,string>;
									public getPluginType(): string;
									public getValue(): string;
									public addComponent(component: org.apache.logging.log4j.core.config.builder.api.Component): void;
									public getComponents(): java.util.List<org.apache.logging.log4j.core.config.builder.api.Component>;
									public constructor(pluginType: string);
									public constructor(pluginType: string, name: string);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class ComponentBuilder<T>  extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.config.builder.api.Component> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class CompositeFilterComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.FilterableComponentBuilder<org.apache.logging.log4j.core.config.builder.api.CompositeFilterComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.CompositeFilterComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.CompositeFilterComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class ConfigurationBuilder<T>  extends org.apache.logging.log4j.core.util.Builder<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(scriptComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										add(scriptFileComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										add(appenderComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										add(customLevelComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										add(loggerComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										add(rootLoggerComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										addProperty(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										newScript(string0: string, string1: string, string2: string): org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder;
										newScriptFile(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
										newScriptFile(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
										newAppender(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
										newAppenderRef(string0: string): org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder;
										newAsyncLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newAsyncLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newAsyncLogger(string0: string, level1: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newAsyncLogger(string0: string, level1: org.apache.logging.log4j.Level, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newAsyncLogger(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newAsyncLogger(string0: string, string1: string, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newAsyncRootLogger(): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newAsyncRootLogger(boolean0: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newAsyncRootLogger(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newAsyncRootLogger(level0: org.apache.logging.log4j.Level, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newAsyncRootLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newAsyncRootLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newComponent(string0: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
										newComponent(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
										newComponent(string0: string, string1: string, string2: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
										newProperty(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder;
										newKeyValuePair(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder;
										newCustomLevel(string0: string, int1: number): org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder;
										newFilter(string0: string, result1: org.apache.logging.log4j.core.Filter.Result, result2: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder;
										newFilter(string0: string, string1: string, string2: string): org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder;
										newLayout(string0: string): org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder;
										newLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newLogger(string0: string, level1: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newLogger(string0: string, level1: org.apache.logging.log4j.Level, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newLogger(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newLogger(string0: string, string1: string, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
										newRootLogger(): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newRootLogger(boolean0: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newRootLogger(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newRootLogger(level0: org.apache.logging.log4j.Level, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newRootLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										newRootLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
										setAdvertiser(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setConfigurationName(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setConfigurationSource(configurationSource0: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setMonitorInterval(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setPackages(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setShutdownHook(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setShutdownTimeout(long0: number, timeUnit1: java.util.concurrent.TimeUnit): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setStatusLevel(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setVerbosity(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setDestination(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										setLoggerContext(loggerContext0: org.apache.logging.log4j.core.LoggerContext): void;
										addRootProperty(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(boolean0: boolean): any;
										writeXmlConfiguration(outputStream0: java.io.OutputStream): void;
										toXmlConfiguration(): string;
										build(): any;
									});
									public constructor();
									public newAppenderRef(string0: string): org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder;
									public newFilter(string0: string, result1: org.apache.logging.log4j.core.Filter.Result, result2: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder;
									public toXmlConfiguration(): string;
									public setLoggerContext(loggerContext0: org.apache.logging.log4j.core.LoggerContext): void;
									public newAsyncLogger(string0: string, level1: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newRootLogger(level0: org.apache.logging.log4j.Level, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newAsyncRootLogger(level0: org.apache.logging.log4j.Level, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newAsyncRootLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public add(scriptComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(rootLoggerComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public build(): any;
									public newScript(string0: string, string1: string, string2: string): org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder;
									public addProperty(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public setConfigurationName(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public setPackages(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newKeyValuePair(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder;
									public newComponent(string0: string, string1: string, string2: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
									public newAppender(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
									public setShutdownTimeout(long0: number, timeUnit1: java.util.concurrent.TimeUnit): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public setConfigurationSource(configurationSource0: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newComponent(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
									public newLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newRootLogger(): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public setStatusLevel(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAsyncRootLogger(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newAsyncRootLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public setDestination(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newRootLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public writeXmlConfiguration(outputStream0: java.io.OutputStream): void;
									public newLogger(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public build(boolean0: boolean): any;
									public add(customLevelComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newLayout(string0: string): org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder;
									public add(scriptFileComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(loggerComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAsyncLogger(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newScriptFile(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public newRootLogger(boolean0: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newProperty(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder;
									public newAsyncRootLogger(): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newLogger(string0: string, string1: string, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newAsyncLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newCustomLevel(string0: string, int1: number): org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder;
									public setShutdownHook(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAsyncLogger(string0: string, string1: string, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newAsyncRootLogger(boolean0: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newLogger(string0: string, level1: org.apache.logging.log4j.Level, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public setVerbosity(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(appenderComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newScriptFile(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public newAsyncLogger(string0: string, boolean1: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public setAdvertiser(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newLogger(string0: string, level1: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newRootLogger(level0: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newRootLogger(string0: string): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public setMonitorInterval(string0: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addRootProperty(string0: string, string1: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAsyncLogger(string0: string, level1: org.apache.logging.log4j.Level, boolean2: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newFilter(string0: string, string1: string, string2: string): org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder;
									public newComponent(string0: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export abstract class ConfigurationBuilderFactory extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory>;
									public constructor();
									public static newConfigurationBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration>;
									public static newConfigurationBuilder(clazz: java.lang.Class<any>): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class CustomLevelComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class FilterComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class FilterableComponentBuilder<T>  extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.FilterableComponentBuilder<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.FilterableComponentBuilder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class KeyValuePairComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class LayoutComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class LoggableComponentBuilder<T>  extends org.apache.logging.log4j.core.config.builder.api.FilterableComponentBuilder<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.LoggableComponentBuilder<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.LoggableComponentBuilder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class LoggerComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.LoggableComponentBuilder<org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class PropertyComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class RootLoggerComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.LoggableComponentBuilder<org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
										add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class ScriptComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public build(): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addAttribute(string0: string, string1: string): any;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module api {
								export class ScriptFileComponentBuilder extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										addLanguage(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
										addIsWatched(boolean0: boolean): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
										addIsWatched(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
										addCharset(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
										addAttribute(string0: string, string1: string): any;
										addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
										addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
										addAttribute(string0: string, int1: number): any;
										addAttribute(string0: string, boolean1: boolean): any;
										addAttribute(string0: string, object1: any): any;
										addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
										getName(): string;
										getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
										build(): any;
									});
									public constructor();
									public addAttribute(string0: string, object1: any): any;
									public addAttribute(string0: string, boolean1: boolean): any;
									public addLanguage(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public getName(): string;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(string0: string, level1: org.apache.logging.log4j.Level): any;
									public build(): any;
									public addIsWatched(boolean0: boolean): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public addIsWatched(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public addAttribute(string0: string, string1: string): any;
									public addCharset(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public addAttribute(string0: string, int1: number): any;
									public addAttribute(string0: string, enum1: java.lang.Enum<any>): any;
									public addComponent(componentBuilder0: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class BuiltConfiguration extends org.apache.logging.log4j.core.config.AbstractConfiguration {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration>;
									public rootComponent: org.apache.logging.log4j.core.config.builder.api.Component;
									public getStatusConfiguration(): org.apache.logging.log4j.core.config.status.StatusConfiguration;
									public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
									public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
									public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
									public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
									public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource, rootComponent: org.apache.logging.log4j.core.config.builder.api.Component);
									public stop(future: java.util.concurrent.Future<any>): boolean;
									public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
									public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
									public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
									public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
									public createAdvertiser(advertiserString: string, configSource: org.apache.logging.log4j.core.config.ConfigurationSource): void;
									public constructor(filter: org.apache.logging.log4j.core.Filter);
									public setPluginPackages(packages: string): void;
									public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
									public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
									public getProperties(): java.util.Map<string,string>;
									public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
									public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
									public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
									public convertToNode(parent: org.apache.logging.log4j.core.config.Node, component: org.apache.logging.log4j.core.config.builder.api.Component): org.apache.logging.log4j.core.config.Node;
									public createAdvertiser(advertiserString: string, configSource: org.apache.logging.log4j.core.config.ConfigurationSource, buffer: native.Array<number>, contentType: string): void;
									public getName(): string;
									public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public getShutdownTimeoutMillis(): number;
									public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
									public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
									public setup(): void;
									public getPluginPackages(): java.util.List<string>;
									public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
									public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
									public setMonitorInterval(intervalSeconds: number): void;
									public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
									public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
									public getContentType(): string;
									public setShutdownTimeoutMillis(shutdownTimeoutMillis: number): void;
									public setShutdownHook(flag: string): void;
									public getPluginManager(): org.apache.logging.log4j.core.config.plugins.util.PluginManager;
									public addComponent(componentName: string, obj: any): void;
									public getFilter(): org.apache.logging.log4j.core.Filter;
									public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
									public isShutdownHookEnabled(): boolean;
									public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
									public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
									public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
									public stop(): void;
									public constructor();
									public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
									public removeLogger(loggerName: string): void;
									public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
									public hasFilter(): boolean;
									public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
									public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
									public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
									public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
									public setContentType(contentType: string): void;
									public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
									public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
									public getComponent(componentName: string): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultAppenderComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultAppenderComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, type: string);
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder): org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultAppenderRefComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultAppenderRefComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, ref: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultComponentAndConfigurationBuilder<T>  extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder<any,org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<any>>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultComponentBuilder<T, CB>  extends org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder<any,any>>;
									public constructor(builder: any, name: string, type: string);
									public put(key: string, value: string): any;
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultCompositeFilterComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.CompositeFilterComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.CompositeFilterComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultCompositeFilterComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public add(builder: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.CompositeFilterComponentBuilder;
									public constructor(builder: any, name: string, type: string);
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, onMatch: string, onMismatch: string);
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultConfigurationBuilder<T>  extends org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>>;
									public toXmlConfiguration(): string;
									public newComponent(name: string, type: string, value: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
									public newRootLogger(level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public add(parent: org.apache.logging.log4j.core.config.builder.api.Component, builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAppender(name: string, type: string): org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
									public newAsyncLogger(name: string, level: org.apache.logging.log4j.Level, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public build(): any;
									public newAsyncRootLogger(level: org.apache.logging.log4j.Level, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public setMonitorInterval(intervalSeconds: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newLogger(name: string, level: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAppenderRef(ref: string): org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder;
									public setConfigurationName(name: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public setVerbosity(verbosity: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newRootLogger(): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newRootLogger(level: string): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newAsyncLogger(name: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newAsyncLogger(name: string, level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public setShutdownHook(flag: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newScriptFile(path: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public build(initialize: boolean): any;
									public newAsyncLogger(name: string, level: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newLogger(name: string, level: org.apache.logging.log4j.Level, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newLogger(name: string, level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public constructor(clazz: java.lang.Class<any>);
									public newRootLogger(level: string, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newComponent(type: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
									public setLoggerContext(loggerContext: org.apache.logging.log4j.core.LoggerContext): void;
									public newScriptFile(name: string, path: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public newRootLogger(level: org.apache.logging.log4j.Level, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public addRootProperty(key: string, value: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public setStatusLevel(level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAsyncRootLogger(level: string, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newKeyValuePair(key: string, value: string): org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder;
									public setShutdownTimeout(timeout: number, timeUnit: java.util.concurrent.TimeUnit): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newRootLogger(includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public build(boolean0: boolean): any;
									public newAsyncLogger(name: string, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public newComponent(name: string, type: string): org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>;
									public newLayout(type: string): org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder;
									public setPackages(packages: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAsyncRootLogger(): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newAsyncRootLogger(includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newCustomLevel(name: string, level: number): org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder;
									public setDestination(destination: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newFilter(type: string, onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder;
									public newAsyncLogger(name: string, level: string, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public setAdvertiser(advertiser: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newLogger(name: string, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public constructor();
									public newAsyncRootLogger(level: string): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public writeXmlConfiguration(output: java.io.OutputStream): void;
									public newProperty(name: string, value: string): org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addProperty(key: string, value: string): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newScript(name: string, language: string, text: string): org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder;
									public setConfigurationSource(configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newAsyncRootLogger(level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public newFilter(type: string, onMatch: string, onMismatch: string): org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder;
									public newLogger(name: string): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public newLogger(name: string, level: string, includeLocation: boolean): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultCustomLevelComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.CustomLevelComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultCustomLevelComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, level: number);
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultFilterComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultFilterComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string, onMatch: string, onMismatch: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultKeyValuePairComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.KeyValuePairComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultKeyValuePairComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, key: string, value: string);
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultLayoutComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.LayoutComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultLayoutComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultLoggerComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultLoggerComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public add(builder: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public add(builder: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, level: string, type: string);
									public addAttribute(key: string, value: any): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, level: string);
									public add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, level: string, type: string, includeLocation: boolean);
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, level: string, includeLocation: boolean);
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultPropertyComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.PropertyComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultPropertyComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, value: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultRootLoggerComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultRootLoggerComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public add(builder: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
									public constructor(builder: any, name: string, type: string);
									public add(filterComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, level: string, type: string, includeLocation: boolean);
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, level: string, type: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public add(appenderRefComponentBuilder0: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, level: string, includeLocation: boolean);
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, level: string);
									public add(builder: org.apache.logging.log4j.core.config.builder.api.AppenderRefComponentBuilder): org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultScriptComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.ScriptComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultScriptComponentBuilder>;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public constructor(builder: any, name: string, type: string);
									public getName(): string;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public getBuilder(): any;
									public build(): any;
									public addAttribute(key: string, value: boolean): any;
									public addAttribute(key: string, value: number): any;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public constructor(builder: any, type: string);
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, language: string, text: string);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module builder {
							export module impl {
								export class DefaultScriptFileComponentBuilder extends org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder<org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder> implements org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder  {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.builder.impl.DefaultScriptFileComponentBuilder>;
									public addCharset(charset: string): org.apache.logging.log4j.core.config.builder.impl.DefaultScriptFileComponentBuilder;
									public constructor(builder: any, name: string, type: string);
									public addLanguage(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public addIsWatched(isWatched: string): org.apache.logging.log4j.core.config.builder.impl.DefaultScriptFileComponentBuilder;
									public constructor(builder: any, name: string, type: string, value: string);
									public getBuilder(): org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder<any>;
									public getBuilder(): any;
									public build(): any;
									public addIsWatched(boolean0: boolean): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public addAttribute(key: string, value: number): any;
									public addAttribute(key: string, value: java.lang.Enum<any>): any;
									public constructor(builder: any, type: string);
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, type: string);
									public getName(): string;
									public addLanguage(language: string): org.apache.logging.log4j.core.config.builder.impl.DefaultScriptFileComponentBuilder;
									public addIsWatched(isWatched: boolean): org.apache.logging.log4j.core.config.builder.impl.DefaultScriptFileComponentBuilder;
									public addAttribute(key: string, value: any): any;
									public addAttribute(key: string, value: string): any;
									public addAttribute(key: string, value: boolean): any;
									public addIsWatched(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public build(): org.apache.logging.log4j.core.config.builder.api.Component;
									public addCharset(string0: string): org.apache.logging.log4j.core.config.builder.api.ScriptFileComponentBuilder;
									public constructor(builder: org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder<any>, name: string, path: string);
									public addAttribute(key: string, level: org.apache.logging.log4j.Level): any;
									public addComponent(builder: org.apache.logging.log4j.core.config.builder.api.ComponentBuilder<any>): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module composite {
							export class CompositeConfiguration extends org.apache.logging.log4j.core.config.AbstractConfiguration implements org.apache.logging.log4j.core.config.Reconfigurable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.composite.CompositeConfiguration>;
								public static MERGE_STRATEGY_PROPERTY: string;
								public getProperties(): java.util.Map<string,string>;
								public isShutdownHookEnabled(): boolean;
								public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
								public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
								public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
								public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
								public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
								public constructor(configurations: java.util.List<any>);
								public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
								public constructor();
								public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
								public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
								public getComponent(componentName: string): any;
								public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
								public addComponent(componentName: string, obj: any): void;
								public removeLogger(loggerName: string): void;
								public stop(): void;
								public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public toString(): string;
								public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
								public getPluginPackages(): java.util.List<string>;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
								public hasFilter(): boolean;
								public reconfigure(): org.apache.logging.log4j.core.config.Configuration;
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public getName(): string;
								public setup(): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
								public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
								public getShutdownTimeoutMillis(): number;
								public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
								public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
								public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
								public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
								public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
								public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
								public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module composite {
							export class DefaultMergeStrategy extends java.lang.Object implements org.apache.logging.log4j.core.config.composite.MergeStrategy {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.composite.DefaultMergeStrategy>;
								public mergeRootProperties(rootNode: org.apache.logging.log4j.core.config.Node, configuration: org.apache.logging.log4j.core.config.AbstractConfiguration): void;
								public constructor();
								public mergConfigurations(target: org.apache.logging.log4j.core.config.Node, source: org.apache.logging.log4j.core.config.Node, pluginManager: org.apache.logging.log4j.core.config.plugins.util.PluginManager): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module composite {
							export class MergeStrategy extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.composite.MergeStrategy>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.composite.MergeStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									mergeRootProperties(node0: org.apache.logging.log4j.core.config.Node, abstractConfiguration1: org.apache.logging.log4j.core.config.AbstractConfiguration): void;
									mergConfigurations(node0: org.apache.logging.log4j.core.config.Node, node1: org.apache.logging.log4j.core.config.Node, pluginManager2: org.apache.logging.log4j.core.config.plugins.util.PluginManager): void;
								});
								public constructor();
								public mergeRootProperties(node0: org.apache.logging.log4j.core.config.Node, abstractConfiguration1: org.apache.logging.log4j.core.config.AbstractConfiguration): void;
								public mergConfigurations(node0: org.apache.logging.log4j.core.config.Node, node1: org.apache.logging.log4j.core.config.Node, pluginManager2: org.apache.logging.log4j.core.config.plugins.util.PluginManager): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module json {
							export class JsonConfiguration extends org.apache.logging.log4j.core.config.AbstractConfiguration implements org.apache.logging.log4j.core.config.Reconfigurable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.json.JsonConfiguration>;
								public getProperties(): java.util.Map<string,string>;
								public isShutdownHookEnabled(): boolean;
								public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
								public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
								public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
								public getObjectMapper(): com.fasterxml.jackson.databind.ObjectMapper;
								public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
								public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
								public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
								public constructor();
								public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
								public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
								public getComponent(componentName: string): any;
								public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
								public addComponent(componentName: string, obj: any): void;
								public removeLogger(loggerName: string): void;
								public stop(): void;
								public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public toString(): string;
								public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
								public getPluginPackages(): java.util.List<string>;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
								public hasFilter(): boolean;
								public reconfigure(): org.apache.logging.log4j.core.config.Configuration;
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public getName(): string;
								public setup(): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configSource: org.apache.logging.log4j.core.config.ConfigurationSource);
								public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
								public getShutdownTimeoutMillis(): number;
								public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
								public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
								public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
								public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
								public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
								public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
								public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							}
							export module JsonConfiguration {
								export class ErrorType {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.json.JsonConfiguration.ErrorType>;
									public static CLASS_NOT_FOUND: org.apache.logging.log4j.core.config.json.JsonConfiguration.ErrorType;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public static values(): native.Array<org.apache.logging.log4j.core.config.json.JsonConfiguration.ErrorType>;
									public static valueOf(name: string): org.apache.logging.log4j.core.config.json.JsonConfiguration.ErrorType;
								}
								export class Status extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.json.JsonConfiguration.Status>;
									public constructor(name: string, node: com.fasterxml.jackson.databind.JsonNode, errorType: org.apache.logging.log4j.core.config.json.JsonConfiguration.ErrorType);
									public toString(): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module json {
							export class JsonConfigurationFactory extends org.apache.logging.log4j.core.config.ConfigurationFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.json.JsonConfigurationFactory>;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.Configuration;
								public constructor();
								public isActive(): boolean;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.config.Configuration;
								public getSupportedTypes(): native.Array<string>;
								public getConfiguration(loggerContext0: org.apache.logging.log4j.core.LoggerContext, configurationSource1: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class Plugin extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.Plugin>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.Plugin interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									name(): string;
									category(): string;
									elementType(): string;
									printObject(): boolean;
									deferChildren(): boolean;
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public static EMPTY: string;
								public category(): string;
								public toString(): string;
								public equals(obj: any): boolean;
								public name(): string;
								public printObject(): boolean;
								public deferChildren(): boolean;
								public elementType(): string;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginAliases extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginAliases>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginAliases interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									value(): native.Array<string>;
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public value(): native.Array<string>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginAttribute extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginAttribute>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginAttribute interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									defaultBoolean(): boolean;
									defaultByte(): number;
									defaultChar(): string;
									defaultClass(): java.lang.Class<any>;
									defaultDouble(): number;
									defaultFloat(): number;
									defaultInt(): number;
									defaultLong(): number;
									defaultShort(): number;
									defaultString(): string;
									value(): string;
									sensitive(): boolean;
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public defaultString(): string;
								public toString(): string;
								public defaultLong(): number;
								public defaultChar(): string;
								public defaultDouble(): number;
								public defaultFloat(): number;
								public defaultInt(): number;
								public defaultClass(): java.lang.Class<any>;
								public value(): string;
								public equals(obj: any): boolean;
								public sensitive(): boolean;
								public annotationType(): java.lang.Class<any>;
								public defaultBoolean(): boolean;
								public defaultShort(): number;
								public hashCode(): number;
								public defaultByte(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginBuilderAttribute extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									value(): string;
									sensitive(): boolean;
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public value(): string;
								public equals(obj: any): boolean;
								public sensitive(): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginBuilderFactory extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginConfiguration extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginConfiguration>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginConfiguration interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginElement extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginElement>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginElement interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									value(): string;
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public value(): string;
								public equals(obj: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginFactory extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginFactory>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginNode extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginNode>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginNode interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginValue extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginValue>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginValue interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									value(): string;
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public value(): string;
								public equals(obj: any): boolean;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export class PluginVisitorStrategy extends java.lang.Object implements java.lang.annotation.Annotation {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.PluginVisitorStrategy>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.PluginVisitorStrategy interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									value(): java.lang.Class<any>;
									equals(object0: any): boolean;
									hashCode(): number;
									toString(): string;
									annotationType(): java.lang.Class<any>;
								});
								public constructor();
								public toString(): string;
								public equals(obj: any): boolean;
								public value(): java.lang.Class<any>;
								public annotationType(): java.lang.Class<any>;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module convert {
								export class Base64Converter extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.Base64Converter>;
									public constructor();
									public static parseBase64Binary(encoded: string): native.Array<number>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module convert {
								export class DateTypeConverter extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.DateTypeConverter>;
									public static fromMillis(millis: number, type: java.lang.Class<any>): java.util.Date;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module convert {
								export class EnumConverter<E>  extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.EnumConverter<any>>;
									public constructor(clazz: java.lang.Class<any>);
									public convert(s: string): any;
									public convert(string0: string): any;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module convert {
								export class HexConverter extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.HexConverter>;
									public constructor();
									public static parseHexBinary(s: string): native.Array<number>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module convert {
								export class TypeConverter<T>  extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										convert(string0: string): T;
									});
									public constructor();
									public convert(string0: string): T;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module convert {
								export class TypeConverterRegistry extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverterRegistry>;
									public static getInstance(): org.apache.logging.log4j.core.config.plugins.convert.TypeConverterRegistry;
									public findCompatibleConverter(type: java.lang.reflect.Type): org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module convert {
								export class TypeConverters extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters>;
									public static CATEGORY: string;
									public constructor();
									public static convert(s: string, clazz: java.lang.Class<any>, defaultValue: any): any;
								}
								export module TypeConverters {
									export class BigDecimalConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.math.BigDecimal> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.BigDecimalConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.math.BigDecimal;
									}
									export class BigIntegerConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.math.BigInteger> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.BigIntegerConverter>;
										public convert(s: string): java.math.BigInteger;
										public convert(string0: string): any;
										public constructor();
									}
									export class BooleanConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Boolean> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.BooleanConverter>;
										public convert(s: string): java.lang.Boolean;
										public convert(string0: string): any;
										public constructor();
									}
									export class ByteArrayConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<native.Array<number>> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ByteArrayConverter>;
										public convert(value: string): native.Array<number>;
										public convert(string0: string): any;
										public constructor();
									}
									export class ByteConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Byte> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ByteConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.lang.Byte;
										public constructor();
									}
									export class CharArrayConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<native.Array<string>> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CharArrayConverter>;
										public convert(s: string): native.Array<string>;
										public convert(string0: string): any;
										public constructor();
									}
									export class CharacterConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Character> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CharacterConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.lang.Character;
									}
									export class CharsetConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.nio.charset.Charset> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CharsetConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.nio.charset.Charset;
										public constructor();
									}
									export class ClassConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Class<any>> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ClassConverter>;
										public convert(s: string): java.lang.Class<any>;
										public convert(string0: string): any;
										public constructor();
									}
									export class CronExpressionConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<org.apache.logging.log4j.core.util.CronExpression> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.CronExpressionConverter>;
										public convert(s: string): org.apache.logging.log4j.core.util.CronExpression;
										public convert(string0: string): any;
										public constructor();
									}
									export class DoubleConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Double> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.DoubleConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.lang.Double;
									}
									export class DurationConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<org.apache.logging.log4j.core.appender.rolling.action.Duration> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.DurationConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): org.apache.logging.log4j.core.appender.rolling.action.Duration;
									}
									export class FileConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.io.File> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.FileConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.io.File;
									}
									export class FloatConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Float> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.FloatConverter>;
										public convert(s: string): java.lang.Float;
										public convert(string0: string): any;
										public constructor();
									}
									export class InetAddressConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.net.InetAddress> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.InetAddressConverter>;
										public convert(s: string): java.net.InetAddress;
										public convert(string0: string): any;
										public constructor();
									}
									export class IntegerConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Integer> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.IntegerConverter>;
										public convert(s: string): java.lang.Integer;
										public convert(string0: string): any;
										public constructor();
									}
									export class LevelConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<org.apache.logging.log4j.Level> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.LevelConverter>;
										public convert(string0: string): any;
										public convert(s: string): org.apache.logging.log4j.Level;
										public constructor();
									}
									export class LongConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Long> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.LongConverter>;
										public convert(s: string): java.lang.Long;
										public convert(string0: string): any;
										public constructor();
									}
									export class PathConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.nio.file.Path> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.PathConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.nio.file.Path;
									}
									export class PatternConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.util.regex.Pattern> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.PatternConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.util.regex.Pattern;
									}
									export class SecurityProviderConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.security.Provider> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.SecurityProviderConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.security.Provider;
										public constructor();
									}
									export class ShortConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.lang.Short> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.ShortConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.lang.Short;
									}
									export class StringConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<string> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.StringConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): string;
									}
									export class UriConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.net.URI> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.UriConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.net.URI;
										public constructor();
									}
									export class UrlConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.net.URL> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.UrlConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.net.URL;
										public constructor();
									}
									export class UuidConverter extends org.apache.logging.log4j.core.config.plugins.convert.TypeConverter<java.util.UUID> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.convert.TypeConverters.UuidConverter>;
										public convert(string0: string): any;
										public constructor();
										public convert(s: string): java.util.UUID;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module processor {
								export class PluginCache extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.processor.PluginCache>;
									public getAllCategories(): java.util.Map<string,java.util.Map<string,org.apache.logging.log4j.core.config.plugins.processor.PluginEntry>>;
									public constructor();
									public getCategory(category: string): java.util.Map<string,org.apache.logging.log4j.core.config.plugins.processor.PluginEntry>;
									public size(): number;
									public loadCacheFiles(resources: java.util.Enumeration<java.net.URL>): void;
									public writeCache(os: java.io.OutputStream): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module processor {
								export class PluginEntry extends java.lang.Object implements java.io.Serializable {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.processor.PluginEntry>;
									public constructor();
									public isPrintable(): boolean;
									public getClassName(): string;
									public isDefer(): boolean;
									public getCategory(): string;
									public getKey(): string;
									public toString(): string;
									public getName(): string;
									public setKey(key: string): void;
									public setCategory(category: string): void;
									public setDefer(defer: boolean): void;
									public setPrintable(printable: boolean): void;
									public setClassName(className: string): void;
									public setName(name: string): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module processor {
								export class PluginProcessor {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor>;
									public static PLUGIN_CACHE_FILE: string;
									public process(annotations: java.util.Set<any>, roundEnv: javax.annotation.processing.RoundEnvironment): boolean;
									public constructor();
									public getSupportedSourceVersion(): javax.lang.model.SourceVersion;
								}
								export module PluginProcessor {
									export class PluginAliasesElementVisitor extends javax.lang.model.util.SimpleElementVisitor7<java.util.Collection<org.apache.logging.log4j.core.config.plugins.processor.PluginEntry>,org.apache.logging.log4j.core.config.plugins.Plugin> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor.PluginAliasesElementVisitor>;
										public visitType(e: javax.lang.model.element.TypeElement, plugin: org.apache.logging.log4j.core.config.plugins.Plugin): java.util.Collection<org.apache.logging.log4j.core.config.plugins.processor.PluginEntry>;
									}
									export class PluginElementVisitor extends javax.lang.model.util.SimpleElementVisitor7<org.apache.logging.log4j.core.config.plugins.processor.PluginEntry,org.apache.logging.log4j.core.config.plugins.Plugin> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.processor.PluginProcessor.PluginElementVisitor>;
										public visitType(e: javax.lang.model.element.TypeElement, plugin: org.apache.logging.log4j.core.config.plugins.Plugin): org.apache.logging.log4j.core.config.plugins.processor.PluginEntry;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module util {
								export class PluginBuilder extends org.apache.logging.log4j.core.util.Builder<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.util.PluginBuilder>;
									public build(): any;
									public withConfigurationNode(node: org.apache.logging.log4j.core.config.Node): org.apache.logging.log4j.core.config.plugins.util.PluginBuilder;
									public withConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.config.plugins.util.PluginBuilder;
									public constructor(pluginType: org.apache.logging.log4j.core.config.plugins.util.PluginType<any>);
									public forLogEvent(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.config.plugins.util.PluginBuilder;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module util {
								export class PluginManager extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.util.PluginManager>;
									/** @deprecated */
									public static main(strings0: native.Array<string>): void;
									public getPluginType(name: string): org.apache.logging.log4j.core.config.plugins.util.PluginType<any>;
									public constructor(category: string);
									public static addPackage(p: string): void;
									public static addPackages(packages: java.util.Collection<string>): void;
									public collectPlugins(packages: java.util.List<string>): void;
									public getPlugins(): java.util.Map<string,org.apache.logging.log4j.core.config.plugins.util.PluginType<any>>;
									public collectPlugins(): void;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module util {
								export class PluginRegistry extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.util.PluginRegistry>;
									public loadFromMainClassLoader(): java.util.Map<string,java.util.List<org.apache.logging.log4j.core.config.plugins.util.PluginType<any>>>;
									public loadFromPackage(pkg: string): java.util.Map<string,java.util.List<org.apache.logging.log4j.core.config.plugins.util.PluginType<any>>>;
									public loadFromBundle(bundleId: number, loader: java.lang.ClassLoader): java.util.Map<string,java.util.List<org.apache.logging.log4j.core.config.plugins.util.PluginType<any>>>;
									public getPluginsByCategoryByBundleId(): java.util.Map<java.lang.Long,java.util.Map<string,java.util.List<org.apache.logging.log4j.core.config.plugins.util.PluginType<any>>>>;
									public clearBundlePlugins(bundleId: number): void;
									public static getInstance(): org.apache.logging.log4j.core.config.plugins.util.PluginRegistry;
									public clear(): void;
								}
								export module PluginRegistry {
									export class PluginTest extends java.lang.Object implements org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.Test {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.util.PluginRegistry.PluginTest>;
										public matches(resource: java.net.URI): boolean;
										public constructor();
										public toString(): string;
										public doesMatchResource(): boolean;
										public doesMatchClass(): boolean;
										public matches(type: java.lang.Class<any>): boolean;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module util {
								export class PluginType<T>  extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.util.PluginType<any>>;
									public isObjectPrintable(): boolean;
									public constructor(pluginEntry: org.apache.logging.log4j.core.config.plugins.processor.PluginEntry, pluginClass: java.lang.Class<T>, elementName: string);
									public getElementName(): string;
									public getCategory(): string;
									public getKey(): string;
									public toString(): string;
									public isDeferChildren(): boolean;
									public getPluginClass(): java.lang.Class<T>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module util {
								export class ResolverUtil extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.util.ResolverUtil>;
									public addIfMatching(test: org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.Test, fqn: string): void;
									public constructor();
									public setClassLoader(aClassloader: java.lang.ClassLoader): void;
									public find(test: org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.Test, packageNames: native.Array<string>): void;
									public getClasses(): java.util.Set<java.lang.Class<any>>;
									public findInPackage(test: org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.Test, packageName: string): void;
									public getClassLoader(): java.lang.ClassLoader;
									public getResources(): java.util.Set<java.net.URI>;
								}
								export module ResolverUtil {
									export class Test extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.util.ResolverUtil.Test>;
										/**
										 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.util.ResolverUtil$Test interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
										 */
										public constructor(implementation: {
											matches(class0: java.lang.Class<any>): boolean;
											matches(uRI0: java.net.URI): boolean;
											doesMatchClass(): boolean;
											doesMatchResource(): boolean;
										});
										public constructor();
										public doesMatchResource(): boolean;
										public matches(uRI0: java.net.URI): boolean;
										public matches(class0: java.lang.Class<any>): boolean;
										public doesMatchClass(): boolean;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export class Constraint extends java.lang.Object implements java.lang.annotation.Annotation {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.Constraint>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.validation.Constraint interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										value(): java.lang.Class<any>;
										equals(object0: any): boolean;
										hashCode(): number;
										toString(): string;
										annotationType(): java.lang.Class<any>;
									});
									public constructor();
									public hashCode(): number;
									public annotationType(): java.lang.Class<any>;
									public equals(obj: any): boolean;
									public toString(): string;
									public value(): java.lang.Class<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export class ConstraintValidator<A>  extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidator<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidator<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										initialize(annotation0: A): void;
										isValid(string0: string, object1: any): boolean;
									});
									public constructor();
									public initialize(annotation0: A): void;
									public isValid(string0: string, object1: any): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export class ConstraintValidators extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidators>;
									public static findValidators(annotations: native.Array<java.lang.annotation.Annotation>): java.util.Collection<org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidator<any>>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export module constraints {
									export class Required extends java.lang.Object implements java.lang.annotation.Annotation {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.constraints.Required>;
										/**
										 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.validation.constraints.Required interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
										 */
										public constructor(implementation: {
											message(): string;
											equals(object0: any): boolean;
											hashCode(): number;
											toString(): string;
											annotationType(): java.lang.Class<any>;
										});
										public constructor();
										public message(): string;
										public hashCode(): number;
										public annotationType(): java.lang.Class<any>;
										public toString(): string;
										public equals(obj: any): boolean;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export module constraints {
									export class ValidHost extends java.lang.Object implements java.lang.annotation.Annotation {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidHost>;
										/**
										 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidHost interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
										 */
										public constructor(implementation: {
											message(): string;
											equals(object0: any): boolean;
											hashCode(): number;
											toString(): string;
											annotationType(): java.lang.Class<any>;
										});
										public constructor();
										public message(): string;
										public hashCode(): number;
										public annotationType(): java.lang.Class<any>;
										public toString(): string;
										public equals(obj: any): boolean;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export module constraints {
									export class ValidPort extends java.lang.Object implements java.lang.annotation.Annotation {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidPort>;
										/**
										 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidPort interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
										 */
										public constructor(implementation: {
											message(): string;
											equals(object0: any): boolean;
											hashCode(): number;
											toString(): string;
											annotationType(): java.lang.Class<any>;
										});
										public constructor();
										public message(): string;
										public hashCode(): number;
										public annotationType(): java.lang.Class<any>;
										public toString(): string;
										public equals(obj: any): boolean;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export module validators {
									export class RequiredValidator extends org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidator<org.apache.logging.log4j.core.config.plugins.validation.constraints.Required> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.validators.RequiredValidator>;
										public isValid(name: string, value: any): boolean;
										public initialize(anAnnotation: org.apache.logging.log4j.core.config.plugins.validation.constraints.Required): void;
										public constructor();
										public initialize(annotation0: any): void;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export module validators {
									export class ValidHostValidator extends org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidator<org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidHost> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.validators.ValidHostValidator>;
										public isValid(name: string, value: any): boolean;
										public constructor();
										public initialize(annotation: org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidHost): void;
										public initialize(annotation0: any): void;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module validation {
								export module validators {
									export class ValidPortValidator extends org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidator<org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidPort> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.validation.validators.ValidPortValidator>;
										public isValid(name: string, value: any): boolean;
										public constructor();
										public initialize(annotation0: any): void;
										public initialize(annotation: org.apache.logging.log4j.core.config.plugins.validation.constraints.ValidPort): void;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export abstract class AbstractPluginVisitor<A>  extends org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor<any>>;
									public static LOGGER: org.apache.logging.log4j.Logger;
									public clazz: java.lang.Class<any>;
									public annotation: any;
									public aliases: native.Array<string>;
									public conversionType: java.lang.Class<any>;
									public substitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor;
									public member: java.lang.reflect.Member;
									public setAnnotation(anAnnotation: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setConversionType(aConversionType: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public constructor(clazz: java.lang.Class<any>);
									public static removeAttributeValue(attributes: java.util.Map<string,string>, name: string, aliases: native.Array<string>): string;
									public visit(configuration0: org.apache.logging.log4j.core.config.Configuration, node1: org.apache.logging.log4j.core.config.Node, logEvent2: org.apache.logging.log4j.core.LogEvent, stringBuilder3: java.lang.StringBuilder): any;
									public setMember(aMember: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public convert(value: string, defaultValue: any): any;
									public setAliases(someAliases: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setStrSubstitutor(aSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginAttributeVisitor extends org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor<org.apache.logging.log4j.core.config.plugins.PluginAttribute> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor>;
									public constructor();
									public setAnnotation(anAnnotation: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setConversionType(aConversionType: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public constructor(clazz: java.lang.Class<any>);
									public setMember(aMember: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public visit(configuration: org.apache.logging.log4j.core.config.Configuration, node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent, log: java.lang.StringBuilder): any;
									public setAliases(someAliases: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setStrSubstitutor(aSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginBuilderAttributeVisitor extends org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor<org.apache.logging.log4j.core.config.plugins.PluginBuilderAttribute> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginBuilderAttributeVisitor>;
									public constructor();
									public setAnnotation(anAnnotation: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setConversionType(aConversionType: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public constructor(clazz: java.lang.Class<any>);
									public setMember(aMember: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public visit(configuration: org.apache.logging.log4j.core.config.Configuration, node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent, log: java.lang.StringBuilder): any;
									public setAliases(someAliases: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setStrSubstitutor(aSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginConfigurationVisitor extends org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor<org.apache.logging.log4j.core.config.plugins.PluginConfiguration> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginConfigurationVisitor>;
									public constructor();
									public setAnnotation(anAnnotation: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setConversionType(aConversionType: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public constructor(clazz: java.lang.Class<any>);
									public setMember(aMember: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public visit(configuration: org.apache.logging.log4j.core.config.Configuration, node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent, log: java.lang.StringBuilder): any;
									public setAliases(someAliases: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setStrSubstitutor(aSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginElementVisitor extends org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor<org.apache.logging.log4j.core.config.plugins.PluginElement> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginElementVisitor>;
									public constructor();
									public setAnnotation(anAnnotation: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setConversionType(aConversionType: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public constructor(clazz: java.lang.Class<any>);
									public setMember(aMember: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public visit(configuration: org.apache.logging.log4j.core.config.Configuration, node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent, log: java.lang.StringBuilder): any;
									public setAliases(someAliases: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setStrSubstitutor(aSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginNodeVisitor extends org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor<org.apache.logging.log4j.core.config.plugins.PluginNode> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginNodeVisitor>;
									public constructor();
									public setAnnotation(anAnnotation: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setConversionType(aConversionType: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public constructor(clazz: java.lang.Class<any>);
									public setMember(aMember: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public visit(configuration: org.apache.logging.log4j.core.config.Configuration, node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent, log: java.lang.StringBuilder): any;
									public setAliases(someAliases: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setStrSubstitutor(aSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginValueVisitor extends org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor<org.apache.logging.log4j.core.config.plugins.PluginValue> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginValueVisitor>;
									public constructor();
									public setAnnotation(anAnnotation: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setConversionType(aConversionType: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public constructor(clazz: java.lang.Class<any>);
									public setMember(aMember: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public visit(configuration: org.apache.logging.log4j.core.config.Configuration, node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent, log: java.lang.StringBuilder): any;
									public setAliases(someAliases: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
									public setStrSubstitutor(aSubstitutor: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginVisitor<A>  extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										setAnnotation(annotation0: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
										setAliases(strings0: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
										setConversionType(class0: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
										setStrSubstitutor(strSubstitutor0: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
										setMember(member0: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
										visit(configuration0: org.apache.logging.log4j.core.config.Configuration, node1: org.apache.logging.log4j.core.config.Node, logEvent2: org.apache.logging.log4j.core.LogEvent, stringBuilder3: java.lang.StringBuilder): any;
									});
									public constructor();
									public setAnnotation(annotation0: java.lang.annotation.Annotation): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
									public visit(configuration0: org.apache.logging.log4j.core.config.Configuration, node1: org.apache.logging.log4j.core.config.Node, logEvent2: org.apache.logging.log4j.core.LogEvent, stringBuilder3: java.lang.StringBuilder): any;
									public setAliases(strings0: native.Array<string>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
									public setConversionType(class0: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
									public setStrSubstitutor(strSubstitutor0: org.apache.logging.log4j.core.lookup.StrSubstitutor): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
									public setMember(member0: java.lang.reflect.Member): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<A>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module plugins {
							export module visitors {
								export class PluginVisitors extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitors>;
									public static findVisitor(annotation: java.lang.Class<any>): org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor<any>;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module properties {
							export class PropertiesConfiguration extends org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration implements org.apache.logging.log4j.core.config.Reconfigurable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.properties.PropertiesConfiguration>;
								public getProperties(): java.util.Map<string,string>;
								public isShutdownHookEnabled(): boolean;
								public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
								public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
								public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource, root: org.apache.logging.log4j.core.config.builder.api.Component);
								public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
								public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource, rootComponent: org.apache.logging.log4j.core.config.builder.api.Component);
								public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
								public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
								public constructor();
								public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
								public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
								public getComponent(componentName: string): any;
								public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
								public addComponent(componentName: string, obj: any): void;
								public removeLogger(loggerName: string): void;
								public stop(): void;
								public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
								public getPluginPackages(): java.util.List<string>;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
								public hasFilter(): boolean;
								public reconfigure(): org.apache.logging.log4j.core.config.Configuration;
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public getName(): string;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
								public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
								public getShutdownTimeoutMillis(): number;
								public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
								public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
								public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
								public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
								public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
								public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
								public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module properties {
							export class PropertiesConfigurationBuilder extends org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.config.properties.PropertiesConfiguration>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder>;
								public setConfigurationSource(source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder;
								public build(): org.apache.logging.log4j.core.config.properties.PropertiesConfiguration;
								public setLoggerContext(loggerContext: org.apache.logging.log4j.core.LoggerContext): org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder;
								public build(): any;
								public constructor();
								public setRootProperties(rootProperties: java.util.Properties): org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder;
								public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module properties {
							export class PropertiesConfigurationFactory extends org.apache.logging.log4j.core.config.ConfigurationFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory>;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.Configuration;
								public constructor();
								public getSupportedTypes(): native.Array<string>;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.config.Configuration;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.properties.PropertiesConfiguration;
								public getConfiguration(loggerContext0: org.apache.logging.log4j.core.LoggerContext, configurationSource1: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module status {
							export class StatusConfiguration extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.status.StatusConfiguration>;
								public withDestination(destination: string): org.apache.logging.log4j.core.config.status.StatusConfiguration;
								public error(message: string): void;
								public withStatus(status: string): org.apache.logging.log4j.core.config.status.StatusConfiguration;
								public withVerboseClasses(verboseClasses: native.Array<string>): org.apache.logging.log4j.core.config.status.StatusConfiguration;
								public constructor();
								public initialize(): void;
								public withVerbosity(verbosity: string): org.apache.logging.log4j.core.config.status.StatusConfiguration;
								public withStatus(status: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.config.status.StatusConfiguration;
							}
							export module StatusConfiguration {
								export class Verbosity {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.status.StatusConfiguration.Verbosity>;
									public static QUIET: org.apache.logging.log4j.core.config.status.StatusConfiguration.Verbosity;
									public static VERBOSE: org.apache.logging.log4j.core.config.status.StatusConfiguration.Verbosity;
									public static values(): native.Array<org.apache.logging.log4j.core.config.status.StatusConfiguration.Verbosity>;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public static toVerbosity(value: string): org.apache.logging.log4j.core.config.status.StatusConfiguration.Verbosity;
									public static valueOf(name: string): org.apache.logging.log4j.core.config.status.StatusConfiguration.Verbosity;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module xml {
							export class XmlConfiguration extends org.apache.logging.log4j.core.config.AbstractConfiguration implements org.apache.logging.log4j.core.config.Reconfigurable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.xml.XmlConfiguration>;
								public getProperties(): java.util.Map<string,string>;
								public isShutdownHookEnabled(): boolean;
								public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
								public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
								public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
								public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
								public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
								public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
								public constructor();
								public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
								public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
								public getComponent(componentName: string): any;
								public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
								public addComponent(componentName: string, obj: any): void;
								public removeLogger(loggerName: string): void;
								public stop(): void;
								public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public toString(): string;
								public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
								public getPluginPackages(): java.util.List<string>;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
								public hasFilter(): boolean;
								public reconfigure(): org.apache.logging.log4j.core.config.Configuration;
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public getName(): string;
								public setup(): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configSource: org.apache.logging.log4j.core.config.ConfigurationSource);
								public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
								public getShutdownTimeoutMillis(): number;
								public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
								public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
								public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configurationSource: org.apache.logging.log4j.core.config.ConfigurationSource);
								public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
								public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
								public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
								public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							}
							export module XmlConfiguration {
								export class ErrorType {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.xml.XmlConfiguration.ErrorType>;
									public static CLASS_NOT_FOUND: org.apache.logging.log4j.core.config.xml.XmlConfiguration.ErrorType;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public static valueOf(name: string): org.apache.logging.log4j.core.config.xml.XmlConfiguration.ErrorType;
									public static values(): native.Array<org.apache.logging.log4j.core.config.xml.XmlConfiguration.ErrorType>;
								}
								export class Status extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.config.xml.XmlConfiguration.Status>;
									public constructor(name: string, element: org.w3c.dom.Element, errorType: org.apache.logging.log4j.core.config.xml.XmlConfiguration.ErrorType);
									public toString(): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module xml {
							export class XmlConfigurationFactory extends org.apache.logging.log4j.core.config.ConfigurationFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory>;
								public static SUFFIXES: native.Array<string>;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.Configuration;
								public constructor();
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.config.Configuration;
								public getSupportedTypes(): native.Array<string>;
								public getConfiguration(loggerContext0: org.apache.logging.log4j.core.LoggerContext, configurationSource1: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module yaml {
							export class YamlConfiguration extends org.apache.logging.log4j.core.config.json.JsonConfiguration {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.yaml.YamlConfiguration>;
								public getProperties(): java.util.Map<string,string>;
								public isShutdownHookEnabled(): boolean;
								public getAppenders(): java.util.Map<string,org.apache.logging.log4j.core.Appender>;
								public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
								public removeListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public addLoggerAppender(logger: org.apache.logging.log4j.core.Logger, appender: org.apache.logging.log4j.core.Appender): void;
								public getAppender(appenderName: string): org.apache.logging.log4j.core.Appender;
								public addAppender(appender: org.apache.logging.log4j.core.Appender): void;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
								public setAdvertiser(advertiser: org.apache.logging.log4j.core.net.Advertiser): void;
								public getObjectMapper(): com.fasterxml.jackson.databind.ObjectMapper;
								public getAsyncLoggerConfigDelegate(): org.apache.logging.log4j.core.async.AsyncLoggerConfigDelegate;
								public getStrSubstitutor(): org.apache.logging.log4j.core.lookup.StrSubstitutor;
								public getCustomLevels(): java.util.List<org.apache.logging.log4j.core.config.CustomLevelConfig>;
								public constructor();
								public createConfiguration(node: org.apache.logging.log4j.core.config.Node, event: org.apache.logging.log4j.core.LogEvent): void;
								public addLogger(loggerName: string, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): void;
								public getComponent(componentName: string): any;
								public getLoggers(): java.util.Map<string,org.apache.logging.log4j.core.config.LoggerConfig>;
								public addComponent(componentName: string, obj: any): void;
								public removeLogger(loggerName: string): void;
								public stop(): void;
								public getScheduler(): org.apache.logging.log4j.core.config.ConfigurationScheduler;
								public constructor(filter: org.apache.logging.log4j.core.Filter);
								public getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
								public getPluginPackages(): java.util.List<string>;
								public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public getReliabilityStrategy(loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig): org.apache.logging.log4j.core.config.ReliabilityStrategy;
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public addListener(listener: org.apache.logging.log4j.core.config.ConfigurationListener): void;
								public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
								public stop(future: java.util.concurrent.Future<any>): boolean;
								public getWatchManager(): org.apache.logging.log4j.core.util.WatchManager;
								public hasFilter(): boolean;
								public reconfigure(): org.apache.logging.log4j.core.config.Configuration;
								public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
								public getName(): string;
								public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
								public getConfigurationSource(): org.apache.logging.log4j.core.config.ConfigurationSource;
								public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, configSource: org.apache.logging.log4j.core.config.ConfigurationSource);
								public getLoggerConfig(loggerName: string): org.apache.logging.log4j.core.config.LoggerConfig;
								public getShutdownTimeoutMillis(): number;
								public getAdvertiser(): org.apache.logging.log4j.core.net.Advertiser;
								public setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
								public addLoggerFilter(logger: org.apache.logging.log4j.core.Logger, filter: org.apache.logging.log4j.core.Filter): void;
								public setLoggerAdditive(logger: org.apache.logging.log4j.core.Logger, additive: boolean): void;
								public getScriptManager(): org.apache.logging.log4j.core.script.ScriptManager;
								public getRootLogger(): org.apache.logging.log4j.core.config.LoggerConfig;
								public getLoggerContext(): org.apache.logging.log4j.core.LoggerContext;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module config {
						export module yaml {
							export class YamlConfigurationFactory extends org.apache.logging.log4j.core.config.ConfigurationFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.config.yaml.YamlConfigurationFactory>;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI, loader: java.lang.ClassLoader): org.apache.logging.log4j.core.config.Configuration;
								public constructor();
								public isActive(): boolean;
								public getConfiguration(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.config.Configuration;
								public getSupportedTypes(): native.Array<string>;
								public getConfiguration(loggerContext0: org.apache.logging.log4j.core.LoggerContext, configurationSource1: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.config.Configuration;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export abstract class AbstractFilter extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.Filter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.AbstractFilter>;
							public onMatch: org.apache.logging.log4j.core.Filter.Result;
							public onMismatch: org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public hashCodeImpl(): number;
							public stop(): void;
							public start(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor(onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result);
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor();
							public equalsImpl(obj: any): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public initialize(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public isStarted(): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public isStopped(): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
						export module AbstractFilter {
							export abstract class AbstractFilterBuilder<B>  extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.AbstractFilter.AbstractFilterBuilder<any>>;
								public static ATTR_ON_MISMATCH: string;
								public static ATTR_ON_MATCH: string;
								public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
								public setOnMatch(onMatch: org.apache.logging.log4j.core.Filter.Result): B;
								public setOnMismatch(onMismatch: org.apache.logging.log4j.core.Filter.Result): B;
								public asBuilder(): B;
								public constructor();
								public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export abstract class AbstractFilterable extends org.apache.logging.log4j.core.AbstractLifeCycle implements org.apache.logging.log4j.core.filter.Filterable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.AbstractFilterable>;
							public constructor();
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public initialize(): void;
							public isStarted(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter, propertyArray: native.Array<org.apache.logging.log4j.core.config.Property>);
							public addFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public isStopped(): boolean;
							public constructor(filter: org.apache.logging.log4j.core.Filter);
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit, changeLifeCycleState: boolean): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
							public getPropertyArray(): native.Array<org.apache.logging.log4j.core.config.Property>;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public start(): void;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): void;
							public isFiltered(event: org.apache.logging.log4j.core.LogEvent): boolean;
						}
						export module AbstractFilterable {
							export abstract class Builder<B>  extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.AbstractFilterable.Builder<any>>;
								public getPropertyArray(): native.Array<org.apache.logging.log4j.core.config.Property>;
								/** @deprecated */
								public withFilter(filter: org.apache.logging.log4j.core.Filter): B;
								public asBuilder(): B;
								public constructor();
								public getFilter(): org.apache.logging.log4j.core.Filter;
								public setFilter(filter: org.apache.logging.log4j.core.Filter): B;
								public setPropertyArray(properties: native.Array<org.apache.logging.log4j.core.config.Property>): B;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class BurstFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.BurstFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public getAvailable(): number;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public clear(): void;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public static newBuilder(): org.apache.logging.log4j.core.filter.BurstFilter.Builder;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
						export module BurstFilter {
							export class Builder extends org.apache.logging.log4j.core.filter.AbstractFilter.AbstractFilterBuilder<org.apache.logging.log4j.core.filter.BurstFilter.Builder> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.filter.BurstFilter>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.BurstFilter.Builder>;
								public setLevel(level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.filter.BurstFilter.Builder;
								public build(): org.apache.logging.log4j.core.filter.BurstFilter;
								public build(): any;
								public constructor();
								public setRate(rate: number): org.apache.logging.log4j.core.filter.BurstFilter.Builder;
								public setMaxBurst(maxBurst: number): org.apache.logging.log4j.core.filter.BurstFilter.Builder;
							}
							export class LogDelay extends java.lang.Object implements java.util.concurrent.Delayed {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.BurstFilter.LogDelay>;
								public equals(obj: any): boolean;
								public compareTo(delayed: java.util.concurrent.Delayed): number;
								public setDelay(delay: number): void;
								public getDelay(timeUnit: java.util.concurrent.TimeUnit): number;
								public equals(o: any): boolean;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class CompositeFilter extends org.apache.logging.log4j.core.AbstractLifeCycle {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.CompositeFilter>;
							public size(): number;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public spliterator(): java.util.Spliterator<any>;
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public stop(): void;
							public start(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public static createFilters(filters: native.Array<org.apache.logging.log4j.core.Filter>): org.apache.logging.log4j.core.filter.CompositeFilter;
							public iterator(): java.util.Iterator<any>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public initialize(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							/** @deprecated */
							public getFilters(): java.util.List<org.apache.logging.log4j.core.Filter>;
							public isStarted(): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public isStopped(): boolean;
							public iterator(): java.util.Iterator<org.apache.logging.log4j.core.Filter>;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public removeFilter(filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.filter.CompositeFilter;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public addFilter(filter: org.apache.logging.log4j.core.Filter): org.apache.logging.log4j.core.filter.CompositeFilter;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public forEach(action: any /* any*/): void;
							public getFiltersArray(): native.Array<org.apache.logging.log4j.core.Filter>;
							public isEmpty(): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class DenyAllFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.DenyAllFilter>;
							public static newBuilder(): org.apache.logging.log4j.core.filter.DenyAllFilter.Builder;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
						export module DenyAllFilter {
							export class Builder extends org.apache.logging.log4j.core.filter.AbstractFilter.AbstractFilterBuilder<org.apache.logging.log4j.core.filter.DenyAllFilter.Builder> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.filter.DenyAllFilter>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.DenyAllFilter.Builder>;
								public build(): any;
								public build(): org.apache.logging.log4j.core.filter.DenyAllFilter;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class DynamicThresholdFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.DynamicThresholdFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public hashCode(): number;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public equals(obj: any): boolean;
							public toString(): string;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public getLevelMap(): java.util.Map<string,org.apache.logging.log4j.Level>;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public getKey(): string;
							public static createFilter(key: string, pairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, defaultThreshold: org.apache.logging.log4j.Level, onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.DynamicThresholdFilter;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class Filterable extends java.lang.Object implements org.apache.logging.log4j.core.LifeCycle {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.Filterable>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.filter.Filterable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								addFilter(filter0: org.apache.logging.log4j.core.Filter): void;
								removeFilter(filter0: org.apache.logging.log4j.core.Filter): void;
								getFilter(): org.apache.logging.log4j.core.Filter;
								hasFilter(): boolean;
								isFiltered(logEvent0: org.apache.logging.log4j.core.LogEvent): boolean;
								getState(): org.apache.logging.log4j.core.LifeCycle.State;
								initialize(): void;
								start(): void;
								stop(): void;
								isStarted(): boolean;
								isStopped(): boolean;
							});
							public constructor();
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public stop(): void;
							public initialize(): void;
							public start(): void;
							public addFilter(filter0: org.apache.logging.log4j.core.Filter): void;
							public isStarted(): boolean;
							public removeFilter(filter0: org.apache.logging.log4j.core.Filter): void;
							public hasFilter(): boolean;
							public isFiltered(logEvent0: org.apache.logging.log4j.core.LogEvent): boolean;
							public isStopped(): boolean;
							public getFilter(): org.apache.logging.log4j.core.Filter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class LevelMatchFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.LevelMatchFilter>;
							public static ATTR_MATCH: string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public static newBuilder(): org.apache.logging.log4j.core.filter.LevelMatchFilter.Builder;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
						export module LevelMatchFilter {
							export class Builder extends org.apache.logging.log4j.core.filter.AbstractFilter.AbstractFilterBuilder<org.apache.logging.log4j.core.filter.LevelMatchFilter.Builder> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.filter.LevelMatchFilter>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.LevelMatchFilter.Builder>;
								public build(): org.apache.logging.log4j.core.filter.LevelMatchFilter;
								public build(): any;
								public constructor();
								public setLevel(level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.filter.LevelMatchFilter.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class LevelRangeFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.LevelRangeFilter>;
							public getMinLevel(): org.apache.logging.log4j.Level;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public static createFilter(minLevel: org.apache.logging.log4j.Level, maxLevel: org.apache.logging.log4j.Level, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.LevelRangeFilter;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class MapFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.MapFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(mapMessage: org.apache.logging.log4j.message.MapMessage<any,any>): boolean;
							public isAnd(): boolean;
							/** @deprecated */
							public getMap(): java.util.Map<string,java.util.List<string>>;
							public filter(data: java.util.Map<string,string>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor(onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result);
							public filter(data: org.apache.logging.log4j.util.ReadOnlyStringMap): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor();
							public static createFilter(pairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, oper: string, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.MapFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public getStringMap(): org.apache.logging.log4j.util.IndexedReadOnlyStringMap;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor(map: java.util.Map<string,java.util.List<string>>, oper: boolean, onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result);
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class MarkerFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.MarkerFilter>;
							public static ATTR_MARKER: string;
							public static createFilter(marker: string, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.MarkerFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class NoMarkerFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.NoMarkerFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public static newBuilder(): org.apache.logging.log4j.core.filter.NoMarkerFilter.Builder;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
						export module NoMarkerFilter {
							export class Builder extends org.apache.logging.log4j.core.filter.AbstractFilter.AbstractFilterBuilder<org.apache.logging.log4j.core.filter.NoMarkerFilter.Builder> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.filter.NoMarkerFilter>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.NoMarkerFilter.Builder>;
								public build(): org.apache.logging.log4j.core.filter.NoMarkerFilter;
								public build(): any;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class RegexFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.RegexFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public static createFilter(regex: string, patternFlags: native.Array<string>, useRawMsg: java.lang.Boolean, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.RegexFilter;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class ScriptFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.ScriptFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public static createFilter(script: org.apache.logging.log4j.core.script.AbstractScript, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.filter.ScriptFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class StringMatchFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.StringMatchFilter>;
							public static ATTR_MATCH: string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public static newBuilder(): org.apache.logging.log4j.core.filter.StringMatchFilter.Builder;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
						export module StringMatchFilter {
							export class Builder extends org.apache.logging.log4j.core.filter.AbstractFilter.AbstractFilterBuilder<org.apache.logging.log4j.core.filter.StringMatchFilter.Builder> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.filter.StringMatchFilter>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.filter.StringMatchFilter.Builder>;
								public build(): any;
								public constructor();
								public build(): org.apache.logging.log4j.core.filter.StringMatchFilter;
								public setMatchString(text: string): org.apache.logging.log4j.core.filter.StringMatchFilter.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class StructuredDataFilter extends org.apache.logging.log4j.core.filter.MapFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.StructuredDataFilter>;
							public static createFilter(pairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, oper: string, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.StructuredDataFilter;
							public filter(message: org.apache.logging.log4j.message.StructuredDataMessage): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(mapMessage: org.apache.logging.log4j.message.MapMessage<any,any>): boolean;
							public filter(data: java.util.Map<string,string>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(data: org.apache.logging.log4j.util.ReadOnlyStringMap): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public static createFilter(pairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, oper: string, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.MapFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class ThreadContextMapFilter extends org.apache.logging.log4j.core.filter.MapFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.ThreadContextMapFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(mapMessage: org.apache.logging.log4j.message.MapMessage<any,any>): boolean;
							public filter(data: java.util.Map<string,string>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor(onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result);
							public filter(data: org.apache.logging.log4j.util.ReadOnlyStringMap): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor(pairs: java.util.Map<string,java.util.List<string>>, oper: boolean, onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result);
							public constructor();
							public static createFilter(pairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, oper: string, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.MapFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public static createFilter(pairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, oper: string, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.ThreadContextMapFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public constructor(map: java.util.Map<string,java.util.List<string>>, oper: boolean, onMatch: org.apache.logging.log4j.core.Filter.Result, onMismatch: org.apache.logging.log4j.core.Filter.Result);
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class ThresholdFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.ThresholdFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, testLevel: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, testLevel: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, testLevel: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public static createFilter(level: org.apache.logging.log4j.Level, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.ThresholdFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public getLevel(): org.apache.logging.log4j.Level;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module filter {
						export class TimeFilter extends org.apache.logging.log4j.core.filter.AbstractFilter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.filter.TimeFilter>;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any): org.apache.logging.log4j.core.Filter.Result;
							public toString(): string;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any, p9: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public static createFilter(start: string, end: string, tz: string, match: org.apache.logging.log4j.core.Filter.Result, mismatch: org.apache.logging.log4j.core.Filter.Result): org.apache.logging.log4j.core.filter.TimeFilter;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any): org.apache.logging.log4j.core.Filter.Result;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any): org.apache.logging.log4j.core.Filter.Result;
							public getOnMatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: any, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public getOnMismatch(): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, params: native.Array<any>): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any, p3: any, p4: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: org.apache.logging.log4j.message.Message, t: java.lang.Throwable): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any): org.apache.logging.log4j.core.Filter.Result;
							public filter(logger: org.apache.logging.log4j.core.Logger, level: org.apache.logging.log4j.Level, marker: org.apache.logging.log4j.Marker, msg: string, p0: any, p1: any, p2: any): org.apache.logging.log4j.core.Filter.Result;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ContextAnchor extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ContextAnchor>;
							public static THREAD_CONTEXT: java.lang.ThreadLocal<org.apache.logging.log4j.core.LoggerContext>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ContextDataFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ContextDataFactory>;
							public constructor();
							public static createContextData(readOnlyStringMap: org.apache.logging.log4j.util.ReadOnlyStringMap): org.apache.logging.log4j.util.StringMap;
							public static createContextData(): org.apache.logging.log4j.util.StringMap;
							public static createContextData(context: java.util.Map<string,string>): org.apache.logging.log4j.util.StringMap;
							public static emptyFrozenContextData(): org.apache.logging.log4j.util.StringMap;
							public static createContextData(initialCapacity: number): org.apache.logging.log4j.util.StringMap;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ContextDataInjectorFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ContextDataInjectorFactory>;
							public constructor();
							public static createInjector(): org.apache.logging.log4j.core.ContextDataInjector;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class DefaultLogEventFactory extends java.lang.Object implements org.apache.logging.log4j.core.impl.LogEventFactory, org.apache.logging.log4j.core.impl.LocationAwareLogEventFactory {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.DefaultLogEventFactory>;
							public constructor();
							public static getInstance(): org.apache.logging.log4j.core.impl.DefaultLogEventFactory;
							public createEvent(loggerName: string, marker: org.apache.logging.log4j.Marker, fqcn: string, location: java.lang.StackTraceElement, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, properties: java.util.List<org.apache.logging.log4j.core.config.Property>, t: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
							public createEvent(loggerName: string, marker: org.apache.logging.log4j.Marker, fqcn: string, level: org.apache.logging.log4j.Level, data: org.apache.logging.log4j.message.Message, properties: java.util.List<org.apache.logging.log4j.core.config.Property>, t: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ExtendedClassInfo extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ExtendedClassInfo>;
							public getExact(): boolean;
							public hashCode(): number;
							public renderOn(output: java.lang.StringBuilder, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer): void;
							public equals(obj: any): boolean;
							public constructor(exact: boolean, location: string, version: string);
							public getLocation(): string;
							public toString(): string;
							public getVersion(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ExtendedStackTraceElement extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ExtendedStackTraceElement>;
							public constructor(stackTraceElement: java.lang.StackTraceElement, extraClassInfo: org.apache.logging.log4j.core.impl.ExtendedClassInfo);
							public getExact(): boolean;
							public getExtraClassInfo(): org.apache.logging.log4j.core.impl.ExtendedClassInfo;
							public hashCode(): number;
							public equals(obj: any): boolean;
							public getMethodName(): string;
							public toString(): string;
							public getLineNumber(): number;
							public getStackTraceElement(): java.lang.StackTraceElement;
							public getClassName(): string;
							public isNativeMethod(): boolean;
							public constructor(declaringClass: string, methodName: string, fileName: string, lineNumber: number, exact: boolean, location: string, version: string);
							public getFileName(): string;
							public getLocation(): string;
							public getVersion(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class JdkMapAdapterStringMap extends java.lang.Object implements org.apache.logging.log4j.util.StringMap {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.JdkMapAdapterStringMap>;
							public constructor();
							public constructor(map: java.util.Map<string,string>);
							public size(): number;
							public hashCode(): number;
							public putValue(key: string, value: any): void;
							public clear(): void;
							public equals(obj: any): boolean;
							public containsKey(key: string): boolean;
							public putAll(source: org.apache.logging.log4j.util.ReadOnlyStringMap): void;
							public remove(key: string): void;
							public toString(): string;
							public toMap(): java.util.Map<string,string>;
							public isFrozen(): boolean;
							public forEach(action: org.apache.logging.log4j.util.TriConsumer, state: any): void;
							public freeze(): void;
							public equals(object: any): boolean;
							public forEach(action: org.apache.logging.log4j.util.BiConsumer): void;
							public isEmpty(): boolean;
							public getValue(key: string): any;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class LocationAware extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.LocationAware>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.impl.LocationAware interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								requiresLocation(): boolean;
							});
							public constructor();
							public requiresLocation(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class LocationAwareLogEventFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.LocationAwareLogEventFactory>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.impl.LocationAwareLogEventFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								createEvent(string0: string, marker1: org.apache.logging.log4j.Marker, string2: string, stackTraceElement3: java.lang.StackTraceElement, level4: org.apache.logging.log4j.Level, message5: org.apache.logging.log4j.message.Message, list6: java.util.List<org.apache.logging.log4j.core.config.Property>, throwable7: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
							});
							public constructor();
							public createEvent(string0: string, marker1: org.apache.logging.log4j.Marker, string2: string, stackTraceElement3: java.lang.StackTraceElement, level4: org.apache.logging.log4j.Level, message5: org.apache.logging.log4j.message.Message, list6: java.util.List<org.apache.logging.log4j.core.config.Property>, throwable7: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class Log4jContextFactory extends java.lang.Object implements org.apache.logging.log4j.spi.LoggerContextFactory, org.apache.logging.log4j.core.util.ShutdownCallbackRegistry {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.Log4jContextFactory>;
							public constructor();
							public getContext(fqcn: string, loader: java.lang.ClassLoader, externalContext: any, currentContext: boolean, source: org.apache.logging.log4j.core.config.ConfigurationSource): org.apache.logging.log4j.core.LoggerContext;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, externalContext: any, currentContext: boolean, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.LoggerContext;
							public getSelector(): org.apache.logging.log4j.core.selector.ContextSelector;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, externalContext: any, currentContext: boolean, configLocations: java.util.List<java.net.URI>, name: string): org.apache.logging.log4j.core.LoggerContext;
							public getShutdownCallbackRegistry(): org.apache.logging.log4j.core.util.ShutdownCallbackRegistry;
							public getContext(string0: string, classLoader1: java.lang.ClassLoader, object2: any, boolean3: boolean): org.apache.logging.log4j.spi.LoggerContext;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, externalContext: any, currentContext: boolean, configLocation: java.net.URI, name: string): org.apache.logging.log4j.core.LoggerContext;
							public addShutdownCallback(callback: java.lang.Runnable): org.apache.logging.log4j.core.util.Cancellable;
							public isShutdownHookEnabled(): boolean;
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public constructor(selector: org.apache.logging.log4j.core.selector.ContextSelector, shutdownCallbackRegistry: org.apache.logging.log4j.core.util.ShutdownCallbackRegistry);
							public getContext(string0: string, classLoader1: java.lang.ClassLoader, object2: any, boolean3: boolean, uRI4: java.net.URI, string5: string): org.apache.logging.log4j.spi.LoggerContext;
							public removeContext(context: org.apache.logging.log4j.spi.LoggerContext): void;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, externalContext: any, currentContext: boolean): org.apache.logging.log4j.core.LoggerContext;
							public constructor(shutdownCallbackRegistry: org.apache.logging.log4j.core.util.ShutdownCallbackRegistry);
							public constructor(selector: org.apache.logging.log4j.core.selector.ContextSelector);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class Log4jLogEvent extends java.lang.Object implements org.apache.logging.log4j.core.LogEvent {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.Log4jLogEvent>;
							public constructor(loggerName: string, marker: org.apache.logging.log4j.Marker, loggerFQCN: string, level: org.apache.logging.log4j.Level, message: org.apache.logging.log4j.message.Message, properties: java.util.List<org.apache.logging.log4j.core.config.Property>, t: java.lang.Throwable);
							public getInstant(): org.apache.logging.log4j.core.time.Instant;
							public getContextMap(): java.util.Map<string,string>;
							public hashCode(): number;
							public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
							public static createMemento(logEvent: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.LogEvent;
							public getMessage(): org.apache.logging.log4j.message.Message;
							public getSource(): java.lang.StackTraceElement;
							public equals(obj: any): boolean;
							/** @deprecated */
							public static createEvent(loggerName: string, marker: org.apache.logging.log4j.Marker, loggerFQCN: string, level: org.apache.logging.log4j.Level, message: org.apache.logging.log4j.message.Message, thrown: java.lang.Throwable, thrownProxy: org.apache.logging.log4j.core.impl.ThrowableProxy, mdc: java.util.Map<string,string>, ndc: org.apache.logging.log4j.ThreadContext.ContextStack, threadName: string, location: java.lang.StackTraceElement, timestamp: number): org.apache.logging.log4j.core.impl.Log4jLogEvent;
							public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
							public toString(): string;
							public isIncludeLocation(): boolean;
							public getTimeMillis(): number;
							public static serialize(event: org.apache.logging.log4j.core.LogEvent, includeLocation: boolean): java.io.Serializable;
							/** @deprecated */
							public getContextMap(): java.util.Map<string,string>;
							public getLoggerFqcn(): string;
							public getNanoTime(): number;
							public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
							public makeMessageImmutable(): void;
							public equals(o: any): boolean;
							public getMarker(): org.apache.logging.log4j.Marker;
							public static setNanoClock(nanoClock: org.apache.logging.log4j.core.util.NanoClock): void;
							public constructor();
							/** @deprecated */
							public constructor(timestamp: number);
							public getThreadName(): string;
							public setEndOfBatch(endOfBatch: boolean): void;
							public toImmutable(): org.apache.logging.log4j.core.impl.Log4jLogEvent;
							public asBuilder(): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
							public getThreadPriority(): number;
							public getThreadId(): number;
							public setIncludeLocation(includeLocation: boolean): void;
							public static canDeserialize(event: java.io.Serializable): boolean;
							public writeReplace(): any;
							public static serialize(event: org.apache.logging.log4j.core.impl.Log4jLogEvent, includeLocation: boolean): java.io.Serializable;
							/** @deprecated */
							public constructor(loggerName: string, marker: org.apache.logging.log4j.Marker, loggerFQCN: string, level: org.apache.logging.log4j.Level, message: org.apache.logging.log4j.message.Message, t: java.lang.Throwable);
							public static newBuilder(): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
							public static deserialize(event: java.io.Serializable): org.apache.logging.log4j.core.impl.Log4jLogEvent;
							/** @deprecated */
							public constructor(loggerName: string, marker: org.apache.logging.log4j.Marker, loggerFQCN: string, level: org.apache.logging.log4j.Level, message: org.apache.logging.log4j.message.Message, t: java.lang.Throwable, mdc: java.util.Map<string,string>, ndc: org.apache.logging.log4j.ThreadContext.ContextStack, threadName: string, location: java.lang.StackTraceElement, timestampMillis: number);
							public getThrown(): java.lang.Throwable;
							public getLevel(): org.apache.logging.log4j.Level;
							public constructor(loggerName: string, marker: org.apache.logging.log4j.Marker, loggerFQCN: string, source: java.lang.StackTraceElement, level: org.apache.logging.log4j.Level, message: org.apache.logging.log4j.message.Message, properties: java.util.List<org.apache.logging.log4j.core.config.Property>, t: java.lang.Throwable);
							public static getNanoClock(): org.apache.logging.log4j.core.util.NanoClock;
							public getLoggerName(): string;
							public static createMemento(event: org.apache.logging.log4j.core.LogEvent, includeLocation: boolean): org.apache.logging.log4j.core.impl.Log4jLogEvent;
							public isEndOfBatch(): boolean;
							public toImmutable(): org.apache.logging.log4j.core.LogEvent;
						}
						export module Log4jLogEvent {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.LogEvent> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder>;
								public setLoggerFqcn(loggerFqcn: string): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public build(): org.apache.logging.log4j.core.impl.Log4jLogEvent;
								public setThreadPriority(threadPriority: number): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setMessage(message: org.apache.logging.log4j.message.Message): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public constructor();
								public constructor(other: org.apache.logging.log4j.core.LogEvent);
								public setLoggerName(loggerName: string): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setThreadName(threadName: string): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setLevel(level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setIncludeLocation(includeLocation: boolean): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setThrown(thrown: java.lang.Throwable): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setContextStack(contextStack: org.apache.logging.log4j.ThreadContext.ContextStack): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setSource(source: java.lang.StackTraceElement): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setThreadId(threadId: number): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setInstant(instant: org.apache.logging.log4j.core.time.Instant): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setEndOfBatch(endOfBatch: boolean): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public build(): any;
								public setThrownProxy(thrownProxy: org.apache.logging.log4j.core.impl.ThrowableProxy): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setNanoTime(nanoTime: number): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setTimeMillis(timeMillis: number): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								/** @deprecated */
								public setContextMap(contextMap: java.util.Map<string,string>): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setMarker(marker: org.apache.logging.log4j.Marker): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
								public setContextData(contextData: org.apache.logging.log4j.util.StringMap): org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder;
							}
							export class LogEventProxy extends java.lang.Object implements java.io.Serializable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.impl.Log4jLogEvent.LogEventProxy>;
								public constructor(event: org.apache.logging.log4j.core.impl.Log4jLogEvent, includeLocation: boolean);
								public readResolve(): any;
								public constructor(event: org.apache.logging.log4j.core.LogEvent, includeLocation: boolean);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class Log4jProvider extends org.apache.logging.log4j.spi.Provider {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.Log4jProvider>;
							public constructor();
							public constructor(priority: java.lang.Integer, versions: string, loggerContextFactoryClass: java.lang.Class<any>);
							public constructor(priority: java.lang.Integer, versions: string, loggerContextFactoryClass: java.lang.Class<any>, threadContextMapClass: java.lang.Class<any>);
							public constructor(props: java.util.Properties, url: java.net.URL, classLoader: java.lang.ClassLoader);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class LogEventFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.LogEventFactory>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.impl.LogEventFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								createEvent(string0: string, marker1: org.apache.logging.log4j.Marker, string2: string, level3: org.apache.logging.log4j.Level, message4: org.apache.logging.log4j.message.Message, list5: java.util.List<org.apache.logging.log4j.core.config.Property>, throwable6: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
							});
							public constructor();
							public createEvent(string0: string, marker1: org.apache.logging.log4j.Marker, string2: string, level3: org.apache.logging.log4j.Level, message4: org.apache.logging.log4j.message.Message, list5: java.util.List<org.apache.logging.log4j.core.config.Property>, throwable6: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class MementoMessage extends java.lang.Object implements org.apache.logging.log4j.message.Message, org.apache.logging.log4j.util.StringBuilderFormattable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.MementoMessage>;
							public getFormat(): string;
							public constructor(formattedMessage: string, format: string, parameters: native.Array<any>);
							public formatTo(buffer: java.lang.StringBuilder): void;
							public toString(): string;
							public getThrowable(): java.lang.Throwable;
							public getFormattedMessage(): string;
							public getParameters(): native.Array<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class MutableLogEvent extends java.lang.Object implements org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.message.ReusableMessage, org.apache.logging.log4j.message.ParameterVisitable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.MutableLogEvent>;
							public getInstant(): org.apache.logging.log4j.core.time.Instant;
							public setLevel(level: org.apache.logging.log4j.Level): void;
							public getMessage(): org.apache.logging.log4j.message.Message;
							public getSource(): java.lang.StackTraceElement;
							public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
							public getTimeMillis(): number;
							public initFrom(event: org.apache.logging.log4j.core.LogEvent): void;
							public getLoggerFqcn(): string;
							public setMarker(marker: org.apache.logging.log4j.Marker): void;
							public getNanoTime(): number;
							public setThreadId(threadId: number): void;
							public getParameters(): native.Array<any>;
							public getThreadName(): string;
							public swapParameters(emptyReplacement: native.Array<any>): native.Array<any>;
							public setEndOfBatch(endOfBatch: boolean): void;
							public getThreadId(): number;
							public setIncludeLocation(includeLocation: boolean): void;
							public getThrown(): java.lang.Throwable;
							public getLevel(): org.apache.logging.log4j.Level;
							public getThrowable(): java.lang.Throwable;
							public setLoggerName(loggerName: string): void;
							public getFormattedMessage(): string;
							public setContextStack(contextStack: org.apache.logging.log4j.ThreadContext.ContextStack): void;
							public isEndOfBatch(): boolean;
							public getContextMap(): java.util.Map<string,string>;
							public setMessage(msg: org.apache.logging.log4j.message.Message): void;
							public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
							public setThreadName(threadName: string): void;
							public setThreadPriority(threadPriority: number): void;
							public isIncludeLocation(): boolean;
							public setNanoTime(nanoTime: number): void;
							public setThrown(thrown: java.lang.Throwable): void;
							public getFormat(): string;
							/** @deprecated */
							public getContextMap(): java.util.Map<string,string>;
							public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
							public getMarker(): org.apache.logging.log4j.Marker;
							public memento(): org.apache.logging.log4j.message.Message;
							public createMemento(): org.apache.logging.log4j.core.impl.Log4jLogEvent;
							public constructor();
							public toImmutable(): org.apache.logging.log4j.core.impl.Log4jLogEvent;
							public getThreadPriority(): number;
							public initializeBuilder(builder: org.apache.logging.log4j.core.impl.Log4jLogEvent.Builder): void;
							public clear(): void;
							public forEachParameter(action: org.apache.logging.log4j.message.ParameterConsumer, state: any): void;
							public getParameterCount(): number;
							public constructor(msgText: java.lang.StringBuilder, replacementParameters: native.Array<any>);
							public writeReplace(): any;
							public setContextData(mutableContextData: org.apache.logging.log4j.util.StringMap): void;
							public setTimeMillis(timeMillis: number): void;
							public formatTo(buffer: java.lang.StringBuilder): void;
							public getLoggerName(): string;
							public setLoggerFqcn(loggerFqcn: string): void;
							public setSource(source: java.lang.StackTraceElement): void;
							public toImmutable(): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ReusableLogEventFactory extends java.lang.Object implements org.apache.logging.log4j.core.impl.LogEventFactory, org.apache.logging.log4j.core.impl.LocationAwareLogEventFactory {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ReusableLogEventFactory>;
							public constructor();
							public createEvent(loggerName: string, marker: org.apache.logging.log4j.Marker, fqcn: string, level: org.apache.logging.log4j.Level, message: org.apache.logging.log4j.message.Message, properties: java.util.List<org.apache.logging.log4j.core.config.Property>, t: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
							public static release(logEvent: org.apache.logging.log4j.core.LogEvent): void;
							public createEvent(loggerName: string, marker: org.apache.logging.log4j.Marker, fqcn: string, location: java.lang.StackTraceElement, level: org.apache.logging.log4j.Level, message: org.apache.logging.log4j.message.Message, properties: java.util.List<org.apache.logging.log4j.core.config.Property>, t: java.lang.Throwable): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ThreadContextDataInjector extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThreadContextDataInjector>;
							public static contextDataProviders: java.util.Collection<org.apache.logging.log4j.core.util.ContextDataProvider>;
							public constructor();
							public static copyProperties(properties: java.util.List<org.apache.logging.log4j.core.config.Property>, result: org.apache.logging.log4j.util.StringMap): void;
						}
						export module ThreadContextDataInjector {
							export class ForCopyOnWriteThreadContextMap extends java.lang.Object implements org.apache.logging.log4j.core.ContextDataInjector {
								public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThreadContextDataInjector.ForCopyOnWriteThreadContextMap>;
								public rawContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
								public constructor();
								public injectContextData(props: java.util.List<org.apache.logging.log4j.core.config.Property>, ignore: org.apache.logging.log4j.util.StringMap): org.apache.logging.log4j.util.StringMap;
							}
							export class ForDefaultThreadContextMap extends java.lang.Object implements org.apache.logging.log4j.core.ContextDataInjector {
								public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThreadContextDataInjector.ForDefaultThreadContextMap>;
								public injectContextData(props: java.util.List<org.apache.logging.log4j.core.config.Property>, contextData: org.apache.logging.log4j.util.StringMap): org.apache.logging.log4j.util.StringMap;
								public rawContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
								public constructor();
							}
							export class ForGarbageFreeThreadContextMap extends java.lang.Object implements org.apache.logging.log4j.core.ContextDataInjector {
								public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThreadContextDataInjector.ForGarbageFreeThreadContextMap>;
								public rawContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
								public constructor();
								public injectContextData(props: java.util.List<org.apache.logging.log4j.core.config.Property>, reusable: org.apache.logging.log4j.util.StringMap): org.apache.logging.log4j.util.StringMap;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ThreadContextDataProvider extends java.lang.Object implements org.apache.logging.log4j.core.util.ContextDataProvider {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThreadContextDataProvider>;
							public constructor();
							public supplyContextData(): java.util.Map<string,string>;
							public supplyStringMap(): org.apache.logging.log4j.util.StringMap;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ThrowableFormatOptions extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThrowableFormatOptions>;
							public static DEFAULT: org.apache.logging.log4j.core.impl.ThrowableFormatOptions;
							public static CLASS_NAME: string;
							public static METHOD_NAME: string;
							public static LINE_NUMBER: string;
							public static FILE_NAME: string;
							public static MESSAGE: string;
							public static LOCALIZED_MESSAGE: string;
							public constructor();
							public getSeparator(): string;
							public constructor(packages: java.util.List<string>);
							public constructor(lines: number, separator: string, ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string);
							public toString(): string;
							public getTextRenderer(): org.apache.logging.log4j.core.pattern.TextRenderer;
							public hasPackages(): boolean;
							public anyLines(): boolean;
							public getSuffix(): string;
							public allLines(): boolean;
							public minLines(maxLines: number): number;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.impl.ThrowableFormatOptions;
							public getLines(): number;
							public getIgnorePackages(): java.util.List<string>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ThrowableProxy extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThrowableProxy>;
							public getCauseStackTraceAsString(suffix: string): string;
							public getStackTrace(): native.Array<java.lang.StackTraceElement>;
							public hashCode(): number;
							public equals(obj: any): boolean;
							public toString(): string;
							public getCauseStackTraceAsString(ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string, lineSeparator: string): string;
							public constructor(throwable: java.lang.Throwable);
							public getCauseProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
							public getCommonElementCount(): number;
							public getExtendedStackTrace(): native.Array<org.apache.logging.log4j.core.impl.ExtendedStackTraceElement>;
							public getExtendedStackTraceAsString(suffix: string): string;
							public getSuppressedStackTrace(suffix: string): string;
							public formatExtendedStackTraceTo(sb: java.lang.StringBuilder, ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string, lineSeparator: string): void;
							public getMessage(): string;
							public getExtendedStackTraceAsString(): string;
							public getExtendedStackTraceAsString(ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string): string;
							public getCauseStackTraceAsString(ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string): string;
							public getSuppressedProxies(): native.Array<org.apache.logging.log4j.core.impl.ThrowableProxy>;
							public getCauseStackTraceAsString(packages: java.util.List<string>, suffix: string): string;
							public getLocalizedMessage(): string;
							public formatWrapper(sb: java.lang.StringBuilder, cause: org.apache.logging.log4j.core.impl.ThrowableProxy, ignorePackages: java.util.List<string>, suffix: string): void;
							public formatWrapper(sb: java.lang.StringBuilder, cause: org.apache.logging.log4j.core.impl.ThrowableProxy, ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string, lineSeparator: string): void;
							public formatWrapper(sb: java.lang.StringBuilder, cause: org.apache.logging.log4j.core.impl.ThrowableProxy, ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string): void;
							public formatWrapper(sb: java.lang.StringBuilder, cause: org.apache.logging.log4j.core.impl.ThrowableProxy, suffix: string): void;
							public getExtendedStackTraceAsString(ignorePackages: java.util.List<string>, suffix: string): string;
							public getName(): string;
							public getThrowable(): java.lang.Throwable;
							public getExtendedStackTraceAsString(ignorePackages: java.util.List<string>, textRenderer: org.apache.logging.log4j.core.pattern.TextRenderer, suffix: string, lineSeparator: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ThrowableProxyHelper extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThrowableProxyHelper>;
						}
						export module ThrowableProxyHelper {
							export class CacheEntry extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThrowableProxyHelper.CacheEntry>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module impl {
						export class ThrowableProxyRenderer extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.impl.ThrowableProxyRenderer>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class ContextDataAsEntryListDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<org.apache.logging.log4j.util.StringMap> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ContextDataAsEntryListDeserializer>;
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): org.apache.logging.log4j.util.StringMap;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class ContextDataAsEntryListSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<org.apache.logging.log4j.util.ReadOnlyStringMap> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ContextDataAsEntryListSerializer>;
							public constructor();
							public serialize(contextData: org.apache.logging.log4j.util.ReadOnlyStringMap, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class ContextDataDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<org.apache.logging.log4j.util.StringMap> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ContextDataDeserializer>;
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): org.apache.logging.log4j.util.StringMap;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class ContextDataSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<org.apache.logging.log4j.util.ReadOnlyStringMap> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ContextDataSerializer>;
							public constructor();
							public serialize(contextData: org.apache.logging.log4j.util.ReadOnlyStringMap, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class ExtendedStackTraceElementMixIn extends java.lang.Object implements java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ExtendedStackTraceElementMixIn>;
							public getExact(): boolean;
							public getLineNumber(): number;
							public getClassName(): string;
							public getExtraClassInfo(): org.apache.logging.log4j.core.impl.ExtendedClassInfo;
							public isNativeMethod(): boolean;
							public getMethodName(): string;
							public constructor(declaringClass: string, methodName: string, fileName: string, lineNumber: number, exact: boolean, location: string, version: string);
							public getFileName(): string;
							public getLocation(): string;
							public getVersion(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Initializers extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Initializers>;
						}
						export module Initializers {
							export class SetupContextInitializer extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Initializers.SetupContextInitializer>;
							}
							export class SetupContextJsonInitializer extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Initializers.SetupContextJsonInitializer>;
							}
							export class SimpleModuleInitializer extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Initializers.SimpleModuleInitializer>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class InstantMixIn extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.InstantMixIn>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class JsonConstants extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.JsonConstants>;
							public static ELT_CAUSE: string;
							public static ELT_CONTEXT_MAP: string;
							public static ELT_CONTEXT_STACK: string;
							public static ELT_MARKER: string;
							public static ELT_PARENTS: string;
							public static ELT_SOURCE: string;
							public static ELT_SUPPRESSED: string;
							public static ELT_THROWN: string;
							public static ELT_MESSAGE: string;
							public static ELT_EXTENDED_STACK_TRACE: string;
							public static ELT_NANO_TIME: string;
							public static ELT_INSTANT: string;
							public static ELT_TIME_MILLIS: string;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class LevelMixIn extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.LevelMixIn>;
							public static getLevel(name: string): org.apache.logging.log4j.Level;
							public name(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class ListOfMapEntryDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<java.util.Map<string,string>> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ListOfMapEntryDeserializer>;
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.util.Map<string,string>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class ListOfMapEntrySerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<java.util.Map<string,string>> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ListOfMapEntrySerializer>;
							public constructor();
							public serialize(map: java.util.Map<string,string>, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Log4jJsonModule {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Log4jJsonModule>;
							public setupModule(context: com.fasterxml.jackson.databind.Module.SetupContext): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Log4jJsonObjectMapper {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Log4jJsonObjectMapper>;
							public constructor();
							public constructor(encodeThreadContextAsList: boolean, includeStacktrace: boolean, stacktraceAsString: boolean, objectMessageAsJsonObject: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Log4jStackTraceElementDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<java.lang.StackTraceElement> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Log4jStackTraceElementDeserializer>;
							public constructor();
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): java.lang.StackTraceElement;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Log4jXmlModule {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Log4jXmlModule>;
							public setupModule(context: com.fasterxml.jackson.databind.Module.SetupContext): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Log4jXmlObjectMapper {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Log4jXmlObjectMapper>;
							public constructor();
							public constructor(includeStacktrace: boolean, stacktraceAsString: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Log4jYamlModule {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Log4jYamlModule>;
							public setupModule(context: com.fasterxml.jackson.databind.Module.SetupContext): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class Log4jYamlObjectMapper {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.Log4jYamlObjectMapper>;
							public constructor();
							public constructor(encodeThreadContextAsList: boolean, includeStacktrace: boolean, stacktraceAsString: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class LogEventJsonMixIn extends java.lang.Object implements org.apache.logging.log4j.core.LogEvent {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.LogEventJsonMixIn>;
							public getThreadName(): string;
							public getInstant(): org.apache.logging.log4j.core.time.Instant;
							public getContextMap(): java.util.Map<string,string>;
							public setEndOfBatch(boolean0: boolean): void;
							public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
							public getThreadPriority(): number;
							public getThreadId(): number;
							public getMessage(): org.apache.logging.log4j.message.Message;
							public getSource(): java.lang.StackTraceElement;
							public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
							public isIncludeLocation(): boolean;
							public getTimeMillis(): number;
							/** @deprecated */
							public getContextMap(): java.util.Map<string,string>;
							public getLoggerFqcn(): string;
							public getNanoTime(): number;
							public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
							public getThrown(): java.lang.Throwable;
							public getLevel(): org.apache.logging.log4j.Level;
							public setIncludeLocation(boolean0: boolean): void;
							public getLoggerName(): string;
							public getMarker(): org.apache.logging.log4j.Marker;
							public isEndOfBatch(): boolean;
							public toImmutable(): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class LogEventWithContextListMixIn extends java.lang.Object implements org.apache.logging.log4j.core.LogEvent {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.LogEventWithContextListMixIn>;
							public getThreadName(): string;
							public getInstant(): org.apache.logging.log4j.core.time.Instant;
							public getContextMap(): java.util.Map<string,string>;
							public setEndOfBatch(boolean0: boolean): void;
							public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
							public getThreadPriority(): number;
							public getThreadId(): number;
							public getMessage(): org.apache.logging.log4j.message.Message;
							public getSource(): java.lang.StackTraceElement;
							public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
							public isIncludeLocation(): boolean;
							public getTimeMillis(): number;
							/** @deprecated */
							public getContextMap(): java.util.Map<string,string>;
							public getLoggerFqcn(): string;
							public getNanoTime(): number;
							public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
							public getThrown(): java.lang.Throwable;
							public getLevel(): org.apache.logging.log4j.Level;
							public setIncludeLocation(boolean0: boolean): void;
							public getLoggerName(): string;
							public getMarker(): org.apache.logging.log4j.Marker;
							public isEndOfBatch(): boolean;
							public toImmutable(): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class MapEntry extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.MapEntry>;
							public getKey(): string;
							public hashCode(): number;
							public setValue(value: string): void;
							public equals(obj: any): boolean;
							public getValue(): string;
							public toString(): string;
							public setKey(key: string): void;
							public constructor(key: string, value: string);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class MarkerMixIn extends java.lang.Object implements org.apache.logging.log4j.Marker {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.MarkerMixIn>;
							public addParents(markers0: native.Array<org.apache.logging.log4j.Marker>): org.apache.logging.log4j.Marker;
							public hashCode(): number;
							public remove(marker0: org.apache.logging.log4j.Marker): boolean;
							public getParents(): native.Array<org.apache.logging.log4j.Marker>;
							public getName(): string;
							public equals(obj: any): boolean;
							public setParents(markers0: native.Array<org.apache.logging.log4j.Marker>): org.apache.logging.log4j.Marker;
							public hasParents(): boolean;
							public isInstanceOf(marker0: org.apache.logging.log4j.Marker): boolean;
							public isInstanceOf(string0: string): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class MessageSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<org.apache.logging.log4j.message.Message> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.MessageSerializer>;
							public serialize(value: org.apache.logging.log4j.message.Message, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class MutableThreadContextStackDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<org.apache.logging.log4j.spi.MutableThreadContextStack> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.MutableThreadContextStackDeserializer>;
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): org.apache.logging.log4j.spi.MutableThreadContextStack;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class ObjectMessageSerializer extends com.fasterxml.jackson.databind.ser.std.StdScalarSerializer<org.apache.logging.log4j.message.ObjectMessage> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ObjectMessageSerializer>;
							public serialize(value: org.apache.logging.log4j.message.ObjectMessage, jgen: com.fasterxml.jackson.core.JsonGenerator, provider: com.fasterxml.jackson.databind.SerializerProvider): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class SimpleMessageDeserializer extends com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer<org.apache.logging.log4j.message.SimpleMessage> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.SimpleMessageDeserializer>;
							public deserialize(jp: com.fasterxml.jackson.core.JsonParser, ctxt: com.fasterxml.jackson.databind.DeserializationContext): org.apache.logging.log4j.message.SimpleMessage;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class StackTraceElementMixIn extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.StackTraceElementMixIn>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class ThrowableProxyMixIn extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ThrowableProxyMixIn>;
							public getStackTrace(): native.Array<java.lang.StackTraceElement>;
							public getCauseStackTraceAsString(): string;
							public getSuppressedProxies(): native.Array<org.apache.logging.log4j.core.impl.ThrowableProxy>;
							public getThrowable(): java.lang.Throwable;
							public getSuppressedStackTrace(): string;
							public getExtendedStackTraceAsString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class ThrowableProxyWithStacktraceAsStringMixIn extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ThrowableProxyWithStacktraceAsStringMixIn>;
							public getStackTrace(): native.Array<java.lang.StackTraceElement>;
							public getCauseStackTraceAsString(): string;
							public getSuppressedProxies(): native.Array<org.apache.logging.log4j.core.impl.ThrowableProxy>;
							public getThrowable(): java.lang.Throwable;
							public getSuppressedStackTrace(): string;
							public getExtendedStackTraceAsString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export abstract class ThrowableProxyWithoutStacktraceMixIn extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.ThrowableProxyWithoutStacktraceMixIn>;
							public getStackTrace(): native.Array<java.lang.StackTraceElement>;
							public getCauseStackTraceAsString(): string;
							public getSuppressedProxies(): native.Array<org.apache.logging.log4j.core.impl.ThrowableProxy>;
							public getThrowable(): java.lang.Throwable;
							public getSuppressedStackTrace(): string;
							public getExtendedStackTraceAsString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jackson {
						export class XmlConstants extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jackson.XmlConstants>;
							public static ELT_CAUSE: string;
							public static ELT_CONTEXT_MAP: string;
							public static ELT_CONTEXT_STACK: string;
							public static ELT_CONTEXT_STACK_ITEM: string;
							public static ELT_EVENT: string;
							public static ELT_EXTENDED_STACK_TRACE: string;
							public static ELT_EXTENDED_STACK_TRACE_ITEM: string;
							public static ELT_TIME_MILLIS: string;
							public static ELT_INSTANT: string;
							public static ELT_MARKER: string;
							public static ELT_MESSAGE: string;
							public static ELT_PARENTS: string;
							public static ELT_SOURCE: string;
							public static ELT_SUPPRESSED: string;
							public static ELT_SUPPRESSED_ITEM: string;
							public static ELT_THROWN: string;
							public static XML_NAMESPACE: string;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class AppenderAdmin extends java.lang.Object implements org.apache.logging.log4j.core.jmx.AppenderAdminMBean {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.AppenderAdmin>;
							public getObjectName(): javax.management.ObjectName;
							public isIgnoreExceptions(): boolean;
							public getName(): string;
							public getLayout(): string;
							public getErrorHandler(): string;
							public constructor(contextName: string, appender: org.apache.logging.log4j.core.Appender);
							public getFilter(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class AppenderAdminMBean extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.AppenderAdminMBean>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.jmx.AppenderAdminMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getName(): string;
								getLayout(): string;
								isIgnoreExceptions(): boolean;
								getErrorHandler(): string;
								getFilter(): string;
							});
							public constructor();
							public static PATTERN: string;
							public isIgnoreExceptions(): boolean;
							public getName(): string;
							public getLayout(): string;
							public getErrorHandler(): string;
							public getFilter(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class AsyncAppenderAdmin extends java.lang.Object implements org.apache.logging.log4j.core.jmx.AsyncAppenderAdminMBean {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.AsyncAppenderAdmin>;
							public getQueueRemainingCapacity(): number;
							public getAppenderRefs(): native.Array<string>;
							public isIncludeLocation(): boolean;
							public isBlocking(): boolean;
							public getObjectName(): javax.management.ObjectName;
							public isIgnoreExceptions(): boolean;
							public getName(): string;
							public constructor(contextName: string, appender: org.apache.logging.log4j.core.appender.AsyncAppender);
							public getErrorRef(): string;
							public getQueueCapacity(): number;
							public getLayout(): string;
							public getErrorHandler(): string;
							public getFilter(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class AsyncAppenderAdminMBean extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.AsyncAppenderAdminMBean>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.jmx.AsyncAppenderAdminMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getName(): string;
								getLayout(): string;
								isIgnoreExceptions(): boolean;
								getErrorHandler(): string;
								getFilter(): string;
								getAppenderRefs(): native.Array<string>;
								isIncludeLocation(): boolean;
								isBlocking(): boolean;
								getErrorRef(): string;
								getQueueCapacity(): number;
								getQueueRemainingCapacity(): number;
							});
							public constructor();
							public static PATTERN: string;
							public getQueueRemainingCapacity(): number;
							public isIgnoreExceptions(): boolean;
							public getName(): string;
							public getErrorRef(): string;
							public getAppenderRefs(): native.Array<string>;
							public getQueueCapacity(): number;
							public isIncludeLocation(): boolean;
							public isBlocking(): boolean;
							public getLayout(): string;
							public getErrorHandler(): string;
							public getFilter(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class ContextSelectorAdmin extends java.lang.Object implements org.apache.logging.log4j.core.jmx.ContextSelectorAdminMBean {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.ContextSelectorAdmin>;
							public getObjectName(): javax.management.ObjectName;
							public constructor(contextName: string, selector: org.apache.logging.log4j.core.selector.ContextSelector);
							public getImplementationClassName(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class ContextSelectorAdminMBean extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.ContextSelectorAdminMBean>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.jmx.ContextSelectorAdminMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getImplementationClassName(): string;
							});
							public constructor();
							public static PATTERN: string;
							public getImplementationClassName(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class LoggerConfigAdmin extends java.lang.Object implements org.apache.logging.log4j.core.jmx.LoggerConfigAdminMBean {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.LoggerConfigAdmin>;
							public setAdditive(additive: boolean): void;
							public getObjectName(): javax.management.ObjectName;
							public getName(): string;
							public getLevel(): string;
							public setLevel(level: string): void;
							public isAdditive(): boolean;
							public getAppenderRefs(): native.Array<string>;
							public isIncludeLocation(): boolean;
							public getFilter(): string;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, loggerConfig: org.apache.logging.log4j.core.config.LoggerConfig);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class LoggerConfigAdminMBean extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.LoggerConfigAdminMBean>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.jmx.LoggerConfigAdminMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getName(): string;
								getLevel(): string;
								setLevel(string0: string): void;
								isAdditive(): boolean;
								setAdditive(boolean0: boolean): void;
								isIncludeLocation(): boolean;
								getFilter(): string;
								getAppenderRefs(): native.Array<string>;
							});
							public constructor();
							public static PATTERN: string;
							public setLevel(string0: string): void;
							public getName(): string;
							public setAdditive(boolean0: boolean): void;
							public getLevel(): string;
							public isAdditive(): boolean;
							public getAppenderRefs(): native.Array<string>;
							public isIncludeLocation(): boolean;
							public getFilter(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class LoggerContextAdmin implements org.apache.logging.log4j.core.jmx.LoggerContextAdminMBean, java.beans.PropertyChangeListener {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.LoggerContextAdmin>;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, executor: java.util.concurrent.Executor);
							public setConfigText(configText: string, charsetName: string): void;
							public getConfigProperties(): java.util.Map<string,string>;
							public getConfigClassName(): string;
							public propertyChange(evt: java.beans.PropertyChangeEvent): void;
							public getConfigFilter(): string;
							public getConfigText(): string;
							public getObjectName(): javax.management.ObjectName;
							public getConfigText(charsetName: string): string;
							public getName(): string;
							public getConfigName(): string;
							public getConfigLocationUri(): string;
							public setConfigLocationUri(configLocation: string): void;
							public getStatus(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class LoggerContextAdminMBean extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.LoggerContextAdminMBean>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.jmx.LoggerContextAdminMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getObjectName(): javax.management.ObjectName;
								getStatus(): string;
								getName(): string;
								getConfigLocationUri(): string;
								setConfigLocationUri(string0: string): void;
								getConfigText(): string;
								getConfigText(string0: string): string;
								setConfigText(string0: string, string1: string): void;
								getConfigName(): string;
								getConfigClassName(): string;
								getConfigFilter(): string;
								getConfigProperties(): java.util.Map<string,string>;
							});
							public constructor();
							public static PATTERN: string;
							public static NOTIF_TYPE_RECONFIGURED: string;
							public getConfigText(): string;
							public setConfigLocationUri(string0: string): void;
							public getObjectName(): javax.management.ObjectName;
							public getName(): string;
							public getConfigName(): string;
							public getConfigProperties(): java.util.Map<string,string>;
							public getConfigLocationUri(): string;
							public getConfigText(string0: string): string;
							public setConfigText(string0: string, string1: string): void;
							public getConfigClassName(): string;
							public getStatus(): string;
							public getConfigFilter(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class RingBufferAdmin extends java.lang.Object implements org.apache.logging.log4j.core.jmx.RingBufferAdminMBean {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.RingBufferAdmin>;
							public static forAsyncLoggerConfig(ringBuffer: com.lmax.disruptor.RingBuffer<any>, contextName: string, configName: string): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
							public getObjectName(): javax.management.ObjectName;
							public static forAsyncLogger(ringBuffer: com.lmax.disruptor.RingBuffer<any>, contextName: string): org.apache.logging.log4j.core.jmx.RingBufferAdmin;
							public constructor(ringBuffer: com.lmax.disruptor.RingBuffer<any>, mbeanName: string);
							public getBufferSize(): number;
							public getRemainingCapacity(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class RingBufferAdminMBean extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.RingBufferAdminMBean>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.jmx.RingBufferAdminMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getBufferSize(): number;
								getRemainingCapacity(): number;
							});
							public constructor();
							public static PATTERN_ASYNC_LOGGER_CONFIG: string;
							public static PATTERN_ASYNC_LOGGER: string;
							public getBufferSize(): number;
							public getRemainingCapacity(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class Server extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.Server>;
							public static DOMAIN: string;
							public static unregisterMBeans(mbs: javax.management.MBeanServer): void;
							public static escape(name: string): string;
							public static reregisterMBeansAfterReconfigure(): void;
							public static unregisterLoggerContext(contextName: string, mbs: javax.management.MBeanServer): void;
							public static reregisterMBeansAfterReconfigure(mbs: javax.management.MBeanServer): void;
							public static unregisterMBeans(): void;
							public static unregisterLoggerContext(loggerContextName: string): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class StatusLoggerAdmin implements org.apache.logging.log4j.status.StatusListener, org.apache.logging.log4j.core.jmx.StatusLoggerAdminMBean {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.StatusLoggerAdmin>;
							public constructor(contextName: string, executor: java.util.concurrent.Executor);
							public close(): void;
							public getObjectName(): javax.management.ObjectName;
							public getLevel(): string;
							public setLevel(level: string): void;
							public log(data: org.apache.logging.log4j.status.StatusData): void;
							public getStatusDataHistory(): native.Array<string>;
							public getContextName(): string;
							public getStatusData(): java.util.List<org.apache.logging.log4j.status.StatusData>;
							public getStatusLevel(): org.apache.logging.log4j.Level;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module jmx {
						export class StatusLoggerAdminMBean extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.jmx.StatusLoggerAdminMBean>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.jmx.StatusLoggerAdminMBean interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getObjectName(): javax.management.ObjectName;
								getStatusData(): java.util.List<org.apache.logging.log4j.status.StatusData>;
								getStatusDataHistory(): native.Array<string>;
								getLevel(): string;
								setLevel(string0: string): void;
								getContextName(): string;
							});
							public constructor();
							public static PATTERN: string;
							public static NOTIF_TYPE_DATA: string;
							public static NOTIF_TYPE_MESSAGE: string;
							public getObjectName(): javax.management.ObjectName;
							public setLevel(string0: string): void;
							public getLevel(): string;
							public getStatusDataHistory(): native.Array<string>;
							public getContextName(): string;
							public getStatusData(): java.util.List<org.apache.logging.log4j.status.StatusData>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export abstract class AbstractCsvLayout extends org.apache.logging.log4j.core.layout.AbstractStringLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractCsvLayout>;
							public static DEFAULT_CHARSET: string;
							public static DEFAULT_FORMAT: string;
							public static createFormat(format: string, delimiter: java.lang.Character, escape: java.lang.Character, quote: java.lang.Character, quoteMode: org.apache.commons.csv.QuoteMode, nullString: string, recordSeparator: string): org.apache.commons.csv.CSVFormat;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getFormat(): org.apache.commons.csv.CSVFormat;
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, charset: java.nio.charset.Charset, csvFormat: org.apache.commons.csv.CSVFormat, header: string, footer: string);
							public getContentType(): string;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public getFooter(): native.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export abstract class AbstractJacksonLayout extends org.apache.logging.log4j.core.layout.AbstractStringLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractJacksonLayout>;
							public static DEFAULT_EOL: string;
							public static COMPACT_EOL: string;
							public eol: string;
							public objectWriter: com.fasterxml.jackson.databind.ObjectWriter;
							public compact: boolean;
							public complete: boolean;
							public includeNullDelimiter: boolean;
							public additionalFields: native.Array<org.apache.logging.log4j.core.layout.AbstractJacksonLayout.ResolvableKeyValuePair>;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public wrapLogEvent(event: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent, writer: java.io.Writer): void;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean);
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getContentType(): string;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public static valueNeedsLookup(value: string): boolean;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, endOfLine: string, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean, additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>);
							public getFooter(): native.Array<number>;
						}
						export module AbstractJacksonLayout {
							export abstract class Builder<B>  extends org.apache.logging.log4j.core.layout.AbstractStringLayout.Builder<any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder<any>>;
								public setAdditionalFields(additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>): any;
								public isLocationInfo(): boolean;
								public isIncludeNullDelimiter(): boolean;
								public getEndOfLine(): string;
								public setEventEol(eventEol: boolean): any;
								public setEndOfLine(endOfLine: string): any;
								public constructor();
								public setLocationInfo(locationInfo: boolean): any;
								public setStacktraceAsString(stacktraceAsString: boolean): any;
								public isProperties(): boolean;
								public setComplete(complete: boolean): any;
								public setProperties(properties: boolean): any;
								public getAdditionalFields(): native.Array<org.apache.logging.log4j.core.util.KeyValuePair>;
								public getEventEol(): boolean;
								public isIncludeTimeMillis(): boolean;
								public isIncludeStacktrace(): boolean;
								public isComplete(): boolean;
								public setIncludeTimeMillis(includeTimeMillis: boolean): any;
								public setIncludeStacktrace(includeStacktrace: boolean): any;
								public setCompact(compact: boolean): any;
								public toStringOrNull(header: native.Array<number>): string;
								public isStacktraceAsString(): boolean;
								public setIncludeNullDelimiter(includeNullDelimiter: boolean): any;
								public isCompact(): boolean;
							}
							export class LogEventWithAdditionalFields extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractJacksonLayout.LogEventWithAdditionalFields>;
								public getAdditionalFields(): java.util.Map<string,string>;
								public constructor(logEvent: any, additionalFields: java.util.Map<string,string>);
								public getLogEvent(): any;
							}
							export class ReadOnlyLogEventWrapper extends java.lang.Object implements org.apache.logging.log4j.core.LogEvent {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractJacksonLayout.ReadOnlyLogEventWrapper>;
								public getThreadName(): string;
								public getThrown(): java.lang.Throwable;
								public getThreadPriority(): number;
								public constructor(event: org.apache.logging.log4j.core.LogEvent);
								public getLevel(): org.apache.logging.log4j.Level;
								/** @deprecated */
								public getContextMap(): java.util.Map<string,string>;
								public getMessage(): org.apache.logging.log4j.message.Message;
								public getSource(): java.lang.StackTraceElement;
								public setEndOfBatch(endOfBatch: boolean): void;
								public getLoggerName(): string;
								public getThrownProxy(): org.apache.logging.log4j.core.impl.ThrowableProxy;
								public isEndOfBatch(): boolean;
								public isIncludeLocation(): boolean;
								public setIncludeLocation(locationRequired: boolean): void;
								public getContextStack(): org.apache.logging.log4j.ThreadContext.ContextStack;
								public toImmutable(): org.apache.logging.log4j.core.LogEvent;
								public getNanoTime(): number;
								public getLoggerFqcn(): string;
								public getInstant(): org.apache.logging.log4j.core.time.Instant;
								public getThreadId(): number;
								public getMarker(): org.apache.logging.log4j.Marker;
								public getContextMap(): java.util.Map<string,string>;
								public getContextData(): org.apache.logging.log4j.util.ReadOnlyStringMap;
								public getTimeMillis(): number;
							}
							export class ResolvableKeyValuePair extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractJacksonLayout.ResolvableKeyValuePair>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export abstract class AbstractLayout<T>  extends org.apache.logging.log4j.core.Layout<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractLayout<any>>;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public configuration: org.apache.logging.log4j.core.config.Configuration;
							public eventCount: number;
							public footer: native.Array<number>;
							public header: native.Array<number>;
							public getContentFormat(): java.util.Map<string,string>;
							public toByteArray(logEvent0: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public markEvent(): void;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public getContentType(): string;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public encode(event: org.apache.logging.log4j.core.LogEvent, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
							public getFooter(): native.Array<number>;
						}
						export module AbstractLayout {
							export abstract class Builder<B>  extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractLayout.Builder<any>>;
								public getFooter(): native.Array<number>;
								public setHeader(header: native.Array<number>): B;
								public asBuilder(): B;
								public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
								public constructor();
								public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): B;
								public getHeader(): native.Array<number>;
								public setFooter(footer: native.Array<number>): B;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export abstract class AbstractStringLayout extends org.apache.logging.log4j.core.layout.AbstractLayout<string> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractStringLayout>;
							public static DEFAULT_STRING_BUILDER_SIZE: number;
							public static MAX_STRING_BUILDER_SIZE: number;
							public static getStringBuilder(): java.lang.StringBuilder;
							public getHeaderSerializer(): org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							public encode(event: org.apache.logging.log4j.core.LogEvent, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public serializeToString(serializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer): string;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public static trimToMaxSize(stringBuilder: java.lang.StringBuilder): void;
							public serializeToBytes(serializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, defaultValue: native.Array<number>): native.Array<number>;
							public getStringBuilderEncoder(): org.apache.logging.log4j.core.layout.Encoder<java.lang.StringBuilder>;
							public getContentType(): string;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getFooterSerializer(): org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public getBytes(s: string): native.Array<number>;
							public getFooter(): native.Array<number>;
						}
						export module AbstractStringLayout {
							export abstract class Builder<B>  extends org.apache.logging.log4j.core.layout.AbstractLayout.Builder<any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractStringLayout.Builder<any>>;
								public getFooterSerializer(): org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer;
								public getCharset(): java.nio.charset.Charset;
								public setHeaderSerializer(headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer): any;
								public constructor();
								public getHeaderSerializer(): org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer;
								public setCharset(charset: java.nio.charset.Charset): any;
								public setFooterSerializer(footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer): any;
							}
							export class Serializer extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): string;
									toSerializable(event: org.apache.logging.log4j.core.LogEvent, builder: java.lang.StringBuilder): java.lang.StringBuilder;
								});
								public constructor();
								public toSerializable(event: org.apache.logging.log4j.core.LogEvent, builder: java.lang.StringBuilder): java.lang.StringBuilder;
								public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): string;
							}
							export class Serializer2 extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer2>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer2 interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): java.lang.StringBuilder;
								});
								public constructor();
								public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): java.lang.StringBuilder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class ByteBufferDestination extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.ByteBufferDestination>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.layout.ByteBufferDestination interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getByteBuffer(): java.nio.ByteBuffer;
								drain(byteBuffer0: java.nio.ByteBuffer): java.nio.ByteBuffer;
								writeBytes(byteBuffer0: java.nio.ByteBuffer): void;
								writeBytes(bytes0: native.Array<number>, int1: number, int2: number): void;
							});
							public constructor();
							public writeBytes(bytes0: native.Array<number>, int1: number, int2: number): void;
							public writeBytes(byteBuffer0: java.nio.ByteBuffer): void;
							public drain(byteBuffer0: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public getByteBuffer(): java.nio.ByteBuffer;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class ByteBufferDestinationHelper extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.ByteBufferDestinationHelper>;
							public static writeToUnsynchronized(source: java.nio.ByteBuffer, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public static writeToUnsynchronized(data: native.Array<number>, offset: number, length: number, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class CsvLogEventLayout extends org.apache.logging.log4j.core.layout.AbstractCsvLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.CsvLogEventLayout>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public static createDefaultLayout(): org.apache.logging.log4j.core.layout.CsvLogEventLayout;
							public requiresLocation(): boolean;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, charset: java.nio.charset.Charset, csvFormat: org.apache.commons.csv.CSVFormat, header: string, footer: string);
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getContentType(): string;
							public static createLayout(format: org.apache.commons.csv.CSVFormat): org.apache.logging.log4j.core.layout.CsvLogEventLayout;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public static createLayout(config: org.apache.logging.log4j.core.config.Configuration, format: string, delimiter: java.lang.Character, escape: java.lang.Character, quote: java.lang.Character, quoteMode: org.apache.commons.csv.QuoteMode, nullString: string, recordSeparator: string, charset: java.nio.charset.Charset, header: string, footer: string): org.apache.logging.log4j.core.layout.CsvLogEventLayout;
							public getFooter(): native.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class CsvParameterLayout extends org.apache.logging.log4j.core.layout.AbstractCsvLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.CsvParameterLayout>;
							public static createDefaultLayout(): org.apache.logging.log4j.core.layout.AbstractCsvLayout;
							public static createLayout(format: org.apache.commons.csv.CSVFormat): org.apache.logging.log4j.core.layout.AbstractCsvLayout;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, charset: java.nio.charset.Charset, csvFormat: org.apache.commons.csv.CSVFormat, header: string, footer: string);
							public static createLayout(config: org.apache.logging.log4j.core.config.Configuration, format: string, delimiter: java.lang.Character, escape: java.lang.Character, quote: java.lang.Character, quoteMode: org.apache.commons.csv.QuoteMode, nullString: string, recordSeparator: string, charset: java.nio.charset.Charset, header: string, footer: string): org.apache.logging.log4j.core.layout.AbstractCsvLayout;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getContentType(): string;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public getFooter(): native.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class Encoder<T>  extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.Encoder<any>>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.layout.Encoder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								encode(object0: T, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							});
							public constructor();
							public encode(object0: T, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class GelfLayout extends org.apache.logging.log4j.core.layout.AbstractStringLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.GelfLayout>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public toString(): string;
							/** @deprecated */
							public static createLayout(host: string, additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, compressionType: org.apache.logging.log4j.core.layout.GelfLayout.CompressionType, compressionThreshold: number, includeStacktrace: boolean): org.apache.logging.log4j.core.layout.GelfLayout;
							public requiresLocation(): boolean;
							public encode(event: org.apache.logging.log4j.core.LogEvent, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public static newBuilder(): org.apache.logging.log4j.core.layout.GelfLayout.Builder<any>;
							public getContentType(): string;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							/** @deprecated */
							public constructor(host: string, additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, compressionType: org.apache.logging.log4j.core.layout.GelfLayout.CompressionType, compressionThreshold: number, includeStacktrace: boolean);
							public getFooter(): native.Array<number>;
						}
						export module GelfLayout {
							export class Builder<B>  extends org.apache.logging.log4j.core.layout.AbstractStringLayout.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.GelfLayout>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.GelfLayout.Builder<any>>;
								public setAdditionalFields(additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>): any;
								public getCompressionThreshold(): number;
								public setIncludeThreadContext(includeThreadContext: boolean): any;
								public isIncludeNullDelimiter(): boolean;
								public setMdcExcludes(mdcExcludes: string): any;
								public setCompressionThreshold(compressionThreshold: number): any;
								public setMdcIncludes(mdcIncludes: string): any;
								public constructor();
								public setHost(host: string): any;
								public build(): org.apache.logging.log4j.core.layout.GelfLayout;
								public getHost(): string;
								public getAdditionalFields(): native.Array<org.apache.logging.log4j.core.util.KeyValuePair>;
								public setCompressionType(compressionType: org.apache.logging.log4j.core.layout.GelfLayout.CompressionType): any;
								public isIncludeStacktrace(): boolean;
								public setMessagePattern(pattern: string): any;
								public setIncludeStacktrace(includeStacktrace: boolean): any;
								public build(): any;
								public isIncludeThreadContext(): boolean;
								public getCompressionType(): org.apache.logging.log4j.core.layout.GelfLayout.CompressionType;
								public setIncludeNullDelimiter(includeNullDelimiter: boolean): any;
							}
							export abstract class CompressionType {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.GelfLayout.CompressionType>;
								public static GZIP: org.apache.logging.log4j.core.layout.GelfLayout.CompressionType;
								public static ZLIB: org.apache.logging.log4j.core.layout.GelfLayout.CompressionType;
								public static OFF: org.apache.logging.log4j.core.layout.GelfLayout.CompressionType;
								public static values(): native.Array<org.apache.logging.log4j.core.layout.GelfLayout.CompressionType>;
								public static valueOf(name: string): org.apache.logging.log4j.core.layout.GelfLayout.CompressionType;
								public createDeflaterOutputStream(outputStream0: java.io.OutputStream): java.util.zip.DeflaterOutputStream;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							}
							export class FieldWriter extends org.apache.logging.log4j.util.TriConsumer<string,any,java.lang.StringBuilder> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.GelfLayout.FieldWriter>;
								public accept(object0: any, object1: any, object2: any): void;
								public getChecker(): org.apache.logging.log4j.core.layout.internal.ListChecker;
								public accept(key: string, value: any, stringBuilder: java.lang.StringBuilder): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class HtmlLayout extends org.apache.logging.log4j.core.layout.AbstractStringLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.HtmlLayout>;
							public static DEFAULT_FONT_FAMILY: string;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public static createDefaultLayout(): org.apache.logging.log4j.core.layout.HtmlLayout;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public getTitle(): string;
							public getHeader(): native.Array<number>;
							public isLocationInfo(): boolean;
							public requiresLocation(): boolean;
							public static newBuilder(): org.apache.logging.log4j.core.layout.HtmlLayout.Builder;
							public static createLayout(locationInfo: boolean, title: string, contentType: string, charset: java.nio.charset.Charset, fontSize: string, font: string): org.apache.logging.log4j.core.layout.HtmlLayout;
							public getContentFormat(): java.util.Map<string,string>;
							public getContentType(): string;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getFooter(): native.Array<number>;
						}
						export module HtmlLayout {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.HtmlLayout> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.HtmlLayout.Builder>;
								public build(): org.apache.logging.log4j.core.layout.HtmlLayout;
								public withCharset(charset: java.nio.charset.Charset): org.apache.logging.log4j.core.layout.HtmlLayout.Builder;
								public withContentType(contentType: string): org.apache.logging.log4j.core.layout.HtmlLayout.Builder;
								public withLocationInfo(locationInfo: boolean): org.apache.logging.log4j.core.layout.HtmlLayout.Builder;
								public withFontSize(fontSize: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize): org.apache.logging.log4j.core.layout.HtmlLayout.Builder;
								public build(): any;
								public withTitle(title: string): org.apache.logging.log4j.core.layout.HtmlLayout.Builder;
								public withFontName(fontName: string): org.apache.logging.log4j.core.layout.HtmlLayout.Builder;
							}
							export class FontSize {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.HtmlLayout.FontSize>;
								public static SMALLER: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static XXSMALL: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static XSMALL: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static SMALL: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static MEDIUM: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static LARGE: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static XLARGE: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static XXLARGE: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static LARGER: org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static getFontSize(size: string): org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public static values(): native.Array<org.apache.logging.log4j.core.layout.HtmlLayout.FontSize>;
								public getFontSize(): string;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
								public static valueOf(name: string): org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
								public larger(): org.apache.logging.log4j.core.layout.HtmlLayout.FontSize;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export abstract class JacksonFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.JacksonFactory>;
							public getPropertNameForContextMap(): string;
							public getPropertyNameForInstant(): string;
							public getPropertNameForSource(): string;
							public newPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
							public newCompactPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
							public newObjectMapper(): com.fasterxml.jackson.databind.ObjectMapper;
							public getPropertNameForNanoTime(): string;
							public getPropertyNameForTimeMillis(): string;
						}
						export module JacksonFactory {
							export class JSON extends org.apache.logging.log4j.core.layout.JacksonFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.JacksonFactory.JSON>;
								public newCompactPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
								public newPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
								public getPropertyNameForInstant(): string;
								public newObjectMapper(): com.fasterxml.jackson.databind.ObjectMapper;
								public constructor(encodeThreadContextAsList: boolean, includeStacktrace: boolean, stacktraceAsString: boolean, objectMessageAsJsonObject: boolean);
								public getPropertNameForNanoTime(): string;
								public getPropertNameForSource(): string;
								public getPropertNameForContextMap(): string;
								public getPropertyNameForTimeMillis(): string;
							}
							export class Log4jXmlPrettyPrinter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.JacksonFactory.Log4jXmlPrettyPrinter>;
								public createInstance(): com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
								public writePrologLinefeed(sw: org.codehaus.stax2.XMLStreamWriter2): void;
							}
							export class XML extends org.apache.logging.log4j.core.layout.JacksonFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.JacksonFactory.XML>;
								public newCompactPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
								public newPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
								public getPropertyNameForInstant(): string;
								public newObjectMapper(): com.fasterxml.jackson.databind.ObjectMapper;
								public getPropertNameForNanoTime(): string;
								public getPropertNameForSource(): string;
								public constructor(includeStacktrace: boolean, stacktraceAsString: boolean);
								public getPropertNameForContextMap(): string;
								public getPropertyNameForTimeMillis(): string;
							}
							export class YAML extends org.apache.logging.log4j.core.layout.JacksonFactory {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.JacksonFactory.YAML>;
								public newCompactPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
								public newPrettyPrinter(): com.fasterxml.jackson.core.PrettyPrinter;
								public getPropertyNameForInstant(): string;
								public newObjectMapper(): com.fasterxml.jackson.databind.ObjectMapper;
								public getPropertNameForNanoTime(): string;
								public getPropertNameForSource(): string;
								public constructor(includeStacktrace: boolean, stacktraceAsString: boolean);
								public getPropertNameForContextMap(): string;
								public getPropertyNameForTimeMillis(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class JsonLayout extends org.apache.logging.log4j.core.layout.AbstractJacksonLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.JsonLayout>;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public static newBuilder(): org.apache.logging.log4j.core.layout.JsonLayout.Builder<any>;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							/** @deprecated */
							public static createLayout(config: org.apache.logging.log4j.core.config.Configuration, locationInfo: boolean, properties: boolean, propertiesAsList: boolean, complete: boolean, compact: boolean, eventEol: boolean, headerPattern: string, footerPattern: string, charset: java.nio.charset.Charset, includeStacktrace: boolean): org.apache.logging.log4j.core.layout.JsonLayout;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent, writer: java.io.Writer): void;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean);
							public static createDefaultLayout(): org.apache.logging.log4j.core.layout.JsonLayout;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, locationInfo: boolean, properties: boolean, encodeThreadContextAsList: boolean, complete: boolean, compact: boolean, eventEol: boolean, endOfLine: string, headerPattern: string, footerPattern: string, charset: java.nio.charset.Charset, includeStacktrace: boolean);
							public getContentType(): string;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, endOfLine: string, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean, additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>);
							public getFooter(): native.Array<number>;
						}
						export module JsonLayout {
							export class Builder<B>  extends org.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.JsonLayout>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.JsonLayout.Builder<any>>;
								public setAdditionalFields(additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>): any;
								public setObjectMessageAsJsonObject(objectMessageAsJsonObject: boolean): any;
								public build(): org.apache.logging.log4j.core.layout.JsonLayout;
								public build(): any;
								public isPropertiesAsList(): boolean;
								public constructor();
								public setPropertiesAsList(propertiesAsList: boolean): any;
								public getObjectMessageAsJsonObject(): boolean;
								public getAdditionalFields(): native.Array<org.apache.logging.log4j.core.util.KeyValuePair>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class LevelPatternSelector extends java.lang.Object implements org.apache.logging.log4j.core.layout.PatternSelector, org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.LevelPatternSelector>;
							/** @deprecated */
							public constructor(properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>, defaultPattern: string, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean, config: org.apache.logging.log4j.core.config.Configuration);
							public getFormatters(event: org.apache.logging.log4j.core.LogEvent): native.Array<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public static newBuilder(): org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder;
							/** @deprecated */
							public static createSelector(properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>, defaultPattern: string, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.LevelPatternSelector;
							public toString(): string;
							public requiresLocation(): boolean;
						}
						export module LevelPatternSelector {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.LevelPatternSelector> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder>;
								public setProperties(properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>): org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder;
								public setAlwaysWriteExceptions(alwaysWriteExceptions: boolean): org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder;
								public build(): org.apache.logging.log4j.core.layout.LevelPatternSelector;
								public build(): any;
								public constructor();
								public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder;
								public setDefaultPattern(defaultPattern: string): org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder;
								public setDisableAnsi(disableAnsi: boolean): org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder;
								public setNoConsoleNoAnsi(noConsoleNoAnsi: boolean): org.apache.logging.log4j.core.layout.LevelPatternSelector.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class LockingStringBuilderEncoder extends org.apache.logging.log4j.core.layout.Encoder<java.lang.StringBuilder> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.LockingStringBuilderEncoder>;
							public constructor(charset: java.nio.charset.Charset);
							public encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public encode(source: java.lang.StringBuilder, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public constructor(charset: java.nio.charset.Charset, charBufferSize: number);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class LoggerFields extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.LoggerFields>;
							public getDiscardIfAllFieldsAreEmpty(): boolean;
							public toString(): string;
							public getMap(): java.util.Map<string,string>;
							public getSdId(): org.apache.logging.log4j.message.StructuredDataId;
							public static createLoggerFields(keyValuePairs: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>, sdId: string, enterpriseId: string, discardIfAllFieldsAreEmpty: boolean): org.apache.logging.log4j.core.layout.LoggerFields;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class MarkerPatternSelector extends java.lang.Object implements org.apache.logging.log4j.core.layout.PatternSelector, org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.MarkerPatternSelector>;
							public static newBuilder(): org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder;
							/** @deprecated */
							public constructor(properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>, defaultPattern: string, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean, config: org.apache.logging.log4j.core.config.Configuration);
							public getFormatters(event: org.apache.logging.log4j.core.LogEvent): native.Array<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public toString(): string;
							public requiresLocation(): boolean;
							/** @deprecated */
							public static createSelector(properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>, defaultPattern: string, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.MarkerPatternSelector;
						}
						export module MarkerPatternSelector {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.MarkerPatternSelector> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder>;
								public setDisableAnsi(disableAnsi: boolean): org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder;
								public setNoConsoleNoAnsi(noConsoleNoAnsi: boolean): org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder;
								public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder;
								public build(): org.apache.logging.log4j.core.layout.MarkerPatternSelector;
								public setAlwaysWriteExceptions(alwaysWriteExceptions: boolean): org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder;
								public build(): any;
								public constructor();
								public setProperties(properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>): org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder;
								public setDefaultPattern(defaultPattern: string): org.apache.logging.log4j.core.layout.MarkerPatternSelector.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class MessageLayout extends org.apache.logging.log4j.core.layout.AbstractLayout<org.apache.logging.log4j.message.Message> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.MessageLayout>;
							public constructor();
							public getContentFormat(): java.util.Map<string,string>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.message.Message;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public static createLayout(): org.apache.logging.log4j.core.Layout<any>;
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getContentType(): string;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public getFooter(): native.Array<number>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class PatternLayout extends org.apache.logging.log4j.core.layout.AbstractStringLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternLayout>;
							public static DEFAULT_CONVERSION_PATTERN: string;
							public static TTCC_CONVERSION_PATTERN: string;
							public static SIMPLE_CONVERSION_PATTERN: string;
							public static KEY: string;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public getHeader(): native.Array<number>;
							public toString(): string;
							/** @deprecated */
							public static createLayout(pattern: string, patternSelector: org.apache.logging.log4j.core.layout.PatternSelector, config: org.apache.logging.log4j.core.config.Configuration, replace: org.apache.logging.log4j.core.pattern.RegexReplacement, charset: java.nio.charset.Charset, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean, headerPattern: string, footerPattern: string): org.apache.logging.log4j.core.layout.PatternLayout;
							public requiresLocation(): boolean;
							public static newBuilder(): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
							public encode(event: org.apache.logging.log4j.core.LogEvent, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public static createPatternParser(config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.pattern.PatternParser;
							public static newSerializerBuilder(): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
							public getContentFormat(): java.util.Map<string,string>;
							public serialize(event: org.apache.logging.log4j.core.LogEvent, stringBuilder: java.lang.StringBuilder): void;
							/** @deprecated */
							public static createSerializer(configuration: org.apache.logging.log4j.core.config.Configuration, replace: org.apache.logging.log4j.core.pattern.RegexReplacement, pattern: string, defaultPattern: string, patternSelector: org.apache.logging.log4j.core.layout.PatternSelector, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean): org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer;
							public getConversionPattern(): string;
							public static createDefaultLayout(): org.apache.logging.log4j.core.layout.PatternLayout;
							public getEventSerializer(): org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getContentType(): string;
							public static createDefaultLayout(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.PatternLayout;
							public getFooter(): native.Array<number>;
						}
						export module PatternLayout {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.PatternLayout> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternLayout.Builder>;
								public withFooter(footer: string): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withPattern(pattern: string): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withDisableAnsi(disableAnsi: boolean): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public build(): any;
								public withAlwaysWriteExceptions(alwaysWriteExceptions: boolean): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withHeader(header: string): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withPatternSelector(patternSelector: org.apache.logging.log4j.core.layout.PatternSelector): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withRegexReplacement(regexReplacement: org.apache.logging.log4j.core.pattern.RegexReplacement): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withCharset(charset: java.nio.charset.Charset): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public withNoConsoleNoAnsi(noConsoleNoAnsi: boolean): org.apache.logging.log4j.core.layout.PatternLayout.Builder;
								public build(): org.apache.logging.log4j.core.layout.PatternLayout;
							}
							export class PatternSelectorSerializer extends java.lang.Object implements org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer2, org.apache.logging.log4j.core.impl.LocationAware {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternLayout.PatternSelectorSerializer>;
								public toString(): string;
								public toSerializable(event: org.apache.logging.log4j.core.LogEvent, builder: java.lang.StringBuilder): java.lang.StringBuilder;
								public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
								public requiresLocation(): boolean;
								public toSerializable(event: org.apache.logging.log4j.core.LogEvent, buffer: java.lang.StringBuilder): java.lang.StringBuilder;
							}
							export class PatternSerializer extends java.lang.Object implements org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer2, org.apache.logging.log4j.core.impl.LocationAware {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternLayout.PatternSerializer>;
								public toString(): string;
								public toSerializable(event: org.apache.logging.log4j.core.LogEvent, builder: java.lang.StringBuilder): java.lang.StringBuilder;
								public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
								public requiresLocation(): boolean;
								public toSerializable(event: org.apache.logging.log4j.core.LogEvent, buffer: java.lang.StringBuilder): java.lang.StringBuilder;
							}
							export class SerializerBuilder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder>;
								public setDisableAnsi(disableAnsi: boolean): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
								public setDefaultPattern(defaultPattern: string): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
								public setPatternSelector(patternSelector: org.apache.logging.log4j.core.layout.PatternSelector): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
								public setNoConsoleNoAnsi(noConsoleNoAnsi: boolean): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
								public build(): org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer;
								public setPattern(pattern: string): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
								public setAlwaysWriteExceptions(alwaysWriteExceptions: boolean): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
								public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
								public build(): any;
								public constructor();
								public setReplace(replace: org.apache.logging.log4j.core.pattern.RegexReplacement): org.apache.logging.log4j.core.layout.PatternLayout.SerializerBuilder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class PatternMatch extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternMatch>;
							public getKey(): string;
							public static newBuilder(): org.apache.logging.log4j.core.layout.PatternMatch.Builder;
							public hashCode(): number;
							public getPattern(): string;
							public equals(obj: any): boolean;
							public toString(): string;
							public constructor(key: string, pattern: string);
						}
						export module PatternMatch {
							export class Builder extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternMatch.Builder>;
								public setPattern(pattern: string): org.apache.logging.log4j.core.layout.PatternMatch.Builder;
								public setKey(key: string): org.apache.logging.log4j.core.layout.PatternMatch.Builder;
								public build(): any;
								public constructor();
								public readResolve(): any;
								public build(): org.apache.logging.log4j.core.layout.PatternMatch;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class PatternSelector extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.PatternSelector>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.layout.PatternSelector interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getFormatters(logEvent0: org.apache.logging.log4j.core.LogEvent): native.Array<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							});
							public constructor();
							public static ELEMENT_TYPE: string;
							public getFormatters(logEvent0: org.apache.logging.log4j.core.LogEvent): native.Array<org.apache.logging.log4j.core.pattern.PatternFormatter>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class Rfc5424Layout extends org.apache.logging.log4j.core.layout.AbstractStringLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.Rfc5424Layout>;
							public static DEFAULT_ENTERPRISE_NUMBER: number;
							public static DEFAULT_ID: string;
							public static NEWLINE_PATTERN: java.util.regex.Pattern;
							public static PARAM_VALUE_ESCAPE_PATTERN: java.util.regex.Pattern;
							public static DEFAULT_MDCID: string;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public getProcId(): string;
							public getHeader(): native.Array<number>;
							public toString(): string;
							public requiresLocation(): boolean;
							public getMdcExcludes(): java.util.List<string>;
							public static createLayout(facility: org.apache.logging.log4j.core.net.Facility, id: string, enterpriseNumber: number, includeMDC: boolean, mdcId: string, mdcPrefix: string, eventPrefix: string, newLine: boolean, escapeNL: string, appName: string, msgId: string, excludes: string, includes: string, required: string, exceptionPattern: string, useTlsMessageFormat: boolean, loggerFields: native.Array<org.apache.logging.log4j.core.layout.LoggerFields>, config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.Rfc5424Layout;
							public getFacility(): org.apache.logging.log4j.core.net.Facility;
							public getContentFormat(): java.util.Map<string,string>;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getContentType(): string;
							public getMdcIncludes(): java.util.List<string>;
							public getFooter(): native.Array<number>;
						}
						export module Rfc5424Layout {
							export class FieldFormatter extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.Rfc5424Layout.FieldFormatter>;
								public constructor(param0: java.util.Map<string,java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>>, fieldMap: boolean);
								public format(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.layout.Rfc5424Layout.StructuredDataElement;
							}
							export class StructuredDataElement extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.Rfc5424Layout.StructuredDataElement>;
								public constructor(param0: java.util.Map<string,string>, fields: string, prefix: boolean);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class ScriptPatternSelector extends java.lang.Object implements org.apache.logging.log4j.core.layout.PatternSelector, org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.ScriptPatternSelector>;
							public getFormatters(event: org.apache.logging.log4j.core.LogEvent): native.Array<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public static newBuilder(): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
							/** @deprecated */
							public static createSelector(script: org.apache.logging.log4j.core.script.AbstractScript, properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>, defaultPattern: string, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.ScriptPatternSelector;
							public toString(): string;
							/** @deprecated */
							public constructor(script: org.apache.logging.log4j.core.script.AbstractScript, properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>, defaultPattern: string, alwaysWriteExceptions: boolean, disableAnsi: boolean, noConsoleNoAnsi: boolean, config: org.apache.logging.log4j.core.config.Configuration);
							public requiresLocation(): boolean;
						}
						export module ScriptPatternSelector {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.ScriptPatternSelector> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder>;
								public setDisableAnsi(disableAnsi: boolean): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
								public setAlwaysWriteExceptions(alwaysWriteExceptions: boolean): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
								public setNoConsoleNoAnsi(noConsoleNoAnsi: boolean): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
								public build(): any;
								public setScript(script: org.apache.logging.log4j.core.script.AbstractScript): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
								public setProperties(properties: native.Array<org.apache.logging.log4j.core.layout.PatternMatch>): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
								public setConfiguration(config: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
								public build(): org.apache.logging.log4j.core.layout.ScriptPatternSelector;
								public setDefaultPattern(defaultPattern: string): org.apache.logging.log4j.core.layout.ScriptPatternSelector.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class SerializedLayout extends org.apache.logging.log4j.core.layout.AbstractLayout<org.apache.logging.log4j.core.LogEvent> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.SerializedLayout>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): org.apache.logging.log4j.core.LogEvent;
							public getContentFormat(): java.util.Map<string,string>;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public getHeader(): native.Array<number>;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							/** @deprecated */
							public static createLayout(): org.apache.logging.log4j.core.layout.SerializedLayout;
							public getContentType(): string;
							public getFooter(): native.Array<number>;
						}
						export module SerializedLayout {
							export class PrivateObjectOutputStream extends java.io.ObjectOutputStream {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.SerializedLayout.PrivateObjectOutputStream>;
								public constructor(out: java.io.OutputStream);
								public flush(): void;
								public write(buf: native.Array<number>, off: number, len: number): void;
								public writeStreamHeader(): void;
								public writeObject(obj: any): void;
								public write(buf: native.Array<number>): void;
								public write(val: number): void;
								public constructor();
								public constructor(param0: org.apache.logging.log4j.core.layout.SerializedLayout, os: java.io.OutputStream);
								public close(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class StringBuilderEncoder extends org.apache.logging.log4j.core.layout.Encoder<java.lang.StringBuilder> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.StringBuilderEncoder>;
							public constructor(charset: java.nio.charset.Charset, charBufferSize: number, byteBufferSize: number);
							public constructor(charset: java.nio.charset.Charset);
							public encode(object0: any, byteBufferDestination1: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
							public encode(source: java.lang.StringBuilder, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class SyslogLayout extends org.apache.logging.log4j.core.layout.AbstractStringLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.SyslogLayout>;
							public static NEWLINE_PATTERN: java.util.regex.Pattern;
							public static newBuilder(): org.apache.logging.log4j.core.layout.SyslogLayout.Builder<any>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							/** @deprecated */
							public static createLayout(facility: org.apache.logging.log4j.core.net.Facility, includeNewLine: boolean, escapeNL: string, charset: java.nio.charset.Charset): org.apache.logging.log4j.core.layout.SyslogLayout;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public getFacility(): org.apache.logging.log4j.core.net.Facility;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public getContentType(): string;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public constructor(facility: org.apache.logging.log4j.core.net.Facility, includeNL: boolean, escapeNL: string, charset: java.nio.charset.Charset);
							public getFooter(): native.Array<number>;
						}
						export module SyslogLayout {
							export class Builder<B>  extends org.apache.logging.log4j.core.layout.AbstractStringLayout.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.SyslogLayout>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.SyslogLayout.Builder<any>>;
								public build(): org.apache.logging.log4j.core.layout.SyslogLayout;
								public getEscapeNL(): string;
								public setIncludeNewLine(includeNewLine: boolean): any;
								public getFacility(): org.apache.logging.log4j.core.net.Facility;
								public setEscapeNL(escapeNL: string): any;
								public build(): any;
								public isIncludeNewLine(): boolean;
								public constructor();
								public setFacility(facility: org.apache.logging.log4j.core.net.Facility): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class TextEncoderHelper extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.TextEncoderHelper>;
							/** @deprecated */
							public static encodeText(charsetEncoder: java.nio.charset.CharsetEncoder, charBuf: java.nio.CharBuffer, destination: org.apache.logging.log4j.core.layout.ByteBufferDestination): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class XmlLayout extends org.apache.logging.log4j.core.layout.AbstractJacksonLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.XmlLayout>;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							/** @deprecated */
							public constructor(locationInfo: boolean, properties: boolean, complete: boolean, compact: boolean, charset: java.nio.charset.Charset, includeStacktrace: boolean);
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent, writer: java.io.Writer): void;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean);
							/** @deprecated */
							public static createLayout(locationInfo: boolean, properties: boolean, complete: boolean, compact: boolean, charset: java.nio.charset.Charset, includeStacktrace: boolean): org.apache.logging.log4j.core.layout.XmlLayout;
							public getContentType(): string;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public static newBuilder(): org.apache.logging.log4j.core.layout.XmlLayout.Builder<any>;
							public static createDefaultLayout(): org.apache.logging.log4j.core.layout.XmlLayout;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, endOfLine: string, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean, additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>);
							public getFooter(): native.Array<number>;
						}
						export module XmlLayout {
							export class Builder<B>  extends org.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.XmlLayout>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.XmlLayout.Builder<any>>;
								public build(): org.apache.logging.log4j.core.layout.XmlLayout;
								public build(): any;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export class YamlLayout extends org.apache.logging.log4j.core.layout.AbstractJacksonLayout {
							public static class: java.lang.Class<org.apache.logging.log4j.core.layout.YamlLayout>;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent): string;
							public getCharset(): java.nio.charset.Charset;
							public toSerializable(logEvent0: org.apache.logging.log4j.core.LogEvent): any;
							public constructor(charset: java.nio.charset.Charset);
							public getHeader(): native.Array<number>;
							/** @deprecated */
							public constructor(header: native.Array<number>, footer: native.Array<number>);
							public requiresLocation(): boolean;
							public static newBuilder(): org.apache.logging.log4j.core.layout.YamlLayout.Builder<any>;
							public constructor(aCharset: java.nio.charset.Charset, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, aCharset: java.nio.charset.Charset, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer);
							public getContentFormat(): java.util.Map<string,string>;
							/** @deprecated */
							public static createLayout(config: org.apache.logging.log4j.core.config.Configuration, locationInfo: boolean, properties: boolean, headerPattern: string, footerPattern: string, charset: java.nio.charset.Charset, includeStacktrace: boolean): org.apache.logging.log4j.core.layout.AbstractJacksonLayout;
							public toSerializable(event: org.apache.logging.log4j.core.LogEvent, writer: java.io.Writer): void;
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean);
							/** @deprecated */
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, locationInfo: boolean, properties: boolean, complete: boolean, compact: boolean, eventEol: boolean, headerPattern: string, footerPattern: string, charset: java.nio.charset.Charset, includeStacktrace: boolean);
							public static createDefaultLayout(): org.apache.logging.log4j.core.layout.AbstractJacksonLayout;
							public getContentType(): string;
							public toByteArray(event: org.apache.logging.log4j.core.LogEvent): native.Array<number>;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, header: native.Array<number>, footer: native.Array<number>);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, objectWriter: com.fasterxml.jackson.databind.ObjectWriter, charset: java.nio.charset.Charset, compact: boolean, complete: boolean, eventEol: boolean, endOfLine: string, headerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, footerSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, includeNullDelimiter: boolean, additionalFields: native.Array<org.apache.logging.log4j.core.util.KeyValuePair>);
							public getFooter(): native.Array<number>;
						}
						export module YamlLayout {
							export class Builder<B>  extends org.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder<any> implements org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.layout.YamlLayout>  {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.YamlLayout.Builder<any>>;
								public build(): any;
								public constructor();
								public build(): org.apache.logging.log4j.core.layout.YamlLayout;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export module internal {
							export class ExcludeChecker extends java.lang.Object implements org.apache.logging.log4j.core.layout.internal.ListChecker {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.internal.ExcludeChecker>;
								public toString(): string;
								public check(key: string): boolean;
								public constructor(list: java.util.List<string>);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export module internal {
							export class IncludeChecker extends java.lang.Object implements org.apache.logging.log4j.core.layout.internal.ListChecker {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.internal.IncludeChecker>;
								public toString(): string;
								public check(key: string): boolean;
								public constructor(list: java.util.List<string>);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module layout {
						export module internal {
							export class ListChecker extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.layout.internal.ListChecker>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.layout.internal.ListChecker interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									check(string0: string): boolean;
								});
								public constructor();
								public static NOOP_CHECKER: org.apache.logging.log4j.core.layout.internal.ListChecker.NoopChecker;
								public check(string0: string): boolean;
							}
							export module ListChecker {
								export class NoopChecker extends java.lang.Object implements org.apache.logging.log4j.core.layout.internal.ListChecker {
									public static class: java.lang.Class<org.apache.logging.log4j.core.layout.internal.ListChecker.NoopChecker>;
									public constructor();
									public check(key: string): boolean;
									public toString(): string;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export abstract class AbstractConfigurationAwareLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup implements org.apache.logging.log4j.core.config.ConfigurationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.AbstractConfigurationAwareLookup>;
							public configuration: org.apache.logging.log4j.core.config.Configuration;
							public constructor();
							public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public lookup(logEvent0: org.apache.logging.log4j.core.LogEvent, string1: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export abstract class AbstractLookup extends java.lang.Object implements org.apache.logging.log4j.core.lookup.StrLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.AbstractLookup>;
							public constructor();
							public lookup(logEvent0: org.apache.logging.log4j.core.LogEvent, string1: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class ContextMapLookup extends java.lang.Object implements org.apache.logging.log4j.core.lookup.StrLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.ContextMapLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class DateLookup extends java.lang.Object implements org.apache.logging.log4j.core.lookup.StrLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.DateLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class EnvironmentLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.EnvironmentLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class EventLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.EventLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class Interpolator extends org.apache.logging.log4j.core.lookup.AbstractConfigurationAwareLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.Interpolator>;
							public static PREFIX_SEPARATOR: string;
							public constructor();
							public constructor(defaultLookup: org.apache.logging.log4j.core.lookup.StrLookup, pluginPackages: java.util.List<string>);
							public getStrLookupMap(): java.util.Map<string,org.apache.logging.log4j.core.lookup.StrLookup>;
							public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public constructor(properties: java.util.Map<string,string>);
							public lookup(event: org.apache.logging.log4j.core.LogEvent, var1: string): string;
							public toString(): string;
							public lookup(key: string): string;
							public constructor(defaultLookup: org.apache.logging.log4j.core.lookup.StrLookup);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class JavaLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.JavaLookup>;
							public constructor();
							public getRuntime(): string;
							public getHardware(): string;
							public getVirtualMachine(): string;
							public getLocale(): string;
							public getOperatingSystem(): string;
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class JmxRuntimeInputArgumentsLookup extends org.apache.logging.log4j.core.lookup.MapLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup>;
							public static JMX_SINGLETON: org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup;
							public constructor();
							public constructor(map: java.util.Map<string,string>);
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class JndiLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.JndiLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class Log4jLookup extends org.apache.logging.log4j.core.lookup.AbstractConfigurationAwareLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.Log4jLookup>;
							public static KEY_CONFIG_LOCATION: string;
							public static KEY_CONFIG_PARENT_LOCATION: string;
							public constructor();
							public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class LowerLookup extends java.lang.Object implements org.apache.logging.log4j.core.lookup.StrLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.LowerLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class MainMapLookup extends org.apache.logging.log4j.core.lookup.MapLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.MainMapLookup>;
							public constructor();
							public constructor(map: java.util.Map<string,string>);
							public static setMainArguments(strings0: native.Array<string>): void;
							/** @deprecated */
							public static setMainArguments(strings0: native.Array<string>): void;
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class MapLookup extends java.lang.Object implements org.apache.logging.log4j.core.lookup.StrLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.MapLookup>;
							public constructor();
							public constructor(map: java.util.Map<string,string>);
							/** @deprecated */
							public static setMainArguments(strings0: native.Array<string>): void;
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
							public getMap(): java.util.Map<string,string>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class MarkerLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.MarkerLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class ResourceBundleLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.ResourceBundleLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class StrLookup extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrLookup>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.lookup.StrLookup interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								lookup(string0: string): string;
								lookup(logEvent0: org.apache.logging.log4j.core.LogEvent, string1: string): string;
							});
							public constructor();
							public static CATEGORY: string;
							public lookup(logEvent0: org.apache.logging.log4j.core.LogEvent, string1: string): string;
							public lookup(string0: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export abstract class StrMatcher extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrMatcher>;
							public constructor();
							public static noneMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public isMatch(buffer: native.Array<string>, pos: number): number;
							public static charSetMatcher(chars: string): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static stringMatcher(str: string): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static tabMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static spaceMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static trimMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static commaMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public isMatch(chars0: native.Array<string>, int1: number, int2: number, int3: number): number;
							public static doubleQuoteMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static charMatcher(ch: string): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static splitMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static singleQuoteMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static charSetMatcher(chars: native.Array<string>): org.apache.logging.log4j.core.lookup.StrMatcher;
							public static quoteMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
						}
						export module StrMatcher {
							export class CharMatcher extends org.apache.logging.log4j.core.lookup.StrMatcher {
								public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrMatcher.CharMatcher>;
								public isMatch(buffer: native.Array<string>, pos: number, bufferStart: number, bufferEnd: number): number;
								public isMatch(chars0: native.Array<string>, int1: number, int2: number, int3: number): number;
								public isMatch(buffer: native.Array<string>, pos: number): number;
							}
							export class CharSetMatcher extends org.apache.logging.log4j.core.lookup.StrMatcher {
								public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrMatcher.CharSetMatcher>;
								public isMatch(buffer: native.Array<string>, pos: number, bufferStart: number, bufferEnd: number): number;
								public isMatch(chars0: native.Array<string>, int1: number, int2: number, int3: number): number;
								public isMatch(buffer: native.Array<string>, pos: number): number;
							}
							export class NoMatcher extends org.apache.logging.log4j.core.lookup.StrMatcher {
								public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrMatcher.NoMatcher>;
								public isMatch(buffer: native.Array<string>, pos: number, bufferStart: number, bufferEnd: number): number;
								public isMatch(chars0: native.Array<string>, int1: number, int2: number, int3: number): number;
								public isMatch(buffer: native.Array<string>, pos: number): number;
							}
							export class StringMatcher extends org.apache.logging.log4j.core.lookup.StrMatcher {
								public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrMatcher.StringMatcher>;
								public toString(): string;
								public isMatch(buffer: native.Array<string>, pos: number, bufferStart: number, bufferEnd: number): number;
								public isMatch(chars0: native.Array<string>, int1: number, int2: number, int3: number): number;
								public isMatch(buffer: native.Array<string>, pos: number): number;
							}
							export class TrimMatcher extends org.apache.logging.log4j.core.lookup.StrMatcher {
								public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrMatcher.TrimMatcher>;
								public isMatch(buffer: native.Array<string>, pos: number, bufferStart: number, bufferEnd: number): number;
								public isMatch(chars0: native.Array<string>, int1: number, int2: number, int3: number): number;
								public isMatch(buffer: native.Array<string>, pos: number): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class StrSubstitutor extends java.lang.Object implements org.apache.logging.log4j.core.config.ConfigurationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StrSubstitutor>;
							public static DEFAULT_ESCAPE: string;
							public static DEFAULT_PREFIX: org.apache.logging.log4j.core.lookup.StrMatcher;
							public static DEFAULT_SUFFIX: org.apache.logging.log4j.core.lookup.StrMatcher;
							public static DEFAULT_VALUE_DELIMITER_STRING: string;
							public static DEFAULT_VALUE_DELIMITER: org.apache.logging.log4j.core.lookup.StrMatcher;
							public static ESCAPE_DELIMITER_STRING: string;
							public static DEFAULT_VALUE_ESCAPE_DELIMITER: org.apache.logging.log4j.core.lookup.StrMatcher;
							public replace(source: java.lang.StringBuilder): string;
							public constructor(variableResolver: org.apache.logging.log4j.core.lookup.StrLookup, prefixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher, suffixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher, escape: string, valueDelimiterMatcher: org.apache.logging.log4j.core.lookup.StrMatcher, valueEscapeMatcher: org.apache.logging.log4j.core.lookup.StrMatcher);
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: java.lang.StringBuffer, offset: number, length: number): string;
							public constructor(properties: java.util.Properties);
							public constructor(variableResolver: org.apache.logging.log4j.core.lookup.StrLookup, prefix: string, suffix: string, escape: string);
							public setVariablePrefix(prefix: string): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public replaceIn(source: java.lang.StringBuffer, offset: number, length: number): boolean;
							public replace(source: string, offset: number, length: number): string;
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: native.Array<string>, offset: number, length: number): string;
							public setValueDelimiter(valueDelimiter: string): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public replaceIn(source: java.lang.StringBuffer): boolean;
							public static replace(source: any, valueProperties: java.util.Properties): string;
							public getValueDelimiterMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public constructor(variableResolver: org.apache.logging.log4j.core.lookup.StrLookup);
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: java.lang.StringBuffer): string;
							public constructor(valueMap: java.util.Map<string,string>, prefix: string, suffix: string, escape: string, valueDelimiter: string);
							public replaceIn(event: org.apache.logging.log4j.core.LogEvent, source: java.lang.StringBuilder): boolean;
							public constructor(variableResolver: org.apache.logging.log4j.core.lookup.StrLookup, prefixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher, suffixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher, escape: string, valueDelimiterMatcher: org.apache.logging.log4j.core.lookup.StrMatcher);
							public static replace(source: any, valueMap: java.util.Map<string,string>): string;
							public setVariableSuffixMatcher(suffixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public constructor(valueMap: java.util.Map<string,string>);
							public replaceIn(event: org.apache.logging.log4j.core.LogEvent, source: java.lang.StringBuffer, offset: number, length: number): boolean;
							public isEnableSubstitutionInVariables(): boolean;
							public constructor(variableResolver: org.apache.logging.log4j.core.lookup.StrLookup, prefix: string, suffix: string, escape: string, valueDelimiter: string);
							public setValueDelimiterMatcher(valueDelimiterMatcher: org.apache.logging.log4j.core.lookup.StrMatcher): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public replace(source: java.lang.StringBuffer): string;
							public getVariablePrefixMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public substitute(event: org.apache.logging.log4j.core.LogEvent, buf: java.lang.StringBuilder, offset: number, length: number): boolean;
							public resolveVariable(event: org.apache.logging.log4j.core.LogEvent, variableName: string, buf: java.lang.StringBuilder, startPos: number, endPos: number): string;
							public replaceIn(source: java.lang.StringBuilder): boolean;
							public setVariablePrefixMatcher(prefixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public setVariableResolver(variableResolver: org.apache.logging.log4j.core.lookup.StrLookup): void;
							public setConfiguration(configuration: org.apache.logging.log4j.core.config.Configuration): void;
							public getVariableResolver(): org.apache.logging.log4j.core.lookup.StrLookup;
							public replaceIn(event: org.apache.logging.log4j.core.LogEvent, source: java.lang.StringBuilder, offset: number, length: number): boolean;
							public toString(): string;
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: string): string;
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: java.lang.StringBuilder, offset: number, length: number): string;
							public constructor(valueMap: java.util.Map<string,string>, prefix: string, suffix: string);
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: string, offset: number, length: number): string;
							public replace(source: any): string;
							public constructor(variableResolver: org.apache.logging.log4j.core.lookup.StrLookup, prefixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher, suffixMatcher: org.apache.logging.log4j.core.lookup.StrMatcher, escape: string);
							public getVariableSuffixMatcher(): org.apache.logging.log4j.core.lookup.StrMatcher;
							public replace(source: string): string;
							public replace(source: java.lang.StringBuffer, offset: number, length: number): string;
							public constructor(valueMap: java.util.Map<string,string>, prefix: string, suffix: string, escape: string);
							public constructor();
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: native.Array<string>): string;
							public static replace(source: any, valueMap: java.util.Map<string,string>, prefix: string, suffix: string): string;
							public setEnableSubstitutionInVariables(enableSubstitutionInVariables: boolean): void;
							public appendWithSeparators(sb: java.lang.StringBuilder, iterable: java.lang.Iterable<any>, separator: string): void;
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: any): string;
							public getEscapeChar(): string;
							public replace(source: native.Array<string>): string;
							public setVariableSuffix(suffix: string): org.apache.logging.log4j.core.lookup.StrSubstitutor;
							public replace(event: org.apache.logging.log4j.core.LogEvent, source: java.lang.StringBuilder): string;
							public setEscapeChar(escapeCharacter: string): void;
							public replaceIn(source: java.lang.StringBuilder, offset: number, length: number): boolean;
							public replace(source: native.Array<string>, offset: number, length: number): string;
							public replace(source: java.lang.StringBuilder, offset: number, length: number): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class StructuredDataLookup extends java.lang.Object implements org.apache.logging.log4j.core.lookup.StrLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.StructuredDataLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class SystemPropertiesLookup extends org.apache.logging.log4j.core.lookup.AbstractLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.SystemPropertiesLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module lookup {
						export class UpperLookup extends java.lang.Object implements org.apache.logging.log4j.core.lookup.StrLookup {
							public static class: java.lang.Class<org.apache.logging.log4j.core.lookup.UpperLookup>;
							public constructor();
							public lookup(event: org.apache.logging.log4j.core.LogEvent, key: string): string;
							public lookup(key: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module message {
						export class ExtendedThreadInfoFactory extends java.lang.Object implements org.apache.logging.log4j.message.ThreadDumpMessage.ThreadInfoFactory {
							public static class: java.lang.Class<org.apache.logging.log4j.core.message.ExtendedThreadInfoFactory>;
							public constructor();
							public createThreadInfo(): java.util.Map<org.apache.logging.log4j.message.ThreadInformation,native.Array<java.lang.StackTraceElement>>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module message {
						export class ExtendedThreadInformation extends java.lang.Object implements org.apache.logging.log4j.message.ThreadInformation {
							public static class: java.lang.Class<org.apache.logging.log4j.core.message.ExtendedThreadInformation>;
							public printStack(sb: java.lang.StringBuilder, stack: native.Array<java.lang.StackTraceElement>): void;
							public printThreadInfo(sb: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export abstract class AbstractSocketManager extends org.apache.logging.log4j.core.appender.OutputStreamManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.AbstractSocketManager>;
							public inetAddress: java.net.InetAddress;
							public host: string;
							public port: number;
							public getContentFormat(): java.util.Map<string,string>;
							public close(): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(name: string, os: java.io.OutputStream, inetAddress: java.net.InetAddress, host: string, port: number, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public getByteBuffer(): java.nio.ByteBuffer;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public writeBytes(data: java.nio.ByteBuffer): void;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class Advertiser extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.Advertiser>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.net.Advertiser interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								advertise(map0: java.util.Map<string,string>): any;
								unadvertise(object0: any): void;
							});
							public constructor();
							public unadvertise(object0: any): void;
							public advertise(map0: java.util.Map<string,string>): any;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class DatagramOutputStream extends java.io.OutputStream {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.DatagramOutputStream>;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public constructor();
							public write(i: number): void;
							public close(): void;
							public write(b: native.Array<number>): void;
							public write(bytes: native.Array<number>, offset: number, length: number): void;
							public write(int0: number): void;
							public flush(): void;
							public write(b: native.Array<number>, off: number, len: number): void;
							public write(bytes: native.Array<number>): void;
							public constructor(host: string, port: number, header: native.Array<number>, footer: native.Array<number>);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class DatagramSocketManager extends org.apache.logging.log4j.core.net.AbstractSocketManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.DatagramSocketManager>;
							public static getSocketManager(host: string, port: number, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number): org.apache.logging.log4j.core.net.DatagramSocketManager;
							public close(): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public getByteBuffer(): java.nio.ByteBuffer;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
							public getContentFormat(): java.util.Map<string,string>;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							public constructor(name: string, os: java.io.OutputStream, inetAddress: java.net.InetAddress, host: string, port: number, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public constructor(name: string, os: java.io.OutputStream, inetAddress: java.net.InetAddress, host: string, port: number, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number);
							public writeBytes(data: java.nio.ByteBuffer): void;
						}
						export module DatagramSocketManager {
							export class DatagramSocketManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.net.DatagramSocketManager,org.apache.logging.log4j.core.net.DatagramSocketManager.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.DatagramSocketManager.DatagramSocketManagerFactory>;
								public createManager(name: string, data: org.apache.logging.log4j.core.net.DatagramSocketManager.FactoryData): org.apache.logging.log4j.core.net.DatagramSocketManager;
								public createManager(string0: string, object1: any): any;
							}
							export class FactoryData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.DatagramSocketManager.FactoryData>;
								public constructor(host: string, port: number, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class Facility {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.Facility>;
							public static KERN: org.apache.logging.log4j.core.net.Facility;
							public static USER: org.apache.logging.log4j.core.net.Facility;
							public static MAIL: org.apache.logging.log4j.core.net.Facility;
							public static DAEMON: org.apache.logging.log4j.core.net.Facility;
							public static AUTH: org.apache.logging.log4j.core.net.Facility;
							public static SYSLOG: org.apache.logging.log4j.core.net.Facility;
							public static LPR: org.apache.logging.log4j.core.net.Facility;
							public static NEWS: org.apache.logging.log4j.core.net.Facility;
							public static UUCP: org.apache.logging.log4j.core.net.Facility;
							public static CRON: org.apache.logging.log4j.core.net.Facility;
							public static AUTHPRIV: org.apache.logging.log4j.core.net.Facility;
							public static FTP: org.apache.logging.log4j.core.net.Facility;
							public static NTP: org.apache.logging.log4j.core.net.Facility;
							public static LOG_AUDIT: org.apache.logging.log4j.core.net.Facility;
							public static LOG_ALERT: org.apache.logging.log4j.core.net.Facility;
							public static CLOCK: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL0: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL1: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL2: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL3: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL4: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL5: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL6: org.apache.logging.log4j.core.net.Facility;
							public static LOCAL7: org.apache.logging.log4j.core.net.Facility;
							public static values(): native.Array<org.apache.logging.log4j.core.net.Facility>;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static toFacility(name: string): org.apache.logging.log4j.core.net.Facility;
							public static valueOf(name: string): org.apache.logging.log4j.core.net.Facility;
							public static toFacility(name: string, defaultFacility: org.apache.logging.log4j.core.net.Facility): org.apache.logging.log4j.core.net.Facility;
							public getCode(): number;
							public isEqual(name: string): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class JndiManager extends org.apache.logging.log4j.core.appender.AbstractManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.JndiManager>;
							public static createProperties(initialContextFactoryName: string, providerURL: string, urlPkgPrefixes: string, securityPrincipal: string, securityCredentials: string, additionalProperties: java.util.Properties): java.util.Properties;
							public lookup(name: string): any;
							public close(): void;
							public static getJndiManager(properties: java.util.Properties): org.apache.logging.log4j.core.net.JndiManager;
							public static getDefaultManager(name: string): org.apache.logging.log4j.core.net.JndiManager;
							public toString(): string;
							public releaseSub(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public static getDefaultManager(): org.apache.logging.log4j.core.net.JndiManager;
							public static getJndiManager(initialContextFactoryName: string, providerURL: string, urlPkgPrefixes: string, securityPrincipal: string, securityCredentials: string, additionalProperties: java.util.Properties): org.apache.logging.log4j.core.net.JndiManager;
						}
						export module JndiManager {
							export class JndiManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.net.JndiManager,java.util.Properties> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.JndiManager.JndiManagerFactory>;
								public createManager(string0: string, object1: any): any;
								public createManager(name: string, data: java.util.Properties): org.apache.logging.log4j.core.net.JndiManager;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class MimeMessageBuilder extends org.apache.logging.log4j.core.util.Builder<javax.mail.internet.MimeMessage> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.MimeMessageBuilder>;
							public setRecipients(recipientType: javax.mail.Message.RecipientType, recipients: string): org.apache.logging.log4j.core.net.MimeMessageBuilder;
							public constructor(session: javax.mail.Session);
							public setFrom(from: string): org.apache.logging.log4j.core.net.MimeMessageBuilder;
							/** @deprecated */
							public getMimeMessage(): javax.mail.internet.MimeMessage;
							public build(): javax.mail.internet.MimeMessage;
							public setSubject(subject: string): org.apache.logging.log4j.core.net.MimeMessageBuilder;
							public build(): any;
							public setReplyTo(replyTo: string): org.apache.logging.log4j.core.net.MimeMessageBuilder;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class MulticastDnsAdvertiser extends java.lang.Object implements org.apache.logging.log4j.core.net.Advertiser {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.MulticastDnsAdvertiser>;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public constructor();
							public unadvertise(serviceInfo: any): void;
							public advertise(properties: java.util.Map<string,string>): any;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class Priority extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.Priority>;
							public getSeverity(): org.apache.logging.log4j.core.net.Severity;
							public static getPriority(facility: org.apache.logging.log4j.core.net.Facility, level: org.apache.logging.log4j.Level): number;
							public constructor(facility: org.apache.logging.log4j.core.net.Facility, severity: org.apache.logging.log4j.core.net.Severity);
							public toString(): string;
							public getFacility(): org.apache.logging.log4j.core.net.Facility;
							public getValue(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class Protocol {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.Protocol>;
							public static TCP: org.apache.logging.log4j.core.net.Protocol;
							public static SSL: org.apache.logging.log4j.core.net.Protocol;
							public static UDP: org.apache.logging.log4j.core.net.Protocol;
							public static values(): native.Array<org.apache.logging.log4j.core.net.Protocol>;
							public static valueOf(name: string): org.apache.logging.log4j.core.net.Protocol;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public isEqual(name: string): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class Rfc1349TrafficClass {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.Rfc1349TrafficClass>;
							public static IPTOS_NORMAL: org.apache.logging.log4j.core.net.Rfc1349TrafficClass;
							public static IPTOS_LOWCOST: org.apache.logging.log4j.core.net.Rfc1349TrafficClass;
							public static IPTOS_LOWDELAY: org.apache.logging.log4j.core.net.Rfc1349TrafficClass;
							public static IPTOS_RELIABILITY: org.apache.logging.log4j.core.net.Rfc1349TrafficClass;
							public static IPTOS_THROUGHPUT: org.apache.logging.log4j.core.net.Rfc1349TrafficClass;
							public static values(): native.Array<org.apache.logging.log4j.core.net.Rfc1349TrafficClass>;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static valueOf(name: string): org.apache.logging.log4j.core.net.Rfc1349TrafficClass;
							public value(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class Severity {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.Severity>;
							public static EMERG: org.apache.logging.log4j.core.net.Severity;
							public static ALERT: org.apache.logging.log4j.core.net.Severity;
							public static CRITICAL: org.apache.logging.log4j.core.net.Severity;
							public static ERROR: org.apache.logging.log4j.core.net.Severity;
							public static WARNING: org.apache.logging.log4j.core.net.Severity;
							public static NOTICE: org.apache.logging.log4j.core.net.Severity;
							public static INFO: org.apache.logging.log4j.core.net.Severity;
							public static DEBUG: org.apache.logging.log4j.core.net.Severity;
							public static values(): native.Array<org.apache.logging.log4j.core.net.Severity>;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static getSeverity(level: org.apache.logging.log4j.Level): org.apache.logging.log4j.core.net.Severity;
							public static valueOf(name: string): org.apache.logging.log4j.core.net.Severity;
							public getCode(): number;
							public isEqual(name: string): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class SmtpManager extends org.apache.logging.log4j.core.appender.AbstractManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.SmtpManager>;
							public close(): void;
							public getMimeMultipart(encodedBytes: native.Array<number>, headers: javax.mail.internet.InternetHeaders): javax.mail.internet.MimeMultipart;
							public getEncoding(rawBytes: native.Array<number>, contentType: string): string;
							public formatContentToBytes(priorEvents: native.Array<org.apache.logging.log4j.core.LogEvent>, appendEvent: org.apache.logging.log4j.core.LogEvent, layout: org.apache.logging.log4j.core.Layout<any>): native.Array<number>;
							public encodeContentToBytes(rawBytes: native.Array<number>, encoding: string): native.Array<number>;
							public sendMultipartMessage(msg: javax.mail.internet.MimeMessage, mp: javax.mail.internet.MimeMultipart): void;
							public writeBuffer(priorEvents: native.Array<org.apache.logging.log4j.core.LogEvent>, appendEvent: org.apache.logging.log4j.core.LogEvent, layout: org.apache.logging.log4j.core.Layout<any>, out: java.io.OutputStream): void;
							public encodeContent(bytes: native.Array<number>, encoding: string, out: java.io.ByteArrayOutputStream): void;
							public add(event: org.apache.logging.log4j.core.LogEvent): void;
							public constructor(name: string, session: javax.mail.Session, message: javax.mail.internet.MimeMessage, data: org.apache.logging.log4j.core.net.SmtpManager.FactoryData);
							public sendEvents(layout: org.apache.logging.log4j.core.Layout<any>, appendEvent: org.apache.logging.log4j.core.LogEvent): void;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public writeHeader(layout: org.apache.logging.log4j.core.Layout<any>, out: java.io.OutputStream): void;
							public getHeaders(contentType: string, encoding: string): javax.mail.internet.InternetHeaders;
							public writeFooter(layout: org.apache.logging.log4j.core.Layout<any>, out: java.io.OutputStream): void;
							public static getSmtpManager(config: org.apache.logging.log4j.core.config.Configuration, to: string, cc: string, bcc: string, from: string, replyTo: string, subject: string, protocol: string, host: string, port: number, username: string, password: string, isDebug: boolean, filterName: string, numElements: number, sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration): org.apache.logging.log4j.core.net.SmtpManager;
						}
						export module SmtpManager {
							export class FactoryData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.SmtpManager.FactoryData>;
								public constructor(to: string, cc: string, bcc: string, from: string, replyTo: string, subjectSerializer: org.apache.logging.log4j.core.layout.AbstractStringLayout.Serializer, protocol: string, host: string, port: number, username: string, password: string, isDebug: boolean, numElements: number, sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration);
							}
							export class SMTPManagerFactory extends org.apache.logging.log4j.core.appender.ManagerFactory<org.apache.logging.log4j.core.net.SmtpManager,org.apache.logging.log4j.core.net.SmtpManager.FactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.SmtpManager.SMTPManagerFactory>;
								public createManager(string0: string, object1: any): any;
								public createManager(name: string, data: org.apache.logging.log4j.core.net.SmtpManager.FactoryData): org.apache.logging.log4j.core.net.SmtpManager;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class SocketAddress extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.SocketAddress>;
							public getPort(): number;
							public static newBuilder(): org.apache.logging.log4j.core.net.SocketAddress.Builder;
							public getSocketAddress(): java.net.InetSocketAddress;
							public getHostName(): string;
							public toString(): string;
							public getAddress(): java.net.InetAddress;
							public static getLoopback(): org.apache.logging.log4j.core.net.SocketAddress;
						}
						export module SocketAddress {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.net.SocketAddress> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.SocketAddress.Builder>;
								public setPort(port: number): org.apache.logging.log4j.core.net.SocketAddress.Builder;
								public setHost(host: java.net.InetAddress): org.apache.logging.log4j.core.net.SocketAddress.Builder;
								public build(): any;
								public constructor();
								public build(): org.apache.logging.log4j.core.net.SocketAddress;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class SocketOptions extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.SocketOptions>;
							public apply(socket: java.net.Socket): void;
							public isTcpNoDelay(): java.lang.Boolean;
							public setTrafficClass(trafficClass: number): org.apache.logging.log4j.core.net.SocketOptions;
							public isReuseAddress(): java.lang.Boolean;
							public isOobInline(): java.lang.Boolean;
							public toString(): string;
							public isKeepAlive(): java.lang.Boolean;
							public setSoTimeout(soTimeout: number): org.apache.logging.log4j.core.net.SocketOptions;
							public setReuseAddress(reuseAddress: boolean): org.apache.logging.log4j.core.net.SocketOptions;
							public build(): org.apache.logging.log4j.core.net.SocketOptions;
							public getTrafficClass(): java.lang.Integer;
							public constructor();
							public getActualTrafficClass(): java.lang.Integer;
							public setKeepAlive(keepAlive: boolean): org.apache.logging.log4j.core.net.SocketOptions;
							public setTcpNoDelay(tcpNoDelay: boolean): org.apache.logging.log4j.core.net.SocketOptions;
							public setSoLinger(soLinger: number): org.apache.logging.log4j.core.net.SocketOptions;
							public static newBuilder(): org.apache.logging.log4j.core.net.SocketOptions;
							public setReceiveBufferSize(receiveBufferSize: number): org.apache.logging.log4j.core.net.SocketOptions;
							public build(): any;
							public getSoTimeout(): java.lang.Integer;
							public getPerformancePreferences(): org.apache.logging.log4j.core.net.SocketPerformancePreferences;
							public getRfc1349TrafficClass(): org.apache.logging.log4j.core.net.Rfc1349TrafficClass;
							public setSendBufferSize(sendBufferSize: number): org.apache.logging.log4j.core.net.SocketOptions;
							public setRfc1349TrafficClass(trafficClass: org.apache.logging.log4j.core.net.Rfc1349TrafficClass): org.apache.logging.log4j.core.net.SocketOptions;
							public getSoLinger(): java.lang.Integer;
							public getReceiveBufferSize(): java.lang.Integer;
							public getSendBufferSize(): java.lang.Integer;
							public setOobInline(oobInline: boolean): org.apache.logging.log4j.core.net.SocketOptions;
							public setPerformancePreferences(performancePreferences: org.apache.logging.log4j.core.net.SocketPerformancePreferences): org.apache.logging.log4j.core.net.SocketOptions;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class SocketPerformancePreferences extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.SocketPerformancePreferences>;
							public constructor();
							public build(): org.apache.logging.log4j.core.net.SocketPerformancePreferences;
							public apply(socket: java.net.Socket): void;
							public getLatency(): number;
							public getBandwidth(): number;
							public setConnectionTime(connectionTime: number): void;
							public setLatency(latency: number): void;
							public static newBuilder(): org.apache.logging.log4j.core.net.SocketPerformancePreferences;
							public toString(): string;
							public build(): any;
							public getConnectionTime(): number;
							public setBandwidth(bandwidth: number): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class SslSocketManager extends org.apache.logging.log4j.core.net.TcpSocketManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.SslSocketManager>;
							public static DEFAULT_PORT: number;
							/** @deprecated */
							public constructor(name: string, os: java.io.OutputStream, sock: java.net.Socket, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, inetAddress: java.net.InetAddress, host: string, port: number, connectTimeoutMillis: number, reconnectionDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number);
							public close(): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public constructor(name: string, os: java.io.OutputStream, sock: java.net.Socket, sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, inetAddress: java.net.InetAddress, host: string, port: number, connectTimeoutMillis: number, reconnectionDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public createSocket(socketAddress: java.net.InetSocketAddress): java.net.Socket;
							public static createSocket(socketAddress: java.net.InetSocketAddress, socketOptions: org.apache.logging.log4j.core.net.SocketOptions, connectTimeoutMillis: number): java.net.Socket;
							public getByteBuffer(): java.nio.ByteBuffer;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
							public constructor(name: string, os: java.io.OutputStream, socket: java.net.Socket, inetAddress: java.net.InetAddress, host: string, port: number, connectTimeoutMillis: number, reconnectionDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions);
							/** @deprecated */
							public static getSocketManager(sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number): org.apache.logging.log4j.core.net.SslSocketManager;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							/** @deprecated */
							public static getSocketManager(host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number): org.apache.logging.log4j.core.net.TcpSocketManager;
							public constructor(name: string, os: java.io.OutputStream, inetAddress: java.net.InetAddress, host: string, port: number, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public static getSocketManager(host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions): org.apache.logging.log4j.core.net.TcpSocketManager;
							/** @deprecated */
							public constructor(name: string, os: java.io.OutputStream, socket: java.net.Socket, inetAddress: java.net.InetAddress, host: string, port: number, connectTimeoutMillis: number, reconnectionDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number);
							public writeBytes(data: java.nio.ByteBuffer): void;
							public static getSocketManager(sslConfig: org.apache.logging.log4j.core.net.ssl.SslConfiguration, host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions): org.apache.logging.log4j.core.net.SslSocketManager;
						}
						export module SslSocketManager {
							export class SslFactoryData extends org.apache.logging.log4j.core.net.TcpSocketManager.FactoryData {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.SslSocketManager.SslFactoryData>;
								public sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration;
								public toString(): string;
								public constructor(host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions);
								public constructor(sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration, host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions);
							}
							export class SslSocketManagerFactory extends org.apache.logging.log4j.core.net.TcpSocketManager.TcpSocketManagerFactory<org.apache.logging.log4j.core.net.SslSocketManager,org.apache.logging.log4j.core.net.SslSocketManager.SslFactoryData> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.SslSocketManager.SslSocketManagerFactory>;
								public createManager(string0: string, object1: any): any;
								public createManager(name: string, data: any): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class TcpSocketManager extends org.apache.logging.log4j.core.net.AbstractSocketManager {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.TcpSocketManager>;
							public static DEFAULT_RECONNECTION_DELAY_MILLIS: number;
							public close(): void;
							public getSocket(): java.net.Socket;
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, os: java.io.OutputStream, streamName: string, createOnDemand: boolean, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public createSocket(socketAddress: java.net.InetSocketAddress): java.net.Socket;
							public closeOutputStream(): boolean;
							public toString(): string;
							public getByteBuffer(): java.nio.ByteBuffer;
							public writeBytes(data: native.Array<number>, offset: number, length: number): void;
							public getSocketOptions(): org.apache.logging.log4j.core.net.SocketOptions;
							public write(bytes: native.Array<number>, immediateFlush: boolean): void;
							public constructor(name: string, os: java.io.OutputStream, socket: java.net.Socket, inetAddress: java.net.InetAddress, host: string, port: number, connectTimeoutMillis: number, reconnectionDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions);
							public constructor(name: string, os: java.io.OutputStream, inetAddress: java.net.InetAddress, host: string, port: number, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							/** @deprecated */
							public constructor(name: string, os: java.io.OutputStream, socket: java.net.Socket, inetAddress: java.net.InetAddress, host: string, port: number, connectTimeoutMillis: number, reconnectionDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number);
							public write(bytes: native.Array<number>, offset: number, length: number, immediateFlush: boolean): void;
							/** @deprecated */
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, byteBuffer: java.nio.ByteBuffer);
							public static createSocket(socketAddress: java.net.InetSocketAddress, socketOptions: org.apache.logging.log4j.core.net.SocketOptions, connectTimeoutMillis: number): java.net.Socket;
							public drain(buf: java.nio.ByteBuffer): java.nio.ByteBuffer;
							public static setHostResolver(resolver: org.apache.logging.log4j.core.net.TcpSocketManager.HostResolver): void;
							public getContentFormat(): java.util.Map<string,string>;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean);
							/** @deprecated */
							public static getSocketManager(host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number): org.apache.logging.log4j.core.net.TcpSocketManager;
							public getConnectTimeoutMillis(): number;
							public write(bytes: native.Array<number>, offset: number, length: number): void;
							public getReconnectionDelayMillis(): number;
							public constructor(os: java.io.OutputStream, streamName: string, layout: org.apache.logging.log4j.core.Layout<any>, writeHeader: boolean, bufferSize: number);
							public constructor(loggerContext: org.apache.logging.log4j.core.LoggerContext, name: string);
							public static getSocketManager(host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions): org.apache.logging.log4j.core.net.TcpSocketManager;
							public write(bytes: native.Array<number>): void;
							public writeBytes(data: java.nio.ByteBuffer): void;
						}
						export module TcpSocketManager {
							export class FactoryData extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.TcpSocketManager.FactoryData>;
								public host: string;
								public port: number;
								public connectTimeoutMillis: number;
								public reconnectDelayMillis: number;
								public immediateFail: boolean;
								public layout: org.apache.logging.log4j.core.Layout<any>;
								public bufferSize: number;
								public socketOptions: org.apache.logging.log4j.core.net.SocketOptions;
								public toString(): string;
								public constructor(host: string, port: number, connectTimeoutMillis: number, reconnectDelayMillis: number, immediateFail: boolean, layout: org.apache.logging.log4j.core.Layout<any>, bufferSize: number, socketOptions: org.apache.logging.log4j.core.net.SocketOptions);
							}
							export class HostResolver extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.TcpSocketManager.HostResolver>;
								public resolveHost(host: string, port: number): java.util.List<java.net.InetSocketAddress>;
								public constructor();
							}
							export class Reconnector extends org.apache.logging.log4j.core.util.Log4jThread {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.TcpSocketManager.Reconnector>;
								public toString(): string;
								public constructor(name: string);
								public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable, name: string);
								public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable, name: string, stackSize: number);
								public latch(): void;
								public constructor(param0: org.apache.logging.log4j.core.net.TcpSocketManager, owner: org.apache.logging.log4j.core.appender.OutputStreamManager);
								public constructor(target: java.lang.Runnable, name: string);
								public constructor();
								public constructor(target: java.lang.Runnable);
								public shutdown(): void;
								public run(): void;
								public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable);
								public constructor(group: java.lang.ThreadGroup, name: string);
							}
							export class TcpSocketManagerFactory<M, T>  extends org.apache.logging.log4j.core.appender.ManagerFactory<any,any> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.TcpSocketManager.TcpSocketManagerFactory<any,any>>;
								public createManager(string0: string, object1: any): any;
								public createManager(name: string, data: any): any;
								public errorMessage(data: any, socketAddresses: java.util.List<java.net.InetSocketAddress>): string;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export class UrlConnectionFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.net.UrlConnectionFactory>;
							public constructor();
							public static createConnection(url: java.net.URL, lastModifiedMillis: number, sslConfiguration: org.apache.logging.log4j.core.net.ssl.SslConfiguration): java.net.HttpURLConnection;
							public static createConnection(url: java.net.URL): java.net.URLConnection;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class AbstractKeyStoreConfiguration extends org.apache.logging.log4j.core.net.ssl.StoreConfiguration<java.security.KeyStore> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.AbstractKeyStoreConfiguration>;
								/** @deprecated */
								public constructor(location: string, password: string);
								public getKeyStore(): java.security.KeyStore;
								public load(): any;
								public load(): java.security.KeyStore;
								public equals(obj: any): boolean;
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider, keyStoreType: string);
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>);
								public getKeyStoreType(): string;
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider);
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>, keyStoreType: string);
								public hashCode(): number;
								/** @deprecated */
								public constructor(location: string, password: string, keyStoreType: string);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class EnvironmentPasswordProvider extends java.lang.Object implements org.apache.logging.log4j.core.net.ssl.PasswordProvider {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.EnvironmentPasswordProvider>;
								public getPassword(): native.Array<string>;
								public constructor(passwordEnvironmentVariable: string);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class FilePasswordProvider extends java.lang.Object implements org.apache.logging.log4j.core.net.ssl.PasswordProvider {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.FilePasswordProvider>;
								public constructor(passwordFile: string);
								public getPassword(): native.Array<string>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class KeyStoreConfiguration extends org.apache.logging.log4j.core.net.ssl.AbstractKeyStoreConfiguration {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration>;
								/** @deprecated */
								public constructor(location: string, password: string);
								/** @deprecated */
								public static createKeyStoreConfiguration(location: string, password: string, keyStoreType: string, keyManagerFactoryAlgorithm: string): org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration;
								public static createKeyStoreConfiguration(location: string, password: native.Array<string>, passwordEnvironmentVariable: string, passwordFile: string, keyStoreType: string, keyManagerFactoryAlgorithm: string): org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration;
								/** @deprecated */
								public static createKeyStoreConfiguration(location: string, password: native.Array<string>, keyStoreType: string, keyManagerFactoryAlgorithm: string): org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration;
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>, keyStoreType: string, keyManagerFactoryAlgorithm: string);
								public initKeyManagerFactory(): javax.net.ssl.KeyManagerFactory;
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider);
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>, keyStoreType: string);
								/** @deprecated */
								public constructor(location: string, password: string, keyStoreType: string);
								public getKeyManagerFactoryAlgorithm(): string;
								public equals(obj: any): boolean;
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider, keyStoreType: string);
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>);
								/** @deprecated */
								public constructor(location: string, password: string, keyStoreType: string, keyManagerFactoryAlgorithm: string);
								public hashCode(): number;
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider, keyStoreType: string, keyManagerFactoryAlgorithm: string);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class KeyStoreConfigurationException extends org.apache.logging.log4j.core.net.ssl.StoreConfigurationException {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.KeyStoreConfigurationException>;
								public constructor(e: java.lang.Exception);
								public constructor(message: string);
								public constructor(message: string, e: java.lang.Exception);
								public constructor(cause: java.lang.Throwable);
								public constructor(message: string, cause: java.lang.Throwable);
								public constructor();
								public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class LaxHostnameVerifier extends java.lang.Object implements javax.net.ssl.HostnameVerifier {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.LaxHostnameVerifier>;
								public static INSTANCE: javax.net.ssl.HostnameVerifier;
								public verify(s: string, sslSession: javax.net.ssl.SSLSession): boolean;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class MemoryPasswordProvider extends java.lang.Object implements org.apache.logging.log4j.core.net.ssl.PasswordProvider {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.MemoryPasswordProvider>;
								public clearSecrets(): void;
								public getPassword(): native.Array<string>;
								public constructor(chars: native.Array<string>);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class PasswordProvider extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.PasswordProvider>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.net.ssl.PasswordProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									getPassword(): native.Array<string>;
								});
								public constructor();
								public getPassword(): native.Array<string>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class SslConfiguration extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.SslConfiguration>;
								public getSslContext(): javax.net.ssl.SSLContext;
								public getProtocol(): string;
								public clearSecrets(): void;
								public isVerifyHostName(): boolean;
								public getKeyStoreConfig(): org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration;
								public static createSSLConfiguration(protocol: string, keyStoreConfig: org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration, trustStoreConfig: org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration): org.apache.logging.log4j.core.net.ssl.SslConfiguration;
								public equals(obj: any): boolean;
								public getTrustStoreConfig(): org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration;
								public getSslSocketFactory(): javax.net.ssl.SSLSocketFactory;
								public getSslServerSocketFactory(): javax.net.ssl.SSLServerSocketFactory;
								public hashCode(): number;
								public static createSSLConfiguration(protocol: string, keyStoreConfig: org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration, trustStoreConfig: org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration, verifyHostName: boolean): org.apache.logging.log4j.core.net.ssl.SslConfiguration;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class SslConfigurationDefaults extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.SslConfigurationDefaults>;
								public static KEYSTORE_TYPE: string;
								public static PROTOCOL: string;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class SslConfigurationException extends java.lang.Exception {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.SslConfigurationException>;
								public constructor(message: string);
								public constructor(e: java.lang.Exception);
								public constructor(cause: java.lang.Throwable);
								public constructor(message: string, cause: java.lang.Throwable);
								public constructor();
								public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class SslConfigurationFactory extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.SslConfigurationFactory>;
								public static getSslConfiguration(): org.apache.logging.log4j.core.net.ssl.SslConfiguration;
								public constructor();
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class StoreConfiguration<T>  extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.StoreConfiguration<any>>;
								public static LOGGER: org.apache.logging.log4j.status.StatusLogger;
								/** @deprecated */
								public constructor(location: string, password: string);
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider);
								public getLocation(): string;
								public load(): T;
								public clearSecrets(): void;
								/** @deprecated */
								public getPassword(): string;
								public equals(obj: any): boolean;
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>);
								/** @deprecated */
								public setPassword(password: string): void;
								public setLocation(location: string): void;
								public getPasswordAsCharArray(): native.Array<string>;
								public setPassword(password: native.Array<string>): void;
								public hashCode(): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class StoreConfigurationException extends java.lang.Exception {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.StoreConfigurationException>;
								public constructor(message: string);
								public constructor(e: java.lang.Exception);
								public constructor(message: string, e: java.lang.Exception);
								public constructor(cause: java.lang.Throwable);
								public constructor(message: string, cause: java.lang.Throwable);
								public constructor();
								public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class TrustStoreConfiguration extends org.apache.logging.log4j.core.net.ssl.AbstractKeyStoreConfiguration {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration>;
								/** @deprecated */
								public constructor(location: string, password: string);
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider, keyStoreType: string, trustManagerFactoryAlgorithm: string);
								/** @deprecated */
								public constructor(location: string, password: string, keyStoreType: string, trustManagerFactoryAlgorithm: string);
								/** @deprecated */
								public static createKeyStoreConfiguration(location: string, password: native.Array<string>, keyStoreType: string, trustManagerFactoryAlgorithm: string): org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration;
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider);
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>, keyStoreType: string, trustManagerFactoryAlgorithm: string);
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>, keyStoreType: string);
								/** @deprecated */
								public static createKeyStoreConfiguration(location: string, password: string, keyStoreType: string, trustManagerFactoryAlgorithm: string): org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration;
								/** @deprecated */
								public constructor(location: string, password: string, keyStoreType: string);
								public equals(obj: any): boolean;
								public constructor(location: string, passwordProvider: org.apache.logging.log4j.core.net.ssl.PasswordProvider, keyStoreType: string);
								public initTrustManagerFactory(): javax.net.ssl.TrustManagerFactory;
								/** @deprecated */
								public constructor(location: string, password: native.Array<string>);
								public static createKeyStoreConfiguration(location: string, password: native.Array<string>, passwordEnvironmentVariable: string, passwordFile: string, keyStoreType: string, trustManagerFactoryAlgorithm: string): org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration;
								public hashCode(): number;
								public getTrustManagerFactoryAlgorithm(): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module net {
						export module ssl {
							export class TrustStoreConfigurationException extends org.apache.logging.log4j.core.net.ssl.StoreConfigurationException {
								public static class: java.lang.Class<org.apache.logging.log4j.core.net.ssl.TrustStoreConfigurationException>;
								public constructor(e: java.lang.Exception);
								public constructor(message: string);
								public constructor(message: string, e: java.lang.Exception);
								public constructor(cause: java.lang.Throwable);
								public constructor(message: string, cause: java.lang.Throwable);
								public constructor();
								public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module osgi {
						export class Activator extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.osgi.Activator>;
							public constructor();
							public start(context: org.osgi.framework.BundleContext): void;
							public stop(context: org.osgi.framework.BundleContext): void;
							public bundleChanged(event: org.osgi.framework.BundleEvent): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module osgi {
						export class BundleContextSelector extends org.apache.logging.log4j.core.selector.ClassLoaderContextSelector {
							public static class: java.lang.Class<org.apache.logging.log4j.core.osgi.BundleContextSelector>;
							public constructor();
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): org.apache.logging.log4j.core.LoggerContext;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public removeContext(context: org.apache.logging.log4j.core.LoggerContext): void;
							public contextShutdown(loggerContext: org.apache.logging.log4j.spi.LoggerContext): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module parser {
						export class AbstractJacksonLogEventParser extends java.lang.Object implements org.apache.logging.log4j.core.parser.TextLogEventParser {
							public static class: java.lang.Class<org.apache.logging.log4j.core.parser.AbstractJacksonLogEventParser>;
							public parseFrom(input: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: string): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: native.Array<number>, offset: number, length: number): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module parser {
						export class JsonLogEventParser extends org.apache.logging.log4j.core.parser.AbstractJacksonLogEventParser {
							public static class: java.lang.Class<org.apache.logging.log4j.core.parser.JsonLogEventParser>;
							public constructor();
							public parseFrom(input: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: string): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: native.Array<number>, offset: number, length: number): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module parser {
						export class LogEventParser extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.parser.LogEventParser>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.parser.LogEventParser interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								parseFrom(bytes0: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
								parseFrom(bytes0: native.Array<number>, int1: number, int2: number): org.apache.logging.log4j.core.LogEvent;
							});
							public constructor();
							public parseFrom(bytes0: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(bytes0: native.Array<number>, int1: number, int2: number): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module parser {
						export class ParseException extends java.lang.Exception {
							public static class: java.lang.Class<org.apache.logging.log4j.core.parser.ParseException>;
							public constructor();
							public constructor(message: string, cause: java.lang.Throwable);
							public constructor(cause: java.lang.Throwable);
							public constructor(message: string);
							public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module parser {
						export class TextLogEventParser extends java.lang.Object implements org.apache.logging.log4j.core.parser.LogEventParser {
							public static class: java.lang.Class<org.apache.logging.log4j.core.parser.TextLogEventParser>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.parser.TextLogEventParser interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								parseFrom(string0: string): org.apache.logging.log4j.core.LogEvent;
								parseFrom(bytes0: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
								parseFrom(bytes0: native.Array<number>, int1: number, int2: number): org.apache.logging.log4j.core.LogEvent;
							});
							public constructor();
							public parseFrom(bytes0: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(string0: string): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(bytes0: native.Array<number>, int1: number, int2: number): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module parser {
						export class XmlLogEventParser extends org.apache.logging.log4j.core.parser.AbstractJacksonLogEventParser {
							public static class: java.lang.Class<org.apache.logging.log4j.core.parser.XmlLogEventParser>;
							public constructor();
							public parseFrom(input: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: string): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: native.Array<number>, offset: number, length: number): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module parser {
						export class YamlLogEventParser extends org.apache.logging.log4j.core.parser.AbstractJacksonLogEventParser {
							public static class: java.lang.Class<org.apache.logging.log4j.core.parser.YamlLogEventParser>;
							public constructor();
							public parseFrom(input: native.Array<number>): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: string): org.apache.logging.log4j.core.LogEvent;
							public parseFrom(input: native.Array<number>, offset: number, length: number): org.apache.logging.log4j.core.LogEvent;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export abstract class AbstractPatternConverter extends java.lang.Object implements org.apache.logging.log4j.core.pattern.PatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractPatternConverter>;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public getStyleClass(e: any): string;
							public getName(): string;
							public constructor(name: string, style: string);
							public format(object0: any, stringBuilder1: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export abstract class AbstractStyleNameConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
							public constructor(name: string, style: string);
							public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
						}
						export module AbstractStyleNameConverter {
							export class Black extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Black>;
								public static NAME: string;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Black;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
							export class Blue extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Blue>;
								public static NAME: string;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Blue;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
							export class Cyan extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Cyan>;
								public static NAME: string;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Cyan;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
							export class Green extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Green>;
								public static NAME: string;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Green;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
							export class Magenta extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Magenta>;
								public static NAME: string;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Magenta;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
							export class Red extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Red>;
								public static NAME: string;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Red;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
							export class White extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.White>;
								public static NAME: string;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.White;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
							export class Yellow extends org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Yellow>;
								public static NAME: string;
								public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter.Yellow;
								public getStyleClass(e: any): string;
								public constructor(name: string, style: string);
								public format(obj: any, output: java.lang.StringBuilder): void;
								public getName(): string;
								public constructor(formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
								public static newInstance(asnConverterClass: java.lang.Class<any>, name: string, config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter;
								public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
								public constructor(name: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, styling: string);
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class AnsiConverter extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AnsiConverter>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.pattern.AnsiConverter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
							});
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class AnsiEscape {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.AnsiEscape>;
							public static CSI: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static SUFFIX: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static SEPARATOR: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static NORMAL: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BRIGHT: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static DIM: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static UNDERLINE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BLINK: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static REVERSE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static HIDDEN: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BLACK: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_BLACK: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static RED: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_RED: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static GREEN: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_GREEN: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static YELLOW: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_YELLOW: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BLUE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_BLUE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static MAGENTA: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_MAGENTA: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static CYAN: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_CYAN: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static WHITE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_WHITE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static DEFAULT: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static FG_DEFAULT: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_BLACK: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_RED: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_GREEN: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_YELLOW: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_BLUE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_MAGENTA: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_CYAN: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static BG_WHITE: org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static values(): native.Array<org.apache.logging.log4j.core.pattern.AnsiEscape>;
							public getCode(): string;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static getDefaultStyle(): string;
							public static valueOf(name: string): org.apache.logging.log4j.core.pattern.AnsiEscape;
							public static createMap(values: string, dontEscapeKeys: native.Array<string>): java.util.Map<string,string>;
							public static createMap(values: native.Array<string>, dontEscapeKeys: native.Array<string>): java.util.Map<string,string>;
							public static createSequence(names: native.Array<string>): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ArrayPatternConverter extends java.lang.Object implements org.apache.logging.log4j.core.pattern.PatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ArrayPatternConverter>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.pattern.ArrayPatternConverter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								format(stringBuilder0: java.lang.StringBuilder, objects1: native.Array<any>): void;
								format(object0: any, stringBuilder1: java.lang.StringBuilder): void;
								getName(): string;
								getStyleClass(object0: any): string;
							});
							public constructor();
							public static CATEGORY: string;
							public getName(): string;
							public getStyleClass(object0: any): string;
							public format(object0: any, stringBuilder1: java.lang.StringBuilder): void;
							public format(stringBuilder0: java.lang.StringBuilder, objects1: native.Array<any>): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class CachedDateFormat extends java.text.DateFormat {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.CachedDateFormat>;
							public static NO_MILLISECONDS: number;
							public static UNRECOGNIZED_MILLISECONDS: number;
							public constructor();
							public parse(s: string, pos: java.text.ParsePosition): java.util.Date;
							public parse(source: string): java.util.Date;
							public format(now: number, buf: java.lang.StringBuffer): java.lang.StringBuffer;
							public setTimeZone(timeZone: java.util.TimeZone): void;
							public static findMillisecondStart(time: number, formatted: string, formatter: java.text.DateFormat): number;
							public parse(string0: string, parsePosition1: java.text.ParsePosition): java.util.Date;
							public getNumberFormat(): java.text.NumberFormat;
							public format(obj: any, toAppendTo: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition): java.lang.StringBuffer;
							public format(obj: any): string;
							public constructor(dateFormat: java.text.DateFormat, expiration: number);
							public format(date: java.util.Date, sbuf: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition): java.lang.StringBuffer;
							public static getMaximumCacheValidity(pattern: string): number;
							public format(date0: java.util.Date, stringBuffer1: java.lang.StringBuffer, fieldPosition2: java.text.FieldPosition): java.lang.StringBuffer;
							public format(date: java.util.Date): string;
							public setTimeZone(zone: java.util.TimeZone): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ClassNamePatternConverter extends org.apache.logging.log4j.core.pattern.NamePatternConverter implements org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ClassNamePatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.ClassNamePatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public requiresLocation(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ConverterKeys extends java.lang.Object implements java.lang.annotation.Annotation {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ConverterKeys>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.pattern.ConverterKeys interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								value(): native.Array<string>;
								equals(object0: any): boolean;
								hashCode(): number;
								toString(): string;
								annotationType(): java.lang.Class<any>;
							});
							public constructor();
							public hashCode(): number;
							public annotationType(): java.lang.Class<any>;
							public value(): native.Array<string>;
							public equals(obj: any): boolean;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class DatePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.pattern.ArrayPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.DatePatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public format(epochMilli: number, output: java.lang.StringBuilder): void;
							public format(toAppendTo: java.lang.StringBuilder, objects: native.Array<any>): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public getPattern(): string;
							public format(date: java.util.Date, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.DatePatternConverter;
							public format(event: org.apache.logging.log4j.core.LogEvent, output: java.lang.StringBuilder): void;
							public format(instant: org.apache.logging.log4j.core.time.Instant, output: java.lang.StringBuilder): void;
						}
						export module DatePatternConverter {
							export class CachedTime extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.DatePatternConverter.CachedTime>;
								public epochSecond: number;
								public nanoOfSecond: number;
								public formatted: string;
								public constructor(param0: org.apache.logging.log4j.core.pattern.DatePatternConverter, instant: org.apache.logging.log4j.core.time.Instant);
							}
							export class FixedFormatter extends org.apache.logging.log4j.core.pattern.DatePatternConverter.Formatter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.DatePatternConverter.FixedFormatter>;
								public toPattern(): string;
							}
							export abstract class Formatter extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.DatePatternConverter.Formatter>;
								public toPattern(): string;
							}
							export class PatternFormatter extends org.apache.logging.log4j.core.pattern.DatePatternConverter.Formatter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.DatePatternConverter.PatternFormatter>;
								public toPattern(): string;
							}
							export class UnixFormatter extends org.apache.logging.log4j.core.pattern.DatePatternConverter.Formatter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.DatePatternConverter.UnixFormatter>;
							}
							export class UnixMillisFormatter extends org.apache.logging.log4j.core.pattern.DatePatternConverter.Formatter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.DatePatternConverter.UnixMillisFormatter>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class EncodingPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.EncodingPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.EncodingPatternConverter;
						}
						export module EncodingPatternConverter {
							export abstract class EscapeFormat {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.EncodingPatternConverter.EscapeFormat>;
								public static HTML: org.apache.logging.log4j.core.pattern.EncodingPatternConverter.EscapeFormat;
								public static JSON: org.apache.logging.log4j.core.pattern.EncodingPatternConverter.EscapeFormat;
								public static CRLF: org.apache.logging.log4j.core.pattern.EncodingPatternConverter.EscapeFormat;
								public static XML: org.apache.logging.log4j.core.pattern.EncodingPatternConverter.EscapeFormat;
								public static values(): native.Array<org.apache.logging.log4j.core.pattern.EncodingPatternConverter.EscapeFormat>;
								public static valueOf(name: string): org.apache.logging.log4j.core.pattern.EncodingPatternConverter.EscapeFormat;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class EndOfBatchPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.EndOfBatchPatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.EndOfBatchPatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export abstract class EqualsBaseReplacementConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public equals(string0: string, stringBuilder1: java.lang.StringBuilder, int2: number, int3: number): boolean;
							public equals(obj: any): boolean;
							public constructor(name: string, style: string);
							public constructor(name: string, style: string, formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>, testString: string, substitution: string, parser: org.apache.logging.log4j.core.pattern.PatternParser);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class EqualsIgnoreCaseReplacementConverter extends org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.EqualsIgnoreCaseReplacementConverter>;
							public getStyleClass(e: any): string;
							public equals(str: string, buff: java.lang.StringBuilder, from: number, len: number): boolean;
							public getName(): string;
							public equals(string0: string, stringBuilder1: java.lang.StringBuilder, int2: number, int3: number): boolean;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public equals(obj: any): boolean;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.EqualsIgnoreCaseReplacementConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class EqualsReplacementConverter extends org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.EqualsReplacementConverter>;
							public getStyleClass(e: any): string;
							public equals(str: string, buff: java.lang.StringBuilder, from: number, len: number): boolean;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.EqualsReplacementConverter;
							public getName(): string;
							public equals(string0: string, stringBuilder1: java.lang.StringBuilder, int2: number, int3: number): boolean;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public equals(obj: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ExtendedThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.ThrowablePatternConverter;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter;
							public format(event: org.apache.logging.log4j.core.LogEvent, buffer: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class FileDatePatternConverter extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.FileDatePatternConverter>;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.PatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class FileLocationPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.FileLocationPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, output: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.FileLocationPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class FormattingInfo extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.FormattingInfo>;
							public isLeftAligned(): boolean;
							public constructor(leftAlign: boolean, minLength: number, maxLength: number, leftTruncate: boolean, zeroPad: boolean);
							public static getDefault(): org.apache.logging.log4j.core.pattern.FormattingInfo;
							public getMaxLength(): number;
							public isLeftTruncate(): boolean;
							public getMinLength(): number;
							public isZeroPad(): boolean;
							public format(fieldStart: number, buffer: java.lang.StringBuilder): void;
							public toString(): string;
							public constructor(leftAlign: boolean, minLength: number, maxLength: number, leftTruncate: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class FullLocationPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.FullLocationPatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.FullLocationPatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public requiresLocation(): boolean;
							public format(event: org.apache.logging.log4j.core.LogEvent, output: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class HighlightConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.pattern.AnsiConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.HighlightConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.HighlightConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public handlesThrowable(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class HtmlTextRenderer extends java.lang.Object implements org.apache.logging.log4j.core.pattern.TextRenderer {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.HtmlTextRenderer>;
							public constructor(formats: native.Array<string>);
							public render(input: java.lang.StringBuilder, output: java.lang.StringBuilder): void;
							public render(input: string, output: java.lang.StringBuilder, styleName: string): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class IntegerPatternConverter extends org.apache.logging.log4j.core.pattern.AbstractPatternConverter implements org.apache.logging.log4j.core.pattern.ArrayPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.IntegerPatternConverter>;
							public getStyleClass(e: any): string;
							public format(toAppendTo: java.lang.StringBuilder, objects: native.Array<any>): void;
							public getName(): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.IntegerPatternConverter;
							public format(obj: any, toAppendTo: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class JAnsiTextRenderer extends java.lang.Object implements org.apache.logging.log4j.core.pattern.TextRenderer {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.JAnsiTextRenderer>;
							public static DefaultExceptionStyleMap: java.util.Map<string,native.Array<org.fusesource.jansi.AnsiRenderer.Code>>;
							public getStyleMap(): java.util.Map<string,native.Array<org.fusesource.jansi.AnsiRenderer.Code>>;
							public render(input: java.lang.StringBuilder, output: java.lang.StringBuilder): void;
							public constructor(formats: native.Array<string>, defaultStyleMap: java.util.Map<string,native.Array<org.fusesource.jansi.AnsiRenderer.Code>>);
							public render(input: string, output: java.lang.StringBuilder, styleName: string): void;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class LevelPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.LevelPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.LevelPatternConverter;
							public format(event: org.apache.logging.log4j.core.LogEvent, output: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class LineLocationPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.LineLocationPatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.LineLocationPatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public requiresLocation(): boolean;
							public format(event: org.apache.logging.log4j.core.LogEvent, output: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class LineSeparatorPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.LineSeparatorPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.LineSeparatorPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class LiteralPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.pattern.ArrayPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.LiteralPatternConverter>;
							public getStyleClass(e: any): string;
							public format(output: java.lang.StringBuilder, objects: native.Array<any>): void;
							public isVariable(): boolean;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public getLiteral(): string;
							public toString(): string;
							public constructor(name: string, style: string);
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, literal: string, convertBackslashes: boolean);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export abstract class LogEventPatternConverter extends org.apache.logging.log4j.core.pattern.AbstractPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.LogEventPatternConverter>;
							public getStyleClass(e: any): string;
							public isVariable(): boolean;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public handlesThrowable(): boolean;
							public constructor(name: string, style: string);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class LoggerFqcnPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.LoggerFqcnPatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.LoggerFqcnPatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class LoggerPatternConverter extends org.apache.logging.log4j.core.pattern.NamePatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.LoggerPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.LoggerPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class MapPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.MapPatternConverter>;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.MapPatternConverter;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>, format: org.apache.logging.log4j.message.MapMessage.MapFormat): org.apache.logging.log4j.core.pattern.MapPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class MarkerPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.MarkerPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.MarkerPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class MarkerSimpleNamePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.MarkerSimpleNamePatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.MarkerSimpleNamePatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class MaxLengthConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.MaxLengthConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.MaxLengthConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class MdcPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.MdcPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.MdcPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class MessagePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.MessagePatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.MessagePatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class MethodLocationPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.impl.LocationAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.MethodLocationPatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.MethodLocationPatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public requiresLocation(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export abstract class NameAbbreviator extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NameAbbreviator>;
							public constructor();
							public static getDefaultAbbreviator(): org.apache.logging.log4j.core.pattern.NameAbbreviator;
							public static getAbbreviator(pattern: string): org.apache.logging.log4j.core.pattern.NameAbbreviator;
							public abbreviate(string0: string, stringBuilder1: java.lang.StringBuilder): void;
						}
						export module NameAbbreviator {
							export class MaxElementAbbreviator extends org.apache.logging.log4j.core.pattern.NameAbbreviator {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NameAbbreviator.MaxElementAbbreviator>;
								public constructor(count: number, strategy: org.apache.logging.log4j.core.pattern.NameAbbreviator.MaxElementAbbreviator.Strategy);
								public abbreviate(original: string, destination: java.lang.StringBuilder): void;
								public constructor();
								public abbreviate(string0: string, stringBuilder1: java.lang.StringBuilder): void;
							}
							export module MaxElementAbbreviator {
								export abstract class Strategy {
									public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NameAbbreviator.MaxElementAbbreviator.Strategy>;
									public static DROP: org.apache.logging.log4j.core.pattern.NameAbbreviator.MaxElementAbbreviator.Strategy;
									public static RETAIN: org.apache.logging.log4j.core.pattern.NameAbbreviator.MaxElementAbbreviator.Strategy;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public static valueOf(name: string): org.apache.logging.log4j.core.pattern.NameAbbreviator.MaxElementAbbreviator.Strategy;
									public static values(): native.Array<org.apache.logging.log4j.core.pattern.NameAbbreviator.MaxElementAbbreviator.Strategy>;
								}
							}
							export class NOPAbbreviator extends org.apache.logging.log4j.core.pattern.NameAbbreviator {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NameAbbreviator.NOPAbbreviator>;
								public abbreviate(original: string, destination: java.lang.StringBuilder): void;
								public constructor();
								public abbreviate(string0: string, stringBuilder1: java.lang.StringBuilder): void;
							}
							export class PatternAbbreviator extends org.apache.logging.log4j.core.pattern.NameAbbreviator {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NameAbbreviator.PatternAbbreviator>;
								public abbreviate(original: string, destination: java.lang.StringBuilder): void;
								public constructor();
								public abbreviate(string0: string, stringBuilder1: java.lang.StringBuilder): void;
								public constructor(fragments: java.util.List<org.apache.logging.log4j.core.pattern.NameAbbreviator.PatternAbbreviatorFragment>);
							}
							export class PatternAbbreviatorFragment extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NameAbbreviator.PatternAbbreviatorFragment>;
								public constructor(charCount: number, ellipsis: string);
								public abbreviate(buf: java.lang.StringBuilder, startPos: number): number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export abstract class NamePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NamePatternConverter>;
							public getStyleClass(e: any): string;
							public constructor(name: string, style: string, options: native.Array<string>);
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public constructor(name: string, style: string);
							public abbreviate(original: string, destination: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class NanoTimePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NanoTimePatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.NanoTimePatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, output: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class NdcPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NdcPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.NdcPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class NotANumber extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.NotANumber>;
							public static NAN: org.apache.logging.log4j.core.pattern.NotANumber;
							public static VALUE: string;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class PatternConverter extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.PatternConverter>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.pattern.PatternConverter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								format(object0: any, stringBuilder1: java.lang.StringBuilder): void;
								getName(): string;
								getStyleClass(object0: any): string;
							});
							public constructor();
							public static CATEGORY: string;
							public getName(): string;
							public getStyleClass(object0: any): string;
							public format(object0: any, stringBuilder1: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class PatternFormatter extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public format(event: org.apache.logging.log4j.core.LogEvent, buf: java.lang.StringBuilder): void;
							public getFormattingInfo(): org.apache.logging.log4j.core.pattern.FormattingInfo;
							public getConverter(): org.apache.logging.log4j.core.pattern.LogEventPatternConverter;
							public handlesThrowable(): boolean;
							public constructor(converter: org.apache.logging.log4j.core.pattern.LogEventPatternConverter, field: org.apache.logging.log4j.core.pattern.FormattingInfo);
							public toString(): string;
							public requiresLocation(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class PatternParser extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.PatternParser>;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, converterKey: string, expected: java.lang.Class<any>);
							public parse(pattern: string, alwaysWriteExceptions: boolean, noConsoleNoAnsi: boolean): java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public parse(pattern: string, alwaysWriteExceptions: boolean, disableAnsi: boolean, noConsoleNoAnsi: boolean): java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public parse(pattern: string, patternConverters: java.util.List<org.apache.logging.log4j.core.pattern.PatternConverter>, formattingInfos: java.util.List<org.apache.logging.log4j.core.pattern.FormattingInfo>, noConsoleNoAnsi: boolean, convertBackslashes: boolean): void;
							public parse(pattern: string): java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public constructor(config: org.apache.logging.log4j.core.config.Configuration, converterKey: string, expectedClass: java.lang.Class<any>, filterClass: java.lang.Class<any>);
							public parse(pattern: string, patternConverters: java.util.List<org.apache.logging.log4j.core.pattern.PatternConverter>, formattingInfos: java.util.List<org.apache.logging.log4j.core.pattern.FormattingInfo>, disableAnsi: boolean, noConsoleNoAnsi: boolean, convertBackslashes: boolean): void;
							public constructor(converterKey: string);
						}
						export module PatternParser {
							export class ParserState {
								public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.PatternParser.ParserState>;
								public static LITERAL_STATE: org.apache.logging.log4j.core.pattern.PatternParser.ParserState;
								public static CONVERTER_STATE: org.apache.logging.log4j.core.pattern.PatternParser.ParserState;
								public static DOT_STATE: org.apache.logging.log4j.core.pattern.PatternParser.ParserState;
								public static MIN_STATE: org.apache.logging.log4j.core.pattern.PatternParser.ParserState;
								public static MAX_STATE: org.apache.logging.log4j.core.pattern.PatternParser.ParserState;
								public static values(): native.Array<org.apache.logging.log4j.core.pattern.PatternParser.ParserState>;
								public static valueOf(name: string): org.apache.logging.log4j.core.pattern.PatternParser.ParserState;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class PlainTextRenderer extends java.lang.Object implements org.apache.logging.log4j.core.pattern.TextRenderer {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.PlainTextRenderer>;
							public constructor();
							public render(input: java.lang.StringBuilder, output: java.lang.StringBuilder): void;
							public static getInstance(): org.apache.logging.log4j.core.pattern.PlainTextRenderer;
							public render(input: string, output: java.lang.StringBuilder, styleName: string): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ProcessIdPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ProcessIdPatternConverter>;
							public getStyleClass(e: any): string;
							public getProcessId(): string;
							public static main(strings0: native.Array<string>): void;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.ProcessIdPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class RegexReplacement extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.RegexReplacement>;
							public format(msg: string): string;
							public static createRegexReplacement(regex: java.util.regex.Pattern, replacement: string): org.apache.logging.log4j.core.pattern.RegexReplacement;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class RegexReplacementConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.RegexReplacementConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.RegexReplacementConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class RelativeTimePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.RelativeTimePatternConverter>;
							public constructor();
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public constructor(name: string, style: string);
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.RelativeTimePatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class RootThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.ThrowablePatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.ThrowablePatternConverter;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, buffer: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class SequenceNumberPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.SequenceNumberPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.SequenceNumberPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class StyleConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter implements org.apache.logging.log4j.core.pattern.AnsiConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.StyleConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public handlesThrowable(): boolean;
							public toString(): string;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.StyleConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class TextRenderer extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.TextRenderer>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.pattern.TextRenderer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								render(string0: string, stringBuilder1: java.lang.StringBuilder, string2: string): void;
								render(stringBuilder0: java.lang.StringBuilder, stringBuilder1: java.lang.StringBuilder): void;
							});
							public constructor();
							public render(string0: string, stringBuilder1: java.lang.StringBuilder, string2: string): void;
							public render(stringBuilder0: java.lang.StringBuilder, stringBuilder1: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ThreadIdPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ThreadIdPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.ThreadIdPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ThreadNamePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ThreadNamePatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.ThreadNamePatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ThreadPriorityPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ThreadPriorityPatternConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.ThreadPriorityPatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class ThrowablePatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.ThrowablePatternConverter>;
							public formatters: java.util.List<org.apache.logging.log4j.core.pattern.PatternFormatter>;
							public options: org.apache.logging.log4j.core.impl.ThrowableFormatOptions;
							public getStyleClass(e: any): string;
							public getOptions(): org.apache.logging.log4j.core.impl.ThrowableFormatOptions;
							public constructor(name: string, style: string, options: native.Array<string>, config: org.apache.logging.log4j.core.config.Configuration);
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.ThrowablePatternConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public handlesThrowable(): boolean;
							public getSuffix(event: org.apache.logging.log4j.core.LogEvent): string;
							public constructor(name: string, style: string);
							public format(event: org.apache.logging.log4j.core.LogEvent, buffer: java.lang.StringBuilder): void;
							/** @deprecated */
							public constructor(name: string, style: string, options: native.Array<string>);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class UuidPatternConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.UuidPatternConverter>;
							public getStyleClass(e: any): string;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
							public static newInstance(options: native.Array<string>): org.apache.logging.log4j.core.pattern.UuidPatternConverter;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module pattern {
						export class VariablesNotEmptyReplacementConverter extends org.apache.logging.log4j.core.pattern.LogEventPatternConverter {
							public static class: java.lang.Class<org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementConverter>;
							public getStyleClass(e: any): string;
							public static newInstance(config: org.apache.logging.log4j.core.config.Configuration, options: native.Array<string>): org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementConverter;
							public format(logEvent0: org.apache.logging.log4j.core.LogEvent, stringBuilder1: java.lang.StringBuilder): void;
							public getName(): string;
							public format(obj: any, output: java.lang.StringBuilder): void;
							public format(event: org.apache.logging.log4j.core.LogEvent, toAppendTo: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module script {
						export abstract class AbstractScript extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.script.AbstractScript>;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public static DEFAULT_LANGUAGE: string;
							public getScriptText(): string;
							public getLanguage(): string;
							public constructor(name: string, language: string, scriptText: string);
							public getName(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module script {
						export class Script extends org.apache.logging.log4j.core.script.AbstractScript {
							public static class: java.lang.Class<org.apache.logging.log4j.core.script.Script>;
							public constructor(name: string, language: string, scriptText: string);
							public static createScript(name: string, language: string, scriptText: string): org.apache.logging.log4j.core.script.Script;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module script {
						export class ScriptFile extends org.apache.logging.log4j.core.script.AbstractScript {
							public static class: java.lang.Class<org.apache.logging.log4j.core.script.ScriptFile>;
							public getPath(): java.nio.file.Path;
							public constructor(name: string, language: string, scriptText: string);
							public constructor(name: string, filePath: java.nio.file.Path, language: string, isWatched: boolean, scriptText: string);
							public static createScript(name: string, language: string, filePathOrUri: string, isWatched: java.lang.Boolean, charset: java.nio.charset.Charset): org.apache.logging.log4j.core.script.ScriptFile;
							public isWatched(): boolean;
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module script {
						export class ScriptManager extends java.lang.Object implements org.apache.logging.log4j.core.util.FileWatcher, java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.script.ScriptManager>;
							public fileModified(file: java.io.File): void;
							public execute(name: string, bindings: javax.script.Bindings): any;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, watchManager: org.apache.logging.log4j.core.util.WatchManager);
							public getScript(name: string): org.apache.logging.log4j.core.script.AbstractScript;
							public addScript(script: org.apache.logging.log4j.core.script.AbstractScript): void;
							public createBindings(script: org.apache.logging.log4j.core.script.AbstractScript): javax.script.Bindings;
						}
						export module ScriptManager {
							export abstract class AbstractScriptRunner extends java.lang.Object implements org.apache.logging.log4j.core.script.ScriptManager.ScriptRunner {
								public static class: java.lang.Class<org.apache.logging.log4j.core.script.ScriptManager.AbstractScriptRunner>;
								public getScript(): org.apache.logging.log4j.core.script.AbstractScript;
								public getScriptEngine(): javax.script.ScriptEngine;
								public execute(bindings0: javax.script.Bindings): any;
								public createBindings(): javax.script.Bindings;
							}
							export class MainScriptRunner extends org.apache.logging.log4j.core.script.ScriptManager.AbstractScriptRunner {
								public static class: java.lang.Class<org.apache.logging.log4j.core.script.ScriptManager.MainScriptRunner>;
								public getScript(): org.apache.logging.log4j.core.script.AbstractScript;
								public constructor(param0: org.apache.logging.log4j.core.script.ScriptManager, scriptEngine: javax.script.ScriptEngine, script: org.apache.logging.log4j.core.script.AbstractScript);
								public getScriptEngine(): javax.script.ScriptEngine;
								public createBindings(): javax.script.Bindings;
								public execute(bindings: javax.script.Bindings): any;
							}
							export class ScriptRunner extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.script.ScriptManager.ScriptRunner>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.script.ScriptManager$ScriptRunner interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									createBindings(): javax.script.Bindings;
									execute(bindings0: javax.script.Bindings): any;
									getScript(): org.apache.logging.log4j.core.script.AbstractScript;
									getScriptEngine(): javax.script.ScriptEngine;
								});
								public constructor();
								public getScript(): org.apache.logging.log4j.core.script.AbstractScript;
								public getScriptEngine(): javax.script.ScriptEngine;
								public execute(bindings0: javax.script.Bindings): any;
								public createBindings(): javax.script.Bindings;
							}
							export class ThreadLocalScriptRunner extends org.apache.logging.log4j.core.script.ScriptManager.AbstractScriptRunner {
								public static class: java.lang.Class<org.apache.logging.log4j.core.script.ScriptManager.ThreadLocalScriptRunner>;
								public getScript(): org.apache.logging.log4j.core.script.AbstractScript;
								public constructor(param0: org.apache.logging.log4j.core.script.ScriptManager, script: org.apache.logging.log4j.core.script.AbstractScript);
								public getScriptEngine(): javax.script.ScriptEngine;
								public createBindings(): javax.script.Bindings;
								public execute(bindings: javax.script.Bindings): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module script {
						export class ScriptRef extends org.apache.logging.log4j.core.script.AbstractScript {
							public static class: java.lang.Class<org.apache.logging.log4j.core.script.ScriptRef>;
							public getScriptText(): string;
							public getLanguage(): string;
							public constructor(name: string, language: string, scriptText: string);
							public static createReference(name: string, configuration: org.apache.logging.log4j.core.config.Configuration): org.apache.logging.log4j.core.script.ScriptRef;
							public constructor(name: string, scriptManager: org.apache.logging.log4j.core.script.ScriptManager);
							public toString(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module selector {
						export class BasicContextSelector extends java.lang.Object implements org.apache.logging.log4j.core.selector.ContextSelector {
							public static class: java.lang.Class<org.apache.logging.log4j.core.selector.BasicContextSelector>;
							public constructor();
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): org.apache.logging.log4j.core.LoggerContext;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public locateContext(name: string, configLocation: string): org.apache.logging.log4j.core.LoggerContext;
							public getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public removeContext(context: org.apache.logging.log4j.core.LoggerContext): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module selector {
						export class ClassLoaderContextSelector extends java.lang.Object implements org.apache.logging.log4j.core.selector.ContextSelector, org.apache.logging.log4j.spi.LoggerContextShutdownAware {
							public static class: java.lang.Class<org.apache.logging.log4j.core.selector.ClassLoaderContextSelector>;
							public static LOGGER: org.apache.logging.log4j.status.StatusLogger;
							public static CONTEXT_MAP: java.util.concurrent.ConcurrentMap<string,java.util.concurrent.atomic.AtomicReference<java.lang.ref.WeakReference<org.apache.logging.log4j.core.LoggerContext>>>;
							public constructor();
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): org.apache.logging.log4j.core.LoggerContext;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public toContextMapKey(loader: java.lang.ClassLoader): string;
							public getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
							public defaultContextName(): string;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public removeContext(context: org.apache.logging.log4j.core.LoggerContext): void;
							public contextShutdown(loggerContext: org.apache.logging.log4j.spi.LoggerContext): void;
							public createContext(name: string, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public getDefault(): org.apache.logging.log4j.core.LoggerContext;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module selector {
						export class ContextSelector extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.selector.ContextSelector>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.selector.ContextSelector interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
								hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
								getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean): org.apache.logging.log4j.core.LoggerContext;
								getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean, uRI3: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
								getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
								removeContext(loggerContext0: org.apache.logging.log4j.core.LoggerContext): void;
							});
							public constructor();
							public static DEFAULT_STOP_TIMEOUT: number;
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
							public removeContext(loggerContext0: org.apache.logging.log4j.core.LoggerContext): void;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean, uRI3: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean): org.apache.logging.log4j.core.LoggerContext;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module selector {
						export class CoreContextSelectors extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.selector.CoreContextSelectors>;
							public static CLASSES: native.Array<java.lang.Class<any>>;
							public constructor();
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module selector {
						export class JndiContextSelector extends java.lang.Object implements org.apache.logging.log4j.core.selector.NamedContextSelector {
							public static class: java.lang.Class<org.apache.logging.log4j.core.selector.JndiContextSelector>;
							public constructor();
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): org.apache.logging.log4j.core.LoggerContext;
							public getContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public locateContext(name: string, externalContext: any, configLocation: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public removeContext(context: org.apache.logging.log4j.core.LoggerContext): void;
							public removeContext(name: string): org.apache.logging.log4j.core.LoggerContext;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module selector {
						export class NamedContextSelector extends java.lang.Object implements org.apache.logging.log4j.core.selector.ContextSelector {
							public static class: java.lang.Class<org.apache.logging.log4j.core.selector.NamedContextSelector>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.selector.NamedContextSelector interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								locateContext(string0: string, object1: any, uRI2: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
								removeContext(string0: string): org.apache.logging.log4j.core.LoggerContext;
								shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
								hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
								getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean): org.apache.logging.log4j.core.LoggerContext;
								getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean, uRI3: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
								getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
								removeContext(loggerContext0: org.apache.logging.log4j.core.LoggerContext): void;
							});
							public constructor();
							public static DEFAULT_STOP_TIMEOUT: number;
							public hasContext(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean): boolean;
							public locateContext(string0: string, object1: any, uRI2: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public getLoggerContexts(): java.util.List<org.apache.logging.log4j.core.LoggerContext>;
							public removeContext(loggerContext0: org.apache.logging.log4j.core.LoggerContext): void;
							public shutdown(fqcn: string, loader: java.lang.ClassLoader, currentContext: boolean, allContexts: boolean): void;
							public removeContext(string0: string): org.apache.logging.log4j.core.LoggerContext;
							public getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean, uRI3: java.net.URI): org.apache.logging.log4j.core.LoggerContext;
							public getContext(string0: string, classLoader1: java.lang.ClassLoader, boolean2: boolean): org.apache.logging.log4j.core.LoggerContext;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module time {
						export class Instant extends java.lang.Object implements org.apache.logging.log4j.util.StringBuilderFormattable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.time.Instant>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.time.Instant interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getEpochSecond(): number;
								getNanoOfSecond(): number;
								getEpochMillisecond(): number;
								getNanoOfMillisecond(): number;
								formatTo(stringBuilder0: java.lang.StringBuilder): void;
							});
							public constructor();
							public getEpochMillisecond(): number;
							public getNanoOfMillisecond(): number;
							public formatTo(stringBuilder0: java.lang.StringBuilder): void;
							public getNanoOfSecond(): number;
							public getEpochSecond(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module time {
						export class MutableInstant extends java.lang.Object implements org.apache.logging.log4j.core.time.Instant, java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.time.MutableInstant>;
							public constructor();
							public initFrom(other: org.apache.logging.log4j.core.time.Instant): void;
							public hashCode(): number;
							public static instantToMillisAndNanos(epochSecond: number, nano: number, result: native.Array<number>): void;
							public equals(obj: any): boolean;
							public getNanoOfSecond(): number;
							public toString(): string;
							public getEpochSecond(): number;
							public initFrom(clock: org.apache.logging.log4j.core.util.Clock): void;
							public equals(object: any): boolean;
							public getEpochMillisecond(): number;
							public getNanoOfMillisecond(): number;
							public formatTo(buffer: java.lang.StringBuilder): void;
							public initFromEpochMilli(epochMilli: number, nanoOfMillisecond: number): void;
							public initFromEpochSecond(epochSecond: number, nano: number): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module time {
						export class PreciseClock extends java.lang.Object implements org.apache.logging.log4j.core.util.Clock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.time.PreciseClock>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.time.PreciseClock interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								init(mutableInstant0: org.apache.logging.log4j.core.time.MutableInstant): void;
								currentTimeMillis(): number;
							});
							public constructor();
							public currentTimeMillis(): number;
							public init(mutableInstant0: org.apache.logging.log4j.core.time.MutableInstant): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module time {
						export module internal {
							export class FixedPreciseClock extends java.lang.Object implements org.apache.logging.log4j.core.time.PreciseClock {
								public static class: java.lang.Class<org.apache.logging.log4j.core.time.internal.FixedPreciseClock>;
								public constructor(currentTimeMillis: number, nanosOfMillisecond: number);
								public currentTimeMillis(): number;
								public constructor();
								public constructor(currentTimeMillis: number);
								public init(instant: org.apache.logging.log4j.core.time.MutableInstant): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module tools {
						export class BasicCommandLineArguments extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.tools.BasicCommandLineArguments>;
							public constructor();
							public setHelp(help: boolean): void;
							public isHelp(): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module tools {
						export class CustomLoggerGenerator extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.tools.CustomLoggerGenerator>;
							public constructor();
							public static main(strings0: native.Array<string>): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module tools {
						export class ExtendedLoggerGenerator extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.tools.ExtendedLoggerGenerator>;
							public constructor();
							public static main(strings0: native.Array<string>): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module tools {
						export class Generate extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.tools.Generate>;
						}
						export module Generate {
							export class CustomLogger extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.tools.Generate.CustomLogger>;
								public static main(strings0: native.Array<string>): void;
							}
							export class ExtendedLogger extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.tools.Generate.ExtendedLogger>;
								public static main(strings0: native.Array<string>): void;
							}
							export class LevelInfo extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.tools.Generate.LevelInfo>;
								public static parse(values: java.util.List<string>, generator: java.lang.Class<any>): java.util.List<org.apache.logging.log4j.core.tools.Generate.LevelInfo>;
							}
							export abstract class Type {
								public static class: java.lang.Class<org.apache.logging.log4j.core.tools.Generate.Type>;
								public static CUSTOM: org.apache.logging.log4j.core.tools.Generate.Type;
								public static EXTEND: org.apache.logging.log4j.core.tools.Generate.Type;
								public static valueOf(name: string): org.apache.logging.log4j.core.tools.Generate.Type;
								public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
								public static values(): native.Array<org.apache.logging.log4j.core.tools.Generate.Type>;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module tools {
						export module picocli {
							export class CommandLine extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine>;
								public static VERSION: string;
								public parseWithHandlers(handler: org.apache.logging.log4j.core.tools.picocli.CommandLine.IParseResultHandler, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, exceptionHandler: org.apache.logging.log4j.core.tools.picocli.CommandLine.IExceptionHandler, strings4: native.Array<string>): java.util.List<any>;
								public isVersionHelpRequested(): boolean;
								public setCommandName(commandName: string): org.apache.logging.log4j.core.tools.picocli.CommandLine;
								public usage(out: java.io.PrintStream, colorScheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): void;
								public setOverwrittenOptionsAllowed(newValue: boolean): org.apache.logging.log4j.core.tools.picocli.CommandLine;
								public printVersionHelp(out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, params: native.Array<any>): void;
								public getCommandName(): string;
								public setUnmatchedArgumentsAllowed(newValue: boolean): org.apache.logging.log4j.core.tools.picocli.CommandLine;
								public getParent(): org.apache.logging.log4j.core.tools.picocli.CommandLine;
								public parseWithHandler(handler: org.apache.logging.log4j.core.tools.picocli.CommandLine.IParseResultHandler, out: java.io.PrintStream, strings2: native.Array<string>): java.util.List<any>;
								public getSeparator(): string;
								public getSubcommands(): java.util.Map<string,org.apache.logging.log4j.core.tools.picocli.CommandLine>;
								public parse(strings0: native.Array<string>): java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine>;
								public isOverwrittenOptionsAllowed(): boolean;
								public static call(callable: java.util.concurrent.Callable<any>, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, strings3: native.Array<string>): any;
								public addSubcommand(name: string, command: any): org.apache.logging.log4j.core.tools.picocli.CommandLine;
								public static run(runnable: java.lang.Runnable, out: java.io.PrintStream, strings2: native.Array<string>): void;
								public getUnmatchedArguments(): java.util.List<string>;
								public constructor(command: any);
								public printVersionHelp(out: java.io.PrintStream): void;
								public registerConverter(cls: java.lang.Class<any>, converter: org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<any>): org.apache.logging.log4j.core.tools.picocli.CommandLine;
								public getCommand(): any;
								public static usage(command: any, out: java.io.PrintStream, colorScheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): void;
								public isUsageHelpRequested(): boolean;
								public usage(out: java.io.PrintStream): void;
								public static printHelpIfRequested(parsedCommands: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine>, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): boolean;
								public static call(callable: java.util.concurrent.Callable<any>, out: java.io.PrintStream, strings2: native.Array<string>): any;
								public printVersionHelp(out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): void;
								public static usage(command: any, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): void;
								public static populateCommand(command: any, strings1: native.Array<string>): any;
								public usage(out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): void;
								public static usage(command: any, out: java.io.PrintStream): void;
								public static run(runnable: java.lang.Runnable, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, strings3: native.Array<string>): void;
								public isUnmatchedArgumentsAllowed(): boolean;
								public setSeparator(separator: string): org.apache.logging.log4j.core.tools.picocli.CommandLine;
							}
							export module CommandLine {
								export class Assert extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Assert>;
								}
								export class BuiltIn extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn>;
								}
								export module BuiltIn {
									export class BigDecimalConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.math.BigDecimal> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.BigDecimalConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.math.BigDecimal;
									}
									export class BigIntegerConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.math.BigInteger> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.BigIntegerConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.math.BigInteger;
									}
									export class BooleanConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Boolean> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.BooleanConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.Boolean;
									}
									export class ByteConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Byte> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.ByteConverter>;
										public convert(value: string): java.lang.Byte;
										public convert(string0: string): any;
									}
									export class CharSequenceConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<string> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.CharSequenceConverter>;
										public convert(string0: string): any;
										public convert(value: string): string;
									}
									export class CharacterConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Character> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.CharacterConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.Character;
									}
									export class CharsetConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.nio.charset.Charset> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.CharsetConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.nio.charset.Charset;
									}
									export class DoubleConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Double> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.DoubleConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.Double;
									}
									export class FileConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.io.File> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.FileConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.io.File;
									}
									export class FloatConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Float> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.FloatConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.Float;
									}
									export class ISO8601DateConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.util.Date> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.ISO8601DateConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.util.Date;
									}
									export class ISO8601TimeConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.sql.Time> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.ISO8601TimeConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.sql.Time;
									}
									export class InetAddressConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.net.InetAddress> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.InetAddressConverter>;
										public convert(s: string): java.net.InetAddress;
										public convert(string0: string): any;
									}
									export class IntegerConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Integer> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.IntegerConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.Integer;
									}
									export class LongConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Long> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.LongConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.Long;
									}
									export class PathConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.nio.file.Path> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.PathConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.nio.file.Path;
									}
									export class PatternConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.util.regex.Pattern> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.PatternConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.util.regex.Pattern;
									}
									export class ShortConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.Short> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.ShortConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.Short;
									}
									export class StringBuilderConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.lang.StringBuilder> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.StringBuilderConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.lang.StringBuilder;
									}
									export class StringConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<string> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.StringConverter>;
										public convert(string0: string): any;
										public convert(value: string): string;
									}
									export class URIConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.net.URI> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.URIConverter>;
										public convert(value: string): java.net.URI;
										public convert(string0: string): any;
									}
									export class URLConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.net.URL> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.URLConverter>;
										public convert(string0: string): any;
										public convert(value: string): java.net.URL;
									}
									export class UUIDConverter extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<java.util.UUID> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.BuiltIn.UUIDConverter>;
										public convert(string0: string): any;
										public convert(s: string): java.util.UUID;
									}
								}
								export class Command extends java.lang.Object implements java.lang.annotation.Annotation {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Command>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$Command interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										name(): string;
										subcommands(): native.Array<java.lang.Class<any>>;
										separator(): string;
										version(): native.Array<string>;
										headerHeading(): string;
										header(): native.Array<string>;
										synopsisHeading(): string;
										abbreviateSynopsis(): boolean;
										customSynopsis(): native.Array<string>;
										descriptionHeading(): string;
										description(): native.Array<string>;
										parameterListHeading(): string;
										optionListHeading(): string;
										sortOptions(): boolean;
										requiredOptionMarker(): string;
										showDefaultValues(): boolean;
										commandListHeading(): string;
										footerHeading(): string;
										footer(): native.Array<string>;
										equals(object0: any): boolean;
										hashCode(): number;
										toString(): string;
										annotationType(): java.lang.Class<any>;
									});
									public constructor();
									public showDefaultValues(): boolean;
									public description(): native.Array<string>;
									public hashCode(): number;
									public annotationType(): java.lang.Class<any>;
									public footerHeading(): string;
									public toString(): string;
									public headerHeading(): string;
									public optionListHeading(): string;
									public sortOptions(): boolean;
									public abbreviateSynopsis(): boolean;
									public header(): native.Array<string>;
									public requiredOptionMarker(): string;
									public version(): native.Array<string>;
									public separator(): string;
									public synopsisHeading(): string;
									public customSynopsis(): native.Array<string>;
									public subcommands(): native.Array<java.lang.Class<any>>;
									public equals(obj: any): boolean;
									public descriptionHeading(): string;
									public parameterListHeading(): string;
									public commandListHeading(): string;
									public footer(): native.Array<string>;
									public name(): string;
								}
								export class DefaultExceptionHandler extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.IExceptionHandler {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.DefaultExceptionHandler>;
									public constructor();
									public handleException(ex: org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, strings3: native.Array<string>): java.util.List<any>;
								}
								export class DuplicateOptionAnnotationsException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.InitializationException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.DuplicateOptionAnnotationsException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class ExecutionException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.PicocliException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.ExecutionException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string, ex: java.lang.Exception);
									public constructor(msg: string);
									public getCommandLine(): org.apache.logging.log4j.core.tools.picocli.CommandLine;
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class Help extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help>;
									public static DEFAULT_COMMAND_NAME: string;
									public static DEFAULT_SEPARATOR: string;
									public optionFields: java.util.List<java.lang.reflect.Field>;
									public positionalParametersFields: java.util.List<java.lang.reflect.Field>;
									public separator: string;
									public commandName: string;
									public parameterLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer;
									public abbreviateSynopsis: java.lang.Boolean;
									public sortOptions: java.lang.Boolean;
									public showDefaultValues: java.lang.Boolean;
									public requiredOptionMarker: java.lang.Character;
									public synopsisHeading(params: native.Array<any>): string;
									public optionList(): string;
									public static join(ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, values: native.Array<string>, sb: java.lang.StringBuilder, params: native.Array<any>): java.lang.StringBuilder;
									public commandListHeading(params: native.Array<any>): string;
									public commandList(): string;
									public addSubcommand(commandName: string, command: any): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help;
									public static shortestFirst(): java.util.Comparator<string>;
									public parameterList(layout: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Layout, paramLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer): string;
									public ansi(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi;
									public optionList(layout: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Layout, optionSort: java.util.Comparator<java.lang.reflect.Field>, valueLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer): string;
									public header(params: native.Array<any>): string;
									public optionListHeading(params: native.Array<any>): string;
									public addAllSubcommands(commands: java.util.Map<string,org.apache.logging.log4j.core.tools.picocli.CommandLine>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help;
									public synopsis(synopsisHeadingLength: number): string;
									public static createMinimalParamLabelRenderer(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer;
									public footer(params: native.Array<any>): string;
									public abbreviatedSynopsis(): string;
									public headerHeading(params: native.Array<any>): string;
									public constructor(command: any, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi);
									public constructor(command: any, colorScheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme);
									public customSynopsis(params: native.Array<any>): string;
									public static createShortOptionArityAndNameComparator(): java.util.Comparator<java.lang.reflect.Field>;
									public createDefaultLayout(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Layout;
									public synopsisHeadingLength(): number;
									public static defaultColorScheme(ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme;
									public constructor(command: any);
									public descriptionHeading(params: native.Array<any>): string;
									public detailedSynopsis(synopsisHeadingLength: number, optionSort: java.util.Comparator<java.lang.reflect.Field>, clusterBooleanOptions: boolean): string;
									public static createMinimalOptionRenderer(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IOptionRenderer;
									public createDefaultOptionRenderer(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IOptionRenderer;
									public parameterList(): string;
									public footerHeading(params: native.Array<any>): string;
									/** @deprecated */
									public detailedSynopsis(optionSort: java.util.Comparator<java.lang.reflect.Field>, clusterBooleanOptions: boolean): string;
									public description(params: native.Array<any>): string;
									public createDefaultParameterRenderer(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParameterRenderer;
									public createDefaultParamLabelRenderer(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer;
									public static createMinimalParameterRenderer(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParameterRenderer;
									public static createShortOptionNameComparator(): java.util.Comparator<java.lang.reflect.Field>;
									/** @deprecated */
									public synopsis(): string;
									public parameterListHeading(params: native.Array<any>): string;
								}
								export module Help {
									export class Ansi {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi>;
										public static AUTO: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi;
										public static ON: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi;
										public static OFF: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi;
										public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
										public static values(): native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi>;
										public enabled(): boolean;
										public static valueOf(name: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi;
										public apply(plainText: string, styles: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
									}
									export module Ansi {
										export class IStyle extends java.lang.Object {
											public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>;
											/**
											 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi$IStyle interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
											 */
											public constructor(implementation: {
												on(): string;
												off(): string;
											});
											public constructor();
											public static CSI: string;
											public on(): string;
											public off(): string;
										}
										export class Palette256Color extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle {
											public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Palette256Color>;
											public on(): string;
											public off(): string;
										}
										export class Style extends org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle {
											public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style>;
											public static reset: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bold: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static faint: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static italic: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static underline: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static blink: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static reverse: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_black: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_red: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_green: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_yellow: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_blue: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_magenta: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_cyan: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg_white: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_black: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_red: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_green: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_yellow: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_blue: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_magenta: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_cyan: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static bg_white: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static valueOf(name: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style;
											public static fg(str: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle;
											public static off(styles: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): string;
											public static on(styles: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): string;
											public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
											public on(): string;
											public static bg(str: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle;
											public off(): string;
											public static values(): native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Style>;
											public static parse(commaSeparatedCodes: string): native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>;
										}
										export class StyledSection extends java.lang.Object {
											public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.StyledSection>;
										}
										export class Text extends java.lang.Object implements java.lang.Cloneable {
											public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>;
											public hashCode(): number;
											public append(other: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
											public equals(obj: any): boolean;
											public append(string: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
											public substring(start: number): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
											public plainString(): string;
											public constructor(this0: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, maxLength: number);
											public substring(start: number, end: number): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
											public toString(): string;
											public clone(): any;
											public splitLines(): native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>;
											public getStyledChars(from: number, length: number, destination: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text, offset: number): void;
											public constructor(this0: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, input: string);
										}
									}
									export class ColorScheme extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme>;
										public commandStyles: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>;
										public optionStyles: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>;
										public parameterStyles: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>;
										public optionParamStyles: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>;
										public constructor(ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi);
										public optionParamText(optionParam: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
										public options(styles: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme;
										public applySystemProperties(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme;
										public ansi(): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi;
										public parameterText(parameter: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
										public optionParams(styles: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme;
										public constructor();
										public parameters(styles: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme;
										public optionText(option: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
										public commands(styles: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme;
										public commandText(command: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
									}
									export class Column extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column>;
										public width: number;
										public indent: number;
										public overflow: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow;
										public constructor(width: number, indent: number, overflow: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow);
									}
									export module Column {
										export class Overflow {
											public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow>;
											public static TRUNCATE: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow;
											public static SPAN: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow;
											public static WRAP: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow;
											public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
											public static values(): native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow>;
											public static valueOf(name: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column.Overflow;
										}
									}
									export class DefaultOptionRenderer extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IOptionRenderer {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.DefaultOptionRenderer>;
										public requiredMarker: string;
										public command: any;
										public render(option: org.apache.logging.log4j.core.tools.picocli.CommandLine.Option, field: java.lang.reflect.Field, paramLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, scheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
									}
									export class DefaultParamLabelRenderer extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.DefaultParamLabelRenderer>;
										public separator(): string;
										public renderParameterLabel(field: java.lang.reflect.Field, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, styles: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
										public constructor(separator: string);
									}
									export class DefaultParameterRenderer extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParameterRenderer {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.DefaultParameterRenderer>;
										public requiredMarker: string;
										public render(params: org.apache.logging.log4j.core.tools.picocli.CommandLine.Parameters, field: java.lang.reflect.Field, paramLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, scheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
									}
									export class IOptionRenderer extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IOptionRenderer>;
										/**
										 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$IOptionRenderer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
										 */
										public constructor(implementation: {
											render(option0: org.apache.logging.log4j.core.tools.picocli.CommandLine.Option, field1: java.lang.reflect.Field, iParamLabelRenderer2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, colorScheme3: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
										});
										public constructor();
										public render(option0: org.apache.logging.log4j.core.tools.picocli.CommandLine.Option, field1: java.lang.reflect.Field, iParamLabelRenderer2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, colorScheme3: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
									}
									export class IParamLabelRenderer extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer>;
										/**
										 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$IParamLabelRenderer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
										 */
										public constructor(implementation: {
											renderParameterLabel(field0: java.lang.reflect.Field, ansi1: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, list2: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
											separator(): string;
										});
										public constructor();
										public separator(): string;
										public renderParameterLabel(field0: java.lang.reflect.Field, ansi1: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, list2: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.IStyle>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
									}
									export class IParameterRenderer extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParameterRenderer>;
										/**
										 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$IParameterRenderer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
										 */
										public constructor(implementation: {
											render(parameters0: org.apache.logging.log4j.core.tools.picocli.CommandLine.Parameters, field1: java.lang.reflect.Field, iParamLabelRenderer2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, colorScheme3: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
										});
										public constructor();
										public render(parameters0: org.apache.logging.log4j.core.tools.picocli.CommandLine.Parameters, field1: java.lang.reflect.Field, iParamLabelRenderer2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, colorScheme3: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
									}
									export class Layout extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Layout>;
										public colorScheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme;
										public table: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.TextTable;
										public optionRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IOptionRenderer;
										public parameterRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParameterRenderer;
										public layout(field: java.lang.reflect.Field, cellValues: native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>): void;
										public constructor(colorScheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme);
										public constructor(colorScheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme, textTable: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.TextTable, optionRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IOptionRenderer, parameterRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParameterRenderer);
										public addOption(field: java.lang.reflect.Field, paramLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer): void;
										public addPositionalParameters(fields: java.util.List<java.lang.reflect.Field>, paramLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer): void;
										public toString(): string;
										public addPositionalParameter(field: java.lang.reflect.Field, paramLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer): void;
										public addOptions(fields: java.util.List<java.lang.reflect.Field>, paramLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer): void;
										public constructor(colorScheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme, textTable: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.TextTable);
									}
									export class MinimalOptionRenderer extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IOptionRenderer {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.MinimalOptionRenderer>;
										public render(option: org.apache.logging.log4j.core.tools.picocli.CommandLine.Option, field: java.lang.reflect.Field, parameterLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, scheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
									}
									export class MinimalParameterRenderer extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParameterRenderer {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.MinimalParameterRenderer>;
										public render(param: org.apache.logging.log4j.core.tools.picocli.CommandLine.Parameters, field: java.lang.reflect.Field, parameterLabelRenderer: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.IParamLabelRenderer, scheme: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ColorScheme): native.Array<native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>>;
									}
									export class ShortestFirst extends java.util.Comparator<string> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.ShortestFirst>;
										public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public equals(obj: any): boolean;
										public static reverseOrder(): java.util.Comparator<any>;
										public reversed(): java.util.Comparator<any>;
										public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public static sort(names: native.Array<string>): native.Array<string>;
										public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
										public compare(object0: any, object1: any): number;
										public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public compare(o1: string, o2: string): number;
										public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static naturalOrder(): java.util.Comparator<any>;
									}
									export class SortByOptionArityAndNameAlphabetically extends org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.SortByShortestOptionNameAlphabetically {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.SortByOptionArityAndNameAlphabetically>;
										public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public equals(obj: any): boolean;
										public static reverseOrder(): java.util.Comparator<any>;
										public reversed(): java.util.Comparator<any>;
										public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public compare(f1: java.lang.reflect.Field, f2: java.lang.reflect.Field): number;
										public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
										public compare(object0: any, object1: any): number;
										public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static naturalOrder(): java.util.Comparator<any>;
									}
									export class SortByShortestOptionNameAlphabetically extends java.util.Comparator<java.lang.reflect.Field> {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.SortByShortestOptionNameAlphabetically>;
										public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public equals(obj: any): boolean;
										public static reverseOrder(): java.util.Comparator<any>;
										public reversed(): java.util.Comparator<any>;
										public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public compare(f1: java.lang.reflect.Field, f2: java.lang.reflect.Field): number;
										public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
										public compare(object0: any, object1: any): number;
										public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
										public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
										public static naturalOrder(): java.util.Comparator<any>;
									}
									export class TextTable extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.TextTable>;
										public columns: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column>;
										public columnValues: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>;
										public indentWrappedLines: number;
										public constructor(ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, columnWidths: native.Array<number>);
										public constructor(ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi);
										public addRowValues(values: native.Array<string>): void;
										public addRowValues(values: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text>): void;
										public toString(text: java.lang.StringBuilder): java.lang.StringBuilder;
										public toString(): string;
										public constructor(ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, columns: native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Column>);
										public textAt(row: number, col: number): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
										/** @deprecated */
										public cellAt(row: number, col: number): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text;
										public addEmptyRow(): void;
										public putValue(row: number, col: number, value: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi.Text): org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.TextTable.Cell;
										public rowCount(): number;
									}
									export module TextTable {
										export class Cell extends java.lang.Object {
											public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.TextTable.Cell>;
											public column: number;
											public row: number;
											public constructor(column: number, row: number);
										}
									}
								}
								export class IExceptionHandler extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.IExceptionHandler>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$IExceptionHandler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										handleException(parameterException0: org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException, printStream1: java.io.PrintStream, ansi2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, strings3: native.Array<string>): java.util.List<any>;
									});
									public constructor();
									public handleException(parameterException0: org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException, printStream1: java.io.PrintStream, ansi2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi, strings3: native.Array<string>): java.util.List<any>;
								}
								export class IParseResultHandler extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.IParseResultHandler>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$IParseResultHandler interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										handleParseResult(list0: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine>, printStream1: java.io.PrintStream, ansi2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): java.util.List<any>;
									});
									public constructor();
									public handleParseResult(list0: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine>, printStream1: java.io.PrintStream, ansi2: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): java.util.List<any>;
								}
								export class ITypeConverter<K>  extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter<any>>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$ITypeConverter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										convert(string0: string): K;
									});
									public constructor();
									public convert(string0: string): K;
								}
								export class InitializationException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.PicocliException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.InitializationException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class Interpreter extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Interpreter>;
								}
								export class MaxValuesforFieldExceededException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.MaxValuesforFieldExceededException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string, ex: java.lang.Exception);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class MissingParameterException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.MissingParameterException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string, ex: java.lang.Exception);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class MissingTypeConverterException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.MissingTypeConverterException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string, ex: java.lang.Exception);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class Option extends java.lang.Object implements java.lang.annotation.Annotation {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Option>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$Option interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										names(): native.Array<string>;
										required(): boolean;
										help(): boolean;
										usageHelp(): boolean;
										versionHelp(): boolean;
										description(): native.Array<string>;
										arity(): string;
										paramLabel(): string;
										type(): native.Array<java.lang.Class<any>>;
										split(): string;
										hidden(): boolean;
										equals(object0: any): boolean;
										hashCode(): number;
										toString(): string;
										annotationType(): java.lang.Class<any>;
									});
									public constructor();
									public split(): string;
									public description(): native.Array<string>;
									public hashCode(): number;
									/** @deprecated */
									public help(): boolean;
									public annotationType(): java.lang.Class<any>;
									public names(): native.Array<string>;
									public toString(): string;
									public hidden(): boolean;
									public type(): native.Array<java.lang.Class<any>>;
									public paramLabel(): string;
									public required(): boolean;
									public arity(): string;
									public equals(obj: any): boolean;
									public versionHelp(): boolean;
									public usageHelp(): boolean;
								}
								export class OverwrittenOptionException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.OverwrittenOptionException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string, ex: java.lang.Exception);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class ParameterException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.PicocliException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string, ex: java.lang.Exception);
									public constructor(msg: string);
									public getCommandLine(): org.apache.logging.log4j.core.tools.picocli.CommandLine;
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class ParameterIndexGapException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.InitializationException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterIndexGapException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class Parameters extends java.lang.Object implements java.lang.annotation.Annotation {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Parameters>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.tools.picocli.CommandLine$Parameters interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										index(): string;
										description(): native.Array<string>;
										arity(): string;
										paramLabel(): string;
										type(): native.Array<java.lang.Class<any>>;
										split(): string;
										hidden(): boolean;
										equals(object0: any): boolean;
										hashCode(): number;
										toString(): string;
										annotationType(): java.lang.Class<any>;
									});
									public constructor();
									public paramLabel(): string;
									public split(): string;
									public description(): native.Array<string>;
									public hashCode(): number;
									public index(): string;
									public annotationType(): java.lang.Class<any>;
									public arity(): string;
									public equals(obj: any): boolean;
									public toString(): string;
									public hidden(): boolean;
									public type(): native.Array<java.lang.Class<any>>;
								}
								export class PicocliException extends java.lang.RuntimeException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.PicocliException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class PositionalParametersSorter extends java.util.Comparator<java.lang.reflect.Field> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.PositionalParametersSorter>;
									public static comparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public thenComparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public static comparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static naturalOrder(): java.util.Comparator<any>;
									public reversed(): java.util.Comparator<any>;
									public thenComparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public compare(o1: java.lang.reflect.Field, o2: java.lang.reflect.Field): number;
									public static comparing(keyExtractor: any /* any*/, keyComparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public static nullsFirst(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public thenComparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static nullsLast(comparator: java.util.Comparator<any>): java.util.Comparator<any>;
									public equals(obj: any): boolean;
									public thenComparing(other: java.util.Comparator<any>): java.util.Comparator<any>;
									public static reverseOrder(): java.util.Comparator<any>;
									public thenComparingLong(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public compare(object0: any, object1: any): number;
									public static comparing(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public static comparingInt(keyExtractor: any /* any*/): java.util.Comparator<any>;
									public thenComparingDouble(keyExtractor: any /* any*/): java.util.Comparator<any>;
								}
								export class Range extends java.lang.Comparable<org.apache.logging.log4j.core.tools.picocli.CommandLine.Range> {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Range>;
									public isVariable: boolean;
									public equals(object: any): boolean;
									public hashCode(): number;
									public max(newMax: number): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
									public static defaultArity(field: java.lang.reflect.Field): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
									public toString(): string;
									public contains(value: number): boolean;
									public static defaultArity(type: java.lang.Class<any>): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
									public constructor(min: number, max: number, variable: boolean, unspecified: boolean, originalValue: string);
									public equals(obj: any): boolean;
									public compareTo(other: org.apache.logging.log4j.core.tools.picocli.CommandLine.Range): number;
									public static parameterArity(field: java.lang.reflect.Field): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
									public static parameterIndex(field: java.lang.reflect.Field): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
									public static optionArity(field: java.lang.reflect.Field): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
									public static valueOf(range: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
									public min(newMin: number): org.apache.logging.log4j.core.tools.picocli.CommandLine.Range;
								}
								export class RunAll extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.IParseResultHandler {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.RunAll>;
									public constructor();
									public handleParseResult(parsedCommands: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine>, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): java.util.List<any>;
								}
								export class RunFirst extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.IParseResultHandler {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.RunFirst>;
									public constructor();
									public handleParseResult(parsedCommands: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine>, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): java.util.List<any>;
								}
								export class RunLast extends java.lang.Object implements org.apache.logging.log4j.core.tools.picocli.CommandLine.IParseResultHandler {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.RunLast>;
									public constructor();
									public handleParseResult(parsedCommands: java.util.List<org.apache.logging.log4j.core.tools.picocli.CommandLine>, out: java.io.PrintStream, ansi: org.apache.logging.log4j.core.tools.picocli.CommandLine.Help.Ansi): java.util.List<any>;
								}
								export class TraceLevel {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel>;
									public static OFF: org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel;
									public static WARN: org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel;
									public static INFO: org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel;
									public static DEBUG: org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public isEnabled(other: org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel): boolean;
									public static valueOf(name: string): org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel;
									public static values(): native.Array<org.apache.logging.log4j.core.tools.picocli.CommandLine.TraceLevel>;
								}
								export class Tracer extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.Tracer>;
								}
								export class TypeConversionException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.PicocliException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.TypeConversionException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
								export class UnmatchedArgumentException extends org.apache.logging.log4j.core.tools.picocli.CommandLine.ParameterException {
									public static class: java.lang.Class<org.apache.logging.log4j.core.tools.picocli.CommandLine.UnmatchedArgumentException>;
									public constructor();
									public constructor(cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, list1: java.util.List<string>);
									public constructor(message: string, cause: java.lang.Throwable);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, msg: string, ex: java.lang.Exception);
									public constructor(commandLine: org.apache.logging.log4j.core.tools.picocli.CommandLine, stack1: java.util.Stack<string>);
									public constructor(msg: string);
									public constructor(msg: string, ex: java.lang.Exception);
									public constructor(message: string, cause: java.lang.Throwable, enableSuppression: boolean, writableStackTrace: boolean);
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export abstract class AbstractWatcher extends java.lang.Object implements org.apache.logging.log4j.core.util.Watcher {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.AbstractWatcher>;
							public newWatcher(reconfigurable0: org.apache.logging.log4j.core.config.Reconfigurable, list1: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, long2: number): org.apache.logging.log4j.core.util.Watcher;
							public getSource(): org.apache.logging.log4j.core.util.Source;
							public getLastModified(): number;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>);
							public getListeners(): java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>;
							public modified(): void;
							public isModified(): boolean;
							public watching(source: org.apache.logging.log4j.core.util.Source): void;
							public getConfiguration(): org.apache.logging.log4j.core.config.Configuration;
						}
						export module AbstractWatcher {
							export class ReconfigurationRunnable extends java.lang.Object implements java.lang.Runnable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.AbstractWatcher.ReconfigurationRunnable>;
								public constructor(configurationListener: org.apache.logging.log4j.core.config.ConfigurationListener, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable);
								public run(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ArrayUtils extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ArrayUtils>;
							public constructor();
							public static remove(array: native.Array<any>, index: number): native.Array<any>;
							public static getLength(array: any): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Assert extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Assert>;
							public static requireNonEmpty(value: any): any;
							public static valueIsAtLeast(value: number, minValue: number): number;
							public static isEmpty(o: any): boolean;
							public static requireNonEmpty(value: any, message: string): any;
							public static isNonEmpty(o: any): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class AuthorizationProvider extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.AuthorizationProvider>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.AuthorizationProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								addAuthorization(uRLConnection0: java.net.URLConnection): void;
							});
							public constructor();
							public addAuthorization(uRLConnection0: java.net.URLConnection): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class BasicAuthorizationProvider extends java.lang.Object implements org.apache.logging.log4j.core.util.AuthorizationProvider {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.BasicAuthorizationProvider>;
							public static CONFIG_USER_NAME: string;
							public static CONFIG_PASSWORD: string;
							public static PASSWORD_DECRYPTOR: string;
							public constructor(props: org.apache.logging.log4j.util.PropertiesUtil);
							public addAuthorization(urlConnection: java.net.URLConnection): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Booleans extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Booleans>;
							public static parseBoolean(s: string, defaultValue: boolean): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Builder<T>  extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Builder<any>>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.Builder<any> interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								build(): T;
							});
							public constructor();
							public build(): T;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class CachedClock extends java.lang.Object implements org.apache.logging.log4j.core.util.Clock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.CachedClock>;
							public static instance(): org.apache.logging.log4j.core.util.CachedClock;
							public currentTimeMillis(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Cancellable extends java.lang.Object implements java.lang.Runnable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Cancellable>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.Cancellable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								cancel(): void;
								run(): void;
							});
							public constructor();
							public cancel(): void;
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Clock extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Clock>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.Clock interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								currentTimeMillis(): number;
							});
							public constructor();
							public currentTimeMillis(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ClockFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ClockFactory>;
							public static PROPERTY_NAME: string;
							public static getClock(): org.apache.logging.log4j.core.util.Clock;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class CloseShieldOutputStream extends java.io.OutputStream {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.CloseShieldOutputStream>;
							public constructor();
							public constructor(delegate: java.io.OutputStream);
							public close(): void;
							public write(b: number): void;
							public write(b: native.Array<number>): void;
							public flush(): void;
							public write(int0: number): void;
							public write(b: native.Array<number>, off: number, len: number): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class CloseShieldWriter extends java.io.Writer {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.CloseShieldWriter>;
							public constructor();
							public constructor(lock: any);
							public write(cbuf: native.Array<string>, off: number, len: number): void;
							public close(): void;
							public write(c: number): void;
							public append(c: string): java.io.Writer;
							public write(chars0: native.Array<string>, int1: number, int2: number): void;
							public append(char0: string): java.lang.Appendable;
							public append(charSequence0: string): java.lang.Appendable;
							public append(charSequence0: string, int1: number, int2: number): java.lang.Appendable;
							public write(cbuf: native.Array<string>): void;
							public append(csq: string, start: number, end: number): java.io.Writer;
							public flush(): void;
							public append(csq: string): java.io.Writer;
							public write(str: string, off: number, len: number): void;
							public write(str: string): void;
							public constructor(delegate: java.io.Writer);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Closer extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Closer>;
							public static closeSilently(closeable: java.lang.AutoCloseable): boolean;
							public static close(closeable: java.lang.AutoCloseable): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class CoarseCachedClock extends java.lang.Object implements org.apache.logging.log4j.core.util.Clock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.CoarseCachedClock>;
							public currentTimeMillis(): number;
							public static instance(): org.apache.logging.log4j.core.util.CoarseCachedClock;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Constants extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Constants>;
							public static LOG4J_LOG_EVENT_FACTORY: string;
							public static LOG4J_CONTEXT_SELECTOR: string;
							public static LOG4J_DEFAULT_STATUS_LEVEL: string;
							public static JNDI_CONTEXT_NAME: string;
							public static MILLIS_IN_SECONDS: number;
							public static FORMAT_MESSAGES_IN_BACKGROUND: boolean;
							public static FORMAT_MESSAGES_PATTERN_DISABLE_LOOKUPS: boolean;
							public static IS_WEB_APP: boolean;
							public static ENABLE_THREADLOCALS: boolean;
							public static ENABLE_DIRECT_ENCODERS: boolean;
							public static INITIAL_REUSABLE_MESSAGE_SIZE: number;
							public static MAX_REUSABLE_MESSAGE_SIZE: number;
							public static ENCODER_CHAR_BUFFER_SIZE: number;
							public static ENCODER_BYTE_BUFFER_SIZE: number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ContextDataProvider extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ContextDataProvider>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.ContextDataProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								supplyContextData(): java.util.Map<string,string>;
								supplyStringMap(): org.apache.logging.log4j.util.StringMap;
							});
							public constructor();
							public supplyContextData(): java.util.Map<string,string>;
							public supplyStringMap(): org.apache.logging.log4j.util.StringMap;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class CronExpression extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.CronExpression>;
							public static SECOND: number;
							public static MINUTE: number;
							public static HOUR: number;
							public static DAY_OF_MONTH: number;
							public static MONTH: number;
							public static DAY_OF_WEEK: number;
							public static YEAR: number;
							public static ALL_SPEC_INT: number;
							public static NO_SPEC_INT: number;
							public static ALL_SPEC: java.lang.Integer;
							public static NO_SPEC: java.lang.Integer;
							public static monthMap: java.util.Map<string,java.lang.Integer>;
							public static dayMap: java.util.Map<string,java.lang.Integer>;
							public seconds: java.util.TreeSet<java.lang.Integer>;
							public minutes: java.util.TreeSet<java.lang.Integer>;
							public hours: java.util.TreeSet<java.lang.Integer>;
							public daysOfMonth: java.util.TreeSet<java.lang.Integer>;
							public months: java.util.TreeSet<java.lang.Integer>;
							public daysOfWeek: java.util.TreeSet<java.lang.Integer>;
							public years: java.util.TreeSet<java.lang.Integer>;
							public lastdayOfWeek: boolean;
							public nthdayOfWeek: number;
							public lastdayOfMonth: boolean;
							public nearestWeekday: boolean;
							public lastdayOffset: number;
							public expressionParsed: boolean;
							public static MAX_YEAR: number;
							public static MIN_CAL: java.util.Calendar;
							public static MIN_DATE: java.util.Date;
							public getTimeBefore(targetDate: java.util.Date): java.util.Date;
							public toString(): string;
							public getExpressionSetSummary(list: java.util.ArrayList<java.lang.Integer>): string;
							public getValue(v: number, s: string, i: number): org.apache.logging.log4j.core.util.CronExpression.ValueSet;
							public getTimeZone(): java.util.TimeZone;
							public getNextValidTimeAfter(date: java.util.Date): java.util.Date;
							public static isValidExpression(cronExpression: string): boolean;
							public addToSet(val: number, end: number, incr: number, type: number): void;
							public findNextWhiteSpace(i: number, s: string): number;
							public skipWhiteSpace(i: number, s: string): number;
							public getExpressionSetSummary(set: java.util.Set<java.lang.Integer>): string;
							public getLastDayOfMonth(monthNum: number, year: number): number;
							public getNumericValue(s: string, i: number): number;
							public getPrevFireTime(targetDate: java.util.Date): java.util.Date;
							public storeExpressionVals(pos: number, s: string, type: number): number;
							public checkNext(pos: number, s: string, val: number, type: number): number;
							public setTimeZone(timeZone: java.util.TimeZone): void;
							public getCronExpression(): string;
							public getFinalFireTime(): java.util.Date;
							public getExpressionSummary(): string;
							public isLeapYear(year: number): boolean;
							public isSatisfiedBy(date: java.util.Date): boolean;
							public setCalendarHour(cal: java.util.Calendar, hour: number): void;
							public getTimeAfter(afterTime: java.util.Date): java.util.Date;
							public getMonthNumber(s: string): number;
							public constructor(cronExpression: string);
							public buildExpression(expression: string): void;
							public getDayOfWeekNumber(s: string): number;
							public getNextInvalidTimeAfter(date: java.util.Date): java.util.Date;
							public static validateExpression(cronExpression: string): void;
						}
						export module CronExpression {
							export class ValueSet extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.CronExpression.ValueSet>;
								public value: number;
								public pos: number;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class CyclicBuffer<T>  extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.CyclicBuffer<any>>;
							public constructor(clazz: java.lang.Class<T>, size: number);
							public isEmpty(): boolean;
							public add(item: T): void;
							public removeAll(): native.Array<T>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class DefaultShutdownCallbackRegistry extends java.lang.Object implements org.apache.logging.log4j.core.util.ShutdownCallbackRegistry, org.apache.logging.log4j.core.LifeCycle2, java.lang.Runnable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry>;
							public static LOGGER: org.apache.logging.log4j.Logger;
							public constructor();
							public constructor(threadFactory: java.util.concurrent.ThreadFactory);
							public stop(): void;
							public getState(): org.apache.logging.log4j.core.LifeCycle.State;
							public initialize(): void;
							public start(): void;
							public isStarted(): boolean;
							public isStopped(): boolean;
							public addShutdownCallback(callback: java.lang.Runnable): org.apache.logging.log4j.core.util.Cancellable;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public run(): void;
						}
						export module DefaultShutdownCallbackRegistry {
							export class RegisteredCancellable extends java.lang.Object implements org.apache.logging.log4j.core.util.Cancellable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry.RegisteredCancellable>;
								public toString(): string;
								public cancel(): void;
								public run(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class DummyNanoClock extends java.lang.Object implements org.apache.logging.log4j.core.util.NanoClock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.DummyNanoClock>;
							public constructor();
							public nanoTime(): number;
							public constructor(fixedNanoTime: number);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ExecutorServices extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ExecutorServices>;
							public constructor();
							public static shutdown(executorService: java.util.concurrent.ExecutorService, timeout: number, timeUnit: java.util.concurrent.TimeUnit, source: string): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ExtensionLanguageMapping {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ExtensionLanguageMapping>;
							public static JS: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JAVASCRIPT: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static GVY: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static GROOVY: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static BSH: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static BEANSHELL: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JY: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JYTHON: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static FTL: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static FREEMARKER: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static VM: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static VELOCITY: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static AWK: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static EJS: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static TCL: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static HS: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JELLY: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JEP: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JEXL: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JEXL2: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static RB: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static RUBY: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JUDO: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static JUDI: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static SCALA: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static CLJ: org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static valueOf(name: string): org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public getLanguage(): string;
							public static getByLanguage(language: string): java.util.List<org.apache.logging.log4j.core.util.ExtensionLanguageMapping>;
							public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
							public static getByExtension(extension: string): org.apache.logging.log4j.core.util.ExtensionLanguageMapping;
							public static values(): native.Array<org.apache.logging.log4j.core.util.ExtensionLanguageMapping>;
							public getExtension(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class FileUtils extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.FileUtils>;
							public static makeParentDirs(file: java.io.File): void;
							public static getFileExtension(file: java.io.File): string;
							public static fileFromUri(uri: java.net.URI): java.io.File;
							public static isFile(url: java.net.URL): boolean;
							public static mkdir(dir: java.io.File, createDirectoryIfNotExisting: boolean): void;
							public static isFilePosixAttributeViewSupported(): boolean;
							public static defineFilePosixAttributeView(path: java.nio.file.Path, filePermissions: java.util.Set<java.nio.file.attribute.PosixFilePermission>, fileOwner: string, fileGroup: string): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class FileWatcher extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.FileWatcher>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.FileWatcher interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								fileModified(file0: java.io.File): void;
							});
							public constructor();
							public fileModified(file0: java.io.File): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class IOUtils extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.IOUtils>;
							public static EOF: number;
							public constructor();
							public static toString(input: java.io.Reader): string;
							public static copyLarge(input: java.io.Reader, output: java.io.Writer, buffer: native.Array<string>): number;
							public toString(): string;
							public static copy(input: java.io.Reader, output: java.io.Writer): number;
							public static copyLarge(input: java.io.Reader, output: java.io.Writer): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Integers extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Integers>;
							public static ceilingNextPowerOfTwo(x: number): number;
							public static parseInt(s: string): number;
							public static parseInt(s: string, defaultValue: number): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class JndiCloser extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.JndiCloser>;
							public static closeSilently(context: javax.naming.Context): boolean;
							public static close(context: javax.naming.Context): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class JsonUtils extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.JsonUtils>;
							public constructor();
							public static quoteAsString(input: string, output: java.lang.StringBuilder): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class KeyValuePair extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.KeyValuePair>;
							public static newBuilder(): org.apache.logging.log4j.core.util.KeyValuePair.Builder;
							public getKey(): string;
							public hashCode(): number;
							public equals(obj: any): boolean;
							public getValue(): string;
							public toString(): string;
							public constructor(key: string, value: string);
						}
						export module KeyValuePair {
							export class Builder extends org.apache.logging.log4j.core.util.Builder<org.apache.logging.log4j.core.util.KeyValuePair> {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.KeyValuePair.Builder>;
								public setValue(aValue: string): org.apache.logging.log4j.core.util.KeyValuePair.Builder;
								public build(): any;
								public constructor();
								public build(): org.apache.logging.log4j.core.util.KeyValuePair;
								public setKey(aKey: string): org.apache.logging.log4j.core.util.KeyValuePair.Builder;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Loader extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Loader>;
							public static getClassLoader(): java.lang.ClassLoader;
							public static loadClass(className: string): java.lang.Class<any>;
							public static getClassLoader(class1: java.lang.Class<any>, class2: java.lang.Class<any>): java.lang.ClassLoader;
							public static getThreadContextClassLoader(): java.lang.ClassLoader;
							public static initializeClass(className: string, loader: java.lang.ClassLoader): java.lang.Class<any>;
							public static newInstanceOf(className: string): any;
							public static isClassAvailable(className: string): boolean;
							public static getResource(resource: string, defaultLoader: java.lang.ClassLoader): java.net.URL;
							public static getResourceAsStream(resource: string, defaultLoader: java.lang.ClassLoader): java.io.InputStream;
							public static loadClass(className: string, loader: java.lang.ClassLoader): java.lang.Class<any>;
							public static newCheckedInstanceOfProperty(propertyName: string, clazz: java.lang.Class<any>): any;
							public static newCheckedInstanceOf(className: string, clazz: java.lang.Class<any>): any;
							public static isJansiAvailable(): boolean;
							public static loadSystemClass(className: string): java.lang.Class<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Log4jThread extends java.lang.Thread {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Log4jThread>;
							public constructor();
							public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable);
							public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable, name: string, stackSize: number);
							public constructor(group: java.lang.ThreadGroup, target: java.lang.Runnable, name: string);
							public constructor(target: java.lang.Runnable, name: string);
							public constructor(name: string);
							public constructor(group: java.lang.ThreadGroup, name: string);
							public constructor(target: java.lang.Runnable);
							public run(): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Log4jThreadFactory extends java.lang.Object implements java.util.concurrent.ThreadFactory {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Log4jThreadFactory>;
							public static createDaemonThreadFactory(threadFactoryName: string): org.apache.logging.log4j.core.util.Log4jThreadFactory;
							public static createThreadFactory(threadFactoryName: string): org.apache.logging.log4j.core.util.Log4jThreadFactory;
							public constructor(threadFactoryName: string, daemon: boolean, priority: number);
							public newThread(runnable: java.lang.Runnable): java.lang.Thread;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class NameUtil extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.NameUtil>;
							public static md5(string: string): string;
							public static getSubName(name: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class NanoClock extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.NanoClock>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.NanoClock interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								nanoTime(): number;
							});
							public constructor();
							public nanoTime(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class NetUtils extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.NetUtils>;
							public static getMacAddressString(): string;
							public static toURI(path: string): java.net.URI;
							public static getMacAddress(): native.Array<number>;
							public static getLocalHostname(): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class NullOutputStream extends java.io.OutputStream {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.NullOutputStream>;
							public static NULL_OUTPUT_STREAM: org.apache.logging.log4j.core.util.NullOutputStream;
							public close(): void;
							public write(b: number): void;
							public write(b: native.Array<number>): void;
							public static getInstance(): org.apache.logging.log4j.core.util.NullOutputStream;
							public write(int0: number): void;
							public flush(): void;
							public write(b: native.Array<number>, off: number, len: number): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ObjectArrayIterator<E>  extends java.util.Iterator<any> {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ObjectArrayIterator<any>>;
							public constructor(array: native.Array<any>, start: number);
							public constructor(array: native.Array<any>);
							public hasNext(): boolean;
							public remove(): void;
							public constructor(array: native.Array<any>, start: number, end: number);
							public getArray(): native.Array<any>;
							public next(): any;
							public getStartIndex(): number;
							public getEndIndex(): number;
							public reset(): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class OptionConverter extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.OptionConverter>;
							public static convertSpecialChars(s: string): string;
							public static toBoolean(value: string, defaultValue: boolean): boolean;
							public static concatenateArrays(l: native.Array<string>, r: native.Array<string>): native.Array<string>;
							public static instantiateByClassName(className: string, superClass: java.lang.Class<any>, defaultValue: any): any;
							public static substVars(val: string, props: java.util.Properties): string;
							public static toInt(value: string, defaultValue: number): number;
							public static findAndSubst(key: string, props: java.util.Properties): string;
							public static instantiateByKey(props: java.util.Properties, key: string, superClass: java.lang.Class<any>, defaultValue: any): any;
							public static toFileSize(value: string, defaultValue: number): number;
							public static toLevel(value: string, defaultValue: org.apache.logging.log4j.Level): org.apache.logging.log4j.Level;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class PasswordDecryptor extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.PasswordDecryptor>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.PasswordDecryptor interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								decryptPassword(string0: string): string;
							});
							public constructor();
							public decryptPassword(string0: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Patterns extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Patterns>;
							public static COMMA_SEPARATOR: string;
							public static WHITESPACE: string;
							public static toWhitespaceSeparator(separator: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ReflectionUtil extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ReflectionUtil>;
							public static makeAccessible(member: java.lang.reflect.AccessibleObject): void;
							public static getFieldValue(field: java.lang.reflect.Field, instance: any): any;
							public static setFieldValue(field: java.lang.reflect.Field, instance: any, value: any): void;
							public static setStaticFieldValue(field: java.lang.reflect.Field, value: any): void;
							public static instantiate(clazz: java.lang.Class<any>): any;
							public static isAccessible(member: java.lang.reflect.AccessibleObject): boolean;
							public static getStaticFieldValue(field: java.lang.reflect.Field): any;
							public static makeAccessible(field: java.lang.reflect.Field): void;
							public static getDefaultConstructor(clazz: java.lang.Class<any>): java.lang.reflect.Constructor<any>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class SecretKeyProvider extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.SecretKeyProvider>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.SecretKeyProvider interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getSecretKey(): javax.crypto.SecretKey;
							});
							public constructor();
							public getSecretKey(): javax.crypto.SecretKey;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class SetUtils extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.SetUtils>;
							public static prefixSet(set: java.util.Set<string>, prefix: string): native.Array<string>;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class ShutdownCallbackRegistry extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.ShutdownCallbackRegistry>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.ShutdownCallbackRegistry interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								addShutdownCallback(runnable0: java.lang.Runnable): org.apache.logging.log4j.core.util.Cancellable;
							});
							public constructor();
							public static SHUTDOWN_CALLBACK_REGISTRY: string;
							public static SHUTDOWN_HOOK_ENABLED: string;
							public static SHUTDOWN_HOOK_MARKER: org.apache.logging.log4j.Marker;
							public addShutdownCallback(runnable0: java.lang.Runnable): org.apache.logging.log4j.core.util.Cancellable;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Source extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Source>;
							public constructor(file: java.io.File);
							public getURI(): java.net.URI;
							public hashCode(): number;
							public getFile(): java.io.File;
							public equals(obj: any): boolean;
							public constructor(uri: java.net.URI, lastModified: number);
							public getLocation(): string;
							public toString(): string;
							public equals(o: any): boolean;
							public constructor(source: org.apache.logging.log4j.core.config.ConfigurationSource);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class StringBuilderWriter extends java.io.Writer implements java.io.Serializable {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.StringBuilderWriter>;
							public constructor();
							public constructor(lock: any);
							public close(): void;
							public constructor(builder: java.lang.StringBuilder);
							public append(c: string): java.io.Writer;
							public write(c: number): void;
							public constructor(capacity: number);
							public write(chars0: native.Array<string>, int1: number, int2: number): void;
							public toString(): string;
							public append(char0: string): java.lang.Appendable;
							public getBuilder(): java.lang.StringBuilder;
							public write(value: string): void;
							public append(charSequence0: string): java.lang.Appendable;
							public append(charSequence0: string, int1: number, int2: number): java.lang.Appendable;
							public write(cbuf: native.Array<string>): void;
							public append(value: string, start: number, end: number): java.io.Writer;
							public append(csq: string, start: number, end: number): java.io.Writer;
							public append(csq: string): java.io.Writer;
							public flush(): void;
							public append(value: string): java.io.Writer;
							public write(str: string, off: number, len: number): void;
							public write(str: string): void;
							public write(value: native.Array<string>, offset: number, length: number): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class StringEncoder extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.StringEncoder>;
							public static encodeSingleByteChars(s: string): native.Array<number>;
							public static toBytes(str: string, charset: java.nio.charset.Charset): native.Array<number>;
							public static encodeString(charArray: string, charOffset: number, charLength: number, byteArray: native.Array<number>): number;
							public static encodeIsoChars(charArray: string, charIndex: number, byteArray: native.Array<number>, byteIndex: number, length: number): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class SystemClock extends java.lang.Object implements org.apache.logging.log4j.core.util.Clock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.SystemClock>;
							public constructor();
							public currentTimeMillis(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class SystemMillisClock extends java.lang.Object implements org.apache.logging.log4j.core.util.Clock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.SystemMillisClock>;
							public constructor();
							public currentTimeMillis(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class SystemNanoClock extends java.lang.Object implements org.apache.logging.log4j.core.util.NanoClock {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.SystemNanoClock>;
							public constructor();
							public nanoTime(): number;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Throwables extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Throwables>;
							public static toStringList(throwable: java.lang.Throwable): java.util.List<string>;
							public static rethrow(t: java.lang.Throwable): void;
							public static getRootCause(throwable: java.lang.Throwable): java.lang.Throwable;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Transform extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Transform>;
							public static escapeHtmlTags(input: string): string;
							public static appendEscapingCData(buf: java.lang.StringBuilder, str: string): void;
							public static escapeJsonControlCharacters(input: string): string;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class TypeUtil extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.TypeUtil>;
							public static getAllDeclaredFields(cls: java.lang.Class<any>): java.util.List<java.lang.reflect.Field>;
							public static isAssignable(lhs: java.lang.reflect.Type, rhs: java.lang.reflect.Type): boolean;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class UuidUtil extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.UuidUtil>;
							public static UUID_SEQUENCE: string;
							public static getTimeBasedUuid(): java.util.UUID;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class WatchEventService extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.WatchEventService>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.WatchEventService interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								subscribe(watchManager0: org.apache.logging.log4j.core.util.WatchManager): void;
								unsubscribe(watchManager0: org.apache.logging.log4j.core.util.WatchManager): void;
							});
							public constructor();
							public unsubscribe(watchManager0: org.apache.logging.log4j.core.util.WatchManager): void;
							public subscribe(watchManager0: org.apache.logging.log4j.core.util.WatchManager): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class WatchManager extends org.apache.logging.log4j.core.AbstractLifeCycle {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.WatchManager>;
							public constructor();
							public checkFiles(): void;
							public setIntervalSeconds(intervalSeconds: number): void;
							public unwatchFile(file: java.io.File): void;
							public unwatch(source: org.apache.logging.log4j.core.util.Source): void;
							public watchFile(file: java.io.File, fileWatcher: org.apache.logging.log4j.core.util.FileWatcher): void;
							public reset(source: org.apache.logging.log4j.core.util.Source): void;
							public toString(): string;
							public getIntervalSeconds(): number;
							public stop(timeout: number, timeUnit: java.util.concurrent.TimeUnit): boolean;
							public constructor(scheduler: org.apache.logging.log4j.core.config.ConfigurationScheduler);
							public reset(): void;
							public stop(future: java.util.concurrent.Future<any>): boolean;
							public stop(): void;
							public start(): void;
							public watch(source: org.apache.logging.log4j.core.util.Source, watcher: org.apache.logging.log4j.core.util.Watcher): void;
							public getId(): java.util.UUID;
							/** @deprecated */
							public getWatchers(): java.util.Map<java.io.File,org.apache.logging.log4j.core.util.FileWatcher>;
							public hasEventListeners(): boolean;
							public getConfigurationWatchers(): java.util.Map<org.apache.logging.log4j.core.util.Source,org.apache.logging.log4j.core.util.Watcher>;
							public reset(file: java.io.File): void;
						}
						export module WatchManager {
							export class ConfigurationMonitor extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.WatchManager.ConfigurationMonitor>;
								public toString(): string;
								public constructor(param0: org.apache.logging.log4j.core.util.WatchManager, lastModifiedMillis: number, watcher: org.apache.logging.log4j.core.util.Watcher);
								public getWatcher(): org.apache.logging.log4j.core.util.Watcher;
							}
							export class LocalUUID extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.WatchManager.LocalUUID>;
								public static get(): java.util.UUID;
							}
							export class WatchRunnable extends java.lang.Object implements java.lang.Runnable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.WatchManager.WatchRunnable>;
								public run(): void;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class Watcher extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.Watcher>;
							/**
							 * Constructs a new instance of the org.apache.logging.log4j.core.util.Watcher interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
							 */
							public constructor(implementation: {
								getListeners(): java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>;
								modified(): void;
								isModified(): boolean;
								getLastModified(): number;
								watching(source0: org.apache.logging.log4j.core.util.Source): void;
								getSource(): org.apache.logging.log4j.core.util.Source;
								newWatcher(reconfigurable0: org.apache.logging.log4j.core.config.Reconfigurable, list1: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, long2: number): org.apache.logging.log4j.core.util.Watcher;
							});
							public constructor();
							public static CATEGORY: string;
							public static ELEMENT_TYPE: string;
							public newWatcher(reconfigurable0: org.apache.logging.log4j.core.config.Reconfigurable, list1: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, long2: number): org.apache.logging.log4j.core.util.Watcher;
							public getSource(): org.apache.logging.log4j.core.util.Source;
							public getLastModified(): number;
							public getListeners(): java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>;
							public modified(): void;
							public isModified(): boolean;
							public watching(source0: org.apache.logging.log4j.core.util.Source): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class WatcherFactory extends java.lang.Object {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.WatcherFactory>;
							public static instantiate(name: string, clazz: java.lang.Class<any>, configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, listeners: java.util.List<any>, lastModifiedMillis: number): org.apache.logging.log4j.core.util.Watcher;
							public static getInstance(packages: java.util.List<string>): org.apache.logging.log4j.core.util.WatcherFactory;
							public newWatcher(source: org.apache.logging.log4j.core.util.Source, configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, lastModifiedMillis: number): org.apache.logging.log4j.core.util.Watcher;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export class WrappedFileWatcher extends org.apache.logging.log4j.core.util.AbstractWatcher implements org.apache.logging.log4j.core.util.FileWatcher {
							public static class: java.lang.Class<org.apache.logging.log4j.core.util.WrappedFileWatcher>;
							public fileModified(file: java.io.File): void;
							public constructor(watcher: org.apache.logging.log4j.core.util.FileWatcher);
							public getSource(): org.apache.logging.log4j.core.util.Source;
							public getLastModified(): number;
							public constructor(configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>);
							public getListeners(): java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>;
							public newWatcher(reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, listeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, lastModifiedMillis: number): org.apache.logging.log4j.core.util.Watcher;
							public modified(): void;
							public isModified(): boolean;
							public watching(source: org.apache.logging.log4j.core.util.Source): void;
							public constructor(watcher: org.apache.logging.log4j.core.util.FileWatcher, configuration: org.apache.logging.log4j.core.config.Configuration, reconfigurable: org.apache.logging.log4j.core.config.Reconfigurable, configurationListeners: java.util.List<org.apache.logging.log4j.core.config.ConfigurationListener>, lastModifiedMillis: number);
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export class DateParser extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.DateParser>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.util.datetime.DateParser interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									parse(string0: string): java.util.Date;
									parse(string0: string, parsePosition1: java.text.ParsePosition): java.util.Date;
									parse(string0: string, parsePosition1: java.text.ParsePosition, calendar2: java.util.Calendar): boolean;
									getPattern(): string;
									getTimeZone(): java.util.TimeZone;
									getLocale(): java.util.Locale;
									parseObject(string0: string): any;
									parseObject(string0: string, parsePosition1: java.text.ParsePosition): any;
								});
								public constructor();
								public parseObject(string0: string): any;
								public parseObject(string0: string, parsePosition1: java.text.ParsePosition): any;
								public getPattern(): string;
								public parse(string0: string, parsePosition1: java.text.ParsePosition, calendar2: java.util.Calendar): boolean;
								public parse(string0: string): java.util.Date;
								public getLocale(): java.util.Locale;
								public parse(string0: string, parsePosition1: java.text.ParsePosition): java.util.Date;
								public getTimeZone(): java.util.TimeZone;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export class DatePrinter extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.DatePrinter>;
								/**
								 * Constructs a new instance of the org.apache.logging.log4j.core.util.datetime.DatePrinter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
								 */
								public constructor(implementation: {
									format(long0: number): string;
									format(date0: java.util.Date): string;
									format(calendar0: java.util.Calendar): string;
									format(long0: number, appendable1: java.lang.Appendable): java.lang.Appendable;
									format(date0: java.util.Date, appendable1: java.lang.Appendable): java.lang.Appendable;
									format(calendar0: java.util.Calendar, appendable1: java.lang.Appendable): java.lang.Appendable;
									getPattern(): string;
									getTimeZone(): java.util.TimeZone;
									getLocale(): java.util.Locale;
									format(object0: any, stringBuilder1: java.lang.StringBuilder, fieldPosition2: java.text.FieldPosition): java.lang.StringBuilder;
								});
								public constructor();
								public format(object0: any, stringBuilder1: java.lang.StringBuilder, fieldPosition2: java.text.FieldPosition): java.lang.StringBuilder;
								public format(calendar0: java.util.Calendar): string;
								public format(calendar0: java.util.Calendar, appendable1: java.lang.Appendable): java.lang.Appendable;
								public getPattern(): string;
								public format(date0: java.util.Date, appendable1: java.lang.Appendable): java.lang.Appendable;
								public getLocale(): java.util.Locale;
								public format(long0: number): string;
								public format(date0: java.util.Date): string;
								public format(long0: number, appendable1: java.lang.Appendable): java.lang.Appendable;
								public getTimeZone(): java.util.TimeZone;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export class FastDateFormat extends org.apache.logging.log4j.core.util.datetime.Format implements org.apache.logging.log4j.core.util.datetime.DateParser, org.apache.logging.log4j.core.util.datetime.DatePrinter {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateFormat>;
								public static FULL: number;
								public static LONG: number;
								public static MEDIUM: number;
								public static SHORT: number;
								public static getInstance(pattern: string, timeZone: java.util.TimeZone): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public static getTimeInstance(style: number, timeZone: java.util.TimeZone): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public toString(): string;
								public parse(source: string, pos: java.text.ParsePosition, calendar: java.util.Calendar): boolean;
								public parseObject(source: string): any;
								public static getDateTimeInstance(dateStyle: number, timeStyle: number, timeZone: java.util.TimeZone, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public getMaxLengthEstimate(): number;
								public static getInstance(pattern: string, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public static getDateInstance(style: number): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public static getTimeInstance(style: number, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public format(obj: any, toAppendTo: java.lang.StringBuilder, pos: java.text.FieldPosition): java.lang.StringBuilder;
								public static getInstance(pattern: string, timeZone: java.util.TimeZone, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public getTimeZone(): java.util.TimeZone;
								public format(date: java.util.Date): string;
								public constructor(pattern: string, timeZone: java.util.TimeZone, locale: java.util.Locale, centuryStart: java.util.Date);
								public equals(obj: any): boolean;
								public parseObject(string0: string, parsePosition1: java.text.ParsePosition): any;
								public getPattern(): string;
								public getLocale(): java.util.Locale;
								public static getTimeInstance(style: number, timeZone: java.util.TimeZone, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public parse(source: string): java.util.Date;
								public format(date: java.util.Date, buf: java.lang.Appendable): java.lang.Appendable;
								public format(calendar: java.util.Calendar, buf: java.lang.Appendable): java.lang.Appendable;
								public static getDateTimeInstance(dateStyle: number, timeStyle: number, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public format(millis: number): string;
								public static getDateInstance(style: number, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public static getInstance(pattern: string): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public format(calendar: java.util.Calendar): string;
								public format(millis: number, buf: java.lang.Appendable): java.lang.Appendable;
								public static getTimeInstance(style: number): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public static getDateTimeInstance(dateStyle: number, timeStyle: number, timeZone: java.util.TimeZone): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public constructor();
								public format(obj: any): string;
								public parse(source: string, pos: java.text.ParsePosition): java.util.Date;
								public format(object0: any, stringBuilder1: java.lang.StringBuilder, fieldPosition2: java.text.FieldPosition): java.lang.StringBuilder;
								public static getInstance(): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public static getDateInstance(style: number, timeZone: java.util.TimeZone): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public constructor(pattern: string, timeZone: java.util.TimeZone, locale: java.util.Locale);
								public static getDateInstance(style: number, timeZone: java.util.TimeZone, locale: java.util.Locale): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public static getDateTimeInstance(dateStyle: number, timeStyle: number): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								public hashCode(): number;
								public parseObject(source: string, pos: java.text.ParsePosition): any;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export class FastDateParser extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.DateParser, java.io.Serializable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser>;
								public toString(): string;
								public parse(source: string, pos: java.text.ParsePosition, calendar: java.util.Calendar): boolean;
								public parseObject(source: string): any;
								public getTimeZone(): java.util.TimeZone;
								public parse(source: string, pos: java.text.ParsePosition): java.util.Date;
								public constructor(pattern: string, timeZone: java.util.TimeZone, locale: java.util.Locale, centuryStart: java.util.Date);
								public equals(obj: any): boolean;
								public getPattern(): string;
								public constructor(pattern: string, timeZone: java.util.TimeZone, locale: java.util.Locale);
								public getLocale(): java.util.Locale;
								public parse(source: string): java.util.Date;
								public hashCode(): number;
								public parseObject(source: string, pos: java.text.ParsePosition): any;
							}
							export module FastDateParser {
								export class CaseInsensitiveTextStrategy extends org.apache.logging.log4j.core.util.datetime.FastDateParser.PatternStrategy {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.CaseInsensitiveTextStrategy>;
								}
								export class CopyQuotedStrategy extends org.apache.logging.log4j.core.util.datetime.FastDateParser.Strategy {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.CopyQuotedStrategy>;
								}
								export class ISO8601TimeZoneStrategy extends org.apache.logging.log4j.core.util.datetime.FastDateParser.PatternStrategy {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.ISO8601TimeZoneStrategy>;
								}
								export class NumberStrategy extends org.apache.logging.log4j.core.util.datetime.FastDateParser.Strategy {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.NumberStrategy>;
								}
								export abstract class PatternStrategy extends org.apache.logging.log4j.core.util.datetime.FastDateParser.Strategy {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.PatternStrategy>;
								}
								export abstract class Strategy extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.Strategy>;
								}
								export class StrategyAndWidth extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.StrategyAndWidth>;
								}
								export class StrategyParser extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.StrategyParser>;
								}
								export class TimeZoneStrategy extends org.apache.logging.log4j.core.util.datetime.FastDateParser.PatternStrategy {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.TimeZoneStrategy>;
								}
								export module TimeZoneStrategy {
									export class TzInfo extends java.lang.Object {
										public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDateParser.TimeZoneStrategy.TzInfo>;
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export class FastDatePrinter extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.DatePrinter, java.io.Serializable {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter>;
								public static FULL: number;
								public static LONG: number;
								public static MEDIUM: number;
								public static SHORT: number;
								public format(date: java.util.Date, buf: java.lang.Appendable): java.lang.Appendable;
								public toString(): string;
								public format(calendar: java.util.Calendar, buf: java.lang.Appendable): java.lang.Appendable;
								public format(millis: number): string;
								public getMaxLengthEstimate(): number;
								public format(calendar: java.util.Calendar): string;
								public format(millis: number, buf: java.lang.Appendable): java.lang.Appendable;
								public parsePattern(): java.util.List<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule>;
								public format(obj: any, toAppendTo: java.lang.StringBuilder, pos: java.text.FieldPosition): java.lang.StringBuilder;
								public getTimeZone(): java.util.TimeZone;
								public format(date: java.util.Date): string;
								/** @deprecated */
								public format(obj: any, toAppendTo: java.lang.StringBuilder, pos: java.text.FieldPosition): java.lang.StringBuilder;
								public parseToken(pattern: string, indexRef: native.Array<number>): string;
								public selectNumberRule(field: number, padding: number): org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule;
								public equals(obj: any): boolean;
								/** @deprecated */
								public applyRules(calendar: java.util.Calendar, buf: java.lang.StringBuffer): java.lang.StringBuffer;
								public getPattern(): string;
								public constructor(pattern: string, timeZone: java.util.TimeZone, locale: java.util.Locale);
								public getLocale(): java.util.Locale;
								public hashCode(): number;
							}
							export module FastDatePrinter {
								export class CharacterLiteral extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.CharacterLiteral>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public estimateLength(): number;
								}
								export class DayInWeekField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.DayInWeekField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class Iso8601_Rule extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Iso8601_Rule>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public estimateLength(): number;
								}
								export class NumberRule extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.util.datetime.FastDatePrinter$NumberRule interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										appendTo(appendable0: java.lang.Appendable, int1: number): void;
										estimateLength(): number;
										appendTo(appendable0: java.lang.Appendable, calendar1: java.util.Calendar): void;
									});
									public constructor();
									public estimateLength(): number;
									public appendTo(appendable0: java.lang.Appendable, calendar1: java.util.Calendar): void;
									public appendTo(appendable0: java.lang.Appendable, int1: number): void;
								}
								export class PaddedNumberField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.PaddedNumberField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class Rule extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule>;
									/**
									 * Constructs a new instance of the org.apache.logging.log4j.core.util.datetime.FastDatePrinter$Rule interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
									 */
									public constructor(implementation: {
										estimateLength(): number;
										appendTo(appendable0: java.lang.Appendable, calendar1: java.util.Calendar): void;
									});
									public constructor();
									public estimateLength(): number;
									public appendTo(appendable0: java.lang.Appendable, calendar1: java.util.Calendar): void;
								}
								export class StringLiteral extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.StringLiteral>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public estimateLength(): number;
								}
								export class TextField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TextField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public estimateLength(): number;
								}
								export class TimeZoneDisplayKey extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TimeZoneDisplayKey>;
									public hashCode(): number;
									public equals(obj: any): boolean;
								}
								export class TimeZoneNameRule extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TimeZoneNameRule>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public estimateLength(): number;
								}
								export class TimeZoneNumberRule extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.Rule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TimeZoneNumberRule>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public estimateLength(): number;
								}
								export class TwelveHourField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TwelveHourField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class TwentyFourHourField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TwentyFourHourField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class TwoDigitMonthField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TwoDigitMonthField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class TwoDigitNumberField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TwoDigitNumberField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class TwoDigitYearField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.TwoDigitYearField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class UnpaddedMonthField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.UnpaddedMonthField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class UnpaddedNumberField extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.UnpaddedNumberField>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
								export class WeekYear extends java.lang.Object implements org.apache.logging.log4j.core.util.datetime.FastDatePrinter.NumberRule {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FastDatePrinter.WeekYear>;
									public appendTo(buffer: java.lang.Appendable, calendar: java.util.Calendar): void;
									public appendTo(buffer: java.lang.Appendable, value: number): void;
									public estimateLength(): number;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export class FixedDateFormat extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FixedDateFormat>;
								public formatInstant(instant: org.apache.logging.log4j.core.time.Instant): string;
								public static create(format: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat): org.apache.logging.log4j.core.util.datetime.FixedDateFormat;
								public static createIfSupported(options: native.Array<string>): org.apache.logging.log4j.core.util.datetime.FixedDateFormat;
								public static create(format: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat, tz: java.util.TimeZone): org.apache.logging.log4j.core.util.datetime.FixedDateFormat;
								public millisSinceMidnight(currentTime: number): number;
								public formatInstant(instant: org.apache.logging.log4j.core.time.Instant, buffer: native.Array<string>, startPos: number): number;
								public getTimeZone(): java.util.TimeZone;
								public getFormat(): string;
								public format(epochMillis: number): string;
								public format(epochMillis: number, buffer: native.Array<string>, startPos: number): number;
							}
							export module FixedDateFormat {
								export class FixedFormat {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat>;
									public static ABSOLUTE: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ABSOLUTE_MICROS: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ABSOLUTE_NANOS: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ABSOLUTE_PERIOD: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static COMPACT: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static DATE: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static DATE_PERIOD: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static DEFAULT: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static DEFAULT_MICROS: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static DEFAULT_NANOS: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static DEFAULT_PERIOD: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601_BASIC: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601_BASIC_PERIOD: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601_OFFSET_DATE_TIME_HH: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601_OFFSET_DATE_TIME_HHMM: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601_OFFSET_DATE_TIME_HHCMM: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601_PERIOD: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public static ISO8601_PERIOD_MICROS: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public getPattern(): string;
									public getFastDateFormat(tz: java.util.TimeZone): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public getSecondFractionDigits(): number;
									public static values(): native.Array<org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat>;
									public static valueOf(name: string): org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public getFixedTimeZoneFormat(): org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedTimeZoneFormat;
									public getDatePattern(): string;
									public getDatePatternLength(): number;
									public static lookup(nameOrPattern: string): org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedFormat;
									public getLength(): number;
									public getFastDateFormat(): org.apache.logging.log4j.core.util.datetime.FastDateFormat;
								}
								export class FixedTimeZoneFormat {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedTimeZoneFormat>;
									public static HH: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedTimeZoneFormat;
									public static HHMM: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedTimeZoneFormat;
									public static HHCMM: org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedTimeZoneFormat;
									public static valueOf(enumType: java.lang.Class<any>, name: string): java.lang.Enum<any>;
									public static values(): native.Array<org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedTimeZoneFormat>;
									public getLength(): number;
									public static valueOf(name: string): org.apache.logging.log4j.core.util.datetime.FixedDateFormat.FixedTimeZoneFormat;
								}
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export abstract class Format extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.Format>;
								public format(object0: any, stringBuilder1: java.lang.StringBuilder, fieldPosition2: java.text.FieldPosition): java.lang.StringBuilder;
								public parseObject(string0: string, parsePosition1: java.text.ParsePosition): any;
								public parseObject(source: string): any;
								public constructor();
								public format(obj: any): string;
							}
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module apache {
		export module logging {
			export module log4j {
				export module core {
					export module util {
						export module datetime {
							export abstract class FormatCache<F>  extends java.lang.Object {
								public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FormatCache<any>>;
								public createInstance(string0: string, timeZone1: java.util.TimeZone, locale2: java.util.Locale): F;
								public getInstance(): F;
								public getInstance(pattern: string, timeZone: java.util.TimeZone, locale: java.util.Locale): F;
							}
							export module FormatCache {
								export class MultipartKey extends java.lang.Object {
									public static class: java.lang.Class<org.apache.logging.log4j.core.util.datetime.FormatCache.MultipartKey>;
									public hashCode(): number;
									public constructor(keys: native.Array<any>);
									public equals(obj: any): boolean;
								}
							}
						}
					}
				}
			}
		}
	}
}

//Generics information:
//org.apache.logging.log4j.core.Layout:1
//org.apache.logging.log4j.core.appender.AbstractAppender.Builder:1
//org.apache.logging.log4j.core.appender.AbstractFileAppender:1
//org.apache.logging.log4j.core.appender.AbstractFileAppender.Builder:1
//org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:1
//org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.Builder:1
//org.apache.logging.log4j.core.appender.AbstractWriterAppender:1
//org.apache.logging.log4j.core.appender.AsyncAppender.Builder:1
//org.apache.logging.log4j.core.appender.ConsoleAppender.Builder:1
//org.apache.logging.log4j.core.appender.FileAppender.Builder:1
//org.apache.logging.log4j.core.appender.HttpAppender.Builder:1
//org.apache.logging.log4j.core.appender.ManagerFactory:2
//org.apache.logging.log4j.core.appender.MemoryMappedFileAppender.Builder:1
//org.apache.logging.log4j.core.appender.OutputStreamAppender.Builder:1
//org.apache.logging.log4j.core.appender.RandomAccessFileAppender.Builder:1
//org.apache.logging.log4j.core.appender.RollingFileAppender.Builder:1
//org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender.Builder:1
//org.apache.logging.log4j.core.appender.SocketAppender.AbstractBuilder:1
//org.apache.logging.log4j.core.appender.SyslogAppender.Builder:1
//org.apache.logging.log4j.core.appender.WriterAppender.Builder:1
//org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:1
//org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender.Builder:1
//org.apache.logging.log4j.core.appender.db.jdbc.AbstractDriverManagerConnectionSource.Builder:1
//org.apache.logging.log4j.core.appender.db.jdbc.DriverManagerConnectionSource.Builder:1
//org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender.Builder:1
//org.apache.logging.log4j.core.appender.mom.JmsAppender.Builder:1
//org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender.Builder:1
//org.apache.logging.log4j.core.appender.nosql.AbstractNoSqlConnection:2
//org.apache.logging.log4j.core.appender.nosql.NoSqlAppender.Builder:1
//org.apache.logging.log4j.core.appender.nosql.NoSqlConnection:2
//org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager:1
//org.apache.logging.log4j.core.appender.nosql.NoSqlObject:1
//org.apache.logging.log4j.core.appender.nosql.NoSqlProvider:1
//org.apache.logging.log4j.core.appender.routing.RoutingAppender.Builder:1
//org.apache.logging.log4j.core.async.AbstractAsyncExceptionHandler:1
//org.apache.logging.log4j.core.async.ArrayBlockingQueueFactory:1
//org.apache.logging.log4j.core.async.BlockingQueueFactory:1
//org.apache.logging.log4j.core.async.DisruptorBlockingQueueFactory:1
//org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory:1
//org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory.MpscBlockingQueue:1
//org.apache.logging.log4j.core.async.LinkedTransferQueueFactory:1
//org.apache.logging.log4j.core.config.CronScheduledFuture:1
//org.apache.logging.log4j.core.config.builder.api.ComponentBuilder:1
//org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder:1
//org.apache.logging.log4j.core.config.builder.api.FilterableComponentBuilder:1
//org.apache.logging.log4j.core.config.builder.api.LoggableComponentBuilder:1
//org.apache.logging.log4j.core.config.builder.impl.DefaultComponentAndConfigurationBuilder:1
//org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder:2
//org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:1
//org.apache.logging.log4j.core.config.plugins.convert.EnumConverter:1
//org.apache.logging.log4j.core.config.plugins.convert.TypeConverter:1
//org.apache.logging.log4j.core.config.plugins.util.PluginType:1
//org.apache.logging.log4j.core.config.plugins.validation.ConstraintValidator:1
//org.apache.logging.log4j.core.config.plugins.visitors.AbstractPluginVisitor:1
//org.apache.logging.log4j.core.config.plugins.visitors.PluginVisitor:1
//org.apache.logging.log4j.core.filter.AbstractFilter.AbstractFilterBuilder:1
//org.apache.logging.log4j.core.filter.AbstractFilterable.Builder:1
//org.apache.logging.log4j.core.layout.AbstractJacksonLayout.Builder:1
//org.apache.logging.log4j.core.layout.AbstractLayout:1
//org.apache.logging.log4j.core.layout.AbstractLayout.Builder:1
//org.apache.logging.log4j.core.layout.AbstractStringLayout.Builder:1
//org.apache.logging.log4j.core.layout.Encoder:1
//org.apache.logging.log4j.core.layout.GelfLayout.Builder:1
//org.apache.logging.log4j.core.layout.JsonLayout.Builder:1
//org.apache.logging.log4j.core.layout.SyslogLayout.Builder:1
//org.apache.logging.log4j.core.layout.XmlLayout.Builder:1
//org.apache.logging.log4j.core.layout.YamlLayout.Builder:1
//org.apache.logging.log4j.core.net.TcpSocketManager.TcpSocketManagerFactory:2
//org.apache.logging.log4j.core.net.ssl.StoreConfiguration:1
//org.apache.logging.log4j.core.tools.picocli.CommandLine.ITypeConverter:1
//org.apache.logging.log4j.core.util.Builder:1
//org.apache.logging.log4j.core.util.CyclicBuffer:1
//org.apache.logging.log4j.core.util.ObjectArrayIterator:1
//org.apache.logging.log4j.core.util.datetime.FormatCache:1

